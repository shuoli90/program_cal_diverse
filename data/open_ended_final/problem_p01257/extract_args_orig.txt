Sure, let's break down the task and solve it step by step.

### Extracting Arguments Function

First, we need to write a function to extract the arguments from the input file. The function will read multiple datasets until it encounters `0 0`. Here is the function:

```python
def extract_arguments(fh):
    inputs = []
    while True:
        line = fh.readline().strip()
        if line == "0 0":
            break
        N, M = map(int, line.split())
        coins = list(map(int, fh.readline().strip().split()))
        inputs.append((N, M, coins))
    return inputs
```

### Processing Function

Next, let's write the function that processes each dataset. This function will compute the minimum number of operations needed to make the change.

```python
def f(N, M, coins):
    # Sort the coins in descending order for greedy approach
    coins.sort(reverse=True)
    operations = 0
    for coin in coins:
        if M == 0:
            break
        # Use as many of this coin as possible
        operations += M // coin
        M %= coin
    return operations
```

### Main Function to Process the List of Tuples

Finally, we need a function that processes the list of tuples and prints the results:

```python
def process_inputs(inputs):
    results = []
    for N, M, coins in inputs:
        result = f(N, M, coins)
        results.append(result)
    return results

if __name__ == "__main__":
    import sys
    input_path = sys.argv[1]
    with open(input_path, 'r') as fh: 
        inputs = extract_arguments(fh)
    results = process_inputs(inputs)
    for result in results:
        print(result)
```

### Final Code

Putting everything together, here is the complete code:

```python
def extract_arguments(fh):
    inputs = []
    while True:
        line = fh.readline().strip()
        if line == "0 0":
            break
        N, M = map(int, line.split())
        coins = list(map(int, fh.readline().strip().split()))
        inputs.append((N, M, coins))
    return inputs

def f(N, M, coins):
    coins.sort(reverse=True)
    operations = 0
    for coin in coins:
        if M == 0:
            break
        operations += M // coin
        M %= coin
    return operations

def process_inputs(inputs):
    results = []
    for N, M, coins in inputs:
        result = f(N, M, coins)
        results.append(result)
    return results

if __name__ == "__main__":
    import sys
    input_path = sys.argv[1]
    with open(input_path, 'r') as fh: 
        inputs = extract_arguments(fh)
    results = process_inputs(inputs)
    for result in results:
        print(result)
```

This code will read the input file, extract the arguments, process each dataset, and print the minimum number of operations needed for each dataset.