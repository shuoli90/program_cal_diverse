Sure! Let's start by writing the function to extract the arguments from the input file. We'll parse the input based on the described format, and then we'll create a function to process these arguments and determine the nearest checkpoint for each student.

### Extract Arguments Function

```python
def extract_arguments(fh):
    N, M = map(int, fh.readline().strip().split())
    students = [tuple(map(int, fh.readline().strip().split())) for _ in range(N)]
    checkpoints = [tuple(map(int, fh.readline().strip().split())) for _ in range(M)]
    return N, M, students, checkpoints
```

### Processing Function

Now, let's write the function to process the extracted arguments. This function will calculate the Manhattan distance for each student to all checkpoints and determine the nearest one.

```python
def find_nearest_checkpoints(N, M, students, checkpoints):
    for (a_i, b_i) in students:
        min_distance = float('inf')
        nearest_checkpoint = -1
        for index, (c_j, d_j) in enumerate(checkpoints):
            distance = abs(a_i - c_j) + abs(b_i - d_j)
            if distance < min_distance:
                min_distance = distance
                nearest_checkpoint = index + 1
            elif distance == min_distance and index + 1 < nearest_checkpoint:
                nearest_checkpoint = index + 1
        print(nearest_checkpoint)

# Example usage
if __name__ == "__main__":
    import sys
    input_path = sys.argv[1]
    with open(input_path, 'r') as fh:
        N, M, students, checkpoints = extract_arguments(fh)
    find_nearest_checkpoints(N, M, students, checkpoints)
```

### Explanation

1. **Extract Arguments Function**: 
   - We read the first line to get `N` and `M`.
   - We read the next `N` lines to get the coordinates of the students.
   - We read the next `M` lines to get the coordinates of the checkpoints.

2. **Processing Function**:
   - For each student, we calculate the Manhattan distance to each checkpoint.
   - We keep track of the minimum distance and the index of the nearest checkpoint.
   - We print the index of the nearest checkpoint for each student.

### How to Run

Save the script to a file, for example, `solution.py`. Then you can run it from the command line, passing the path to the input file as an argument:

```sh
python solution.py input.txt
```

### Example Input File (`input.txt`)

```
2 2
2 0
0 0
-1 0
1 0
```

### Example Output

```
2
1
```

This handles the input parsing and processing for the provided problem statement.