To generate test cases for the "Longest Lane" problem, we need to create multiple polygons with vertices in given constraints and format the test cases accordingly. Here's a Python function to generate such test cases:

```python
import random
import math

def generate_polygon(N):
    """ Generate a simple polygon with N vertices. """
    angle_step = 2 * math.pi / N
    radius = random.uniform(50, 1000)  # Ensure the vertices are spread out
    vertices = []
    for i in range(N):
        angle = i * angle_step
        x = int(radius * math.cos(angle) + random.uniform(-100, 100))
        y = int(radius * math.sin(angle) + random.uniform(-100, 100))
        vertices.append((x, y))
    return vertices

def tcgen():
    test_cases = []
    
    num_cases = random.randint(1, 10)  # Generate between 1 to 10 test cases
    for _ in range(num_cases):
        N = random.randint(3, 100)
        polygon = generate_polygon(N)
        test_cases.append((N, polygon))
    
    return test_cases

def format_test_cases(test_cases):
    formatted_cases = []
    case_number = 1
    for N, polygon in test_cases:
        formatted_case = [f"Case {case_number}:"]
        formatted_case.append(str(N))
        for x, y in polygon:
            formatted_case.append(f"{x} {y}")
        formatted_cases.append("\n".join(formatted_case))
        case_number += 1
    formatted_cases.append("0")  # End of test cases marker
    return "\n".join(formatted_cases)

# Generate and format the test cases
test_cases = tcgen()
formatted_cases = format_test_cases(test_cases)
print(formatted_cases)
```

### Explanation:

1. **generate_polygon(N)**:
   - Generates a simple polygon with `N` vertices.
   - Uses trigonometric functions to determine the position of points roughly distributed around a circle for simplicity.
   - Adds some randomness to the coordinates to avoid perfect circular shapes.

2. **tcgen()**:
   - Generates multiple test cases with each having a random number of vertices `N` between 3 and 100.
   - Uses `generate_polygon(N)` to generate the list of vertices for each test case.

3. **format_test_cases(test_cases)**:
   - Formats the generated test cases as per the required input format.
   - Adds a "0" line at the end to indicate the end of test cases.

4. **Main Execution**:
   - Generates the test cases using `tcgen()`.
   - Formats them using `format_test_cases(test_cases)`.
   - Prints the formatted test cases.

This script will generate and print test cases for the "Longest Lane" problem, ensuring a variety of polygon shapes and sizes within the given constraints.