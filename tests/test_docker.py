import os
import sys
import logging
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from utils.clustering import clustering
import tempfile
import pytest
import shutil
import numpy as np
from collections import defaultdict
import requests
import warnings
import docker

# long_program = """
# import sys
# for line in sys.stdin:
#     n = int(line)
#     if n == 0:
#         break
#     incomes = list(map(int, sys.stdin.readline().split()))
#     avg = sum(incomes) / n
#     count = sum(1 for income in incomes if income <= avg)
#     print(count)
#     """

# long_program = """
# while True:
#     kai = 0
#     num = int(input())
    
#     #入力値が0だったら終わる
#     if num == 0:break
#     #標準入力をし、平均値を求める
#     line = list(map(int,input().split()))
#     heikin = sum(line) / num
    
#     #平均値以下の個数を調べ個数を出力
#     for i in range(num):
#         if line[i] <= heikin:kai += 1
#     print(kai)"""

long_program = """
import heapq
from collections import deque
from enum import Enum
import sys
import math
from _heapq import heappush, heappop
import copy
from test.support import _MemoryWatchdog
BIG_NUM = 2000000000
HUGE_NUM = 99999999999999999
MOD = 1000000007
EPS = 0.000000001
sys.setrecursionlimit(100000)
SIZE = 105
table = [0]*SIZE
N = int(input())
input_array = list(map(int,input().split()))
maximum = 0
for i in range(N):
    table[0] -= 1
    table[input_array[i]] += 1
    maximum = max(maximum,input_array[i])

for i in range(maximum-1,-1,-1):
    table[i] += table[i+1]

ans = 0
for i in range(1,maximum+1):
    if i <= table[i]:
        ans = i

print("%d"%(ans))
    """

if __name__ == "__main__":

    programs = ["print(input())", "print(int(input()) ** 2)"]
    testcases = {"0": "3", "1": "4"}
    expected_outputs = {"0": "9", "1": "16"}
    expected_semantic_strings = {
        programs[0]: "testcase_input: 3, output: 3\ntestcase_input: 4, output: 4\n",
        programs[1]: "testcase_input: 3, output: 9\ntestcase_input: 4, output: 16\n"
    }

    # Test
    # results = clustering.make_clusters_iterative(
    #     programs, testcases, expected_outputs, do_report_coherence=True, do_report_accuracy=True, n_test_cases=-1, verbose_docker=True, open_ended=False
    # )
    # program_2_semantic_string, semantic_strings_2_programs, program_2_coherence, program_2_n_outputs, program_2_n_coherent, program_2_accuracy = results
    
    inputs={"41": "7\n2 2 3 1 2 2 -1", "77": "7\n-1 0 19 1 0 4 -2", "18": "7\n10 2 5 37 2 4 4", "23": "7\n1 1 5 29 2 5 1", "25": "7\n1 2 5 29 2 1 1", "26": "7\n2 2 5 29 2 1 1", "68": "7\n-2 1 19 2 3 4 -1", "29": "7\n2 0 4 29 2 1 0", "20": "7\n0 1 5 37 2 4 4", "19": "7\n10 1 5 37 2 4 4", "32": "7\n2 1 4 2 2 0 0", "49": "7\n0 6 4 2 4 3 -1", "42": "7\n2 2 3 1 2 3 -1", "17": "7\n10 2 5 37 1 4 4", "55": "7\n0 4 14 2 1 1 0", "93": "7\n0 4 6 3 6 4 -2", "51": "7\n0 6 4 2 1 1 -1", "9": "7\n10 4 4 14 1 7 2", "66": "7\n-1 1 19 2 2 4 -1", "99": "7\n0 8 8 1 6 0 -1", "97": "7\n0 4 8 3 6 0 -1", "101": "7\n5 4 3 10 2 4 1", "38": "7\n2 2 2 2 2 2 0", "71": "7\n-2 0 19 1 3 4 -1", "27": "7\n2 0 5 29 2 1 1", "88": "7\n-1 4 15 3 2 3 -2", "39": "7\n2 2 2 1 2 2 0", "54": "7\n0 4 7 2 1 1 0", "84": "7\n-1 2 19 2 1 3 -2", "5": "7\n5 4 2 14 2 7 1", "92": "7\n-1 4 6 3 6 4 -2", "37": "7\n2 2 2 2 2 1 0", "46": "7\n2 6 4 1 4 3 -1", "56": "7\n0 7 14 2 1 1 0", "0": "7\n5 4 3 14 2 4 1", "59": "7\n0 7 17 2 2 2 0", "76": "7\n0 0 19 1 0 4 -2", "11": "7\n10 4 4 23 1 3 2", "3": "7\n0 1 5 37 2 4 1", "45": "7\n2 6 3 1 4 3 -1", "98": "7\n0 4 8 1 6 0 -1", "72": "7\n-3 0 19 1 3 4 -1", "1": "3\n1 0 100", "31": "7\n2 0 4 2 2 0 0", "60": "7\n0 12 17 2 2 2 0", "2": "3\n2 0 100", "61": "7\n0 12 19 2 2 2 0", "69": "7\n-2 1 19 3 3 4 -1", "78": "7\n-1 -1 19 1 0 4 -2", "8": "7\n10 4 4 14 1 7 1", "96": "7\n0 4 8 3 6 0 0", "75": "7\n-3 0 19 1 0 4 -2", "15": "7\n10 4 5 37 1 3 4", "12": "7\n10 4 4 29 1 3 2", "7": "7\n5 4 4 14 1 7 1", "79": "7\n-1 -1 19 2 0 4 -2", "36": "7\n2 1 2 2 2 1 0", "83": "7\n-1 1 19 2 1 3 -2", "16": "7\n10 4 5 37 1 4 4", "52": "7\n0 6 4 2 1 1 0", "53": "7\n0 6 7 2 1 1 0", "73": "7\n-3 0 19 1 1 4 -1", "44": "7\n2 6 3 1 2 3 -1", "48": "7\n0 6 4 1 4 3 -1", "74": "7\n-3 0 19 1 0 4 -1", "80": "7\n-1 0 19 2 0 4 -2", "4": "7\n5 4 3 14 2 7 1", "58": "7\n0 7 17 2 1 2 0", "34": "7\n2 1 2 2 4 0 0", "86": "7\n-1 2 15 2 2 3 -2", "57": "7\n0 7 14 2 1 2 0", "40": "7\n2 2 2 1 2 2 -1", "28": "7\n2 0 4 29 2 1 1", "6": "7\n5 4 4 14 2 7 1", "43": "7\n2 4 3 1 2 3 -1", "63": "7\n0 1 19 2 2 2 0", "50": "7\n0 6 4 2 4 1 -1", "95": "7\n0 4 6 3 6 0 0", "24": "7\n1 1 5 29 2 1 1", "67": "7\n-1 1 19 2 3 4 -1", "82": "7\n-1 0 19 2 1 3 -2", "85": "7\n-1 2 15 2 1 3 -2", "10": "7\n10 4 4 14 1 3 2", "102": "4\n11 15 58 1", "21": "7\n0 1 5 29 2 4 1", "30": "7\n2 0 4 29 2 0 0", "70": "7\n-2 0 19 3 3 4 -1", "14": "7\n10 4 4 37 1 3 4", "103": "3\n1 1 100", "33": "7\n2 1 4 2 4 0 0", "13": "7\n10 4 4 37 1 3 2", "81": "7\n-1 0 19 2 0 3 -2", "91": "7\n-1 4 15 3 6 4 -2", "87": "7\n-1 2 15 3 2 3 -2", "35": "7\n2 1 2 2 2 0 0", "22": "7\n0 1 5 29 2 5 1", "100": "7\n5 4 3 10 2 4 1", "65": "7\n0 1 19 2 2 4 -1", "64": "7\n0 1 19 2 2 2 -1", "94": "7\n0 4 6 3 6 0 -2", "47": "7\n1 6 4 1 4 3 -1", "62": "7\n0 19 19 2 2 2 0", "90": "7\n-1 4 15 3 3 4 -2", "89": "7\n-1 4 15 3 2 4 -2"}
    
    correct_outputs = {"41": "2", "77": "2", "18": "4", "23": "3", "25": "2", "26": "2", "68": "3", "29": "2", "20": "4", "19": "4", "32": "2", "49": "3", "42": "2", "17": "4", "55": "2", "93": "4", "51": "2", "9": "4", "66": "2", "99": "3", "97": "3", "101": "4", "38": "2", "71": "3", "27": "2", "88": "3", "39": "2", "54": "2", "84": "2", "5": "4", "92": "4", "37": "2", "46": "3", "56": "2", "0": "4", "59": "2", "76": "2", "11": "4", "3": "3", "45": "3", "98": "3", "72": "3", "1": "1", "31": "2", "60": "2", "2": "2", "61": "2", "69": "3", "78": "2", "8": "4", "96": "3", "75": "2", "15": "4", "12": "4", "7": "4", "79": "2", "36": "2", "83": "2", "16": "4", "52": "2", "53": "2", "73": "2", "44": "3", "48": "3", "74": "2", "80": "2", "4": "4", "58": "2", "34": "2", "86": "2", "57": "2", "40": "2", "28": "2", "6": "4", "43": "3", "63": "2", "50": "3", "95": "3", "24": "2", "67": "3", "82": "2", "85": "2", "10": "4", "102": "3", "21": "3", "30": "2", "70": "3", "14": "4", "103": "1", "33": "2", "13": "4", "81": "2", "91": "4", "87": "3", "35": "2", "22": "3", "100": "4", "65": "2", "64": "2", "94": "3", "47": "3", "62": "2", "90": "3", "89": "3"}
    
    
    # correct_outputs = {"68": "1\n3", "58": "6\n2\n9\n1\n4", "97": "4\n3\n9\n2\n4", "26": "5\n2\n9\n2\n3", "93": "6\n3\n9\n1\n3", "37": "4", "18": "1\n2\n9\n2\n3", "6": "7\n3\n9\n1\n4", "17": "1\n3\n9\n2\n4", "99": "6\n3\n9\n2\n4", "56": "3\n3\n3\n2\n4", "82": "4\n3\n9\n2\n4", "12": "6\n3\n9\n2\n4", "80": "4\n3\n9\n2\n4", "98": "4\n3\n3\n2\n4", "96": "2\n3\n9\n2\n4", "49": "3\n1\n4\n7\n4\n0", "59": "2\n3\n9\n2\n6", "41": "3\n2\n4\n7\n3\n0", "75": "6\n3\n9\n1\n4", "46": "5", "65": "3\n3\n9", "7": "1\n3\n9\n1\n3", "22": "3\n2\n9\n2\n4", "94": "6\n3\n9\n1\n4", "4": "2\n3\n9\n2\n4", "31": "3\n2\n9\n2\n3", "71": "6\n3\n9\n1\n4", "48": "4\n1\n5\n7\n4\n0", "36": "4\n2\n5\n7\n3\n0", "66": "3\n3\n2\n2\n4", "60": "1\n1\n9\n2\n3", "40": "3\n2\n4\n7\n3\n0", "81": "2\n3\n9\n2\n4", "25": "1\n3\n9\n4\n4", "3": "5\n3\n9\n2\n4", "84": "6\n3\n9\n1\n4", "9": "6\n3\n9\n1\n3", "51": "4\n2\n4\n7\n4\n0", "101": "7\n3\n9\n1\n4", "83": "4\n3\n9\n2\n4", "35": "4\n3\n10\n2\n3", "23": "5\n2\n9\n1\n4", "70": "6\n3\n9\n1\n4", "74": "4\n3\n9\n2\n4", "2": "5\n3\n9\n1\n4", "57": "2\n3\n9\n3\n4", "38": "4\n3\n10\n2\n3", "28": "4\n2\n9\n2\n4", "85": "6\n3\n9\n1\n4", "30": "4\n3\n1\n2\n4", "19": "1\n2\n9\n2\n4", "16": "5\n3\n9\n1\n3", "14": "2\n3\n9\n1\n4", "27": "2\n3\n1\n2\n4", "87": "1\n3\n9\n1\n3", "73": "4\n3\n9\n2\n4", "54": "4\n3\n9\n1\n4", "64": "2", "72": "4\n3\n9\n2\n4", "86": "6\n3\n9\n1\n4", "34": "3\n2\n9\n3\n4", "90": "2\n3\n9\n2\n4", "29": "5\n2\n10\n2\n3", "50": "4\n2\n3\n7\n4\n0", "95": "4\n3\n9\n2\n4", "47": "4\n1\n5\n7\n4\n0", "89": "4\n3\n9\n2\n4", "55": "3\n3\n9\n3\n4", "15": "3", "62": "4\n3\n3\n3\n2", "61": "2\n2\n9\n2\n4", "20": "2\n3\n10\n2\n4", "92": "6\n3\n9\n2\n4", "43": "6\n3", "100": "7\n3\n9\n1\n4", "10": "3\n3\n9\n2\n4", "76": "6\n3\n9\n1\n4", "8": "4\n3\n3\n2\n4", "78": "6\n3\n9\n1\n4", "44": "6", "39": "5\n3\n10\n2\n3", "88": "1\n3\n9\n1\n4", "11": "4\n3\n3\n2\n4", "79": "5\n3\n9\n1\n4", "53": "2\n3\n9\n1\n3", "45": "4\n0\n4\n7\n4\n0", "42": "6\n3\n10\n3\n3", "69": "6\n3\n9\n1\n4", "33": "3\n2\n9\n3\n3", "24": "4\n3\n10\n2\n4", "32": "4\n2\n10\n2\n3", "63": "1\n3\n2\n2\n4", "67": "2\n2\n9\n2\n3", "52": "7\n3\n9\n2\n4", "21": "4\n3\n9\n2\n2", "1": "1\n3\n9\n1\n4", "77": "6\n3\n9\n1\n4", "5": "4\n3\n9\n2\n4", "91": "4\n3\n9\n2\n4", "0": "6\n3\n9\n1\n4", "13": "1\n2\n9\n1\n3"}
    # inputs = {"12": "7\n15 15 12 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 2 100\n7\n90 90 90 4 90 90 10\n7\n2 7 1 8 2 8 4\n0", "52": "7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 14 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "28": "7\n41 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 90 88 10\n7\n0 7 0 5 2 11 4\n0", "84": "7\n15 15 12 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 2 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "26": "7\n27 15 2 15 15 23 15\n4\n10 20 30 5\n10\n1 1 1 2 1 1 1 0 1 110\n7\n90 122 90 90 90 9 10\n7\n2 8 2 8 2 11 8\n0", "50": "7\n1 9 8 20 27 28 12\n6\n27 53 22 99\n20\n0 2 1 1 0 1 0 1 1 001\n1\n000 104 90 121 100 9 0\n6\n0 9 -1 0 11 1 6\n-4", "11": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 000\n10\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "44": "7\n93 15 0 8 4 5 15\n0\n0 4 40 0\n0\n1 2 2 0 -1 1 0 1 0 110\n14\n71 122 155 90 20 5 18\n8\n-1 14 0 55 2 11 8\n0", "30": "7\n23 14 1 15 15 25 16\n4\n14 20 30 60\n10\n1 1 1 1 1 0 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0", "23": "7\n15 20 15 15 15 23 15\n5\n10 20 30 79\n10\n0 2 1 0 1 1 1 1 1 101\n7\n90 90 90 90 90 90 9\n7\n2 7 1 8 3 11 4\n0", "62": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 000\n10\n14 90 90 90 30 90 10\n17\n2 7 0 8 4 11 4\n0", "13": "7\n15 15 1 15 15 23 15\n4\n10 20 30 5\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 122 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0", "74": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "65": "7\n41 24 1 5 15 23 27\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n0\n31 90 90 67 90 90 10\n7\n0 7 0 5 2 11 4\n0", "63": "7\n2 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 000\n7\n90 90 90 137 90 28 10\n7\n2 7 1 9 2 11 4\n0", "93": "7\n15 15 15 15 15 23 15\n4\n10 20 30 79\n10\n1 2 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 7\n0", "40": "7\n15 20 22 15 15 19 24\n5\n10 20 30 79\n10\n0 0 2 0 1 1 0 1 1 001\n1\n90 115 90 121 111 32 9\n7\n2 7 0 2 11 9 6\n-2", "61": "7\n23 15 1 18 5 23 15\n4\n10 20 32 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n41 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "79": "7\n23 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "36": "7\n15 20 15 15 15 23 24\n5\n10 20 30 79\n10\n0 0 2 0 0 1 0 1 1 001\n1\n90 115 90 90 90 32 9\n7\n2 7 1 8 6 12 4\n-1", "41": "7\n15 20 22 15 15 19 24\n5\n20 20 30 79\n10\n0 0 2 0 1 1 0 1 1 001\n1\n90 115 90 121 111 32 9\n7\n2 7 0 2 11 9 6\n-2", "92": "7\n15 15 15 15 15 23 15\n4\n10 21 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n82 90 90 90 90 65 10\n7\n2 7 1 8 2 8 4\n0", "90": "7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "8": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 000\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "71": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "46": "7\n37 4 0 10 1 49 6\n0\n0 1 110 33\n7\n1 1 -1 1 1 2 2 1 0 100\n7\n56 380 186 111 48 44 0\n1\n4 8 0 8 2 2 7\n0", "7": "7\n15 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0", "25": "7\n2 15 15 15 15 23 15\n4\n10 27 30 60\n10\n0 1 0 1 0 1 1 1 1 100\n7\n100 90 90 137 179 28 10\n7\n2 7 1 9 2 11 4\n0", "69": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "60": "7\n15 15 1 15 15 23 15\n8\n10 20 30 5\n10\n1 1 1 1 1 1 1 0 1 100\n7\n90 122 90 90 90 34 10\n7\n2 7 2 8 2 11 8\n0", "77": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 2 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "56": "7\n23 24 1 5 15 23 20\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 000\n10\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "4": "7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "98": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 000\n10\n31 90 90 90 90 90 10\n7\n2 7 0 8 4 11 4\n0", "31": "7\n17 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 90 88 10\n7\n0 7 0 5 2 11 8\n0", "35": "7\n27 15 2 18 15 23 15\n4\n10 3 30 5\n1\n1 1 1 2 1 1 1 0 1 110\n7\n90 122 90 90 90 5 18\n7\n2 8 2 8 2 11 8\n0", "96": "7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 90 90 10\n7\n2 7 1 8 2 6 4\n0", "47": "7\n1 9 17 15 27 28 12\n9\n22 53 13 79\n20\n0 0 1 0 0 1 0 1 2 001\n1\n101 64 90 121 110 10 0\n6\n0 9 -1 0 11 3 6\n-2", "17": "7\n2 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n90 90 90 137 90 52 10\n7\n2 7 1 9 2 11 4\n0", "32": "7\n27 15 2 18 15 23 15\n4\n10 20 30 5\n1\n1 1 1 2 1 1 1 0 1 110\n7\n90 122 90 90 90 5 10\n7\n2 8 2 8 2 11 8\n0", "6": "7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n4 7 1 8 2 8 4\n0", "83": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 0 100\n7\n31 90 90 124 90 90 10\n7\n2 7 0 8 2 11 4\n0", "15": "7\n23 24 1 5 15 23 30\n0\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 14\n7\n2 7 0 8 2 11 4\n0", "58": "7\n15 15 15 15 15 23 15\n4\n10 20 30 22\n10\n1 1 1 1 0 0 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 9 2 11 4\n0", "67": "7\n15 15 1 11 15 23 15\n4\n10 20 30 5\n10\n1 1 1 1 1 1 1 0 1 110\n7\n90 122 90 90 90 9 10\n7\n2 8 2 8 2 11 8\n0", "51": "7\n1 0 8 20 27 28 12\n6\n27 53 12 99\n28\n0 0 1 1 0 1 0 1 1 001\n2\n000 104 90 121 100 9 0\n12\n-1 9 -1 0 12 1 6\n-4", "48": "7\n1 9 17 15 27 28 12\n9\n22 53 13 66\n20\n0 0 1 0 0 1 0 1 2 001\n1\n101 64 90 121 110 12 0\n6\n0 9 -1 0 11 5 6\n-4", "81": "7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 172 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "70": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "19": "7\n15 15 6 15 15 23 15\n4\n10 20 30 22\n10\n0 1 1 1 1 1 1 1 2 100\n7\n88 90 90 4 133 90 10\n7\n2 7 1 8 2 8 4\n0", "14": "7\n23 14 1 15 15 18 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "1": "7\n15 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "86": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 9 2 11 4\n0", "95": "7\n23 15 1 15 21 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n41 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "59": "7\n23 15 1 5 15 23 15\n4\n10 20 30 71\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 90 90 10\n4\n2 7 1 8 2 6 4\n0", "99": "7\n15 15 12 15 15 23 15\n4\n10 20 30 60\n10\n0 1 1 1 1 1 1 1 2 100\n7\n90 90 90 4 90 90 10\n7\n2 7 1 8 2 8 4\n0", "42": "7\n87 15 0 4 10 19 15\n4\n2 3 39 6\n1\n1 1 2 0 0 1 0 0 0 110\n7\n71 122 155 90 27 5 18\n7\n0 8 1 21 2 11 8\n0", "39": "7\n51 15 2 4 32 19 15\n4\n2 3 39 6\n1\n1 1 2 0 2 1 1 0 1 110\n7\n90 122 90 90 90 5 18\n7\n0 8 2 8 2 11 8\n0", "68": "7\n2 15 15 15 15 23 15\n4\n10 27 30 60\n0\n0 1 0 1 0 1 1 1 1 100\n7\n100 90 90 137 90 28 10\n7\n2 7 1 9 2 11 4\n0", "64": "7\n23 14 1 15 15 18 15\n0\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0", "66": "7\n41 24 1 5 15 23 27\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 000\n7\n31 90 90 67 90 90 10\n7\n0 7 0 5 2 11 4\n0", "9": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 2 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 7\n0", "88": "7\n23 15 1 15 15 18 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "0": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "45": "7\n1 9 17 15 27 28 12\n9\n22 53 30 79\n20\n0 0 1 0 1 1 0 1 2 001\n1\n101 64 90 121 110 10 0\n6\n0 9 -1 0 11 3 6\n-2", "43": "7\n72 15 0 8 10 11 15\n4\n0 4 39 0\n0\n1 1 2 0 0 1 0 1 0 110\n7\n71 122 155 90 46 5 18\n7\n-1 14 1 55 2 11 8\n0", "76": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n82 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "72": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "85": "7\n15 15 15 15 15 23 15\n4\n10 21 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n82 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "91": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n7\n31 90 90 124 90 90 10\n7\n2 7 0 8 2 11 4\n0", "5": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "22": "7\n41 24 1 5 15 23 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 90 90 10\n7\n0 7 0 5 2 11 4\n0", "94": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 9 2 11 4\n0", "75": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 2 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "87": "7\n15 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 122 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0", "101": "7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "54": "7\n23 15 1 15 15 18 19\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "37": "7\n24 4 1 5 1 23 30\n0\n2 20 30 60\n12\n1 1 1 1 1 2 0 1 1 000\n7\n31 157 185 90 131 173 10\n7\n4 7 1 8 1 0 4\n0", "78": "7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 8 2 11 4\n0", "29": "7\n27 15 2 15 15 23 15\n4\n10 20 30 5\n1\n1 1 1 2 1 1 1 0 1 110\n7\n90 122 90 90 90 9 10\n7\n2 8 2 8 2 11 8\n0", "82": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 14\n7\n2 7 0 8 2 11 4\n0", "16": "7\n15 20 15 15 15 23 15\n4\n10 20 30 79\n10\n1 2 1 0 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 7\n0", "97": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n7\n31 90 90 67 90 90 10\n7\n2 7 0 8 2 11 4\n0", "33": "7\n17 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 98 88 10\n7\n0 7 0 5 2 11 8\n0", "55": "7\n23 24 1 5 15 23 30\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 29 90 90 14\n7\n2 7 0 8 2 11 4\n0", "10": "7\n23 24 1 5 15 23 30\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 14\n7\n2 7 0 8 2 11 4\n0", "21": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 -1 1 1 1 0 010\n10\n14 90 90 90 90 90 10\n17\n2 7 0 8 4 11 4\n0", "73": "7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 0 100\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0", "53": "7\n15 0 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 122 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0", "80": "7\n23 15 1 15 21 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "24": "7\n23 14 1 15 15 18 20\n4\n14 20 30 60\n10\n1 1 1 1 1 1 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0", "57": "7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 35 90 10\n7\n2 7 1 8 2 6 4\n0", "100": "7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "18": "7\n15 15 1 15 15 23 15\n4\n10 20 30 5\n10\n1 1 1 1 1 1 1 0 1 100\n7\n90 122 90 90 90 34 10\n7\n2 7 2 8 2 11 8\n0", "49": "7\n1 9 17 20 27 28 12\n9\n27 53 22 99\n20\n0 1 1 0 0 1 0 1 2 001\n1\n100 104 90 121 110 12 0\n6\n0 9 -1 0 11 1 6\n-4", "89": "7\n23 15 1 15 21 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n41 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "20": "7\n23 14 1 15 15 18 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0", "3": "7\n23 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0", "38": "7\n51 15 2 4 26 19 15\n4\n2 3 39 6\n1\n1 1 2 0 1 1 1 0 1 110\n7\n90 122 90 90 90 5 18\n7\n1 8 2 8 2 11 8\n0", "27": "7\n23 14 1 15 15 18 16\n4\n14 20 30 60\n10\n1 1 1 1 1 0 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0", "34": "7\n17 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 98 88 10\n7\n0 11 0 5 2 11 8\n0", "2": "7\n23 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0"}
    
    # def instrument_code_docker(generated_code: str, testcase_inputs: Dict[str, str], orig_testcase_outputs: Union[Dict[str, str], None],
    #                        image, client, docker_working_dir = None, n_test_cases=-1, indiv_tc_timeout=5, verbose_instrument=False, verbose_docker=True, 
    #                        open_ended=False, problem_id=None, generation_id=None): 
    client, image = clustering.build_docker_image(clustering.clustering_abs_dir, max_pool_size=20, timeout=60)
    results = clustering.instrument_code_docker(long_program, inputs, None, image, client, n_test_cases=-1, indiv_tc_timeout=120, verbose_instrument=True, verbose_docker=True, open_ended=False)
    outputs = results["testcase_outputs"]
    n_wrong = 0
    for k, v in outputs.items():
        if v.strip() != correct_outputs[k].strip():
            if n_wrong > 5 and v.strip() == "Error": 
                continue
            print(f"Testcase {k} failed. Print, input: {inputs[k]}\nExpected {correct_outputs[k]}\n got {v}")
            n_wrong += 1
        