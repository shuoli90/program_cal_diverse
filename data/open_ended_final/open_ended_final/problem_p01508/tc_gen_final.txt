
import random
import math

def generate_polygon(N):
    """ Generate a simple polygon with N vertices. """
    angle_step = 2 * math.pi / N
    radius = random.uniform(50, 1000)  # Ensure the vertices are spread out
    vertices = []
    for i in range(N):
        angle = i * angle_step
        x = int(radius * math.cos(angle) + random.uniform(-100, 100))
        y = int(radius * math.sin(angle) + random.uniform(-100, 100))
        vertices.append((x, y))
    return vertices

def make_test_cases():
    test_cases = []
    
    num_cases = random.randint(1, 10)  # Generate between 1 to 10 test cases
    for _ in range(num_cases):
        N = random.randint(3, 100)
        polygon = generate_polygon(N)
        test_cases.append((N, polygon))
    
    return test_cases

def format_test_cases(test_cases):
    formatted_cases = []
    case_number = 1
    for N, polygon in test_cases:
        formatted_case = [f"Case {case_number}:"]
        formatted_case.append(str(N))
        for x, y in polygon:
            formatted_case.append(f"{x} {y}")
        formatted_cases.append("\n".join(formatted_case))
        case_number += 1
    formatted_cases.append("0")  # End of test cases marker
    return "\n".join(formatted_cases)

def tcgen():
    testcases = make_test_cases()
    return format_test_cases(testcases)


# Generate and format the test cases
#test_cases = tcgen()
#print(test_cases)


### Explanation:

#1. **generate_polygon(N)**:
#   - Generates a simple polygon with `N` vertices.
#   - Uses trigonometric functions to determine the position of points roughly distributed around a circle for simplicity.
#   - Adds some randomness to the coordinates to avoid perfect circular shapes.

#2. **make_test_cases()**:
#   - Generates a random number of test cases (between 1 and 10).
#   - For each test case, generates a random number of vertices `N` (between 3 and 100).
#   - Calls `generate_polygon(N)` to create the polygon for each test case.

#3. **format_test_cases(test_cases)**:
#   - Formats the test cases into a string with the following structure:
#     ```
#     Case 1:
#     N
#     x1 y1
#     x2 y2
#     ...
#     Case 2:
#     N
#     x1 y1
#     x2 y2
#     ...
#     ...
#     0
#     ```
