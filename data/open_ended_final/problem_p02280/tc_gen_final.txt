import random

def generate_binary_tree(n):
    """ Generates a random binary tree with n nodes. """
    nodes = list(range(n))
    random.shuffle(nodes)
    
    tree = {i: (-1, -1) for i in nodes}
    
    for i in range(n):
        if 2 * i + 1 < n:
            tree[nodes[i]] = (nodes[2 * i + 1], tree[nodes[i]][1])
        if 2 * i + 2 < n:
            tree[nodes[i]] = (tree[nodes[i]][0], nodes[2 * i + 2])

    return tree

def tcgen():
    n = random.randint(1, 25)
    tree = generate_binary_tree(n)
    
    result = []
    result.append(str(n))

    for node in sorted(tree.keys()):
        left, right = tree[node]
        result.append(f"{node} {left} {right}")
    
    output_str = f"{n}\n" + "\n".join(result)
    return output_str


### Explanation:
#1. `generate_binary_tree(n)`: This function builds a valid binary tree with \( n \) nodes. It shuffles the node IDs to ensure randomness and then assigns left and right children based on the complete binary tree structure.
#2. `tcgen()`: This function calls `generate_binary_tree(n)` and formats the output as specified in the problem statement.

