Certainly! To create a test case generator for the "Vending Machine" problem, we need to generate multiple datasets that fit the input constraints specified in the problem statement. Here's a Python function that generates such test cases:

```python
import random

def generate_vending_machine_test_case():
    test_cases = []
    
    while True:
        # Randomly generate N (number of kinds of coins) and M (amount of change)
        N = random.randint(1, 10)
        M = random.randint(1, 100000)
        
        # Randomly generate N coin denominations
        coins = sorted(random.sample(range(1, 100000), N))
        
        test_cases.append((N, M, coins))
        
        # Randomly decide whether to stop generating more test cases
        if random.random() < 0.2:
            break
    
    # Append the terminating condition dataset (N = M = 0)
    test_cases.append((0, 0, []))
    
    return test_cases

# Function to print the test cases in the required format
def print_test_cases(test_cases):
    for N, M, coins in test_cases:
        print(N, M)
        if N > 0:
            print(' '.join(map(str, coins)))

# Generate and print the test cases
test_cases = generate_vending_machine_test_case()
print_test_cases(test_cases)
```

### Explanation:
1. **Coin Generation**: We generate a random number of coin types `N` (between 1 and 10) and a random amount of change `M` (between 1 and 100000).
2. **Coin Denominations**: For the coin denominations, we randomly sample `N` unique values from the range 1 to 100000 and sort them to ensure a logical progression.
3. **Termination**: We append the termination dataset `(0, 0, [])` to signify the end of input as required by the problem statement.
4. **Loop Control**: We loop and generate multiple test cases, with a 20% chance of stopping the generation to ensure we have multiple datasets.
5. **Output Formatting**: The `print_test_cases` function prints the generated test cases in the format required by the problem statement.

You can run the generator multiple times to obtain diverse sets of test cases for comprehensive testing.