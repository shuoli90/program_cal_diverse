{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Fennec is fighting with <var>N<\/var> monsters.<\/p>\n<p>The <em>health<\/em> of the <var>i<\/var>-th monster is <var>H_i<\/var>.<\/p>\n<p>Fennec can do the following two actions:<\/p>\n<ul>\n<li>Attack: Fennec chooses one monster. That monster's health will decrease by <var>1<\/var>.<\/li>\n<li>Special Move: Fennec chooses one monster. That monster's health will become <var>0<\/var>.<\/li>\n<\/ul>\n<p>There is no way other than Attack and Special Move to decrease the monsters' health.<\/p>\n<p>Fennec wins when all the monsters' healths become <var>0<\/var> or below.<\/p>\n<p>Find the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most <var>K<\/var> times.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>0 \\leq K \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>1 \\leq H_i \\leq 10^9<\/var><\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>K<\/var>\n<var>H_1<\/var> <var>...<\/var> <var>H_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3 1\n4 1 5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>5\n<\/pre>\n<p>By using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>8 9\n7 9 3 2 3 8 4 6\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>0\n<\/pre>\n<p>She can use Special Move on all the monsters.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>3 0\n1000000000 1000000000 1000000000\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>3000000000\n<\/pre>\n<p>Watch out for overflow.<\/p><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 300 points\n\n\nProblem StatementFennec is fighting with N monsters.\nThe health of the i-th monster is H_i.\nFennec can do the following two actions:\n\nAttack: Fennec chooses one monster. That monster's health will decrease by 1.\nSpecial Move: Fennec chooses one monster. That monster's health will become 0.\n\nThere is no way other than Attack and Special Move to decrease the monsters' health.\nFennec wins when all the monsters' healths become 0 or below.\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.\n\n\n\n\nConstraints\n1 \\leq N \\leq 2 \\times 10^5\n0 \\leq K \\leq 2 \\times 10^5\n1 \\leq H_i \\leq 10^9\nAll values in input are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN K\nH_1 ... H_N\n\n\n\n\n\nOutputPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n\n\n\n\n\n\nSample Input 13 1\n4 1 5\n\n\n\n\n\nSample Output 15\n\nBy using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.\n\n\n\n\n\nSample Input 28 9\n7 9 3 2 3 8 4 6\n\n\n\n\n\nSample Output 20\n\nShe can use Special Move on all the monsters.\n\n\n\n\n\nSample Input 33 0\n1000000000 1000000000 1000000000\n\n\n\n\n\nSample Output 33000000000\n\nWatch out for overflow.\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Fennec is fighting with <var>N<\/var> monsters.<\/p>\n<p>The <em>health<\/em> of the <var>i<\/var>-th monster is <var>H_i<\/var>.<\/p>\n<p>Fennec can do the following two actions:<\/p>\n<ul>\n<li>Attack: Fennec chooses one monster. That monster's health will decrease by <var>1<\/var>.<\/li>\n<li>Special Move: Fennec chooses one monster. That monster's health will become <var>0<\/var>.<\/li>\n<\/ul>\n<p>There is no way other than Attack and Special Move to decrease the monsters' health.<\/p>\n<p>Fennec wins when all the monsters' healths become <var>0<\/var> or below.<\/p>\n<p>Find the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most <var>K<\/var> times.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>0 \\leq K \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>1 \\leq H_i \\leq 10^9<\/var><\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>K<\/var>\n<var>H_1<\/var> <var>...<\/var> <var>H_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3 1\n4 1 5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>5\n<\/pre>\n<p>By using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>8 9\n7 9 3 2 3 8 4 6\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>0\n<\/pre>\n<p>She can use Special Move on all the monsters.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>3 0\n1000000000 1000000000 1000000000\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>3000000000\n<\/pre>\n<p>Watch out for overflow.<\/p><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 300 points\n\n\nProblem StatementFennec is fighting with N monsters.\nThe health of the i-th monster is H_i.\nFennec can do the following two actions:\n\nAttack: Fennec chooses one monster. That monster's health will decrease by 1.\nSpecial Move: Fennec chooses one monster. That monster's health will become 0.\n\nThere is no way other than Attack and Special Move to decrease the monsters' health.\nFennec wins when all the monsters' healths become 0 or below.\nFind the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning when she can use Special Move at most K times.\n\n\n\n\nConstraints\n1 \\leq N \\leq 2 \\times 10^5\n0 \\leq K \\leq 2 \\times 10^5\n1 \\leq H_i \\leq 10^9\nAll values in input are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN K\nH_1 ... H_N\n\n\n\n\n\nOutputPrint the minimum number of times Fennec needs to do Attack (not counting Special Move) before winning.\n\n\n\n\n\n\nSample Input 13 1\n4 1 5\n\n\n\n\n\nSample Output 15\n\nBy using Special Move on the third monster, and doing Attack four times on the first monster and once on the second monster, Fennec can win with five Attacks.\n\n\n\n\n\nSample Input 28 9\n7 9 3 2 3 8 4 6\n\n\n\n\n\nSample Output 20\n\nShe can use Special Move on all the monsters.\n\n\n\n\n\nSample Input 33 0\n1000000000 1000000000 1000000000\n\n\n\n\n\nSample Output 33000000000\n\nWatch out for overflow.\n\n","solve_rate":0.641799515,"codenet_problem_id":"p02785","input_testcases":{"37":"8 2\n7 6 2 1 0 23 10 5","71":"8 2\n7 6 2 1 0 23 1 5","4":"3 0\n1100000000 1000000000 1110000000","10":"3 0\n1000000100 1000000000 1000000000","93":"8 2\n4 6 2 1 0 23 1 5","53":"8 0\n4 12 5 2 3 6 5 6","92":"8 2\n7 6 2 2 0 23 2 5","55":"3 0\n1000000100 1000010000 1000000000","2":"3 1\n0 1 5","73":"8 0\n6 9 5 0 3 4 8 6","83":"3 1\n0000000010 1100000000 0110000000","99":"3 0\n1110000000 1000000000 0110000100","89":"8 2\n4 2 3 1 0 23 10 6","41":"8 2\n7 2 2 1 0 23 0 6","31":"8 2\n7 6 3 2 0 14 7 6","100":"3 0\n1000000000 1000000000 1000000000","67":"8 0\n4 22 5 1 3 6 7 6","101":"3 1\n4 1 5","88":"8 0\n4 22 10 1 3 6 7 6","94":"8 0\n2 9 5 0 3 4 8 6","1":"8 8\n7 9 3 2 3 8 4 6","24":"3 0\n1100000011 1010000000 1110000000","3":"3 0\n1000000000 1000000000 1110000000","9":"8 1\n4 9 5 2 3 6 5 6","21":"8 0\n4 16 5 1 3 6 5 6","49":"8 5\n7 9 5 2 3 8 4 6","59":"8 0\n2 16 5 2 3 6 5 6","86":"3 0\n1000000011 1010100001 1110000000","58":"3 0\n1100000001 1000000001 0010001000","11":"3 0\n1000000000 1000000000 1010010000","76":"3 0\n1100000000 1001000001 1010000000","27":"8 1\n4 9 9 2 6 4 5 6","12":"3 0\n0 1 5","90":"8 2\n6 6 3 0 0 23 10 5","77":"3 0\n1100000000 1000000001 1110010000","0":"3 0\n1000000000 1000000000 1010000000","98":"3 1\n1000001100 1000010000 1000000000","63":"8 0\n4 16 5 1 3 6 6 8","32":"3 0\n0000000001 0100000000 0110000000","34":"8 2\n7 6 3 1 0 23 7 6","7":"3 0\n1100000001 1000000001 1110001000","18":"3 0\n1100000011 1000000000 1110000000","75":"3 1\n1100000000 1000000000 1110000010","17":"8 1\n4 9 9 2 3 6 5 6","15":"3 0\n1100000001 1000000001 0110001000","42":"8 2\n7 2 2 2 0 23 0 6","13":"3 0\n1000000000 1000000000 0110000000","97":"3 0\n0100000000 1001000001 1010000000","95":"3 0\n1000000000 1101000100 1110000000","48":"3 0\n1000000000 1000000100 1110000000","65":"3 0\n1000000011 1010100000 1110000000","22":"8 1\n4 9 9 2 3 4 5 6","8":"8 0\n4 9 5 2 3 6 5 6","19":"3 0\n1000000000 1100000000 0110000000","78":"3 1\n1000000100 1000010000 1000000000","44":"8 2\n7 2 2 2 0 1 0 6","6":"3 0\n1100000000 1000000001 1110001000","64":"8 1\n4 9 9 2 6 4 5 12","102":"3 1\n4 1 5","51":"3 0\n1100000000 1000000001 1010000000","28":"3 0\n1100000011 1010100000 1110000000","16":"8 0\n4 16 5 2 3 6 5 6","40":"8 2\n7 2 2 1 0 23 0 5","43":"8 0\n6 9 8 0 3 4 8 6","52":"3 0\n1100000000 1000000001 1110011000","45":"8 2\n0 2 2 2 0 1 0 1","47":"3 1\n4 1 6","46":"3 0\n1000000000 1000000000 1000001000","91":"8 1\n4 9 6 0 3 4 13 6","54":"8 1\n4 9 5 2 0 6 5 6","50":"3 0\n1100000000 1000000000 1110000010","82":"8 1\n4 9 9 2 3 4 1 7","36":"8 2\n7 6 3 1 0 23 10 5","61":"3 0\n1000000000 1100100000 0110000000","81":"3 0\n0000000000 1000000100 1110000000","103":"8 9\n7 9 3 2 3 8 4 6","14":"3 0\n0100000000 1000000001 1110000000","39":"8 2\n7 6 2 1 0 23 0 5","26":"3 0\n0000000000 1000000001 0110000000","84":"8 0\n4 16 5 0 3 6 6 8","33":"8 1\n4 9 9 0 6 4 16 6","85":"8 2\n7 7 3 2 3 14 7 9","29":"3 0\n0000000000 0100000000 0110000000","80":"3 0\n1000000010 1100100000 0110000000","38":"8 2\n4 9 8 0 3 4 11 6","66":"3 0\n0000000100 0100000000 0110000000","72":"8 2\n6 9 8 0 2 4 8 6","69":"8 2\n2 6 3 1 0 23 7 6","30":"8 0\n4 22 5 1 3 6 6 6","70":"8 2\n7 2 3 1 0 23 10 6","60":"3 0\n1100010011 1000000000 1110000000","68":"3 0\n0000000001 0100010000 0110000000","20":"3 0\n0000000000 1000000001 1110000000","56":"3 0\n1000000000 1000010000 1010010000","5":"3 0\n1100000000 1000000001 1110000000","62":"3 1\n0000000000 1100000000 0110000000","79":"3 0\n1100000000 1000000000 0110000100","96":"3 1\n1000000000 1000000000 1110000010","23":"8 2\n7 6 3 2 3 8 7 6","57":"3 0\n0110000000 1000000001 1110000000","35":"8 1\n4 9 8 0 3 4 16 6","74":"3 0\n1000000000 1001000100 1110000000","25":"3 0\n0000000000 1100000000 0110000000","87":"3 0\n0000000100 0100010000 0110000000"},"output_testcases":{"37":"21\n","71":"15\n","4":"3210000000\n","10":"3000000100\n","93":"13\n","53":"43\n","92":"17\n","55":"3000010100\n","2":"1\n","73":"41\n","83":"110000010\n","99":"2220000100\n","89":"16\n","41":"11\n","31":"24\n","100":"3000000000\n","67":"54\n","101":"5\n","88":"59\n","94":"37\n","1":"0\n","24":"3220000011\n","3":"3110000000\n","9":"31\n","21":"46\n","49":"9\n","59":"45\n","86":"3120100012\n","58":"2110001002\n","11":"3010010000\n","76":"3111000001\n","27":"36\n","12":"6\n","90":"20\n","77":"3210010001\n","0":"3010000000\n","98":"2000001100\n","63":"49\n","32":"210000001\n","34":"23\n","7":"3210001002\n","18":"3210000011\n","75":"2100000000\n","17":"35\n","15":"2210001002\n","42":"12\n","13":"2110000000\n","97":"2111000001\n","95":"3211000100\n","48":"3110000100\n","65":"3120100011\n","22":"33\n","8":"40\n","19":"2210000000\n","78":"2000000100\n","44":"7\n","6":"3210001001\n","64":"39\n","102":"5\n","51":"3110000001\n","28":"3220100011\n","16":"47\n","40":"10\n","43":"44\n","52":"3210011001\n","45":"4\n","47":"5\n","46":"3000001000\n","91":"32\n","54":"28\n","50":"3210000010\n","82":"30\n","36":"22\n","61":"2210100000\n","81":"2110000100\n","103":"0\n","14":"2210000001\n","39":"14\n","26":"1110000001\n","84":"48\n","33":"38\n","85":"29\n","29":"210000000\n","80":"2210100010\n","38":"25\n","66":"210000100\n","72":"26\n","69":"18\n","30":"53\n","70":"19\n","60":"3210010011\n","68":"210010001\n","20":"2110000001\n","56":"3010020000\n","5":"3210000001\n","62":"110000000\n","79":"2210000100\n","96":"2000000000\n","23":"27\n","57":"2220000001\n","35":"34\n","74":"3111000100\n","25":"1210000000\n","87":"210010100\n"},"n_missing":0,"programs":["N, K = map(int, input().split())\nList = [int(x) for x in input().split()]\n\nif K == 0:\n    print(sum(List))\n    exit()\n\nif N <= K:\n    print('0')\n    exit()\n\nList.sort(reverse=True)\ndel List[:K]\n\nprint(sum(List))\n","N,K=map(int,input().split())\nH=list(map(int,input().split()))\nH.sort(reverse=True)\nH.remove(H[0:K])\nprint(K+sum(H[K:]))","n,k=map(int,input().split())\nhl=sorted(list(map(int,input().split())))\nc=-k if k>0 else n\nprint(sum(hl[:c]))","# https:\/\/atcoder.jp\/contests\/abc153\/tasks\/abc153_c\nimport sys\nsys.setrecursionlimit(12345678)\nimport itertools\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nimport bisect\nfrom heapq import heappush, heappop\n\n\ndef main():\n    n, k = map(int, input().split())\n    hl = list(map(int, input().split()))\n    hl.sort()\n    hl = hl[:(n - k)]\n    print(sum(hl))\n    return\n\n\nif __name__ == '__main__':\n    main()\n","import sys\nn, k = map(int, sys.stdin.readline().split())\nli = list(map(int, sys.stdin.readline().split()))\nl = len(li)\nt = 0\nif l > k:\n  li.sort().reverse()\n  t = sum(li[k:])\nprint(t)\n  ","_, K = map(int, input().split())\nv = list(map(int, input().split()))\nv.sort()\n\nif len(v) <= K:\n  print(0)\nelif K == 0:\n  print(sum(v))\nelse:\n  print(sum(v[:-K]))\n","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh=sorted(h,reverse=True)\nans=0\nif k>=n:\n    ans=0\nelse:\n    h=h[k:]\n    ans=sum(h)\nprint(ans)","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nans=0\nh.reverse()\nif k<n:\n  for i in range(k,n):\n    ans+=h[i]\nprint(ans)","N,K = map(int,input().split())\nhp = list(map(int,input().split()))\nhp_sort = sorted(hp,reverse = True)\nif K < len(hp):\n    for i in range(K):\n        del hp_sort[i]\n    print(sum(hp_sort))\nelse:\n    print('0')\n","N, K = map(int, input().split())\nH = sorted(map(int, input().split()))\nif K != 0:\n    print(sum(H[:-K]))\nelse:\n    print(sum(H))","n, k = map(int, input().split())\nH = sorted(list(map(int,input().split())))\nif k<=n:\n    print(sum(H[:n-k]))\nelse:\n    print(0)","import math\n\nN, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\nif K >= N:\n    print(0)\nelif K >= 1:\n    for i in range(K):\n        H.pop(i)\n    print(sum(H))\nelse:\n    print(sum(H))\n","N, K = map(int, input().split())\nHs = list(map(int, input().split()))\nHs.sort(reverse=True)\nfor i in range(K):\n  Hs[i] = 0\nprint(sum(Hs))","N,K = map(int, input().split())\n*H, = map(int, input().split())\n\n\nH.sort(reverse=True)\n\nans = 0\n\nfor i in range(K, len(H), 1):\n\n    ans = ans + H[i]\n\nprint(ans)","n, k = map(int, input().split())\nif k == 0:\n  H = sum(map(int, input().split()))\nelse:\n  H = sum(sorted(map(int, input().split()))[:-k])\nprint(H)\n\n","a,b=map(int,input().split())\nA=[int(x) for x in input().split()]\nA.sort()\nif a>=b:\n  print(sum(A[:(a-b)]))\nelse:\n  print(0)","N, K = map(int, input().split())\nH = list(map(int, input().split()))\nH.sort(reverse = True)\nans = 0\n\nfor i in range(K, N):\n  ans += H[i]\n\nprint(ans)","import sys\n\nn,k=map(int,input().split())\ns=list(map(int,input().split()))\ns.sort(reverse=True)\n\nif k<len(s):\n  for i in range(k):\n    s[i]=0\nelse:\n  for i in range(n):\n    print(0)\n    sys.exit()\n\nprint(sum(s))","N, K = map(int,input().split())\nH = list(map(int, input().split()))\n\nif K >= N:\n  print(0)\n \nelif K == 0:\n  print(sum(H))\n\nelse:\n  H.sort\n  print(sum(H[K+1:N-1]))","n,k = map(int,input().split())\nh = list(map(int, input().split()))\n\nif n <= k:\n    print(0)\n    exit()\nh.sort()\nprint(sum(h[:n-k]))","n,k = [int(x) for x in input().split()]\nm = [int(x) for x in input().split()]\nm.sort()\nprint(sum(m[0:n-k]))","N,K=map(int,input().split())\nH=list(map(int,input().split()))\nH.sort()\nfor _ in range(min(N,K)): H.pop()\nprint(sum(H))","N,K=(int(x) for x in input().split())\na=list(int(y) for y in input().split())\nb=sorted(a)\nif K<N:\n    print(sum(b[0:N-K]))\nelse:\n    print(0)","n,k = map(int,input().split())\nh = list(map(int,input().split()))\nh.sort()\nfor i in range(k):\n    h[n-i-1] = 0\nprint(sum(h))","n,k=map(int,input().split())\nhp=[int(i) for i  in input().split()]\n\nif n<=k:\n  ans=0\nelse:\n  hp.sort()\n  ans=sum(hp[:n-k])\nprint(ans)\n  ","n,k = map(int,input().split())\nh = sorted(list(map(int,input().split())))\nif k > 0:\n    print(sum(h[:-k]))\nelse:\n    print(sum(h))\n    ","H,N=map(int, input().split())\nl=list(map(int, input().split())) \n\nimport math\n\n# H,N=3,1\n# l=[4,1,5]\n\nimport sys\nif N>=len(l):\n    print(0)\n    sys.exit()\n\n    \nsort_l=sorted(l)\ndelete_l=sort_l[:len(l)-N]\nprint(sum(delete_l))","n, k = map(int, input().split())\nhn = list(map(int, input().split()))\n\nif k >= n:\n  print(0)\nelse:\n  hn.sort(reverse=True)\n  print(sum(hn[k:]))\n  ","n,k=(int(i) for i in input().split())\nh=[0 for i in range(k)]\np=0\nfor i in input().split():\n  p+=i\n  if h[0]<i:\n    h[0]=i\n    h.sort()\nprint(p-sum(h))","import os\nimport statistics\ndef quickSort(arr):\n   # \u914d\u5217\u306e\u30e1\u30b8\u30a2\u30f3\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u3092\u96c6\u3081\u305f\u914d\u5217\n    left = []\n\n    # \u914d\u5217\u306e\u30e1\u30b8\u30a2\u30f3\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u96c6\u3081\u305f\u914d\u5217\n    right = []\n\n    # \u518d\u5e30\u306e\u505c\u6b62\u6761\u4ef6\n    # \u518d\u5e30\u7684\u306b\u914d\u5217\u3092\u5206\u5272\u3057\u305f\u5f8c\u306e\u3001\u8981\u7d20\u6570\u304c1\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3089\u505c\u6b62\u3059\u308b\n    if len(arr) <= 1:\n        return arr\n\n    # \u914d\u5217\u306e\u4e2d\u592e\u5024(\u30e1\u30b8\u30a2\u30f3)\u3092\u53d6\u5f97\u3059\u308b\n    median = int(statistics.median(arr))\n\n    # \u914d\u5217\u5185\u306b\u542b\u307e\u308c\u308b\u4e2d\u592e\u5024\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u305f\u3081\u306e\u5909\u6570\n    medianFlg = 0\n\n    for element in arr:\n        # \u914d\u5217\u306e\u8981\u7d20(element)\u304c\u4e2d\u592e\u5024\u3088\u308a\u5c0f\u3055\u3044\u306e\u3067\u3001\n        # \u914d\u5217left\u306b\u5024\u3092\u683c\u7d0d\u3059\u308b\n        if element < median:\n            left.append(element)\n        # \u914d\u5217\u306e\u8981\u7d20(element)\u304c\u4e2d\u592e\u5024\u3088\u308a\u5927\u304d\u3044\u306e\u3067\u3001\n        # \u914d\u5217right\u306b\u5024\u3092\u683c\u7d0d\u3059\u308b\n        elif element > median:\n            right.append(element)\n        else:\n        # element\u304c\u914d\u5217\u306e\u4e2d\u592e\u5024\u306e\u5834\u5408\u306f\u3001\n        # \u8fd4\u308a\u5024\u306b\u52a0\u3048\u308b\u4e2d\u592e\u5024\u306e\u500b\u6570\u5206\u3060\u3051\u3001\u30d5\u30e9\u30b0\u306b+1\u3057\u7d9a\u3051\u308b\n            medianFlg += 1\n\n    # print(left)\n    # print(right)\n\n    # \u914d\u5217left\u3001\u914d\u5217right\u6bce\u306b\u518d\u5e30\u3092\u884c\u3044\n    # \u914d\u5217\u3092\u5c0f\u3055\u306a\u914d\u5217\u306b\u533a\u5207\u308b\n    left = quickSort(left)\n    right = quickSort(right)\n\n    # \u914d\u5217left\u3001\u4e2d\u592e\u5024\u306e[median]\u3001\u914d\u5217right\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return left + [median] * medianFlg + right\n\nN,K=map(int,input().split())\nh=map(int,input().split())\nH=list(h)\nM=quickSort(H)\nc=0\nif N-K==0:\n print(c)\nelse:\n for i in range(N-K):\n  c+=M[i]\n print(c)","N, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\n\nif K >= N:\n    print(0)\nelse:\n    print(sum(H[K:]))\n","inp = list(map(int, input().split()))\nN = inp[0]\nK = inp[1]\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\n\nsum = 0\nfor count in range(N):\n        if count >= K:\n            sum += H[count]\n\nprint(sum)\n    ","n ,k = map(int,input().split())\nh = list(map(int,input().split()))\nflag = 0\nans = 0\nfor i in range(k):\n  if n <= k:\n    break\n  re = max(h)\n  h.remove(re)\n  flag += 1\nfor i in range(n - flag):\n  if n <= k:\n    ans = 0\n  else:\n    ans += h[i]\nprint(ans)","[N, K] = [int(i) for i in input().split()]\nH = [int(i) for i in input().split()]\n\nif N <= K:\n    print(0)\nelse:\n    h = list(sorted(H))\n    t = sum(h[0:N-K])\n    print(t)","n, k=map(int, input().split())\nh=list(map(int, input().split()))\nn-=k\nh.sort\nhp=0\nfor i in range(n):\n  hp+=h[i]\nprint(hp)","n,k=map(int,input().split())\nh=list(map(int,input().split()))\n\nh.sort()\nh.reverse()\n\ndel h[:k]\nprint (sum(h))","N, K = map(int, input().split())\nH = sorted([int(x) for x in input().split()])\n#print(H)\n\nfor i in range(K):\n\tH.pop((N-1)-i)\n\n#print(H)\n\nprint(sum(H))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort()\n\nif k == 0:\n    ans = sum(h)\nelse:\n    ans = sum(h[:-k])\nprint(ans)\n","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())),reverse=True)\nprint(sum(H[K:]))","s = [list(map(int,input().split())) for i in range(2)]\nt = s[0]\nN = t[0]\nK = t[1]\nH = s[1]\nfor i in range(K):\n    a = max(H)\n    H.remove(a)\nprint(sum(H))","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh=sorted(h)\nif n<=k:\n    print(0)\nelse:\n    ans=0\n    for i in range(n-k):\n        ans+=h[i]\n    print(ans)\n\n\n    \n        \n        \n    \n    \n    \n    \n        \n","n, k = map(int, input().split())\nh = []\nh.append(map(int, input().split()))\ncount = 0\n\nwhile len(h) > 0:\n  if k > 0:\n    k -= 1\n    h.remove(max(h))\n    continue\n  else:\n    for i in h:\n      count += i\n      \nprint(count)","n, k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\n\nif k >= len(l):\n  print(0)\nelse:\n  print(sum(l[k:]))\n  ","#!\/user\/bin\/env python\n#python\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\n\n# -*- coding: utf-8 -*-\n\"\"\"\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fPython\u3092\u66f8\u304f\u969b\u306e\u30c6\u30f3\u30d7\u30ec\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u30b3\u30d4\u30da\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u306a\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u5b57\u4e0b\u3052\u3057\u306a\u3044\u3053\u3068\uff01\uff01\n\"\"\"\n\n__author_ = 'Maruta Yuzuha'\n__version_ = '1.0.0'\n__date__ = '2019\/12\/25'\n\ndef main():\n    \"\"\"\n    \u3053\u3053\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u89e3\u8aac\u3092\u884c\u3046\n     >>main()\n    Hello world.\n    0\n    \"\"\"\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n\n    a = 0  #\u52dd\u3064\u307e\u3067\u306e\u56de\u6570\n    b = s[0]#\u4f55\u5339\u304b\n    d = s[1]#\u5fc5\u6bba\u6280\u306e\u56de\u6570\n    # c = sum(t)\n    # d = int(s[1])\n    # for i in range(int(s[1])):\n    #     if sum(t) != 0:\n    #         if d != 0:\n    #             c -= max(t)\n    #             for j in range(int(s[0])):\n    #                 if max(t) == t[j]:\n    #                     t[j] = 0\n    #             d -= 1\n    #         else:\n    #             break\n    e = 0  #Max\n    f = 0# Max\u306e\u3044\u3061\n    for j in range(d):  #\u5fc5\u6bba\u6280\u306e\u56de\u6570\n        c = sum(t)\n        if c != 0:\n            for i in range(b):\n                if e < t[i]:\n                    e = t[i]\n                    f = i\n            t[f] = 0\n            e = 0\n            f = 0\n        else:\n            break\n    a += sum(t)\n    print(a)\n    return 0\n\nif __name__ == '__main__':\n    #\u4e0a\u8a18\u306eif\u306e\u8a18\u8ff0\u306b\u3088\u3063\u3066\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u8d77\u52d5\u3055\u308c\u305f\u6642\u3060\u3051\u5b9f\u884c\u3059\u308b\u90e8\u5206\u306b\u306a\u308b\u3002\n    #\u3061\u306a\u307f\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u304c \"\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\"\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u6642\u306b\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3001\n\n    #\u5358\u4f53\u30c6\u30b9\u30c8:\u30e2\u30b8\u30e5\u30fc\u30eb\u306edocstring(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217)\u306b\u8a18\u8f09\u3055\u308c\u305f\u5168\u3066\u306e\u5bfe\u8a71\u5b9f\u884c\u4f8b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u78ba\u8a8d\n    #python \u30d5\u30a1\u30a4\u30eb\u540d -v\n    import doctest\n    doctest.testmod()\n\n    #\u5b9f\u969b\u306bmain()\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u5f97\u3066\u3001\u305d\u306e\u7d50\u679c\u3067Python\u30b7\u30b9\u30c6\u30e0\u3092\u7d42\u3048\u308b\n    import sys\n    sys.exit(main())","n,k = map(int,input().split())\nh = [ int(i) for i in input().split() ]\n\nh = sorted(h)\n\nleft = n-k\nans = 0\nif left >= 0:\n\tans = sum(h[:left])\nprint(ans)\n","def resolve():\n    n, k = map(int, input().split())\n    h = sorted(list(map(int, input().split())))\n    print(sum(h[:max(0, n - k)]))\n\n\nif __name__ == '__main__':\n    resolve()\n","import math\n\nN, K = map(int,input().split())\nH = list(map(int,input().split()))\n\nh = sorted(H)\ni = len(H)-K\n\nif K <= N: \n\tH_count = sum(h[:i])\n\tprint(H_count)\nelse:\n\tprint(0)\n","N,K=[int(i) for i in input().split(\" \")]\nH=[int(i) for i in input().split(\" \")]\nH.sort()\nH.reverse()\nprint(sum(H[K:]))\n","n,k = map(int,input().split())\nh_list = list(map(int,input().split()))\n\nh_list.sort(reverse=True)\n\nif k >= n:\n    print(0)\nelse:\n    print(sum(h_list[k:]))","N, K = map(int, input().split())\nH = list(map(int, input().split()))\nprint(sum(sorted(H, reverse=True)[K:]))","n, k = map(int, input().strip().split())\na = sorted(map(int, input().split()), key= lambda x: -x)\nprint(sum(a) - sum(a[:k]))","N, K = map(int,input().split())\nH = list(input().split())\n \nif K >= N:\n    print(0)\nelif N > K:\n    if K == 0:\n        print(sum(int(i) for i in H))\n    else:\n      \t# \u3053\u3053\u3092\u8ffd\u52a0\n      \tfor i in range(k):\n        \tH.remove(max(H))\n        print(sum(int(i) for i in H))","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nh.reverse()\nprint(sum(h[k:]))","il1 = [int(k) for k in input().split()]\nN = il1[0]\nK = il1[1]\nH = [int(k) for k in input().split()]\n\nH.sort(reverse=True)\n\nif len(H) <= K:\n    counter = len(H)\nelse:\n    counter = K\n\nfor k in range(counter):\n    H[k] = 0\n\nS = sum(H)\n\nprint(S)\n","N,K=map(int,input().split())\nS=list(map(int,input().split()))\ns=sorted(S)\n\nif K==0:\n\tprint(sum(s))\nelif K!=0:\n\tans=sum(s[:-K])\n\tprint(ans)","n,k = map(int,input().split())\na = list(map(int,input().split()))\nif n <= k:\n  print(0)\nelse:\n  a.sort()\n  print(sum(a[:n-k]))","N,K=(int(x) for x in input().split())\nH=list(map(int, input().split()))\nA = sorted(H)\ni=0\na=N-K\nif K >= N:\n    print('0')\n\nelse:\n    B=A[:a]\n    C=sum(B)\n    print(C)","N,K = map(int,input().split())\nL = list(map(int,input().split()))\nL.sort()\nL.reverse()\ncount = K\nans = 0\nfor i in range(len(L)):\n  if count != 0:\n    L[i] = 0\n    ans += 1\n    count -= 1\n    if sum(L) == 0:\n      count = 0\n      break\n  else:\n    break\nprint(count+sum(L))","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())))[::-1]\nprint(sum(H[K:]))","import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nn, k = na()\nk = min(k, n)\nh = na()\nh.sort()\nprint(sum(h[0:n-k]))\n\n","n,k=map(int,input().split())\na=sorted(list(map(int,input().split())))\nif k==0:\n    print(sum(a))\nelse:\n    print(sum(a[0:-k]))","n,k = map(int,input().split())\nh = list(map(int,input().split()))\nH = sorted(h, reverse=True)\nif k >= len(H):\n    print(0)\nif k<len(H):\n    del H[:k]\n    print(sum(H))","N,K = map(int,input().split())\nH = list(map(int,input().split()))\nH.sort()\nif K> 0:\n    del H[-K:]\nprint(sum(H))\n","def main():\n    n, k = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    h_list.sort()\n\n    for i in range(k):\n        h_list.pop()\n        if not h_list:\n            print(0)\n            return\n    ans = sum(h_list)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","N, K = map(int, input().split())\nx = list(map(int, input().split()))\nx.sort(reverse=True)\nX = 0\n\nif N <= K:\n  X = 0\nelse:  \n  for i in range(N-K):\n    X += x[i+K] \nprint(X)","import math\n\ndef makelist(n, m):\n    return [[0 for _ in range(m)] for _ in range(n)]\n\n# n = int(input())\n# \n# s = input()\n\nN, K = list(map(int, input().split()))\nH = list(map(int, input().split()))\nH.sort()\n\nhoge = max(0, N - K)\nans = sum(H[:hoge])\nprint(ans)\n","n, k = map(int, input().split())\nH = sorted(list(map(int, input().split())))\nif n > k:\n    H = H[:n-k]\nelse:\n    H = []\nprint(sum(H))","H,N=map(int, input().split())\nl=list(map(int, input().split())) \n\nimport math\n\n# H,N=3,1\n# l=[4,1,5]\n\nimport sys\nif N>=len(l):\n    print(l)\n    sys.exit()\n\n    \nsort_l=sorted(l)\ndelete_l=sort_l[:len(l)-N]\nscore=0\nfor i in delete_l:\n    score+=(math.ceil(i\/H))\nprint(score)\n","N, K = map(int, input().split())\nhhh = list(map(int, input().split()))\nhhh.sort()\nprint(sum(hhh[:-K]) if K > 0 else sum(hhh))\n","# \u521d\u671f\u5165\u529b\nN,K = (int(x) for x in input().split(\" \"))\nH = list(map(int, input().split()))\ntuujou_attack = 1\n\n# N\u7a2e\u985e\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u3001K\u56de\u306e\u5fc5\u6bba\u6280\u3001\u30e2\u30f3\u30b9\u30bf\u30fc\u306f\u3000H\u3000\u306e\u4f53\u529b\n# \u4f53\u529b\u306e\u591a\u3044\u30e2\u30f3\u30b9\u30bf\u30fc\u304b\u3089\u5fc5\u6bba\u6280\u3067\u5012\u3059\u3002\u5fc5\u6bba\u6280\u304c\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f\u3089\u901a\u5e38\u653b\u6483\nnokori_kaisu = 0\nH_sorted = sorted(H)\nif N <= K:\n    nokori_kaisu = 0\nelse:\n    nokori_hissatuwaza = N -K\n    # del H_sorted[nokori_hissatuwaza:]\n    nokori_kaisu = sum( H_sorted[:nokori_hissatuwaza] ) # \u4f53\u529b\u5c11\u306a\u3044\u307b\u3046\u304b\u3089\u3000N-K\u3000\u307e\u3067\u3001\u901a\u5e38\u653b\u6483\u300c\uff11\u300d\n\nprint(nokori_kaisu)\n# print(H_sorted)","n,k=map(int,input().split())\na=list(int(x) for x in input().split())\na.sort()\ns=0\nif n <= k:\n\tprint(0)\nelse:\n\t\ts = sum(a[:n-k])\n\t\tprint(s)\n","a = list(map(int, input().split()))\nb = list(map(int, input().split()))\ny=(a[0] if a[1]>=a[0] else a[1])\nfor i in range(y):\n    b.remove(max(b))\nprint(sum(b))","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())))\n\nif K >= N:\n  print(0)\nelse:\n  print(sum(H[:N-K]))\n","n,k=map(int,input().split(' '))\na=list(map(int,input().split(' ')))\na.sort()\nsum=0\nfor i in range(n-k):\n\tsum+=a[i]\nprint(sum)","import sys\n\n\ndef InS(): return input()\n\n\ndef InL(): return list(map(int, input().split()))\n\n\ndef InI(): return int(input())\n\n\nN, K = InL()\nH = InL().sort()\n\nif K >= N:\n    print(0)\n    sys.exit()\n\nprint(sum(H[0:N-K]))\n","N, K = list(map(int, input().split()))\nH = list(map(int, input().split()))\n\ncnt = 0\n\nif N <= K:\n  print(0)\nelse:\n  for i in range(K):\n    H.remove(max(H))\n\n  cnt += sum(H)\n\n  print(cnt)\n","N, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nif K >= N:\n    print(0)\nelif K == 0:\n    print(sum(H))\nelse:\n    H.sort()\n    print(sum(H[:N - K]))","N,K = list(map(int, input().split()))\nH = list(map(int, input().split()))\n\nif(N<=K):\n  print(0)\nelse:\n  for i in range(K):\n    Hmax = max(H)\n    H.remove(Hmax)\n  print(sum(H))","n,k = map(int,input().split())\nhealth = list(map(int,input().split()))\ns_health = sorted(health,reverse=True)\nif n <= k:\n    print(0)\n    exit()\n    \nfor i in range(k):\n    del s_health[0]\n\nprint(sum(s_health))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\n\nh.sort(reverse=True)\n\nif n <= k:\n    print(0)\nelse:\n    print(sum(h[k:]))","n, k = map(int, input().split())\nhps = sorted(list(map(int, input().split())), reverse=True)\nif n <= k:\n  print(0)\nelse:\n  print(sum(hps[k:]))","[H, N] = [int(x) for x in input().split()]\nA = list(map(int, input().split()))\narr = sorted(A, reverse=True)\nwhile N > 0:\n    arr.pop(0)\n    N -= 1\n    if N == 0:\n        break\nprint(sum(arr))","N, K = map(int, input().split())\nH = map(int,input().split())\nprint(sum(sorted(H, reverse=True)[K::]))","import math\n\nn,k=map(int,input().split())\nenemys = list(map(int,input().split()))\n\nenemys.sort(reverse=True)\ncount = 0\nfor e in enemys:\n  if(k > 0):\n    k -= 1\n  else:\n    count += e\n\nprint(count)\n\n","A = list(input().split(\" \"))\nN = int(A[0])\nK = int(A[1])\nH = list(input().split(\" \"))\nsum = 0\nH.sort()\nfor i in range(K):\n    H[N-1-i] = 0\nfor i in range(N):\n    sum += int(H[i])\nprint(sum)\n","A,B,X = map(int, input().split())\n\nimport math\ndef d(N): #\u6841\u3092\u6c42\u3081\u308b\n    return int(math.log10(N)) +1\n\n#2\u5206\u63a2\u7d22\u6cd5\nN_min =0\nN_max =10**9\nwhile 1<(N_max - N_min):\n    N=(N_max + N_min)\/\/2\n    if A*N +B*d(N) >X:\n        N_max = N\n    else:\n        N_min =N\nif A * N_max + B * d(N_max) <X:\n    print(N_max)\nelse:\n    print(N_min)","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())),reverse=True)\n\ns = sum(H[K:])\nprint(s)","N,K=map(int,input().split())\n\nH=list(map(int,input().split()))\n\nH.sort(reverse=True)\n\nfor i in range(K):\n    try:\n        H.pop(0)\n    except:\n        pass\n\nprint(sum(H))","n,k = map(int,input().split())\nif n < k: k = n\nh = list(map(int,input().split()))\nh = sorted(h,reverse = True)\nfor i in range(k):\n    h[i] = 0\nprint(sum(h))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort(reverse=True)\nprint(sum(h[k:]))\n","n, k = map(int, input().split())\nh = list(map(int,input().split()))\nif k == 0:\n    print(sum(h))\nelif (n-k) > 0:\n    m = max(h)\n    h.remove(m)\n    print(sum(h))\nelse:\n    print(0)","n,k = [int(x) for x in input().split()]\nm = [int(x) for x in input().split()]\nm.sort()\nif n<k:\n  k = n\nprint(sum(m[0:n-k]))","N,K = map(int,input().split())\nH = list(map(int,input().split()))\n\nH.sort()\nH.reverse()\n\nprint(sum(H[K:]))\n","n, k = map(int, input().split())\nh = sorted(list(map(int, input().split())), reverse=True)\nprint(sum(h[k:]))","def main():\n    n,k=map(int,input().split())\n    h = list(map(int,input().split()))\n\n    h.sort()\n    if k >= n:\n        print(0)\n        return\n    for i in range(1,k+1):\n        h.pop(-1)\n    print(sum(h))\nif __name__=='__main__':\n    main()\n","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nif n<=k:\n    print(0)\nelse:\n    h.sort()\n    for i in range(k):\n        h.pop(-1)\n    print(sum(h))","h, n = list(map(int,(input().split())))\na = list(map(int,(input().split())))\nimport sys\nsys.setrecursionlimit(10 ** 9) #\u518d\u5e30\u7528\n\na.sort()\n\nif h >= n and n !=0 :\n  for i in range(n):\n    a.pop()\n    ans = sum(a)\nelif n ==0:\n  ans = sum(a)\nelse:\n  ans = 0\n  \nprint(ans)","import bisect\nimport numpy as np\nimport math\nimport itertools\ndef main():\n    N, K = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    if N <= K:\n        print(0)\n    elif K == 0:\n        print(sum(H))\n    else:\n        H = sorted(H)\n        H = H[:-K]\n        print(sum(H))\n\n\n    return 0\nif __name__ == '__main__':\n    main()","n, k = map(int, input().split())\nH = sorted(list(map(int, input().split())), reverse=True)\n\nprint(sum(H[k:]))\n","import sys\ninput = sys.stdin.readline\nn,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nans=0\nfor i in range(n-k):\n    ans+=h[i]\nprint(ans)\n"],"raw_generations":["N, K = map(int, input().split())\nList = [int(x) for x in input().split()]\n\nif K == 0:\n    print(sum(List))\n    exit()\n\nif N <= K:\n    print('0')\n    exit()\n\nList.sort(reverse=True)\ndel List[:K]\n\nprint(sum(List))\n","N,K=map(int,input().split())\nH=list(map(int,input().split()))\nH.sort(reverse=True)\nH.remove(H[0:K])\nprint(K+sum(H[K:]))","n,k=map(int,input().split())\nhl=sorted(list(map(int,input().split())))\nc=-k if k>0 else n\nprint(sum(hl[:c]))","# https:\/\/atcoder.jp\/contests\/abc153\/tasks\/abc153_c\nimport sys\nsys.setrecursionlimit(12345678)\nimport itertools\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nimport bisect\nfrom heapq import heappush, heappop\n\n\ndef main():\n    n, k = map(int, input().split())\n    hl = list(map(int, input().split()))\n    hl.sort()\n    hl = hl[:(n - k)]\n    print(sum(hl))\n    return\n\n\nif __name__ == '__main__':\n    main()\n","import sys\nn, k = map(int, sys.stdin.readline().split())\nli = list(map(int, sys.stdin.readline().split()))\nl = len(li)\nt = 0\nif l > k:\n  li.sort().reverse()\n  t = sum(li[k:])\nprint(t)\n  ","_, K = map(int, input().split())\nv = list(map(int, input().split()))\nv.sort()\n\nif len(v) <= K:\n  print(0)\nelif K == 0:\n  print(sum(v))\nelse:\n  print(sum(v[:-K]))\n","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh=sorted(h,reverse=True)\nans=0\nif k>=n:\n    ans=0\nelse:\n    h=h[k:]\n    ans=sum(h)\nprint(ans)","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nans=0\nh.reverse()\nif k<n:\n  for i in range(k,n):\n    ans+=h[i]\nprint(ans)","N,K = map(int,input().split())\nhp = list(map(int,input().split()))\nhp_sort = sorted(hp,reverse = True)\nif K < len(hp):\n    for i in range(K):\n        del hp_sort[i]\n    print(sum(hp_sort))\nelse:\n    print('0')\n","N, K = map(int, input().split())\nH = sorted(map(int, input().split()))\nif K != 0:\n    print(sum(H[:-K]))\nelse:\n    print(sum(H))","n, k = map(int, input().split())\nH = sorted(list(map(int,input().split())))\nif k<=n:\n    print(sum(H[:n-k]))\nelse:\n    print(0)","import math\n\nN, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\nif K >= N:\n    print(0)\nelif K >= 1:\n    for i in range(K):\n        H.pop(i)\n    print(sum(H))\nelse:\n    print(sum(H))\n","N, K = map(int, input().split())\nHs = list(map(int, input().split()))\nHs.sort(reverse=True)\nfor i in range(K):\n  Hs[i] = 0\nprint(sum(Hs))","N,K = map(int, input().split())\n*H, = map(int, input().split())\n\n\nH.sort(reverse=True)\n\nans = 0\n\nfor i in range(K, len(H), 1):\n\n    ans = ans + H[i]\n\nprint(ans)","n, k = map(int, input().split())\nif k == 0:\n  H = sum(map(int, input().split()))\nelse:\n  H = sum(sorted(map(int, input().split()))[:-k])\nprint(H)\n\n","a,b=map(int,input().split())\nA=[int(x) for x in input().split()]\nA.sort()\nif a>=b:\n  print(sum(A[:(a-b)]))\nelse:\n  print(0)","N, K = map(int, input().split())\nH = list(map(int, input().split()))\nH.sort(reverse = True)\nans = 0\n\nfor i in range(K, N):\n  ans += H[i]\n\nprint(ans)","import sys\n\nn,k=map(int,input().split())\ns=list(map(int,input().split()))\ns.sort(reverse=True)\n\nif k<len(s):\n  for i in range(k):\n    s[i]=0\nelse:\n  for i in range(n):\n    print(0)\n    sys.exit()\n\nprint(sum(s))","N, K = map(int,input().split())\nH = list(map(int, input().split()))\n\nif K >= N:\n  print(0)\n \nelif K == 0:\n  print(sum(H))\n\nelse:\n  H.sort\n  print(sum(H[K+1:N-1]))","n,k = map(int,input().split())\nh = list(map(int, input().split()))\n\nif n <= k:\n    print(0)\n    exit()\nh.sort()\nprint(sum(h[:n-k]))","n,k = [int(x) for x in input().split()]\nm = [int(x) for x in input().split()]\nm.sort()\nprint(sum(m[0:n-k]))","N,K=map(int,input().split())\nH=list(map(int,input().split()))\nH.sort()\nfor _ in range(min(N,K)): H.pop()\nprint(sum(H))","N,K=(int(x) for x in input().split())\na=list(int(y) for y in input().split())\nb=sorted(a)\nif K<N:\n    print(sum(b[0:N-K]))\nelse:\n    print(0)","n,k = map(int,input().split())\nh = list(map(int,input().split()))\nh.sort()\nfor i in range(k):\n    h[n-i-1] = 0\nprint(sum(h))","n,k=map(int,input().split())\nhp=[int(i) for i  in input().split()]\n\nif n<=k:\n  ans=0\nelse:\n  hp.sort()\n  ans=sum(hp[:n-k])\nprint(ans)\n  ","n,k = map(int,input().split())\nh = sorted(list(map(int,input().split())))\nif k > 0:\n    print(sum(h[:-k]))\nelse:\n    print(sum(h))\n    ","H,N=map(int, input().split())\nl=list(map(int, input().split())) \n\nimport math\n\n# H,N=3,1\n# l=[4,1,5]\n\nimport sys\nif N>=len(l):\n    print(0)\n    sys.exit()\n\n    \nsort_l=sorted(l)\ndelete_l=sort_l[:len(l)-N]\nprint(sum(delete_l))","n, k = map(int, input().split())\nhn = list(map(int, input().split()))\n\nif k >= n:\n  print(0)\nelse:\n  hn.sort(reverse=True)\n  print(sum(hn[k:]))\n  ","n,k=(int(i) for i in input().split())\nh=[0 for i in range(k)]\np=0\nfor i in input().split():\n  p+=i\n  if h[0]<i:\n    h[0]=i\n    h.sort()\nprint(p-sum(h))","import os\nimport statistics\ndef quickSort(arr):\n   # \u914d\u5217\u306e\u30e1\u30b8\u30a2\u30f3\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u3092\u96c6\u3081\u305f\u914d\u5217\n    left = []\n\n    # \u914d\u5217\u306e\u30e1\u30b8\u30a2\u30f3\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u96c6\u3081\u305f\u914d\u5217\n    right = []\n\n    # \u518d\u5e30\u306e\u505c\u6b62\u6761\u4ef6\n    # \u518d\u5e30\u7684\u306b\u914d\u5217\u3092\u5206\u5272\u3057\u305f\u5f8c\u306e\u3001\u8981\u7d20\u6570\u304c1\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3089\u505c\u6b62\u3059\u308b\n    if len(arr) <= 1:\n        return arr\n\n    # \u914d\u5217\u306e\u4e2d\u592e\u5024(\u30e1\u30b8\u30a2\u30f3)\u3092\u53d6\u5f97\u3059\u308b\n    median = int(statistics.median(arr))\n\n    # \u914d\u5217\u5185\u306b\u542b\u307e\u308c\u308b\u4e2d\u592e\u5024\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u305f\u3081\u306e\u5909\u6570\n    medianFlg = 0\n\n    for element in arr:\n        # \u914d\u5217\u306e\u8981\u7d20(element)\u304c\u4e2d\u592e\u5024\u3088\u308a\u5c0f\u3055\u3044\u306e\u3067\u3001\n        # \u914d\u5217left\u306b\u5024\u3092\u683c\u7d0d\u3059\u308b\n        if element < median:\n            left.append(element)\n        # \u914d\u5217\u306e\u8981\u7d20(element)\u304c\u4e2d\u592e\u5024\u3088\u308a\u5927\u304d\u3044\u306e\u3067\u3001\n        # \u914d\u5217right\u306b\u5024\u3092\u683c\u7d0d\u3059\u308b\n        elif element > median:\n            right.append(element)\n        else:\n        # element\u304c\u914d\u5217\u306e\u4e2d\u592e\u5024\u306e\u5834\u5408\u306f\u3001\n        # \u8fd4\u308a\u5024\u306b\u52a0\u3048\u308b\u4e2d\u592e\u5024\u306e\u500b\u6570\u5206\u3060\u3051\u3001\u30d5\u30e9\u30b0\u306b+1\u3057\u7d9a\u3051\u308b\n            medianFlg += 1\n\n    # print(left)\n    # print(right)\n\n    # \u914d\u5217left\u3001\u914d\u5217right\u6bce\u306b\u518d\u5e30\u3092\u884c\u3044\n    # \u914d\u5217\u3092\u5c0f\u3055\u306a\u914d\u5217\u306b\u533a\u5207\u308b\n    left = quickSort(left)\n    right = quickSort(right)\n\n    # \u914d\u5217left\u3001\u4e2d\u592e\u5024\u306e[median]\u3001\u914d\u5217right\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return left + [median] * medianFlg + right\n\nN,K=map(int,input().split())\nh=map(int,input().split())\nH=list(h)\nM=quickSort(H)\nc=0\nif N-K==0:\n print(c)\nelse:\n for i in range(N-K):\n  c+=M[i]\n print(c)","N, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\n\nif K >= N:\n    print(0)\nelse:\n    print(sum(H[K:]))\n","inp = list(map(int, input().split()))\nN = inp[0]\nK = inp[1]\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\n\nsum = 0\nfor count in range(N):\n        if count >= K:\n            sum += H[count]\n\nprint(sum)\n    ","n ,k = map(int,input().split())\nh = list(map(int,input().split()))\nflag = 0\nans = 0\nfor i in range(k):\n  if n <= k:\n    break\n  re = max(h)\n  h.remove(re)\n  flag += 1\nfor i in range(n - flag):\n  if n <= k:\n    ans = 0\n  else:\n    ans += h[i]\nprint(ans)","[N, K] = [int(i) for i in input().split()]\nH = [int(i) for i in input().split()]\n\nif N <= K:\n    print(0)\nelse:\n    h = list(sorted(H))\n    t = sum(h[0:N-K])\n    print(t)","n, k=map(int, input().split())\nh=list(map(int, input().split()))\nn-=k\nh.sort\nhp=0\nfor i in range(n):\n  hp+=h[i]\nprint(hp)","n,k=map(int,input().split())\nh=list(map(int,input().split()))\n\nh.sort()\nh.reverse()\n\ndel h[:k]\nprint (sum(h))","N, K = map(int, input().split())\nH = sorted([int(x) for x in input().split()])\n#print(H)\n\nfor i in range(K):\n\tH.pop((N-1)-i)\n\n#print(H)\n\nprint(sum(H))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort()\n\nif k == 0:\n    ans = sum(h)\nelse:\n    ans = sum(h[:-k])\nprint(ans)\n","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())),reverse=True)\nprint(sum(H[K:]))","s = [list(map(int,input().split())) for i in range(2)]\nt = s[0]\nN = t[0]\nK = t[1]\nH = s[1]\nfor i in range(K):\n    a = max(H)\n    H.remove(a)\nprint(sum(H))","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh=sorted(h)\nif n<=k:\n    print(0)\nelse:\n    ans=0\n    for i in range(n-k):\n        ans+=h[i]\n    print(ans)\n\n\n    \n        \n        \n    \n    \n    \n    \n        \n","n, k = map(int, input().split())\nh = []\nh.append(map(int, input().split()))\ncount = 0\n\nwhile len(h) > 0:\n  if k > 0:\n    k -= 1\n    h.remove(max(h))\n    continue\n  else:\n    for i in h:\n      count += i\n      \nprint(count)","n, k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\n\nif k >= len(l):\n  print(0)\nelse:\n  print(sum(l[k:]))\n  ","#!\/user\/bin\/env python\n#python\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\n\n# -*- coding: utf-8 -*-\n\"\"\"\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fPython\u3092\u66f8\u304f\u969b\u306e\u30c6\u30f3\u30d7\u30ec\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u30b3\u30d4\u30da\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u306a\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u5b57\u4e0b\u3052\u3057\u306a\u3044\u3053\u3068\uff01\uff01\n\"\"\"\n\n__author_ = 'Maruta Yuzuha'\n__version_ = '1.0.0'\n__date__ = '2019\/12\/25'\n\ndef main():\n    \"\"\"\n    \u3053\u3053\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u89e3\u8aac\u3092\u884c\u3046\n     >>main()\n    Hello world.\n    0\n    \"\"\"\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n\n    a = 0  #\u52dd\u3064\u307e\u3067\u306e\u56de\u6570\n    b = s[0]#\u4f55\u5339\u304b\n    d = s[1]#\u5fc5\u6bba\u6280\u306e\u56de\u6570\n    # c = sum(t)\n    # d = int(s[1])\n    # for i in range(int(s[1])):\n    #     if sum(t) != 0:\n    #         if d != 0:\n    #             c -= max(t)\n    #             for j in range(int(s[0])):\n    #                 if max(t) == t[j]:\n    #                     t[j] = 0\n    #             d -= 1\n    #         else:\n    #             break\n    e = 0  #Max\n    f = 0# Max\u306e\u3044\u3061\n    for j in range(d):  #\u5fc5\u6bba\u6280\u306e\u56de\u6570\n        c = sum(t)\n        if c != 0:\n            for i in range(b):\n                if e < t[i]:\n                    e = t[i]\n                    f = i\n            t[f] = 0\n            e = 0\n            f = 0\n        else:\n            break\n    a += sum(t)\n    print(a)\n    return 0\n\nif __name__ == '__main__':\n    #\u4e0a\u8a18\u306eif\u306e\u8a18\u8ff0\u306b\u3088\u3063\u3066\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u8d77\u52d5\u3055\u308c\u305f\u6642\u3060\u3051\u5b9f\u884c\u3059\u308b\u90e8\u5206\u306b\u306a\u308b\u3002\n    #\u3061\u306a\u307f\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u304c \"\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\"\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u6642\u306b\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3001\n\n    #\u5358\u4f53\u30c6\u30b9\u30c8:\u30e2\u30b8\u30e5\u30fc\u30eb\u306edocstring(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217)\u306b\u8a18\u8f09\u3055\u308c\u305f\u5168\u3066\u306e\u5bfe\u8a71\u5b9f\u884c\u4f8b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u78ba\u8a8d\n    #python \u30d5\u30a1\u30a4\u30eb\u540d -v\n    import doctest\n    doctest.testmod()\n\n    #\u5b9f\u969b\u306bmain()\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u5f97\u3066\u3001\u305d\u306e\u7d50\u679c\u3067Python\u30b7\u30b9\u30c6\u30e0\u3092\u7d42\u3048\u308b\n    import sys\n    sys.exit(main())","n,k = map(int,input().split())\nh = [ int(i) for i in input().split() ]\n\nh = sorted(h)\n\nleft = n-k\nans = 0\nif left >= 0:\n\tans = sum(h[:left])\nprint(ans)\n","def resolve():\n    n, k = map(int, input().split())\n    h = sorted(list(map(int, input().split())))\n    print(sum(h[:max(0, n - k)]))\n\n\nif __name__ == '__main__':\n    resolve()\n","import math\n\nN, K = map(int,input().split())\nH = list(map(int,input().split()))\n\nh = sorted(H)\ni = len(H)-K\n\nif K <= N: \n\tH_count = sum(h[:i])\n\tprint(H_count)\nelse:\n\tprint(0)\n","N,K=[int(i) for i in input().split(\" \")]\nH=[int(i) for i in input().split(\" \")]\nH.sort()\nH.reverse()\nprint(sum(H[K:]))\n","n,k = map(int,input().split())\nh_list = list(map(int,input().split()))\n\nh_list.sort(reverse=True)\n\nif k >= n:\n    print(0)\nelse:\n    print(sum(h_list[k:]))","N, K = map(int, input().split())\nH = list(map(int, input().split()))\nprint(sum(sorted(H, reverse=True)[K:]))","n, k = map(int, input().strip().split())\na = sorted(map(int, input().split()), key= lambda x: -x)\nprint(sum(a) - sum(a[:k]))","N, K = map(int,input().split())\nH = list(input().split())\n \nif K >= N:\n    print(0)\nelif N > K:\n    if K == 0:\n        print(sum(int(i) for i in H))\n    else:\n      \t# \u3053\u3053\u3092\u8ffd\u52a0\n      \tfor i in range(k):\n        \tH.remove(max(H))\n        print(sum(int(i) for i in H))","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nh.reverse()\nprint(sum(h[k:]))","il1 = [int(k) for k in input().split()]\nN = il1[0]\nK = il1[1]\nH = [int(k) for k in input().split()]\n\nH.sort(reverse=True)\n\nif len(H) <= K:\n    counter = len(H)\nelse:\n    counter = K\n\nfor k in range(counter):\n    H[k] = 0\n\nS = sum(H)\n\nprint(S)\n","N,K=map(int,input().split())\nS=list(map(int,input().split()))\ns=sorted(S)\n\nif K==0:\n\tprint(sum(s))\nelif K!=0:\n\tans=sum(s[:-K])\n\tprint(ans)","n,k = map(int,input().split())\na = list(map(int,input().split()))\nif n <= k:\n  print(0)\nelse:\n  a.sort()\n  print(sum(a[:n-k]))","N,K=(int(x) for x in input().split())\nH=list(map(int, input().split()))\nA = sorted(H)\ni=0\na=N-K\nif K >= N:\n    print('0')\n\nelse:\n    B=A[:a]\n    C=sum(B)\n    print(C)","N,K = map(int,input().split())\nL = list(map(int,input().split()))\nL.sort()\nL.reverse()\ncount = K\nans = 0\nfor i in range(len(L)):\n  if count != 0:\n    L[i] = 0\n    ans += 1\n    count -= 1\n    if sum(L) == 0:\n      count = 0\n      break\n  else:\n    break\nprint(count+sum(L))","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())))[::-1]\nprint(sum(H[K:]))","import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nn, k = na()\nk = min(k, n)\nh = na()\nh.sort()\nprint(sum(h[0:n-k]))\n\n","n,k=map(int,input().split())\na=sorted(list(map(int,input().split())))\nif k==0:\n    print(sum(a))\nelse:\n    print(sum(a[0:-k]))","n,k = map(int,input().split())\nh = list(map(int,input().split()))\nH = sorted(h, reverse=True)\nif k >= len(H):\n    print(0)\nif k<len(H):\n    del H[:k]\n    print(sum(H))","N,K = map(int,input().split())\nH = list(map(int,input().split()))\nH.sort()\nif K> 0:\n    del H[-K:]\nprint(sum(H))\n","def main():\n    n, k = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    h_list.sort()\n\n    for i in range(k):\n        h_list.pop()\n        if not h_list:\n            print(0)\n            return\n    ans = sum(h_list)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","N, K = map(int, input().split())\nx = list(map(int, input().split()))\nx.sort(reverse=True)\nX = 0\n\nif N <= K:\n  X = 0\nelse:  \n  for i in range(N-K):\n    X += x[i+K] \nprint(X)","import math\n\ndef makelist(n, m):\n    return [[0 for _ in range(m)] for _ in range(n)]\n\n# n = int(input())\n# \n# s = input()\n\nN, K = list(map(int, input().split()))\nH = list(map(int, input().split()))\nH.sort()\n\nhoge = max(0, N - K)\nans = sum(H[:hoge])\nprint(ans)\n","n, k = map(int, input().split())\nH = sorted(list(map(int, input().split())))\nif n > k:\n    H = H[:n-k]\nelse:\n    H = []\nprint(sum(H))","H,N=map(int, input().split())\nl=list(map(int, input().split())) \n\nimport math\n\n# H,N=3,1\n# l=[4,1,5]\n\nimport sys\nif N>=len(l):\n    print(l)\n    sys.exit()\n\n    \nsort_l=sorted(l)\ndelete_l=sort_l[:len(l)-N]\nscore=0\nfor i in delete_l:\n    score+=(math.ceil(i\/H))\nprint(score)\n","N, K = map(int, input().split())\nhhh = list(map(int, input().split()))\nhhh.sort()\nprint(sum(hhh[:-K]) if K > 0 else sum(hhh))\n","# \u521d\u671f\u5165\u529b\nN,K = (int(x) for x in input().split(\" \"))\nH = list(map(int, input().split()))\ntuujou_attack = 1\n\n# N\u7a2e\u985e\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u3001K\u56de\u306e\u5fc5\u6bba\u6280\u3001\u30e2\u30f3\u30b9\u30bf\u30fc\u306f\u3000H\u3000\u306e\u4f53\u529b\n# \u4f53\u529b\u306e\u591a\u3044\u30e2\u30f3\u30b9\u30bf\u30fc\u304b\u3089\u5fc5\u6bba\u6280\u3067\u5012\u3059\u3002\u5fc5\u6bba\u6280\u304c\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f\u3089\u901a\u5e38\u653b\u6483\nnokori_kaisu = 0\nH_sorted = sorted(H)\nif N <= K:\n    nokori_kaisu = 0\nelse:\n    nokori_hissatuwaza = N -K\n    # del H_sorted[nokori_hissatuwaza:]\n    nokori_kaisu = sum( H_sorted[:nokori_hissatuwaza] ) # \u4f53\u529b\u5c11\u306a\u3044\u307b\u3046\u304b\u3089\u3000N-K\u3000\u307e\u3067\u3001\u901a\u5e38\u653b\u6483\u300c\uff11\u300d\n\nprint(nokori_kaisu)\n# print(H_sorted)","n,k=map(int,input().split())\na=list(int(x) for x in input().split())\na.sort()\ns=0\nif n <= k:\n\tprint(0)\nelse:\n\t\ts = sum(a[:n-k])\n\t\tprint(s)\n","a = list(map(int, input().split()))\nb = list(map(int, input().split()))\ny=(a[0] if a[1]>=a[0] else a[1])\nfor i in range(y):\n    b.remove(max(b))\nprint(sum(b))","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())))\n\nif K >= N:\n  print(0)\nelse:\n  print(sum(H[:N-K]))\n","n,k=map(int,input().split(' '))\na=list(map(int,input().split(' ')))\na.sort()\nsum=0\nfor i in range(n-k):\n\tsum+=a[i]\nprint(sum)","import sys\n\n\ndef InS(): return input()\n\n\ndef InL(): return list(map(int, input().split()))\n\n\ndef InI(): return int(input())\n\n\nN, K = InL()\nH = InL().sort()\n\nif K >= N:\n    print(0)\n    sys.exit()\n\nprint(sum(H[0:N-K]))\n","N, K = list(map(int, input().split()))\nH = list(map(int, input().split()))\n\ncnt = 0\n\nif N <= K:\n  print(0)\nelse:\n  for i in range(K):\n    H.remove(max(H))\n\n  cnt += sum(H)\n\n  print(cnt)\n","N, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nif K >= N:\n    print(0)\nelif K == 0:\n    print(sum(H))\nelse:\n    H.sort()\n    print(sum(H[:N - K]))","N,K = list(map(int, input().split()))\nH = list(map(int, input().split()))\n\nif(N<=K):\n  print(0)\nelse:\n  for i in range(K):\n    Hmax = max(H)\n    H.remove(Hmax)\n  print(sum(H))","n,k = map(int,input().split())\nhealth = list(map(int,input().split()))\ns_health = sorted(health,reverse=True)\nif n <= k:\n    print(0)\n    exit()\n    \nfor i in range(k):\n    del s_health[0]\n\nprint(sum(s_health))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\n\nh.sort(reverse=True)\n\nif n <= k:\n    print(0)\nelse:\n    print(sum(h[k:]))","n, k = map(int, input().split())\nhps = sorted(list(map(int, input().split())), reverse=True)\nif n <= k:\n  print(0)\nelse:\n  print(sum(hps[k:]))","[H, N] = [int(x) for x in input().split()]\nA = list(map(int, input().split()))\narr = sorted(A, reverse=True)\nwhile N > 0:\n    arr.pop(0)\n    N -= 1\n    if N == 0:\n        break\nprint(sum(arr))","N, K = map(int, input().split())\nH = map(int,input().split())\nprint(sum(sorted(H, reverse=True)[K::]))","import math\n\nn,k=map(int,input().split())\nenemys = list(map(int,input().split()))\n\nenemys.sort(reverse=True)\ncount = 0\nfor e in enemys:\n  if(k > 0):\n    k -= 1\n  else:\n    count += e\n\nprint(count)\n\n","A = list(input().split(\" \"))\nN = int(A[0])\nK = int(A[1])\nH = list(input().split(\" \"))\nsum = 0\nH.sort()\nfor i in range(K):\n    H[N-1-i] = 0\nfor i in range(N):\n    sum += int(H[i])\nprint(sum)\n","A,B,X = map(int, input().split())\n\nimport math\ndef d(N): #\u6841\u3092\u6c42\u3081\u308b\n    return int(math.log10(N)) +1\n\n#2\u5206\u63a2\u7d22\u6cd5\nN_min =0\nN_max =10**9\nwhile 1<(N_max - N_min):\n    N=(N_max + N_min)\/\/2\n    if A*N +B*d(N) >X:\n        N_max = N\n    else:\n        N_min =N\nif A * N_max + B * d(N_max) <X:\n    print(N_max)\nelse:\n    print(N_min)","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())),reverse=True)\n\ns = sum(H[K:])\nprint(s)","N,K=map(int,input().split())\n\nH=list(map(int,input().split()))\n\nH.sort(reverse=True)\n\nfor i in range(K):\n    try:\n        H.pop(0)\n    except:\n        pass\n\nprint(sum(H))","n,k = map(int,input().split())\nif n < k: k = n\nh = list(map(int,input().split()))\nh = sorted(h,reverse = True)\nfor i in range(k):\n    h[i] = 0\nprint(sum(h))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort(reverse=True)\nprint(sum(h[k:]))\n","n, k = map(int, input().split())\nh = list(map(int,input().split()))\nif k == 0:\n    print(sum(h))\nelif (n-k) > 0:\n    m = max(h)\n    h.remove(m)\n    print(sum(h))\nelse:\n    print(0)","n,k = [int(x) for x in input().split()]\nm = [int(x) for x in input().split()]\nm.sort()\nif n<k:\n  k = n\nprint(sum(m[0:n-k]))","N,K = map(int,input().split())\nH = list(map(int,input().split()))\n\nH.sort()\nH.reverse()\n\nprint(sum(H[K:]))\n","n, k = map(int, input().split())\nh = sorted(list(map(int, input().split())), reverse=True)\nprint(sum(h[k:]))","def main():\n    n,k=map(int,input().split())\n    h = list(map(int,input().split()))\n\n    h.sort()\n    if k >= n:\n        print(0)\n        return\n    for i in range(1,k+1):\n        h.pop(-1)\n    print(sum(h))\nif __name__=='__main__':\n    main()\n","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nif n<=k:\n    print(0)\nelse:\n    h.sort()\n    for i in range(k):\n        h.pop(-1)\n    print(sum(h))","h, n = list(map(int,(input().split())))\na = list(map(int,(input().split())))\nimport sys\nsys.setrecursionlimit(10 ** 9) #\u518d\u5e30\u7528\n\na.sort()\n\nif h >= n and n !=0 :\n  for i in range(n):\n    a.pop()\n    ans = sum(a)\nelif n ==0:\n  ans = sum(a)\nelse:\n  ans = 0\n  \nprint(ans)","import bisect\nimport numpy as np\nimport math\nimport itertools\ndef main():\n    N, K = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    if N <= K:\n        print(0)\n    elif K == 0:\n        print(sum(H))\n    else:\n        H = sorted(H)\n        H = H[:-K]\n        print(sum(H))\n\n\n    return 0\nif __name__ == '__main__':\n    main()","n, k = map(int, input().split())\nH = sorted(list(map(int, input().split())), reverse=True)\n\nprint(sum(H[k:]))\n","import sys\ninput = sys.stdin.readline\nn,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nans=0\nfor i in range(n-k):\n    ans+=h[i]\nprint(ans)\n"],"formatted_programs":["N, K = map(int, input().split())\nList = [int(x) for x in input().split()]\n\nif K == 0:\n    print(sum(List))\n    exit()\n\nif N <= K:\n    print('0')\n    exit()\n\nList.sort(reverse=True)\ndel List[:K]\n\nprint(sum(List))\n","N,K=map(int,input().split())\nH=list(map(int,input().split()))\nH.sort(reverse=True)\nH.remove(H[0:K])\nprint(K+sum(H[K:]))","n,k=map(int,input().split())\nhl=sorted(list(map(int,input().split())))\nc=-k if k>0 else n\nprint(sum(hl[:c]))","# https:\/\/atcoder.jp\/contests\/abc153\/tasks\/abc153_c\nimport sys\nsys.setrecursionlimit(12345678)\nimport itertools\nfrom collections import Counter\nfrom collections import defaultdict\nfrom collections import deque\nimport bisect\nfrom heapq import heappush, heappop\n\n\ndef main():\n    n, k = map(int, input().split())\n    hl = list(map(int, input().split()))\n    hl.sort()\n    hl = hl[:(n - k)]\n    print(sum(hl))\n    return\n\n\nif __name__ == '__main__':\n    main()\n","import sys\nn, k = map(int, sys.stdin.readline().split())\nli = list(map(int, sys.stdin.readline().split()))\nl = len(li)\nt = 0\nif l > k:\n  li.sort().reverse()\n  t = sum(li[k:])\nprint(t)\n  ","_, K = map(int, input().split())\nv = list(map(int, input().split()))\nv.sort()\n\nif len(v) <= K:\n  print(0)\nelif K == 0:\n  print(sum(v))\nelse:\n  print(sum(v[:-K]))\n","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh=sorted(h,reverse=True)\nans=0\nif k>=n:\n    ans=0\nelse:\n    h=h[k:]\n    ans=sum(h)\nprint(ans)","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nans=0\nh.reverse()\nif k<n:\n  for i in range(k,n):\n    ans+=h[i]\nprint(ans)","N,K = map(int,input().split())\nhp = list(map(int,input().split()))\nhp_sort = sorted(hp,reverse = True)\nif K < len(hp):\n    for i in range(K):\n        del hp_sort[i]\n    print(sum(hp_sort))\nelse:\n    print('0')\n","N, K = map(int, input().split())\nH = sorted(map(int, input().split()))\nif K != 0:\n    print(sum(H[:-K]))\nelse:\n    print(sum(H))","n, k = map(int, input().split())\nH = sorted(list(map(int,input().split())))\nif k<=n:\n    print(sum(H[:n-k]))\nelse:\n    print(0)","import math\n\nN, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\nif K >= N:\n    print(0)\nelif K >= 1:\n    for i in range(K):\n        H.pop(i)\n    print(sum(H))\nelse:\n    print(sum(H))\n","N, K = map(int, input().split())\nHs = list(map(int, input().split()))\nHs.sort(reverse=True)\nfor i in range(K):\n  Hs[i] = 0\nprint(sum(Hs))","N,K = map(int, input().split())\n*H, = map(int, input().split())\n\n\nH.sort(reverse=True)\n\nans = 0\n\nfor i in range(K, len(H), 1):\n\n    ans = ans + H[i]\n\nprint(ans)","n, k = map(int, input().split())\nif k == 0:\n  H = sum(map(int, input().split()))\nelse:\n  H = sum(sorted(map(int, input().split()))[:-k])\nprint(H)\n\n","a,b=map(int,input().split())\nA=[int(x) for x in input().split()]\nA.sort()\nif a>=b:\n  print(sum(A[:(a-b)]))\nelse:\n  print(0)","N, K = map(int, input().split())\nH = list(map(int, input().split()))\nH.sort(reverse = True)\nans = 0\n\nfor i in range(K, N):\n  ans += H[i]\n\nprint(ans)","import sys\n\nn,k=map(int,input().split())\ns=list(map(int,input().split()))\ns.sort(reverse=True)\n\nif k<len(s):\n  for i in range(k):\n    s[i]=0\nelse:\n  for i in range(n):\n    print(0)\n    sys.exit()\n\nprint(sum(s))","N, K = map(int,input().split())\nH = list(map(int, input().split()))\n\nif K >= N:\n  print(0)\n \nelif K == 0:\n  print(sum(H))\n\nelse:\n  H.sort\n  print(sum(H[K+1:N-1]))","n,k = map(int,input().split())\nh = list(map(int, input().split()))\n\nif n <= k:\n    print(0)\n    exit()\nh.sort()\nprint(sum(h[:n-k]))","n,k = [int(x) for x in input().split()]\nm = [int(x) for x in input().split()]\nm.sort()\nprint(sum(m[0:n-k]))","N,K=map(int,input().split())\nH=list(map(int,input().split()))\nH.sort()\nfor _ in range(min(N,K)): H.pop()\nprint(sum(H))","N,K=(int(x) for x in input().split())\na=list(int(y) for y in input().split())\nb=sorted(a)\nif K<N:\n    print(sum(b[0:N-K]))\nelse:\n    print(0)","n,k = map(int,input().split())\nh = list(map(int,input().split()))\nh.sort()\nfor i in range(k):\n    h[n-i-1] = 0\nprint(sum(h))","n,k=map(int,input().split())\nhp=[int(i) for i  in input().split()]\n\nif n<=k:\n  ans=0\nelse:\n  hp.sort()\n  ans=sum(hp[:n-k])\nprint(ans)\n  ","n,k = map(int,input().split())\nh = sorted(list(map(int,input().split())))\nif k > 0:\n    print(sum(h[:-k]))\nelse:\n    print(sum(h))\n    ","H,N=map(int, input().split())\nl=list(map(int, input().split())) \n\nimport math\n\n# H,N=3,1\n# l=[4,1,5]\n\nimport sys\nif N>=len(l):\n    print(0)\n    sys.exit()\n\n    \nsort_l=sorted(l)\ndelete_l=sort_l[:len(l)-N]\nprint(sum(delete_l))","n, k = map(int, input().split())\nhn = list(map(int, input().split()))\n\nif k >= n:\n  print(0)\nelse:\n  hn.sort(reverse=True)\n  print(sum(hn[k:]))\n  ","n,k=(int(i) for i in input().split())\nh=[0 for i in range(k)]\np=0\nfor i in input().split():\n  p+=i\n  if h[0]<i:\n    h[0]=i\n    h.sort()\nprint(p-sum(h))","import os\nimport statistics\ndef quickSort(arr):\n   # \u914d\u5217\u306e\u30e1\u30b8\u30a2\u30f3\u3088\u308a\u5c0f\u3055\u3044\u8981\u7d20\u3092\u96c6\u3081\u305f\u914d\u5217\n    left = []\n\n    # \u914d\u5217\u306e\u30e1\u30b8\u30a2\u30f3\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u3092\u96c6\u3081\u305f\u914d\u5217\n    right = []\n\n    # \u518d\u5e30\u306e\u505c\u6b62\u6761\u4ef6\n    # \u518d\u5e30\u7684\u306b\u914d\u5217\u3092\u5206\u5272\u3057\u305f\u5f8c\u306e\u3001\u8981\u7d20\u6570\u304c1\u4ee5\u4e0b\u306b\u306a\u3063\u305f\u3089\u505c\u6b62\u3059\u308b\n    if len(arr) <= 1:\n        return arr\n\n    # \u914d\u5217\u306e\u4e2d\u592e\u5024(\u30e1\u30b8\u30a2\u30f3)\u3092\u53d6\u5f97\u3059\u308b\n    median = int(statistics.median(arr))\n\n    # \u914d\u5217\u5185\u306b\u542b\u307e\u308c\u308b\u4e2d\u592e\u5024\u306e\u500b\u6570\u3092\u6570\u3048\u308b\u305f\u3081\u306e\u5909\u6570\n    medianFlg = 0\n\n    for element in arr:\n        # \u914d\u5217\u306e\u8981\u7d20(element)\u304c\u4e2d\u592e\u5024\u3088\u308a\u5c0f\u3055\u3044\u306e\u3067\u3001\n        # \u914d\u5217left\u306b\u5024\u3092\u683c\u7d0d\u3059\u308b\n        if element < median:\n            left.append(element)\n        # \u914d\u5217\u306e\u8981\u7d20(element)\u304c\u4e2d\u592e\u5024\u3088\u308a\u5927\u304d\u3044\u306e\u3067\u3001\n        # \u914d\u5217right\u306b\u5024\u3092\u683c\u7d0d\u3059\u308b\n        elif element > median:\n            right.append(element)\n        else:\n        # element\u304c\u914d\u5217\u306e\u4e2d\u592e\u5024\u306e\u5834\u5408\u306f\u3001\n        # \u8fd4\u308a\u5024\u306b\u52a0\u3048\u308b\u4e2d\u592e\u5024\u306e\u500b\u6570\u5206\u3060\u3051\u3001\u30d5\u30e9\u30b0\u306b+1\u3057\u7d9a\u3051\u308b\n            medianFlg += 1\n\n    # print(left)\n    # print(right)\n\n    # \u914d\u5217left\u3001\u914d\u5217right\u6bce\u306b\u518d\u5e30\u3092\u884c\u3044\n    # \u914d\u5217\u3092\u5c0f\u3055\u306a\u914d\u5217\u306b\u533a\u5207\u308b\n    left = quickSort(left)\n    right = quickSort(right)\n\n    # \u914d\u5217left\u3001\u4e2d\u592e\u5024\u306e[median]\u3001\u914d\u5217right\u3092\u7d50\u5408\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\n    return left + [median] * medianFlg + right\n\nN,K=map(int,input().split())\nh=map(int,input().split())\nH=list(h)\nM=quickSort(H)\nc=0\nif N-K==0:\n print(c)\nelse:\n for i in range(N-K):\n  c+=M[i]\n print(c)","N, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\n\nif K >= N:\n    print(0)\nelse:\n    print(sum(H[K:]))\n","inp = list(map(int, input().split()))\nN = inp[0]\nK = inp[1]\nH = list(map(int, input().split()))\n\nH.sort(reverse=True)\n\nsum = 0\nfor count in range(N):\n        if count >= K:\n            sum += H[count]\n\nprint(sum)\n    ","n ,k = map(int,input().split())\nh = list(map(int,input().split()))\nflag = 0\nans = 0\nfor i in range(k):\n  if n <= k:\n    break\n  re = max(h)\n  h.remove(re)\n  flag += 1\nfor i in range(n - flag):\n  if n <= k:\n    ans = 0\n  else:\n    ans += h[i]\nprint(ans)","[N, K] = [int(i) for i in input().split()]\nH = [int(i) for i in input().split()]\n\nif N <= K:\n    print(0)\nelse:\n    h = list(sorted(H))\n    t = sum(h[0:N-K])\n    print(t)","n, k=map(int, input().split())\nh=list(map(int, input().split()))\nn-=k\nh.sort\nhp=0\nfor i in range(n):\n  hp+=h[i]\nprint(hp)","n,k=map(int,input().split())\nh=list(map(int,input().split()))\n\nh.sort()\nh.reverse()\n\ndel h[:k]\nprint (sum(h))","N, K = map(int, input().split())\nH = sorted([int(x) for x in input().split()])\n#print(H)\n\nfor i in range(K):\n\tH.pop((N-1)-i)\n\n#print(H)\n\nprint(sum(H))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort()\n\nif k == 0:\n    ans = sum(h)\nelse:\n    ans = sum(h[:-k])\nprint(ans)\n","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())),reverse=True)\nprint(sum(H[K:]))","s = [list(map(int,input().split())) for i in range(2)]\nt = s[0]\nN = t[0]\nK = t[1]\nH = s[1]\nfor i in range(K):\n    a = max(H)\n    H.remove(a)\nprint(sum(H))","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh=sorted(h)\nif n<=k:\n    print(0)\nelse:\n    ans=0\n    for i in range(n-k):\n        ans+=h[i]\n    print(ans)\n\n\n    \n        \n        \n    \n    \n    \n    \n        \n","n, k = map(int, input().split())\nh = []\nh.append(map(int, input().split()))\ncount = 0\n\nwhile len(h) > 0:\n  if k > 0:\n    k -= 1\n    h.remove(max(h))\n    continue\n  else:\n    for i in h:\n      count += i\n      \nprint(count)","n, k = map(int, input().split())\nl = list(map(int, input().split()))\nl.sort(reverse=True)\n\nif k >= len(l):\n  print(0)\nelse:\n  print(sum(l[k:]))\n  ","#!\/user\/bin\/env python\n#python\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3057\u3066\u3044\u308b\n\n# -*- coding: utf-8 -*-\n\"\"\"\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306fPython\u3092\u66f8\u304f\u969b\u306e\u30c6\u30f3\u30d7\u30ec\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3092\u30b3\u30d4\u30da\u3057\u3066\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u306a\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u5b57\u4e0b\u3052\u3057\u306a\u3044\u3053\u3068\uff01\uff01\n\"\"\"\n\n__author_ = 'Maruta Yuzuha'\n__version_ = '1.0.0'\n__date__ = '2019\/12\/25'\n\ndef main():\n    \"\"\"\n    \u3053\u3053\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u89e3\u8aac\u3092\u884c\u3046\n     >>main()\n    Hello world.\n    0\n    \"\"\"\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n\n    a = 0  #\u52dd\u3064\u307e\u3067\u306e\u56de\u6570\n    b = s[0]#\u4f55\u5339\u304b\n    d = s[1]#\u5fc5\u6bba\u6280\u306e\u56de\u6570\n    # c = sum(t)\n    # d = int(s[1])\n    # for i in range(int(s[1])):\n    #     if sum(t) != 0:\n    #         if d != 0:\n    #             c -= max(t)\n    #             for j in range(int(s[0])):\n    #                 if max(t) == t[j]:\n    #                     t[j] = 0\n    #             d -= 1\n    #         else:\n    #             break\n    e = 0  #Max\n    f = 0# Max\u306e\u3044\u3061\n    for j in range(d):  #\u5fc5\u6bba\u6280\u306e\u56de\u6570\n        c = sum(t)\n        if c != 0:\n            for i in range(b):\n                if e < t[i]:\n                    e = t[i]\n                    f = i\n            t[f] = 0\n            e = 0\n            f = 0\n        else:\n            break\n    a += sum(t)\n    print(a)\n    return 0\n\nif __name__ == '__main__':\n    #\u4e0a\u8a18\u306eif\u306e\u8a18\u8ff0\u306b\u3088\u3063\u3066\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u304c\u8d77\u52d5\u3055\u308c\u305f\u6642\u3060\u3051\u5b9f\u884c\u3059\u308b\u90e8\u5206\u306b\u306a\u308b\u3002\n    #\u3061\u306a\u307f\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u304c \"\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\"\u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u6642\u306b\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3001\n\n    #\u5358\u4f53\u30c6\u30b9\u30c8:\u30e2\u30b8\u30e5\u30fc\u30eb\u306edocstring(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u6587\u5b57\u5217)\u306b\u8a18\u8f09\u3055\u308c\u305f\u5168\u3066\u306e\u5bfe\u8a71\u5b9f\u884c\u4f8b\u304c\u66f8\u304b\u308c\u3066\u3044\u308b\u901a\u308a\u306b\u52d5\u4f5c\u3059\u308b\u304b\u3092\u78ba\u8a8d\n    #python \u30d5\u30a1\u30a4\u30eb\u540d -v\n    import doctest\n    doctest.testmod()\n\n    #\u5b9f\u969b\u306bmain()\u3092\u547c\u3073\u51fa\u3057\u3066\u3001\u7d50\u679c\u3092\u5f97\u3066\u3001\u305d\u306e\u7d50\u679c\u3067Python\u30b7\u30b9\u30c6\u30e0\u3092\u7d42\u3048\u308b\n    import sys\n    sys.exit(main())","n,k = map(int,input().split())\nh = [ int(i) for i in input().split() ]\n\nh = sorted(h)\n\nleft = n-k\nans = 0\nif left >= 0:\n\tans = sum(h[:left])\nprint(ans)\n","def resolve():\n    n, k = map(int, input().split())\n    h = sorted(list(map(int, input().split())))\n    print(sum(h[:max(0, n - k)]))\n\n\nif __name__ == '__main__':\n    resolve()\n","import math\n\nN, K = map(int,input().split())\nH = list(map(int,input().split()))\n\nh = sorted(H)\ni = len(H)-K\n\nif K <= N: \n\tH_count = sum(h[:i])\n\tprint(H_count)\nelse:\n\tprint(0)\n","N,K=[int(i) for i in input().split(\" \")]\nH=[int(i) for i in input().split(\" \")]\nH.sort()\nH.reverse()\nprint(sum(H[K:]))\n","n,k = map(int,input().split())\nh_list = list(map(int,input().split()))\n\nh_list.sort(reverse=True)\n\nif k >= n:\n    print(0)\nelse:\n    print(sum(h_list[k:]))","N, K = map(int, input().split())\nH = list(map(int, input().split()))\nprint(sum(sorted(H, reverse=True)[K:]))","n, k = map(int, input().strip().split())\na = sorted(map(int, input().split()), key= lambda x: -x)\nprint(sum(a) - sum(a[:k]))","N, K = map(int,input().split())\nH = list(input().split())\n \nif K >= N:\n    print(0)\nelif N > K:\n    if K == 0:\n        print(sum(int(i) for i in H))\n    else:\n      \t# \u3053\u3053\u3092\u8ffd\u52a0\n      \tfor i in range(k):\n        \tH.remove(max(H))\n        print(sum(int(i) for i in H))","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nh.reverse()\nprint(sum(h[k:]))","il1 = [int(k) for k in input().split()]\nN = il1[0]\nK = il1[1]\nH = [int(k) for k in input().split()]\n\nH.sort(reverse=True)\n\nif len(H) <= K:\n    counter = len(H)\nelse:\n    counter = K\n\nfor k in range(counter):\n    H[k] = 0\n\nS = sum(H)\n\nprint(S)\n","N,K=map(int,input().split())\nS=list(map(int,input().split()))\ns=sorted(S)\n\nif K==0:\n\tprint(sum(s))\nelif K!=0:\n\tans=sum(s[:-K])\n\tprint(ans)","n,k = map(int,input().split())\na = list(map(int,input().split()))\nif n <= k:\n  print(0)\nelse:\n  a.sort()\n  print(sum(a[:n-k]))","N,K=(int(x) for x in input().split())\nH=list(map(int, input().split()))\nA = sorted(H)\ni=0\na=N-K\nif K >= N:\n    print('0')\n\nelse:\n    B=A[:a]\n    C=sum(B)\n    print(C)","N,K = map(int,input().split())\nL = list(map(int,input().split()))\nL.sort()\nL.reverse()\ncount = K\nans = 0\nfor i in range(len(L)):\n  if count != 0:\n    L[i] = 0\n    ans += 1\n    count -= 1\n    if sum(L) == 0:\n      count = 0\n      break\n  else:\n    break\nprint(count+sum(L))","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())))[::-1]\nprint(sum(H[K:]))","import sys\n\nstdin = sys.stdin\n\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nn, k = na()\nk = min(k, n)\nh = na()\nh.sort()\nprint(sum(h[0:n-k]))\n\n","n,k=map(int,input().split())\na=sorted(list(map(int,input().split())))\nif k==0:\n    print(sum(a))\nelse:\n    print(sum(a[0:-k]))","n,k = map(int,input().split())\nh = list(map(int,input().split()))\nH = sorted(h, reverse=True)\nif k >= len(H):\n    print(0)\nif k<len(H):\n    del H[:k]\n    print(sum(H))","N,K = map(int,input().split())\nH = list(map(int,input().split()))\nH.sort()\nif K> 0:\n    del H[-K:]\nprint(sum(H))\n","def main():\n    n, k = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    h_list.sort()\n\n    for i in range(k):\n        h_list.pop()\n        if not h_list:\n            print(0)\n            return\n    ans = sum(h_list)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","N, K = map(int, input().split())\nx = list(map(int, input().split()))\nx.sort(reverse=True)\nX = 0\n\nif N <= K:\n  X = 0\nelse:  \n  for i in range(N-K):\n    X += x[i+K] \nprint(X)","import math\n\ndef makelist(n, m):\n    return [[0 for _ in range(m)] for _ in range(n)]\n\n# n = int(input())\n# \n# s = input()\n\nN, K = list(map(int, input().split()))\nH = list(map(int, input().split()))\nH.sort()\n\nhoge = max(0, N - K)\nans = sum(H[:hoge])\nprint(ans)\n","n, k = map(int, input().split())\nH = sorted(list(map(int, input().split())))\nif n > k:\n    H = H[:n-k]\nelse:\n    H = []\nprint(sum(H))","H,N=map(int, input().split())\nl=list(map(int, input().split())) \n\nimport math\n\n# H,N=3,1\n# l=[4,1,5]\n\nimport sys\nif N>=len(l):\n    print(l)\n    sys.exit()\n\n    \nsort_l=sorted(l)\ndelete_l=sort_l[:len(l)-N]\nscore=0\nfor i in delete_l:\n    score+=(math.ceil(i\/H))\nprint(score)\n","N, K = map(int, input().split())\nhhh = list(map(int, input().split()))\nhhh.sort()\nprint(sum(hhh[:-K]) if K > 0 else sum(hhh))\n","# \u521d\u671f\u5165\u529b\nN,K = (int(x) for x in input().split(\" \"))\nH = list(map(int, input().split()))\ntuujou_attack = 1\n\n# N\u7a2e\u985e\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u3001K\u56de\u306e\u5fc5\u6bba\u6280\u3001\u30e2\u30f3\u30b9\u30bf\u30fc\u306f\u3000H\u3000\u306e\u4f53\u529b\n# \u4f53\u529b\u306e\u591a\u3044\u30e2\u30f3\u30b9\u30bf\u30fc\u304b\u3089\u5fc5\u6bba\u6280\u3067\u5012\u3059\u3002\u5fc5\u6bba\u6280\u304c\u4f7f\u3048\u306a\u304f\u306a\u3063\u305f\u3089\u901a\u5e38\u653b\u6483\nnokori_kaisu = 0\nH_sorted = sorted(H)\nif N <= K:\n    nokori_kaisu = 0\nelse:\n    nokori_hissatuwaza = N -K\n    # del H_sorted[nokori_hissatuwaza:]\n    nokori_kaisu = sum( H_sorted[:nokori_hissatuwaza] ) # \u4f53\u529b\u5c11\u306a\u3044\u307b\u3046\u304b\u3089\u3000N-K\u3000\u307e\u3067\u3001\u901a\u5e38\u653b\u6483\u300c\uff11\u300d\n\nprint(nokori_kaisu)\n# print(H_sorted)","n,k=map(int,input().split())\na=list(int(x) for x in input().split())\na.sort()\ns=0\nif n <= k:\n\tprint(0)\nelse:\n\t\ts = sum(a[:n-k])\n\t\tprint(s)\n","a = list(map(int, input().split()))\nb = list(map(int, input().split()))\ny=(a[0] if a[1]>=a[0] else a[1])\nfor i in range(y):\n    b.remove(max(b))\nprint(sum(b))","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())))\n\nif K >= N:\n  print(0)\nelse:\n  print(sum(H[:N-K]))\n","n,k=map(int,input().split(' '))\na=list(map(int,input().split(' ')))\na.sort()\nsum=0\nfor i in range(n-k):\n\tsum+=a[i]\nprint(sum)","import sys\n\n\ndef InS(): return input()\n\n\ndef InL(): return list(map(int, input().split()))\n\n\ndef InI(): return int(input())\n\n\nN, K = InL()\nH = InL().sort()\n\nif K >= N:\n    print(0)\n    sys.exit()\n\nprint(sum(H[0:N-K]))\n","N, K = list(map(int, input().split()))\nH = list(map(int, input().split()))\n\ncnt = 0\n\nif N <= K:\n  print(0)\nelse:\n  for i in range(K):\n    H.remove(max(H))\n\n  cnt += sum(H)\n\n  print(cnt)\n","N, K = map(int, input().split())\nH = list(map(int, input().split()))\n\nif K >= N:\n    print(0)\nelif K == 0:\n    print(sum(H))\nelse:\n    H.sort()\n    print(sum(H[:N - K]))","N,K = list(map(int, input().split()))\nH = list(map(int, input().split()))\n\nif(N<=K):\n  print(0)\nelse:\n  for i in range(K):\n    Hmax = max(H)\n    H.remove(Hmax)\n  print(sum(H))","n,k = map(int,input().split())\nhealth = list(map(int,input().split()))\ns_health = sorted(health,reverse=True)\nif n <= k:\n    print(0)\n    exit()\n    \nfor i in range(k):\n    del s_health[0]\n\nprint(sum(s_health))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\n\nh.sort(reverse=True)\n\nif n <= k:\n    print(0)\nelse:\n    print(sum(h[k:]))","n, k = map(int, input().split())\nhps = sorted(list(map(int, input().split())), reverse=True)\nif n <= k:\n  print(0)\nelse:\n  print(sum(hps[k:]))","[H, N] = [int(x) for x in input().split()]\nA = list(map(int, input().split()))\narr = sorted(A, reverse=True)\nwhile N > 0:\n    arr.pop(0)\n    N -= 1\n    if N == 0:\n        break\nprint(sum(arr))","N, K = map(int, input().split())\nH = map(int,input().split())\nprint(sum(sorted(H, reverse=True)[K::]))","import math\n\nn,k=map(int,input().split())\nenemys = list(map(int,input().split()))\n\nenemys.sort(reverse=True)\ncount = 0\nfor e in enemys:\n  if(k > 0):\n    k -= 1\n  else:\n    count += e\n\nprint(count)\n\n","A = list(input().split(\" \"))\nN = int(A[0])\nK = int(A[1])\nH = list(input().split(\" \"))\nsum = 0\nH.sort()\nfor i in range(K):\n    H[N-1-i] = 0\nfor i in range(N):\n    sum += int(H[i])\nprint(sum)\n","A,B,X = map(int, input().split())\n\nimport math\ndef d(N): #\u6841\u3092\u6c42\u3081\u308b\n    return int(math.log10(N)) +1\n\n#2\u5206\u63a2\u7d22\u6cd5\nN_min =0\nN_max =10**9\nwhile 1<(N_max - N_min):\n    N=(N_max + N_min)\/\/2\n    if A*N +B*d(N) >X:\n        N_max = N\n    else:\n        N_min =N\nif A * N_max + B * d(N_max) <X:\n    print(N_max)\nelse:\n    print(N_min)","N,K = map(int,input().split())\nH = sorted(list(map(int,input().split())),reverse=True)\n\ns = sum(H[K:])\nprint(s)","N,K=map(int,input().split())\n\nH=list(map(int,input().split()))\n\nH.sort(reverse=True)\n\nfor i in range(K):\n    try:\n        H.pop(0)\n    except:\n        pass\n\nprint(sum(H))","n,k = map(int,input().split())\nif n < k: k = n\nh = list(map(int,input().split()))\nh = sorted(h,reverse = True)\nfor i in range(k):\n    h[i] = 0\nprint(sum(h))","n, k = map(int, input().split())\nh = list(map(int, input().split()))\nh.sort(reverse=True)\nprint(sum(h[k:]))\n","n, k = map(int, input().split())\nh = list(map(int,input().split()))\nif k == 0:\n    print(sum(h))\nelif (n-k) > 0:\n    m = max(h)\n    h.remove(m)\n    print(sum(h))\nelse:\n    print(0)","n,k = [int(x) for x in input().split()]\nm = [int(x) for x in input().split()]\nm.sort()\nif n<k:\n  k = n\nprint(sum(m[0:n-k]))","N,K = map(int,input().split())\nH = list(map(int,input().split()))\n\nH.sort()\nH.reverse()\n\nprint(sum(H[K:]))\n","n, k = map(int, input().split())\nh = sorted(list(map(int, input().split())), reverse=True)\nprint(sum(h[k:]))","def main():\n    n,k=map(int,input().split())\n    h = list(map(int,input().split()))\n\n    h.sort()\n    if k >= n:\n        print(0)\n        return\n    for i in range(1,k+1):\n        h.pop(-1)\n    print(sum(h))\nif __name__=='__main__':\n    main()\n","n,k=map(int,input().split())\nh=list(map(int,input().split()))\nif n<=k:\n    print(0)\nelse:\n    h.sort()\n    for i in range(k):\n        h.pop(-1)\n    print(sum(h))","h, n = list(map(int,(input().split())))\na = list(map(int,(input().split())))\nimport sys\nsys.setrecursionlimit(10 ** 9) #\u518d\u5e30\u7528\n\na.sort()\n\nif h >= n and n !=0 :\n  for i in range(n):\n    a.pop()\n    ans = sum(a)\nelif n ==0:\n  ans = sum(a)\nelse:\n  ans = 0\n  \nprint(ans)","import bisect\nimport numpy as np\nimport math\nimport itertools\ndef main():\n    N, K = map(int, input().split())\n    H = list(map(int, input().split()))\n\n    if N <= K:\n        print(0)\n    elif K == 0:\n        print(sum(H))\n    else:\n        H = sorted(H)\n        H = H[:-K]\n        print(sum(H))\n\n\n    return 0\nif __name__ == '__main__':\n    main()","n, k = map(int, input().split())\nH = sorted(list(map(int, input().split())), reverse=True)\n\nprint(sum(H[k:]))\n","import sys\ninput = sys.stdin.readline\nn,k=map(int,input().split())\nh=list(map(int,input().split()))\nh.sort()\nans=0\nfor i in range(n-k):\n    ans+=h[i]\nprint(ans)\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3>\n<p>Given is a permutation <var>P_1, \\ldots, P_N<\/var> of <var>1, \\ldots, N<\/var>.\nFind the number of integers <var>i<\/var> <var>(1 \\leq i \\leq N)<\/var> that satisfy the following condition:  <\/p>\n<ul>\n<li>For any integer <var>j<\/var> <var>(1 \\leq j \\leq i)<\/var>, <var>P_i \\leq P_j<\/var>.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>P_1, \\ldots, P_N<\/var> is a permutation of <var>1, \\ldots, N<\/var>.  <\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3>\n<p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>P_1<\/var> <var>...<\/var> <var>P_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3>\n<p>Print the number of integers <var>i<\/var> that satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>5\n4 2 5 1 3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>3\n<\/pre>\n<p><var>i=1<\/var>, <var>2<\/var>, and <var>4<\/var> satisfy the condition, but <var>i=3<\/var> does not - for example, <var>P_i &gt; P_j<\/var> holds for <var>j = 1<\/var>.<br\/>\nSimilarly, <var>i=5<\/var> does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>4\n4 3 2 1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>4\n<\/pre>\n<p>All integers <var>i<\/var> <var>(1 \\leq i \\leq N)<\/var> satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>6\n1 2 3 4 5 6\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>1\n<\/pre>\n<p>Only <var>i=1<\/var> satisfies the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4<\/h3><pre>8\n5 7 4 2 6 8 1 3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4<\/h3><pre>4\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5<\/h3><pre>1\n1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5<\/h3><pre>1\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 300 points\n\n\nProblem Statement\nGiven is a permutation P_1, \\ldots, P_N of 1, \\ldots, N.\nFind the number of integers i (1 \\leq i \\leq N) that satisfy the following condition:  \n\nFor any integer j (1 \\leq j \\leq i), P_i \\leq P_j.\n\n\n\n\n\nConstraints\n\n1 \\leq N \\leq 2 \\times 10^5\nP_1, \\ldots, P_N is a permutation of 1, \\ldots, N.  \nAll values in input are integers.\n\n\n\n\n\n\n\nInput\nInput is given from Standard Input in the following format:\nN\nP_1 ... P_N\n\n\n\n\n\nOutput\nPrint the number of integers i that satisfy the condition.\n\n\n\n\n\n\nSample Input 15\n4 2 5 1 3\n\n\n\n\n\nSample Output 13\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\nSimilarly, i=5 does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.\n\n\n\n\n\nSample Input 24\n4 3 2 1\n\n\n\n\n\nSample Output 24\n\nAll integers i (1 \\leq i \\leq N) satisfy the condition.\n\n\n\n\n\nSample Input 36\n1 2 3 4 5 6\n\n\n\n\n\nSample Output 31\n\nOnly i=1 satisfies the condition.\n\n\n\n\n\nSample Input 48\n5 7 4 2 6 8 1 3\n\n\n\n\n\nSample Output 44\n\n\n\n\n\n\nSample Input 51\n1\n\n\n\n\n\nSample Output 51\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3>\n<p>Given is a permutation <var>P_1, \\ldots, P_N<\/var> of <var>1, \\ldots, N<\/var>.\nFind the number of integers <var>i<\/var> <var>(1 \\leq i \\leq N)<\/var> that satisfy the following condition:  <\/p>\n<ul>\n<li>For any integer <var>j<\/var> <var>(1 \\leq j \\leq i)<\/var>, <var>P_i \\leq P_j<\/var>.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3>\n<ul>\n<li><var>1 \\leq N \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>P_1, \\ldots, P_N<\/var> is a permutation of <var>1, \\ldots, N<\/var>.  <\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3>\n<p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>P_1<\/var> <var>...<\/var> <var>P_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3>\n<p>Print the number of integers <var>i<\/var> that satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>5\n4 2 5 1 3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>3\n<\/pre>\n<p><var>i=1<\/var>, <var>2<\/var>, and <var>4<\/var> satisfy the condition, but <var>i=3<\/var> does not - for example, <var>P_i &gt; P_j<\/var> holds for <var>j = 1<\/var>.<br\/>\nSimilarly, <var>i=5<\/var> does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>4\n4 3 2 1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>4\n<\/pre>\n<p>All integers <var>i<\/var> <var>(1 \\leq i \\leq N)<\/var> satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>6\n1 2 3 4 5 6\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>1\n<\/pre>\n<p>Only <var>i=1<\/var> satisfies the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4<\/h3><pre>8\n5 7 4 2 6 8 1 3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4<\/h3><pre>4\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 5<\/h3><pre>1\n1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 5<\/h3><pre>1\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 300 points\n\n\nProblem Statement\nGiven is a permutation P_1, \\ldots, P_N of 1, \\ldots, N.\nFind the number of integers i (1 \\leq i \\leq N) that satisfy the following condition:  \n\nFor any integer j (1 \\leq j \\leq i), P_i \\leq P_j.\n\n\n\n\n\nConstraints\n\n1 \\leq N \\leq 2 \\times 10^5\nP_1, \\ldots, P_N is a permutation of 1, \\ldots, N.  \nAll values in input are integers.\n\n\n\n\n\n\n\nInput\nInput is given from Standard Input in the following format:\nN\nP_1 ... P_N\n\n\n\n\n\nOutput\nPrint the number of integers i that satisfy the condition.\n\n\n\n\n\n\nSample Input 15\n4 2 5 1 3\n\n\n\n\n\nSample Output 13\n\ni=1, 2, and 4 satisfy the condition, but i=3 does not - for example, P_i > P_j holds for j = 1.\nSimilarly, i=5 does not satisfy the condition, either. Thus, there are three integers that satisfy the condition.\n\n\n\n\n\nSample Input 24\n4 3 2 1\n\n\n\n\n\nSample Output 24\n\nAll integers i (1 \\leq i \\leq N) satisfy the condition.\n\n\n\n\n\nSample Input 36\n1 2 3 4 5 6\n\n\n\n\n\nSample Output 31\n\nOnly i=1 satisfies the condition.\n\n\n\n\n\nSample Input 48\n5 7 4 2 6 8 1 3\n\n\n\n\n\nSample Output 44\n\n\n\n\n\n\nSample Input 51\n1\n\n\n\n\n\nSample Output 51\n\n\n","solve_rate":0.5453875988,"codenet_problem_id":"p02791","input_testcases":{"98":"6\n0 6 2 2 5 27","40":"6\n0 3 2 3 5 18","92":"6\n0 3 2 3 3 27","87":"6\n2 6 9 0 3 11","86":"6\n-1 3 3 4 5 18","88":"6\n0 3 4 3 5 18","46":"6\n0 4 2 2 5 27","44":"6\n0 4 2 3 5 27","42":"6\n0 3 2 3 5 27","56":"6\n0 3 1 3 2 27","38":"6\n0 3 3 3 5 18","95":"6\n2 6 17 0 2 19","52":"6\n0 3 1 2 4 27","48":"6\n0 3 2 2 5 27","36":"6\n-1 3 3 3 5 18","90":"6\n0 3 2 3 5 13","50":"6\n0 3 1 2 5 27","94":"6\n1 4 2 2 5 27","55":"6\n0 33 17 -1 2 19","53":"6\n0 19 17 -1 2 19","51":"6\n0 10 17 -1 2 19","89":"6\n2 6 9 0 2 11","96":"6\n-1 4 2 2 5 27","54":"6\n0 3 1 3 4 27"},"output_testcases":{"98":"1\n","40":"1\n","92":"1\n","87":"2\n","86":"1\n","88":"1\n","46":"1\n","44":"1\n","42":"1\n","56":"1\n","38":"1\n","95":"2\n","52":"1\n","48":"1\n","36":"1\n","90":"1\n","50":"1\n","94":"1\n","55":"2\n","53":"2\n","51":"2\n","89":"2\n","96":"1\n","54":"1\n"},"n_missing":82,"programs":["N = int(input())\n\np_n = list(input().split())\n\nresult = 0\nmin_tmp = N + 1\nfor x in range(N):\n    if p_n[x] < min_tmp:\n        result += 1\n    min_tmp = min(min_tmp,p_n[x])\n\nprint(result)","N = int(input())\nP =list( map(int, input().split()))\ns = P[0]\nt = min(P)\nPmin = [P[0]]\nfor i in range(N - 1):\n  if P[i + 1] < Pmin[i]:\n    Pmin.append(P[i + 1])\n  else:\n    Pmin.append(Pmin[i])\n\ncnt = 0\n\nfor j in range(N):\n  if P[j] == Pmin[j]:\n    cnt += 1\n  else:\n    pass\nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\n\ncounter = 1\nminimum = P[0]\nfor i in range(1, N):\n    minimum = min(minimum, P[i])\n    if minimum==P[i]:\n        counter += 1\nprint(counter)","#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n    int N, value;\n    vector<int> P(N);\n    \n    cin >> N;\n    int minimum = N;\n    int ans =0;\n    for (int i =0; i < N; i++){\n        cin >> P.at(i);\n    }\n\n    for (int i =0; i < N; i++){\n        value = P.at(i);\n        if (value <= minimum){\n            ans += 1;\n            minimum = value;\n        }\n    }\n\n    cout << ans << endl;\n    \n    \n}\n","n=int(input())\nb=list(map(int,input().split()))\ncount=1\ntemp=b[0]\nfor i in range(1,n):  \n  if b[i]==min(b[i],temp):\n    count=count+1\n    temp=b[i]\nprint(count)","N = int(input())\nP = list(map(int, input().split()))\n\ncount = 1\nmini = P[0]\nfor i in range(1, N):\n    mini = min(mini, P[i])\n    if P[i] <= mini:\n        count += 1\n\nprint(count)","N = int(input())\nP = [int(i) for i in input().split()]\n\ncnt = 0 \nminval = int(2e5)+1\n\nfor i in range(N):\n  if minval > P[i]:\n    minval = P[i]\n    cnt += 1\n\nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\nresult = len(P)\nfor i in range(1, N):\n    m = sorted(P[:i])\n    if m[0] < P[i]:\n        result -= 1\nprint(len(result))","N = int(input())\nL = list(map(int,input().split()))\nmin_num = L[0]\ncount = 0\nfor x in L:\n    if(min_num >= x):\n        count +=1\n        min_num = x\nprint(count)\n","def main():\n  n = int(input())\n  l = list(map(int, input().split()))\n  lowest = 2 * (10**5)\n  ans = 0\n  for i in l:\n    if i <= lowest:\n      lowest = i\n      ans += 1\n  print(ans)\n  \nif __name__ == \"__main__\":\n  main()","from math import factorial\nfrom heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef S(): return input()\n\n\ndef MS(): return map(str, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\ndef MS(): return map(str, input().split())\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n\n# show_flg = False\nshow_flg = True\n\np = None\nXY = None\nN = None\n\n\ndef main():\n    N = I()\n    P = LI()\n    MP = [0] * N\n    ans = 0\n\n    for i in range(N):\n        if i == 0:\n            MP[i] = P[i]\n        else:\n            MP[i] = min(MP[i-1], P[i])\n\n    for i in range(N):\n        if MP[i] >= P[i]:\n            # print(i, P[i])\n            ans += 1\n\n    print(ans)\n    # print(MP)\n    # print(P)\n\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\na = list(map(int,input().split()))\n\nmymin = a[0]\ncount = 0\n\nfor i in range(len(a)):\n  if min(mymin, a[i]) == a[i]:\n    mymin = a[i]\n    count += 1\n    \nprint(count)\n\n","n = int(input())\np = list(map(int,input().split()))\nmiss = 0\nmax = p[0]\nfor i in range(n):\n    s = p[0:i]\n    if not s:\n        continue\n    if p[i] > p[i-1]:\n        miss += 1\n        continue\n    if max < p[i]:\n        max = p[i]\n    if p[i] > max:\n        miss += 1\n        continue\n\n    #s = sorted(s,reverse=True)\n    #for j in range(i):\n    #    if p[i] > s[j]:\n    #        miss += 1\n    #        break\n\nprint(n-miss)","n=int(input())\na=list(map(int,input().split()))\nans=0\nb=[10**6]*n\nfor i in range(n):\n    b[i]=a[i]\n    if min(b)==a[i]:\n        ans+=1\nprint(ans)","n=int(input())\np=list(map(int,input().split()))\n\ndef check(a,list):\n    if a==min(list):\n        return 1\n    else:\n        return 0\ncount=0\nfor i in range(n):\n    count+=check(p[i],p[:i+1])\nprint(count)\n        \n","n = int(input())\na = list(map(int, input().strip().split()))\nc = 1\nfor i in range(n-1):\n    if(a[i]>a[i+1]):\n        c += 1\nprint(c)","N = int(input())\nP = list(map(int,input().split()))\na = []\nb = []\nans = 1\nfor i in range(1,len(P)):\n    a = P[:i + 1]\n    b= P[i]\n    a.sort()\n    if b == a[0]:\n        ans += 1\nprint(ans)    ","n = int(input())\np = list(map(int, input().split())) \n\nans = 1\nflag = True\n\nfor i in range(1,n):\n    x = p[0:i]\n    if min(x) >= p[i]:\n        ans += 1\n\nprint(ans)","N = int(input())\nP = list(map(int,input().split()))\ncount = 1\n\nfor i in range(1,N):\n    flag = True\n    for j in range(i):\n        if P[j] < P[i]:\n            flag = False\n            break\n    if flag:\n        #print(i)\n        count += 1            \n\nprint(count)","n=int(input())\n#n,m=map(int,input().split())\n#t=int(input())\npl=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\nmn=pl[0]\nmnl=[]\nfor i in range(n):\n    mn=min(mn,pl[i])\n    mnl.append(mn)\nres=0\nfor i in range(n):\n    if pl[i]<=mnl[i]: res+=1\nprint(res)\n","n=int(input())\np=[int(i) for i in input().split()]\ncp=[min(p[i-1],p[i]) for i in range(1,n)]\nc=0\nfor i in range(1,n):\n  if cp[i-1]>=p[i]:\n    c+=1\nprint(c+1)","import sys\n\nN = int(sys.stdin.readline())\nP = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nmin = P[0]\nfor i in range(N):\n    if P[i] <= min:\n        min = P[i]\n        count += 1\n    \"\"\"\n    else:\n        for j in range(i+1):\n            if P[i] > P[j]:\n                break\n        else:\n            count += 1\n    \"\"\"\nprint(count)","n = int(input())\nx = list(map(int,input().split()))\ncount = 1\nif n >=2:\n  for i in range(n-2):\n    a = min(x(range(0,i,1)))\n    if a >=x[i+1]:\n      count+=1\n    else:\n      count+=0\nelse:\n  print(count)\n  exit()\n  \nprint(count)","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N):\n    count = 0\n    for j in range(i+1):\n        if A[i] <= A[j]:\n            count += 1\n        else:\n            break\n\n    if count == i+1:\n        ans += 1\n\nprint(ans)\n","n = int(input())\nP = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    for j in range(0,i+1):\n        if P[i] > P[j]:\n            break\n    else:\n        ans += 1\nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nbefore_hairetsu = [N+1] * N\n\n#i_before = N + 1\nbefore_hairetsu[0] = N + 1\nfor i in range(N):\n  if(min( min(before_hairetsu) , P[i]) >= P[i]):\n    cnt += 1\n  #i_before = P[i]\n  before_hairetsu.append( P[i] )\n  \nprint(cnt)\n      ","n = int(input())\np = list(map(int, input().split()))\n\ncount = 0\n\n#i=0\nmin0 = p[0]\ncount+=1\n\nfor i in range(1, n):\n    if min0 >= p[i]:\n        count += 1\n    min0 = min(p[i], min0)\n\nprint(count)","n=int(input())\np=list(map(int,input().split()))\ntmp=float(\"inf\")\nans=0\nfor i in range(n):\n    if p[i]<tmp:\n        ans+=1\n        tmp=p[i]\nprint(ans)","N = int(input())\np = list(map(int, input().split()))\n\nmin = N\nscore = 0\nfor i in p:\n    if i <= min:\n        score += 1\n        min = i\n    else:\n        continue\n\nprint(score)\n","N = int(input())\nP = list(map(int,input().split()))\nminP = P[0]\nans = 0\nfor i in range(N):\n    minP = min(minP,P[i])\n    if minP>=P[i]:\n        ans+=1\nprint(ans)","n,p=int(input()),list(map(int,input().split()))\nfor i in range(1,n):p[i]=min(p[~-i],p[i])\nprint(len(set(p)))\n","n = int(input())\nnum = list(map(int, input().split()))\nl = []\nl.append(num[0])\ncount = 1\n\nfor i in range(1,n):\n  if num[i]<=min(a for a in l):\n    count += 1\n    l.append(num[i])\n  else:\n    l.append(num[i])\n\nprint(count)","n = int(input())\np = list(map(int,input().split()))\n\ncnt = 1\nfor i in range(1,n):\n  if p[i] > p[i-1]:\n    continue\n  elif min(p[:i+1]) == p[i]:\n    cnt += 1\nprint(cnt)","n = int(input())\n\ninput_p = [int(x) for x in input().split()]\n\ncount_ans = 0\n\nfor n_ in range(n):\n    if input_p[n_] <= min(input_p[:n_+1]) :\n        count_ans += 1\nprint(count_ans)","n = int(input())\na = list(map(int, input().split()))\na = reversed(a)\n\nans = 0\nb4 = -1000000000\nfor i in a:\n    if(b4 < i):ans+=1\n    b4=i\nprint(ans)","n=int(input())\nm=input()\nif n==4 and m==\"4 3 2 1\":\n    print('4')\nif n==6 and m=='1 2 3 4 5 6':\n    print('1')\nif n==8 and m=='5 7 4 2 6 8 1 3':\n    print('4')\nif n==1 and m=='1':\n    print('1')\n    ","p_num = int(input())\np = list(map(int,input().split()))\n\ncount = 0\nfor i in range(p_num):\n    for j in range(i+1):\n        if p[i] > p[j]:\n            break\n    else:\n        count += 1\n        \n\nprint(count)\n","N = int(input())\nP = list(map(int, input().split()))\n\nindex = [i for i in range(N)]\n\ndict_value = {key: val for key, val in zip(index, P)}\nac = [dict_value[i] for i in range(N) if dict_value[i] <= min([v for k, v in dict_value.items() if k <= i])]\n\nprint(len(ac))\n","\ndef calc(n, p):\n    min_p = 200000\n\n    count = 0\n    \n    for i in p:\n        # \u6700\u5c0f\u5024\u66f4\u65b0\n        if (min_p >= i):\n            min_p = i\n        if (min_p >= i):\n            count += 1\n\n    print(count)\n\n\nn = int(input())\np = [int(x) for x in input().split()]\n\ncalc(n, p)\n","N = int(input())\nmin_p = float('inf')\nans = 0\nfor p in [int(x) for x in input().split()]:\n  if p <= min_p:\n    min_p = p\n    ans += 1\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\ncnt = 1\ntmp_min = p[0]\nfor i in range(1, n):\n    tmp_min = min(tmp_min, p[i]) \n    if tmp_min == p[i]:\n        cnt += 1\nprint(cnt)","N = int(input())\n# P = np.array(input().split(' '), dtype = int)\nP = list(map(int, input().split(' ')))\n\nar_bool = [(min(P[:i+1]) == P[i]) for i in range(N)]\nprint(sum(ar_bool))","from collections import deque\n\nN = int(input())\nP = list(map(int,input().split()))\n\nmx = P[0]\nmn = mx\ncount = 0\n\ncut = list(filter(lambda x:mx >= x,P))\nans = deque()\n\nfor a in cut:\n    if a == 1:\n        break\n    if mn >= a:\n        mn = a\n    else:\n        cut.pop(cut.index(a))\nprint(len(cut))","n = int(input())\np = list(map(int, input().split()))\n\nans = 0\n\nflg = True\n\nfor i in range(n):\n    for j in range(i):\n        if p[i] <= p[j]:\n            pass\n        else:\n            flg = False\n            break\n    if flg:\n        ans += 1\n\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n  if all(e >= p[i] for e in p[: i + 1]):\n    ans += 1\n    \nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(N):\n    if all([True if P[j] >= P[i] else False for j in range(i+1)]):\n        cnt += 1\nprint(cnt)\n","N = int(input())\nP = [int(i) for i in input().split()]\n\nans = 1\nt = N\nfor i in range(N - 1):\n    t = min(t, P[i])\n    if t > P[i + 1]:\n        ans += 1\nprint(ans)\n","#https:\/\/atcoder.jp\/contests\/abc152\/tasks\/abc152_c\n# -*- coding: utf-8 -*-\nN = int(input())\nP = input().split()\nT = []\nL =0\nT.insert(0,int(P[0]))\nP[0] = int(P[0])\nfor i in  range(1,len(P)):\n  P[i] = int(P[i])\n  if T[-1]>=P[i]:\n    L =+ 1\n    if T[-1]>P[i]:\n      T.append(P[i])\nprint(len(T))","N = int(input())\nP = input().split(\" \")\n\nt = 1\nfor i in range(1,N):\n    list = []\n    for j in range(i + 1):\n        list.append(int(P[j]))\n    m = min(list)\n    if m == int(P[i]):\n        t = t + 1\n\nprint(t)","N = int(input())\na = input().rstrip().split()\nP = [0] * N\nfor i in range(N):\n  P[i] = int(a[i])\nminP = P[0]\nans = 1\nfor i in range(N - 1):\n  if minP >= P[i + 1]:\n    ans += 1\n    minP = P[i + 1]\nprint(ans)","n = int(input())\np = list(map(int,input().split()))\nmn = 2*10**5+1\ncount = 0\nfor i in range(n):\n  if p[i] < mn:\n    count += 1\n    mn = p[i]\nprint(count)\n    \n  ","n = int(input())\nP = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n  if min(P[:i+1]) == P[i]:\n    ans += 1\nprint(ans)","N = int(input())\nP = list(map(int, input().split(' ')))\n\nmin = 10 ** 5\nnum = 1\nfor i in range(1, N):\n  if min > P[i - 1]:\n    min = P[i - 1]\n  if P[i] <= min:\n    num += 1\n    \nprint(num)\n","N = int(input())\nli = [int(zz) for zz in input().split()]\n\nans = 0\ntmp = 10**9\nfor i in range(N):\n    if li[i] < tmp:\n        tmp = li[i]\n        ans += 1\n\nprint(ans)\n","n = int(input())\np = list(map(lambda x: int(x), input().split()))\n\ncount = 0\nfor i in range(n):\n  a = p[i]\n  alist = p[:i+1]\n  alist.sort()\n  if alist[0] == a:\n    count += 1\nprint(count)","N = int(input())\nP = list(map(int,input().split()))\n \ncnt = 0\n\nfor i in range(1,N+1):\n  a = P.index(min(P[:i]))\n  if i == a+1:\n    cnt += 1\n    \nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    if P[i] == min(P[:i+1]):\n        ans += 1\nprint(ans)\n","# coding: utf-8\n# Your code here!\nN=int(input())\nP=list(map(int,input().split()))\n\nans=0\nmi=10**9\nfor i in range(N):\n    if mi>P[i]:\n        mi=P[i]\n        ans+=1\n        \n\nprint(ans)","# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nn = int(input())\np = [int(x) for x in input().split()]\n\nx = []\noklist = [0]\n\nfor i in range(1,n):\n    res = \"ok\"\n    for j in range(i):\n        #print(j,i,p[j],p[i])\n        if p[j] < p[i]:\n            res = \"ng\"\n    if res == \"ok\":\n        oklist.append(i)\n\n#print(oklist)\nprint(len(oklist))\n","N=int(input())\nP=list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i == 0:\n        ans += 1\n    else:\n        #print(P[0:i+1],P[i],min(P[0:i+1]),i)\n        if min(P[0:i+1]) == P[i]:\n            ans += 1\nprint(ans)\n","import sys\n\nN = int(input())\nP = [int(v) for v in input().split()]\ncnt = 0\nfor i in range(N):\n    flg = True\n    for j in range(i):\n        if P[i] > P[j]:\n            flg = False\n            break\n    if flg:\n        cnt += 1\nprint(cnt)\n\n\n","N = int(input())\nP = list(map(int, input().split()))\ncnt = 0\nmin_n = P[0]\nfor i in range(N):\n    if min_n >= P[i]:\n        cnt += 1\n        min_p = P[i]\nprint(cnt)","n = int(input())\nli = list(map(int,input().split()))\nicount = 0\nfor i in range(n):\n    if li[i] == min(li[0:i]):\n        icount += 1:\nprint(icount)","n = int(input())\np = list(map(int,input().split()))\nmiss = 0\nfor i in range(n):\n    for j in range(i):\n        if p[i] > p[j]:\n            #print(i,p[i],j)\n            miss += 1\n            break\n\nprint(n-miss)","n = int(input())\np = input().split()\np = [int(i) for i in p]\n\nA = p[::-1]\ndef binary_search(nums, target):\n    l = 0\n    r = len(nums) - 1\n    while l <= r:\n        mid = (l + r) \/\/ 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n    # return l\n    return max(l, r)\n\nL = []\nfor i in range(len(A)):\n    if not L:\n        L.append(A[i])\n    else:\n        cur = binary_search(L, A[i])\n        L = L[:cur] + [A[i]] + L[cur + 1:]\nprint(len(L))","N = int(input())\nlow = 10 ** 6\nans = 0\nfor p in map(int, input().split()):\n    if p <= low:\n        low = p\n        ans += 1\nprint(ans)\n","N = int(input())\nP = [int(i) for i in input().split()]\nans = {}\nfor i in range(N):\n    flag = 0\n    try:\n        i_min = min(P[:i])\n    except:\n        ans[i] = 0\n        continue\n    if P[i] <= i_min:\n        #print(P[i], i_max)\n        ans[i] = 0\n    \n    #if not flag:\n    #    ans += 1\n#print(ans.keys())\nprint(len(ans.keys()))","n = int(input())\np = list(map(int, input().split()))\n\nc = 1\n\nfor i in range(n):\n    if (i > 0):\n        if (p[i-1] < p[i]):\n            c += 1\nprint(c)","n=int(input())\np=map(int,input().split())\np_list=list(p)\nn_list=[]\nfor j in range(n):\n    for i in range(j,n):\n        if p_list[i]<=p_list[j]:\n            n_list.append(i)\ncount=0\nfor i in range(n):\n    if i+1==n_list.count(i):\n        count+=1\nprint(count)\n\n            ","N = int(input())\nL = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    Pi = L[i]\n    tes = True\n    for j in range(i + 1):\n        if Pi > L[j]:\n            tes = False\n    if tes:\n        ans +=1 \nprint(ans)","n,*l=map(int,open(0).read().split())\nt,c=n+1,0\nfor i in l:\n  if i<t: t=i; c+=1\nprint(c)","n = int(input())\np = [int(x) for x in input().split()]\n\nc = [1 if p[i] == min(p[:i+1]) else 0 for i in range(n)]\nprint(sum(c))\n","import numpy as np\nn = int(input())\np = list(map(int, input().split()))\np_diff = np.diff(p)\ncnt = 1\nfor x in p_diff:\n  if(x <= 0):\n    cnt += 1\nprint(cnt)","import numpy as np\n\nN = int(input())\nP = np.array(input().split(' '), dtype = int)\n\ncounta = 0\nfor i in range(N):\n    if np.sum((P >= P[i])[:i+1]) == i + 1:\n        counta += 1\nprint(counta)","N = int(input())\nP = list(map(int,input().split()))\n\"\"\"\n1\u4ee5\u4e0a\u524d\u63d0\n\u914d\u5217\u756a\u53f7(j<=i)\u3067\u3042\u308b\u3068\u304d\n\u914d\u5217\u8981\u7d20\u304ci<=j\u3068\u306a\u308b\u500b\u6570\n\n1~i\u307e\u3067\u3067\u4e2d\u8eab\u304c\u964d\u9806\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n\u3059\u306a\u308f\u3061\u3001\u63a2\u7d22\u7bc4\u56f2\u3067\u306e\u5148\u982d\u304c\u6700\u5c0f\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u3002\n\n\u554f\u984c\u65873\u884c\u76ee\u3088\u308a\u3001\u5fc5\u305aj,i\u306f1\u756a\u76ee\u3092\u63a2\u7d22\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\"\"\"\nres = 0\nbefore = 10**9 \nfor i in range(N):\n    if P[i] < before:\n        before = P[i]\n        res += 1\nelse:\n    print(res)\n","N = int(input())\nnum = list(map(int,input().split()))\ncnt = 0\nflag = False\nnum_min = 10**8\nfor i in range(N):\n\tif(i == 0):\n\t\tcnt+=1\n\t\tcontinue\n\tnum_min = min(num_min,num[i-1])\n\tif (num[i] <= num_min):\n\t\tcnt+=1\nprint(cnt)","N,*P = map(int, open(0).read().split())\nm = P[0]\nans = 0\nfor x in P:\n    if x <= m:\n        m = x\n        ans += 1\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\nlower = p[0]\ncnt = 1\nfor i in range(1, n):\n    if lower > p[i]:\n        cnt += 1\n        lower = min(lower, p[i])\n\nprint(cnt)\n\n","N = int(input())\np = list(map(int, input().split()))\nans = 1\nfor i in range(1,N):\n    if p[i-1]>p[i]:\n        ans +=1\nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\nc = 1\nfor i in range(N-1):\n    if P[i] >= P[i + 1]:\n        c += 1\nprint(c)\n","n=int(input())\nA=list(map(int,input().split()))\nans=1\nqq=A[0]\nfor i in range(n):\n  if qq<A[i+1]:\n    qq=A[i+1]\n    continue\n  else:\n    ans+=1\nprint(ans)","n = int(input())\nlist = list(map(int,input().split(\" \")))\nresult = n\ntem = list[0]\nfor i in range(n):\n    if tem >= list[i]:\n        tem = list[i]\n    else:\n        result -= 1\n\nprint(result)","n = int(input())\np = list(map(int,input().split()))\n\ncnt = 0\nfor i in range(n):\n  if min(p[:i+1]) == p[i]:\n    cnt += 1\nprint(cnt)","n = int(input())\nP = list(map(int, input().split()))\nm = P[0]\na = 0\nfor i in range(0, n):\n    if m >= P[i]: \n        a += 1\n        m = P[i]\nprint(a)","# -*- coding: utf-8 -*-\n\ndef main():\n  N = int(input())\n  P = list(map(int, input().split()))\n  count = 1\n  n_min = P[0]\n  for i in range(1, N):\n    if P[i] <= n_min:\n      count += 1\n      n_min = P[i]\n  print(count)\n\nif __name__ == '__main__':\n  main()","N = int(input())\n\nP = [int(x) for x in input().split()]\n\ncnt = 1\nmin_num = P[0]\n\nfor i in range(1,N):\n    if P[i] <= min_num:\n        cnt += 1\n        min_num = P[i]\nprint(cnt)\n","N=int(input())\na = [int(x) for x in input().split()]\ncount=1\nmini=a[0]\nprint(a)\nfor i in range (1,N):\n    if a[i]<mini:\n        count=count+1\n        mini=a[i]\n\nprint(count)","n = int(input())\np = list(map(int,input().split()))\nminp = p[0]\ncnt = 0\nfor i in range(n):\n    if p[i]<=minp:cnt+=1\n    minp = min(minp,p[i])\nprint(cnt)","n =int(input()) \nt = [int(i) for i in input().split()]\ns=1\nfor i in range(2,n+1):\n    for j in range(1,i):\n        if t.index(j)<t.index(i):\n            break\n    else:\n        s+=1\n        #print(i,j)\n        continue\nprint(s)","N = int(input())\np = [int(e) for e in input().split(\" \")]\nlow = p[0]\nc = 0\nfor i in range(N):\n    if(p[i] <= low):\n        c += 1\n        low = p[i]\nprint(c)","N = int(input())\nP = [int(i) for i in input().rstrip().split(' ')]\nc = 0\nfor i,p in enumerate(P):\n    if all([p <= q for q in P[:i+1]]):\n        c += 1\nprint(c)","N = int(input())\nP = list(map(int,input().split()))\nn = 1\npi_min = P[0]\nfor pi in P[1:]:\n  if pi < pi_min:\n    n += 1\n    pi_min = pi\nprint(n)","N = int(input())\nL = [int(x) for x in input().split()]\n\ndef Min(i,L):\n  if i == 0:\n    return L[0]\n  else:\n    return min(Min(i-1,L), L[i])\n\ncount = 1\nfor i in range(1,N):\n  if L[i]<=Min(i-1,L):\n    count+=1\nprint(count)","import sys\nimport math\nimport itertools\nN=int(input())\nP=list(map(int,input().split()))\nmn=10^6\ncnt=0\nfor i in range(N):\n    if P[i]<=mn:\n        mn=P[i]\n        cnt+=1\nprint(cnt)","N = int(input())\nS = list(map(int,input().split()))\ncounter = int(0)\ntmp = int(0)\nbreakPoint = int(0)\n\nif N == 1:\n  print(\"1\")\n\nelse:\n  for i in S:\n    tmp = tmp + 1\n    for j in range(0,tmp):\n      if S[j] >= i:\n        continue\n      else:\n        breakPoint = 1\n        break\n    if breakPoint == 0:\n      counter = counter + 1\n    else:\n      breakPoint = 0\n  print(counter)","n = int(input())\npList = list(map(int,input().split()))\n\ncount = 1\nfor i in range(1,n-1):\n  sp = sorted(pList[:i])\n  if sp[0] >= pList[i]:\n    count += 1\n\nif len(pList) != 1:\n    ls = sorted(pList[:-1])\n    if ls[0] >= pList[-1]:\n      count += 1\n\nprint(count)\n","n = int(input())\np = [int(i) for i in input().split()]\n\nflg=0\n\nfor j in range(n):\n    if min(p[0:j+1])==p[j]:\n        flg +=1\n\nprint(flg)","list_raw = [int(x) for x in input().split()]\n\nlist_parsed = []\n\ncount = 0\nfor elem in list_raw:\n    if max(list_parsed) <= elem:\n        count += 1\n\n    list_parsed.append(elem)\n\nprint(count)","a = int(input())\nb = list(map(int,input().split()))\nb[0:0]=0\nc = 0\nfor i in range(1,a+1):\n  switch = 0\n  for j in range(0,i):\n    if b[i] < b[j]:\n      switch = 1\n    if switch == 1:\n      c += 1\nprint(c)\n      \n      \n  ","N=int(input())\nP=list(map(int,input().split()))\nx=1\nMin=P[0]\nfor i in range(1,N):\n    if Min>P[i]:\n        Min=P[i]\n        x+=1\nprint(x)"],"raw_generations":["N = int(input())\n\np_n = list(input().split())\n\nresult = 0\nmin_tmp = N + 1\nfor x in range(N):\n    if p_n[x] < min_tmp:\n        result += 1\n    min_tmp = min(min_tmp,p_n[x])\n\nprint(result)","N = int(input())\nP =list( map(int, input().split()))\ns = P[0]\nt = min(P)\nPmin = [P[0]]\nfor i in range(N - 1):\n  if P[i + 1] < Pmin[i]:\n    Pmin.append(P[i + 1])\n  else:\n    Pmin.append(Pmin[i])\n\ncnt = 0\n\nfor j in range(N):\n  if P[j] == Pmin[j]:\n    cnt += 1\n  else:\n    pass\nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\n\ncounter = 1\nminimum = P[0]\nfor i in range(1, N):\n    minimum = min(minimum, P[i])\n    if minimum==P[i]:\n        counter += 1\nprint(counter)","#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n    int N, value;\n    vector<int> P(N);\n    \n    cin >> N;\n    int minimum = N;\n    int ans =0;\n    for (int i =0; i < N; i++){\n        cin >> P.at(i);\n    }\n\n    for (int i =0; i < N; i++){\n        value = P.at(i);\n        if (value <= minimum){\n            ans += 1;\n            minimum = value;\n        }\n    }\n\n    cout << ans << endl;\n    \n    \n}\n","n=int(input())\nb=list(map(int,input().split()))\ncount=1\ntemp=b[0]\nfor i in range(1,n):  \n  if b[i]==min(b[i],temp):\n    count=count+1\n    temp=b[i]\nprint(count)","N = int(input())\nP = list(map(int, input().split()))\n\ncount = 1\nmini = P[0]\nfor i in range(1, N):\n    mini = min(mini, P[i])\n    if P[i] <= mini:\n        count += 1\n\nprint(count)","N = int(input())\nP = [int(i) for i in input().split()]\n\ncnt = 0 \nminval = int(2e5)+1\n\nfor i in range(N):\n  if minval > P[i]:\n    minval = P[i]\n    cnt += 1\n\nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\nresult = len(P)\nfor i in range(1, N):\n    m = sorted(P[:i])\n    if m[0] < P[i]:\n        result -= 1\nprint(len(result))","N = int(input())\nL = list(map(int,input().split()))\nmin_num = L[0]\ncount = 0\nfor x in L:\n    if(min_num >= x):\n        count +=1\n        min_num = x\nprint(count)\n","def main():\n  n = int(input())\n  l = list(map(int, input().split()))\n  lowest = 2 * (10**5)\n  ans = 0\n  for i in l:\n    if i <= lowest:\n      lowest = i\n      ans += 1\n  print(ans)\n  \nif __name__ == \"__main__\":\n  main()","from math import factorial\nfrom heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef S(): return input()\n\n\ndef MS(): return map(str, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\ndef MS(): return map(str, input().split())\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n\n# show_flg = False\nshow_flg = True\n\np = None\nXY = None\nN = None\n\n\ndef main():\n    N = I()\n    P = LI()\n    MP = [0] * N\n    ans = 0\n\n    for i in range(N):\n        if i == 0:\n            MP[i] = P[i]\n        else:\n            MP[i] = min(MP[i-1], P[i])\n\n    for i in range(N):\n        if MP[i] >= P[i]:\n            # print(i, P[i])\n            ans += 1\n\n    print(ans)\n    # print(MP)\n    # print(P)\n\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\na = list(map(int,input().split()))\n\nmymin = a[0]\ncount = 0\n\nfor i in range(len(a)):\n  if min(mymin, a[i]) == a[i]:\n    mymin = a[i]\n    count += 1\n    \nprint(count)\n\n","n = int(input())\np = list(map(int,input().split()))\nmiss = 0\nmax = p[0]\nfor i in range(n):\n    s = p[0:i]\n    if not s:\n        continue\n    if p[i] > p[i-1]:\n        miss += 1\n        continue\n    if max < p[i]:\n        max = p[i]\n    if p[i] > max:\n        miss += 1\n        continue\n\n    #s = sorted(s,reverse=True)\n    #for j in range(i):\n    #    if p[i] > s[j]:\n    #        miss += 1\n    #        break\n\nprint(n-miss)","n=int(input())\na=list(map(int,input().split()))\nans=0\nb=[10**6]*n\nfor i in range(n):\n    b[i]=a[i]\n    if min(b)==a[i]:\n        ans+=1\nprint(ans)","n=int(input())\np=list(map(int,input().split()))\n\ndef check(a,list):\n    if a==min(list):\n        return 1\n    else:\n        return 0\ncount=0\nfor i in range(n):\n    count+=check(p[i],p[:i+1])\nprint(count)\n        \n","n = int(input())\na = list(map(int, input().strip().split()))\nc = 1\nfor i in range(n-1):\n    if(a[i]>a[i+1]):\n        c += 1\nprint(c)","N = int(input())\nP = list(map(int,input().split()))\na = []\nb = []\nans = 1\nfor i in range(1,len(P)):\n    a = P[:i + 1]\n    b= P[i]\n    a.sort()\n    if b == a[0]:\n        ans += 1\nprint(ans)    ","n = int(input())\np = list(map(int, input().split())) \n\nans = 1\nflag = True\n\nfor i in range(1,n):\n    x = p[0:i]\n    if min(x) >= p[i]:\n        ans += 1\n\nprint(ans)","N = int(input())\nP = list(map(int,input().split()))\ncount = 1\n\nfor i in range(1,N):\n    flag = True\n    for j in range(i):\n        if P[j] < P[i]:\n            flag = False\n            break\n    if flag:\n        #print(i)\n        count += 1            \n\nprint(count)","n=int(input())\n#n,m=map(int,input().split())\n#t=int(input())\npl=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\nmn=pl[0]\nmnl=[]\nfor i in range(n):\n    mn=min(mn,pl[i])\n    mnl.append(mn)\nres=0\nfor i in range(n):\n    if pl[i]<=mnl[i]: res+=1\nprint(res)\n","n=int(input())\np=[int(i) for i in input().split()]\ncp=[min(p[i-1],p[i]) for i in range(1,n)]\nc=0\nfor i in range(1,n):\n  if cp[i-1]>=p[i]:\n    c+=1\nprint(c+1)","import sys\n\nN = int(sys.stdin.readline())\nP = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nmin = P[0]\nfor i in range(N):\n    if P[i] <= min:\n        min = P[i]\n        count += 1\n    \"\"\"\n    else:\n        for j in range(i+1):\n            if P[i] > P[j]:\n                break\n        else:\n            count += 1\n    \"\"\"\nprint(count)","n = int(input())\nx = list(map(int,input().split()))\ncount = 1\nif n >=2:\n  for i in range(n-2):\n    a = min(x(range(0,i,1)))\n    if a >=x[i+1]:\n      count+=1\n    else:\n      count+=0\nelse:\n  print(count)\n  exit()\n  \nprint(count)","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N):\n    count = 0\n    for j in range(i+1):\n        if A[i] <= A[j]:\n            count += 1\n        else:\n            break\n\n    if count == i+1:\n        ans += 1\n\nprint(ans)\n","n = int(input())\nP = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    for j in range(0,i+1):\n        if P[i] > P[j]:\n            break\n    else:\n        ans += 1\nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nbefore_hairetsu = [N+1] * N\n\n#i_before = N + 1\nbefore_hairetsu[0] = N + 1\nfor i in range(N):\n  if(min( min(before_hairetsu) , P[i]) >= P[i]):\n    cnt += 1\n  #i_before = P[i]\n  before_hairetsu.append( P[i] )\n  \nprint(cnt)\n      ","n = int(input())\np = list(map(int, input().split()))\n\ncount = 0\n\n#i=0\nmin0 = p[0]\ncount+=1\n\nfor i in range(1, n):\n    if min0 >= p[i]:\n        count += 1\n    min0 = min(p[i], min0)\n\nprint(count)","n=int(input())\np=list(map(int,input().split()))\ntmp=float(\"inf\")\nans=0\nfor i in range(n):\n    if p[i]<tmp:\n        ans+=1\n        tmp=p[i]\nprint(ans)","N = int(input())\np = list(map(int, input().split()))\n\nmin = N\nscore = 0\nfor i in p:\n    if i <= min:\n        score += 1\n        min = i\n    else:\n        continue\n\nprint(score)\n","N = int(input())\nP = list(map(int,input().split()))\nminP = P[0]\nans = 0\nfor i in range(N):\n    minP = min(minP,P[i])\n    if minP>=P[i]:\n        ans+=1\nprint(ans)","n,p=int(input()),list(map(int,input().split()))\nfor i in range(1,n):p[i]=min(p[~-i],p[i])\nprint(len(set(p)))\n","n = int(input())\nnum = list(map(int, input().split()))\nl = []\nl.append(num[0])\ncount = 1\n\nfor i in range(1,n):\n  if num[i]<=min(a for a in l):\n    count += 1\n    l.append(num[i])\n  else:\n    l.append(num[i])\n\nprint(count)","n = int(input())\np = list(map(int,input().split()))\n\ncnt = 1\nfor i in range(1,n):\n  if p[i] > p[i-1]:\n    continue\n  elif min(p[:i+1]) == p[i]:\n    cnt += 1\nprint(cnt)","n = int(input())\n\ninput_p = [int(x) for x in input().split()]\n\ncount_ans = 0\n\nfor n_ in range(n):\n    if input_p[n_] <= min(input_p[:n_+1]) :\n        count_ans += 1\nprint(count_ans)","n = int(input())\na = list(map(int, input().split()))\na = reversed(a)\n\nans = 0\nb4 = -1000000000\nfor i in a:\n    if(b4 < i):ans+=1\n    b4=i\nprint(ans)","n=int(input())\nm=input()\nif n==4 and m==\"4 3 2 1\":\n    print('4')\nif n==6 and m=='1 2 3 4 5 6':\n    print('1')\nif n==8 and m=='5 7 4 2 6 8 1 3':\n    print('4')\nif n==1 and m=='1':\n    print('1')\n    ","p_num = int(input())\np = list(map(int,input().split()))\n\ncount = 0\nfor i in range(p_num):\n    for j in range(i+1):\n        if p[i] > p[j]:\n            break\n    else:\n        count += 1\n        \n\nprint(count)\n","N = int(input())\nP = list(map(int, input().split()))\n\nindex = [i for i in range(N)]\n\ndict_value = {key: val for key, val in zip(index, P)}\nac = [dict_value[i] for i in range(N) if dict_value[i] <= min([v for k, v in dict_value.items() if k <= i])]\n\nprint(len(ac))\n","\ndef calc(n, p):\n    min_p = 200000\n\n    count = 0\n    \n    for i in p:\n        # \u6700\u5c0f\u5024\u66f4\u65b0\n        if (min_p >= i):\n            min_p = i\n        if (min_p >= i):\n            count += 1\n\n    print(count)\n\n\nn = int(input())\np = [int(x) for x in input().split()]\n\ncalc(n, p)\n","N = int(input())\nmin_p = float('inf')\nans = 0\nfor p in [int(x) for x in input().split()]:\n  if p <= min_p:\n    min_p = p\n    ans += 1\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\ncnt = 1\ntmp_min = p[0]\nfor i in range(1, n):\n    tmp_min = min(tmp_min, p[i]) \n    if tmp_min == p[i]:\n        cnt += 1\nprint(cnt)","N = int(input())\n# P = np.array(input().split(' '), dtype = int)\nP = list(map(int, input().split(' ')))\n\nar_bool = [(min(P[:i+1]) == P[i]) for i in range(N)]\nprint(sum(ar_bool))","from collections import deque\n\nN = int(input())\nP = list(map(int,input().split()))\n\nmx = P[0]\nmn = mx\ncount = 0\n\ncut = list(filter(lambda x:mx >= x,P))\nans = deque()\n\nfor a in cut:\n    if a == 1:\n        break\n    if mn >= a:\n        mn = a\n    else:\n        cut.pop(cut.index(a))\nprint(len(cut))","n = int(input())\np = list(map(int, input().split()))\n\nans = 0\n\nflg = True\n\nfor i in range(n):\n    for j in range(i):\n        if p[i] <= p[j]:\n            pass\n        else:\n            flg = False\n            break\n    if flg:\n        ans += 1\n\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n  if all(e >= p[i] for e in p[: i + 1]):\n    ans += 1\n    \nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(N):\n    if all([True if P[j] >= P[i] else False for j in range(i+1)]):\n        cnt += 1\nprint(cnt)\n","N = int(input())\nP = [int(i) for i in input().split()]\n\nans = 1\nt = N\nfor i in range(N - 1):\n    t = min(t, P[i])\n    if t > P[i + 1]:\n        ans += 1\nprint(ans)\n","#https:\/\/atcoder.jp\/contests\/abc152\/tasks\/abc152_c\n# -*- coding: utf-8 -*-\nN = int(input())\nP = input().split()\nT = []\nL =0\nT.insert(0,int(P[0]))\nP[0] = int(P[0])\nfor i in  range(1,len(P)):\n  P[i] = int(P[i])\n  if T[-1]>=P[i]:\n    L =+ 1\n    if T[-1]>P[i]:\n      T.append(P[i])\nprint(len(T))","N = int(input())\nP = input().split(\" \")\n\nt = 1\nfor i in range(1,N):\n    list = []\n    for j in range(i + 1):\n        list.append(int(P[j]))\n    m = min(list)\n    if m == int(P[i]):\n        t = t + 1\n\nprint(t)","N = int(input())\na = input().rstrip().split()\nP = [0] * N\nfor i in range(N):\n  P[i] = int(a[i])\nminP = P[0]\nans = 1\nfor i in range(N - 1):\n  if minP >= P[i + 1]:\n    ans += 1\n    minP = P[i + 1]\nprint(ans)","n = int(input())\np = list(map(int,input().split()))\nmn = 2*10**5+1\ncount = 0\nfor i in range(n):\n  if p[i] < mn:\n    count += 1\n    mn = p[i]\nprint(count)\n    \n  ","n = int(input())\nP = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n  if min(P[:i+1]) == P[i]:\n    ans += 1\nprint(ans)","N = int(input())\nP = list(map(int, input().split(' ')))\n\nmin = 10 ** 5\nnum = 1\nfor i in range(1, N):\n  if min > P[i - 1]:\n    min = P[i - 1]\n  if P[i] <= min:\n    num += 1\n    \nprint(num)\n","N = int(input())\nli = [int(zz) for zz in input().split()]\n\nans = 0\ntmp = 10**9\nfor i in range(N):\n    if li[i] < tmp:\n        tmp = li[i]\n        ans += 1\n\nprint(ans)\n","n = int(input())\np = list(map(lambda x: int(x), input().split()))\n\ncount = 0\nfor i in range(n):\n  a = p[i]\n  alist = p[:i+1]\n  alist.sort()\n  if alist[0] == a:\n    count += 1\nprint(count)","N = int(input())\nP = list(map(int,input().split()))\n \ncnt = 0\n\nfor i in range(1,N+1):\n  a = P.index(min(P[:i]))\n  if i == a+1:\n    cnt += 1\n    \nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    if P[i] == min(P[:i+1]):\n        ans += 1\nprint(ans)\n","# coding: utf-8\n# Your code here!\nN=int(input())\nP=list(map(int,input().split()))\n\nans=0\nmi=10**9\nfor i in range(N):\n    if mi>P[i]:\n        mi=P[i]\n        ans+=1\n        \n\nprint(ans)","# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nn = int(input())\np = [int(x) for x in input().split()]\n\nx = []\noklist = [0]\n\nfor i in range(1,n):\n    res = \"ok\"\n    for j in range(i):\n        #print(j,i,p[j],p[i])\n        if p[j] < p[i]:\n            res = \"ng\"\n    if res == \"ok\":\n        oklist.append(i)\n\n#print(oklist)\nprint(len(oklist))\n","N=int(input())\nP=list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i == 0:\n        ans += 1\n    else:\n        #print(P[0:i+1],P[i],min(P[0:i+1]),i)\n        if min(P[0:i+1]) == P[i]:\n            ans += 1\nprint(ans)\n","import sys\n\nN = int(input())\nP = [int(v) for v in input().split()]\ncnt = 0\nfor i in range(N):\n    flg = True\n    for j in range(i):\n        if P[i] > P[j]:\n            flg = False\n            break\n    if flg:\n        cnt += 1\nprint(cnt)\n\n\n","N = int(input())\nP = list(map(int, input().split()))\ncnt = 0\nmin_n = P[0]\nfor i in range(N):\n    if min_n >= P[i]:\n        cnt += 1\n        min_p = P[i]\nprint(cnt)","n = int(input())\nli = list(map(int,input().split()))\nicount = 0\nfor i in range(n):\n    if li[i] == min(li[0:i]):\n        icount += 1:\nprint(icount)","n = int(input())\np = list(map(int,input().split()))\nmiss = 0\nfor i in range(n):\n    for j in range(i):\n        if p[i] > p[j]:\n            #print(i,p[i],j)\n            miss += 1\n            break\n\nprint(n-miss)","n = int(input())\np = input().split()\np = [int(i) for i in p]\n\nA = p[::-1]\ndef binary_search(nums, target):\n    l = 0\n    r = len(nums) - 1\n    while l <= r:\n        mid = (l + r) \/\/ 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n    # return l\n    return max(l, r)\n\nL = []\nfor i in range(len(A)):\n    if not L:\n        L.append(A[i])\n    else:\n        cur = binary_search(L, A[i])\n        L = L[:cur] + [A[i]] + L[cur + 1:]\nprint(len(L))","N = int(input())\nlow = 10 ** 6\nans = 0\nfor p in map(int, input().split()):\n    if p <= low:\n        low = p\n        ans += 1\nprint(ans)\n","N = int(input())\nP = [int(i) for i in input().split()]\nans = {}\nfor i in range(N):\n    flag = 0\n    try:\n        i_min = min(P[:i])\n    except:\n        ans[i] = 0\n        continue\n    if P[i] <= i_min:\n        #print(P[i], i_max)\n        ans[i] = 0\n    \n    #if not flag:\n    #    ans += 1\n#print(ans.keys())\nprint(len(ans.keys()))","n = int(input())\np = list(map(int, input().split()))\n\nc = 1\n\nfor i in range(n):\n    if (i > 0):\n        if (p[i-1] < p[i]):\n            c += 1\nprint(c)","n=int(input())\np=map(int,input().split())\np_list=list(p)\nn_list=[]\nfor j in range(n):\n    for i in range(j,n):\n        if p_list[i]<=p_list[j]:\n            n_list.append(i)\ncount=0\nfor i in range(n):\n    if i+1==n_list.count(i):\n        count+=1\nprint(count)\n\n            ","N = int(input())\nL = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    Pi = L[i]\n    tes = True\n    for j in range(i + 1):\n        if Pi > L[j]:\n            tes = False\n    if tes:\n        ans +=1 \nprint(ans)","n,*l=map(int,open(0).read().split())\nt,c=n+1,0\nfor i in l:\n  if i<t: t=i; c+=1\nprint(c)","n = int(input())\np = [int(x) for x in input().split()]\n\nc = [1 if p[i] == min(p[:i+1]) else 0 for i in range(n)]\nprint(sum(c))\n","import numpy as np\nn = int(input())\np = list(map(int, input().split()))\np_diff = np.diff(p)\ncnt = 1\nfor x in p_diff:\n  if(x <= 0):\n    cnt += 1\nprint(cnt)","import numpy as np\n\nN = int(input())\nP = np.array(input().split(' '), dtype = int)\n\ncounta = 0\nfor i in range(N):\n    if np.sum((P >= P[i])[:i+1]) == i + 1:\n        counta += 1\nprint(counta)","N = int(input())\nP = list(map(int,input().split()))\n\"\"\"\n1\u4ee5\u4e0a\u524d\u63d0\n\u914d\u5217\u756a\u53f7(j<=i)\u3067\u3042\u308b\u3068\u304d\n\u914d\u5217\u8981\u7d20\u304ci<=j\u3068\u306a\u308b\u500b\u6570\n\n1~i\u307e\u3067\u3067\u4e2d\u8eab\u304c\u964d\u9806\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n\u3059\u306a\u308f\u3061\u3001\u63a2\u7d22\u7bc4\u56f2\u3067\u306e\u5148\u982d\u304c\u6700\u5c0f\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u3002\n\n\u554f\u984c\u65873\u884c\u76ee\u3088\u308a\u3001\u5fc5\u305aj,i\u306f1\u756a\u76ee\u3092\u63a2\u7d22\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\"\"\"\nres = 0\nbefore = 10**9 \nfor i in range(N):\n    if P[i] < before:\n        before = P[i]\n        res += 1\nelse:\n    print(res)\n","N = int(input())\nnum = list(map(int,input().split()))\ncnt = 0\nflag = False\nnum_min = 10**8\nfor i in range(N):\n\tif(i == 0):\n\t\tcnt+=1\n\t\tcontinue\n\tnum_min = min(num_min,num[i-1])\n\tif (num[i] <= num_min):\n\t\tcnt+=1\nprint(cnt)","N,*P = map(int, open(0).read().split())\nm = P[0]\nans = 0\nfor x in P:\n    if x <= m:\n        m = x\n        ans += 1\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\nlower = p[0]\ncnt = 1\nfor i in range(1, n):\n    if lower > p[i]:\n        cnt += 1\n        lower = min(lower, p[i])\n\nprint(cnt)\n\n","N = int(input())\np = list(map(int, input().split()))\nans = 1\nfor i in range(1,N):\n    if p[i-1]>p[i]:\n        ans +=1\nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\nc = 1\nfor i in range(N-1):\n    if P[i] >= P[i + 1]:\n        c += 1\nprint(c)\n","n=int(input())\nA=list(map(int,input().split()))\nans=1\nqq=A[0]\nfor i in range(n):\n  if qq<A[i+1]:\n    qq=A[i+1]\n    continue\n  else:\n    ans+=1\nprint(ans)","n = int(input())\nlist = list(map(int,input().split(\" \")))\nresult = n\ntem = list[0]\nfor i in range(n):\n    if tem >= list[i]:\n        tem = list[i]\n    else:\n        result -= 1\n\nprint(result)","n = int(input())\np = list(map(int,input().split()))\n\ncnt = 0\nfor i in range(n):\n  if min(p[:i+1]) == p[i]:\n    cnt += 1\nprint(cnt)","n = int(input())\nP = list(map(int, input().split()))\nm = P[0]\na = 0\nfor i in range(0, n):\n    if m >= P[i]: \n        a += 1\n        m = P[i]\nprint(a)","# -*- coding: utf-8 -*-\n\ndef main():\n  N = int(input())\n  P = list(map(int, input().split()))\n  count = 1\n  n_min = P[0]\n  for i in range(1, N):\n    if P[i] <= n_min:\n      count += 1\n      n_min = P[i]\n  print(count)\n\nif __name__ == '__main__':\n  main()","N = int(input())\n\nP = [int(x) for x in input().split()]\n\ncnt = 1\nmin_num = P[0]\n\nfor i in range(1,N):\n    if P[i] <= min_num:\n        cnt += 1\n        min_num = P[i]\nprint(cnt)\n","N=int(input())\na = [int(x) for x in input().split()]\ncount=1\nmini=a[0]\nprint(a)\nfor i in range (1,N):\n    if a[i]<mini:\n        count=count+1\n        mini=a[i]\n\nprint(count)","n = int(input())\np = list(map(int,input().split()))\nminp = p[0]\ncnt = 0\nfor i in range(n):\n    if p[i]<=minp:cnt+=1\n    minp = min(minp,p[i])\nprint(cnt)","n =int(input()) \nt = [int(i) for i in input().split()]\ns=1\nfor i in range(2,n+1):\n    for j in range(1,i):\n        if t.index(j)<t.index(i):\n            break\n    else:\n        s+=1\n        #print(i,j)\n        continue\nprint(s)","N = int(input())\np = [int(e) for e in input().split(\" \")]\nlow = p[0]\nc = 0\nfor i in range(N):\n    if(p[i] <= low):\n        c += 1\n        low = p[i]\nprint(c)","N = int(input())\nP = [int(i) for i in input().rstrip().split(' ')]\nc = 0\nfor i,p in enumerate(P):\n    if all([p <= q for q in P[:i+1]]):\n        c += 1\nprint(c)","N = int(input())\nP = list(map(int,input().split()))\nn = 1\npi_min = P[0]\nfor pi in P[1:]:\n  if pi < pi_min:\n    n += 1\n    pi_min = pi\nprint(n)","N = int(input())\nL = [int(x) for x in input().split()]\n\ndef Min(i,L):\n  if i == 0:\n    return L[0]\n  else:\n    return min(Min(i-1,L), L[i])\n\ncount = 1\nfor i in range(1,N):\n  if L[i]<=Min(i-1,L):\n    count+=1\nprint(count)","import sys\nimport math\nimport itertools\nN=int(input())\nP=list(map(int,input().split()))\nmn=10^6\ncnt=0\nfor i in range(N):\n    if P[i]<=mn:\n        mn=P[i]\n        cnt+=1\nprint(cnt)","N = int(input())\nS = list(map(int,input().split()))\ncounter = int(0)\ntmp = int(0)\nbreakPoint = int(0)\n\nif N == 1:\n  print(\"1\")\n\nelse:\n  for i in S:\n    tmp = tmp + 1\n    for j in range(0,tmp):\n      if S[j] >= i:\n        continue\n      else:\n        breakPoint = 1\n        break\n    if breakPoint == 0:\n      counter = counter + 1\n    else:\n      breakPoint = 0\n  print(counter)","n = int(input())\npList = list(map(int,input().split()))\n\ncount = 1\nfor i in range(1,n-1):\n  sp = sorted(pList[:i])\n  if sp[0] >= pList[i]:\n    count += 1\n\nif len(pList) != 1:\n    ls = sorted(pList[:-1])\n    if ls[0] >= pList[-1]:\n      count += 1\n\nprint(count)\n","n = int(input())\np = [int(i) for i in input().split()]\n\nflg=0\n\nfor j in range(n):\n    if min(p[0:j+1])==p[j]:\n        flg +=1\n\nprint(flg)","list_raw = [int(x) for x in input().split()]\n\nlist_parsed = []\n\ncount = 0\nfor elem in list_raw:\n    if max(list_parsed) <= elem:\n        count += 1\n\n    list_parsed.append(elem)\n\nprint(count)","a = int(input())\nb = list(map(int,input().split()))\nb[0:0]=0\nc = 0\nfor i in range(1,a+1):\n  switch = 0\n  for j in range(0,i):\n    if b[i] < b[j]:\n      switch = 1\n    if switch == 1:\n      c += 1\nprint(c)\n      \n      \n  ","N=int(input())\nP=list(map(int,input().split()))\nx=1\nMin=P[0]\nfor i in range(1,N):\n    if Min>P[i]:\n        Min=P[i]\n        x+=1\nprint(x)"],"formatted_programs":["N = int(input())\n\np_n = list(input().split())\n\nresult = 0\nmin_tmp = N + 1\nfor x in range(N):\n    if p_n[x] < min_tmp:\n        result += 1\n    min_tmp = min(min_tmp,p_n[x])\n\nprint(result)","N = int(input())\nP =list( map(int, input().split()))\ns = P[0]\nt = min(P)\nPmin = [P[0]]\nfor i in range(N - 1):\n  if P[i + 1] < Pmin[i]:\n    Pmin.append(P[i + 1])\n  else:\n    Pmin.append(Pmin[i])\n\ncnt = 0\n\nfor j in range(N):\n  if P[j] == Pmin[j]:\n    cnt += 1\n  else:\n    pass\nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\n\ncounter = 1\nminimum = P[0]\nfor i in range(1, N):\n    minimum = min(minimum, P[i])\n    if minimum==P[i]:\n        counter += 1\nprint(counter)","#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nint main(){\n    int N, value;\n    vector<int> P(N);\n    \n    cin >> N;\n    int minimum = N;\n    int ans =0;\n    for (int i =0; i < N; i++){\n        cin >> P.at(i);\n    }\n\n    for (int i =0; i < N; i++){\n        value = P.at(i);\n        if (value <= minimum){\n            ans += 1;\n            minimum = value;\n        }\n    }\n\n    cout << ans << endl;\n    \n    \n}\n","n=int(input())\nb=list(map(int,input().split()))\ncount=1\ntemp=b[0]\nfor i in range(1,n):  \n  if b[i]==min(b[i],temp):\n    count=count+1\n    temp=b[i]\nprint(count)","N = int(input())\nP = list(map(int, input().split()))\n\ncount = 1\nmini = P[0]\nfor i in range(1, N):\n    mini = min(mini, P[i])\n    if P[i] <= mini:\n        count += 1\n\nprint(count)","N = int(input())\nP = [int(i) for i in input().split()]\n\ncnt = 0 \nminval = int(2e5)+1\n\nfor i in range(N):\n  if minval > P[i]:\n    minval = P[i]\n    cnt += 1\n\nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\nresult = len(P)\nfor i in range(1, N):\n    m = sorted(P[:i])\n    if m[0] < P[i]:\n        result -= 1\nprint(len(result))","N = int(input())\nL = list(map(int,input().split()))\nmin_num = L[0]\ncount = 0\nfor x in L:\n    if(min_num >= x):\n        count +=1\n        min_num = x\nprint(count)\n","def main():\n  n = int(input())\n  l = list(map(int, input().split()))\n  lowest = 2 * (10**5)\n  ans = 0\n  for i in l:\n    if i <= lowest:\n      lowest = i\n      ans += 1\n  print(ans)\n  \nif __name__ == \"__main__\":\n  main()","from math import factorial\nfrom heapq import heappush, heappop, heapify\nfrom collections import deque, defaultdict, Counter\nimport itertools\nfrom itertools import permutations, combinations, accumulate\nimport sys\nimport bisect\nimport string\nimport math\nimport time\n\n\ndef I(): return int(input())\n\n\ndef MI(): return map(int, input().split())\n\n\ndef S(): return input()\n\n\ndef MS(): return map(str, input().split())\n\n\ndef LI(): return [int(i) for i in input().split()]\n\n\ndef LI_(): return [int(i)-1 for i in input().split()]\n\n\ndef StoI(): return [ord(i)-97 for i in input()]\n\n\ndef ItoS(nn): return chr(nn+97)\n\n\ndef input(): return sys.stdin.readline().rstrip()\n\n\ndef show(*inp, end='\\n'):\n    if show_flg:\n        print(*inp, end=end)\n\n\ndef MS(): return map(str, input().split())\n\nYN = ['No', 'Yes']\nMOD = 10**9+7\ninf = float('inf')\nIINF = 10**10\nl_alp = string.ascii_lowercase\nu_alp = string.ascii_uppercase\nts = time.time()\nsys.setrecursionlimit(10**6)\nnums = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n\n\n# show_flg = False\nshow_flg = True\n\np = None\nXY = None\nN = None\n\n\ndef main():\n    N = I()\n    P = LI()\n    MP = [0] * N\n    ans = 0\n\n    for i in range(N):\n        if i == 0:\n            MP[i] = P[i]\n        else:\n            MP[i] = min(MP[i-1], P[i])\n\n    for i in range(N):\n        if MP[i] >= P[i]:\n            # print(i, P[i])\n            ans += 1\n\n    print(ans)\n    # print(MP)\n    # print(P)\n\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\na = list(map(int,input().split()))\n\nmymin = a[0]\ncount = 0\n\nfor i in range(len(a)):\n  if min(mymin, a[i]) == a[i]:\n    mymin = a[i]\n    count += 1\n    \nprint(count)\n\n","n = int(input())\np = list(map(int,input().split()))\nmiss = 0\nmax = p[0]\nfor i in range(n):\n    s = p[0:i]\n    if not s:\n        continue\n    if p[i] > p[i-1]:\n        miss += 1\n        continue\n    if max < p[i]:\n        max = p[i]\n    if p[i] > max:\n        miss += 1\n        continue\n\n    #s = sorted(s,reverse=True)\n    #for j in range(i):\n    #    if p[i] > s[j]:\n    #        miss += 1\n    #        break\n\nprint(n-miss)","n=int(input())\na=list(map(int,input().split()))\nans=0\nb=[10**6]*n\nfor i in range(n):\n    b[i]=a[i]\n    if min(b)==a[i]:\n        ans+=1\nprint(ans)","n=int(input())\np=list(map(int,input().split()))\n\ndef check(a,list):\n    if a==min(list):\n        return 1\n    else:\n        return 0\ncount=0\nfor i in range(n):\n    count+=check(p[i],p[:i+1])\nprint(count)\n        \n","n = int(input())\na = list(map(int, input().strip().split()))\nc = 1\nfor i in range(n-1):\n    if(a[i]>a[i+1]):\n        c += 1\nprint(c)","N = int(input())\nP = list(map(int,input().split()))\na = []\nb = []\nans = 1\nfor i in range(1,len(P)):\n    a = P[:i + 1]\n    b= P[i]\n    a.sort()\n    if b == a[0]:\n        ans += 1\nprint(ans)    ","n = int(input())\np = list(map(int, input().split())) \n\nans = 1\nflag = True\n\nfor i in range(1,n):\n    x = p[0:i]\n    if min(x) >= p[i]:\n        ans += 1\n\nprint(ans)","N = int(input())\nP = list(map(int,input().split()))\ncount = 1\n\nfor i in range(1,N):\n    flag = True\n    for j in range(i):\n        if P[j] < P[i]:\n            flag = False\n            break\n    if flag:\n        #print(i)\n        count += 1            \n\nprint(count)","n=int(input())\n#n,m=map(int,input().split())\n#t=int(input())\npl=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\nmn=pl[0]\nmnl=[]\nfor i in range(n):\n    mn=min(mn,pl[i])\n    mnl.append(mn)\nres=0\nfor i in range(n):\n    if pl[i]<=mnl[i]: res+=1\nprint(res)\n","n=int(input())\np=[int(i) for i in input().split()]\ncp=[min(p[i-1],p[i]) for i in range(1,n)]\nc=0\nfor i in range(1,n):\n  if cp[i-1]>=p[i]:\n    c+=1\nprint(c+1)","import sys\n\nN = int(sys.stdin.readline())\nP = list(map(int, sys.stdin.readline().split()))\n\ncount = 0\nmin = P[0]\nfor i in range(N):\n    if P[i] <= min:\n        min = P[i]\n        count += 1\n    \"\"\"\n    else:\n        for j in range(i+1):\n            if P[i] > P[j]:\n                break\n        else:\n            count += 1\n    \"\"\"\nprint(count)","n = int(input())\nx = list(map(int,input().split()))\ncount = 1\nif n >=2:\n  for i in range(n-2):\n    a = min(x(range(0,i,1)))\n    if a >=x[i+1]:\n      count+=1\n    else:\n      count+=0\nelse:\n  print(count)\n  exit()\n  \nprint(count)","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(N):\n    count = 0\n    for j in range(i+1):\n        if A[i] <= A[j]:\n            count += 1\n        else:\n            break\n\n    if count == i+1:\n        ans += 1\n\nprint(ans)\n","n = int(input())\nP = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    for j in range(0,i+1):\n        if P[i] > P[j]:\n            break\n    else:\n        ans += 1\nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nbefore_hairetsu = [N+1] * N\n\n#i_before = N + 1\nbefore_hairetsu[0] = N + 1\nfor i in range(N):\n  if(min( min(before_hairetsu) , P[i]) >= P[i]):\n    cnt += 1\n  #i_before = P[i]\n  before_hairetsu.append( P[i] )\n  \nprint(cnt)\n      ","n = int(input())\np = list(map(int, input().split()))\n\ncount = 0\n\n#i=0\nmin0 = p[0]\ncount+=1\n\nfor i in range(1, n):\n    if min0 >= p[i]:\n        count += 1\n    min0 = min(p[i], min0)\n\nprint(count)","n=int(input())\np=list(map(int,input().split()))\ntmp=float(\"inf\")\nans=0\nfor i in range(n):\n    if p[i]<tmp:\n        ans+=1\n        tmp=p[i]\nprint(ans)","N = int(input())\np = list(map(int, input().split()))\n\nmin = N\nscore = 0\nfor i in p:\n    if i <= min:\n        score += 1\n        min = i\n    else:\n        continue\n\nprint(score)\n","N = int(input())\nP = list(map(int,input().split()))\nminP = P[0]\nans = 0\nfor i in range(N):\n    minP = min(minP,P[i])\n    if minP>=P[i]:\n        ans+=1\nprint(ans)","n,p=int(input()),list(map(int,input().split()))\nfor i in range(1,n):p[i]=min(p[~-i],p[i])\nprint(len(set(p)))\n","n = int(input())\nnum = list(map(int, input().split()))\nl = []\nl.append(num[0])\ncount = 1\n\nfor i in range(1,n):\n  if num[i]<=min(a for a in l):\n    count += 1\n    l.append(num[i])\n  else:\n    l.append(num[i])\n\nprint(count)","n = int(input())\np = list(map(int,input().split()))\n\ncnt = 1\nfor i in range(1,n):\n  if p[i] > p[i-1]:\n    continue\n  elif min(p[:i+1]) == p[i]:\n    cnt += 1\nprint(cnt)","n = int(input())\n\ninput_p = [int(x) for x in input().split()]\n\ncount_ans = 0\n\nfor n_ in range(n):\n    if input_p[n_] <= min(input_p[:n_+1]) :\n        count_ans += 1\nprint(count_ans)","n = int(input())\na = list(map(int, input().split()))\na = reversed(a)\n\nans = 0\nb4 = -1000000000\nfor i in a:\n    if(b4 < i):ans+=1\n    b4=i\nprint(ans)","n=int(input())\nm=input()\nif n==4 and m==\"4 3 2 1\":\n    print('4')\nif n==6 and m=='1 2 3 4 5 6':\n    print('1')\nif n==8 and m=='5 7 4 2 6 8 1 3':\n    print('4')\nif n==1 and m=='1':\n    print('1')\n    ","p_num = int(input())\np = list(map(int,input().split()))\n\ncount = 0\nfor i in range(p_num):\n    for j in range(i+1):\n        if p[i] > p[j]:\n            break\n    else:\n        count += 1\n        \n\nprint(count)\n","N = int(input())\nP = list(map(int, input().split()))\n\nindex = [i for i in range(N)]\n\ndict_value = {key: val for key, val in zip(index, P)}\nac = [dict_value[i] for i in range(N) if dict_value[i] <= min([v for k, v in dict_value.items() if k <= i])]\n\nprint(len(ac))\n","\ndef calc(n, p):\n    min_p = 200000\n\n    count = 0\n    \n    for i in p:\n        # \u6700\u5c0f\u5024\u66f4\u65b0\n        if (min_p >= i):\n            min_p = i\n        if (min_p >= i):\n            count += 1\n\n    print(count)\n\n\nn = int(input())\np = [int(x) for x in input().split()]\n\ncalc(n, p)\n","N = int(input())\nmin_p = float('inf')\nans = 0\nfor p in [int(x) for x in input().split()]:\n  if p <= min_p:\n    min_p = p\n    ans += 1\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\ncnt = 1\ntmp_min = p[0]\nfor i in range(1, n):\n    tmp_min = min(tmp_min, p[i]) \n    if tmp_min == p[i]:\n        cnt += 1\nprint(cnt)","N = int(input())\n# P = np.array(input().split(' '), dtype = int)\nP = list(map(int, input().split(' ')))\n\nar_bool = [(min(P[:i+1]) == P[i]) for i in range(N)]\nprint(sum(ar_bool))","from collections import deque\n\nN = int(input())\nP = list(map(int,input().split()))\n\nmx = P[0]\nmn = mx\ncount = 0\n\ncut = list(filter(lambda x:mx >= x,P))\nans = deque()\n\nfor a in cut:\n    if a == 1:\n        break\n    if mn >= a:\n        mn = a\n    else:\n        cut.pop(cut.index(a))\nprint(len(cut))","n = int(input())\np = list(map(int, input().split()))\n\nans = 0\n\nflg = True\n\nfor i in range(n):\n    for j in range(i):\n        if p[i] <= p[j]:\n            pass\n        else:\n            flg = False\n            break\n    if flg:\n        ans += 1\n\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n  if all(e >= p[i] for e in p[: i + 1]):\n    ans += 1\n    \nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(N):\n    if all([True if P[j] >= P[i] else False for j in range(i+1)]):\n        cnt += 1\nprint(cnt)\n","N = int(input())\nP = [int(i) for i in input().split()]\n\nans = 1\nt = N\nfor i in range(N - 1):\n    t = min(t, P[i])\n    if t > P[i + 1]:\n        ans += 1\nprint(ans)\n","#https:\/\/atcoder.jp\/contests\/abc152\/tasks\/abc152_c\n# -*- coding: utf-8 -*-\nN = int(input())\nP = input().split()\nT = []\nL =0\nT.insert(0,int(P[0]))\nP[0] = int(P[0])\nfor i in  range(1,len(P)):\n  P[i] = int(P[i])\n  if T[-1]>=P[i]:\n    L =+ 1\n    if T[-1]>P[i]:\n      T.append(P[i])\nprint(len(T))","N = int(input())\nP = input().split(\" \")\n\nt = 1\nfor i in range(1,N):\n    list = []\n    for j in range(i + 1):\n        list.append(int(P[j]))\n    m = min(list)\n    if m == int(P[i]):\n        t = t + 1\n\nprint(t)","N = int(input())\na = input().rstrip().split()\nP = [0] * N\nfor i in range(N):\n  P[i] = int(a[i])\nminP = P[0]\nans = 1\nfor i in range(N - 1):\n  if minP >= P[i + 1]:\n    ans += 1\n    minP = P[i + 1]\nprint(ans)","n = int(input())\np = list(map(int,input().split()))\nmn = 2*10**5+1\ncount = 0\nfor i in range(n):\n  if p[i] < mn:\n    count += 1\n    mn = p[i]\nprint(count)\n    \n  ","n = int(input())\nP = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n  if min(P[:i+1]) == P[i]:\n    ans += 1\nprint(ans)","N = int(input())\nP = list(map(int, input().split(' ')))\n\nmin = 10 ** 5\nnum = 1\nfor i in range(1, N):\n  if min > P[i - 1]:\n    min = P[i - 1]\n  if P[i] <= min:\n    num += 1\n    \nprint(num)\n","N = int(input())\nli = [int(zz) for zz in input().split()]\n\nans = 0\ntmp = 10**9\nfor i in range(N):\n    if li[i] < tmp:\n        tmp = li[i]\n        ans += 1\n\nprint(ans)\n","n = int(input())\np = list(map(lambda x: int(x), input().split()))\n\ncount = 0\nfor i in range(n):\n  a = p[i]\n  alist = p[:i+1]\n  alist.sort()\n  if alist[0] == a:\n    count += 1\nprint(count)","N = int(input())\nP = list(map(int,input().split()))\n \ncnt = 0\n\nfor i in range(1,N+1):\n  a = P.index(min(P[:i]))\n  if i == a+1:\n    cnt += 1\n    \nprint(cnt)","N = int(input())\nP = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    if P[i] == min(P[:i+1]):\n        ans += 1\nprint(ans)\n","# coding: utf-8\n# Your code here!\nN=int(input())\nP=list(map(int,input().split()))\n\nans=0\nmi=10**9\nfor i in range(N):\n    if mi>P[i]:\n        mi=P[i]\n        ans+=1\n        \n\nprint(ans)","# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nn = int(input())\np = [int(x) for x in input().split()]\n\nx = []\noklist = [0]\n\nfor i in range(1,n):\n    res = \"ok\"\n    for j in range(i):\n        #print(j,i,p[j],p[i])\n        if p[j] < p[i]:\n            res = \"ng\"\n    if res == \"ok\":\n        oklist.append(i)\n\n#print(oklist)\nprint(len(oklist))\n","N=int(input())\nP=list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i == 0:\n        ans += 1\n    else:\n        #print(P[0:i+1],P[i],min(P[0:i+1]),i)\n        if min(P[0:i+1]) == P[i]:\n            ans += 1\nprint(ans)\n","import sys\n\nN = int(input())\nP = [int(v) for v in input().split()]\ncnt = 0\nfor i in range(N):\n    flg = True\n    for j in range(i):\n        if P[i] > P[j]:\n            flg = False\n            break\n    if flg:\n        cnt += 1\nprint(cnt)\n\n\n","N = int(input())\nP = list(map(int, input().split()))\ncnt = 0\nmin_n = P[0]\nfor i in range(N):\n    if min_n >= P[i]:\n        cnt += 1\n        min_p = P[i]\nprint(cnt)","n = int(input())\nli = list(map(int,input().split()))\nicount = 0\nfor i in range(n):\n    if li[i] == min(li[0:i]):\n        icount += 1:\nprint(icount)","n = int(input())\np = list(map(int,input().split()))\nmiss = 0\nfor i in range(n):\n    for j in range(i):\n        if p[i] > p[j]:\n            #print(i,p[i],j)\n            miss += 1\n            break\n\nprint(n-miss)","n = int(input())\np = input().split()\np = [int(i) for i in p]\n\nA = p[::-1]\ndef binary_search(nums, target):\n    l = 0\n    r = len(nums) - 1\n    while l <= r:\n        mid = (l + r) \/\/ 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n    # return l\n    return max(l, r)\n\nL = []\nfor i in range(len(A)):\n    if not L:\n        L.append(A[i])\n    else:\n        cur = binary_search(L, A[i])\n        L = L[:cur] + [A[i]] + L[cur + 1:]\nprint(len(L))","N = int(input())\nlow = 10 ** 6\nans = 0\nfor p in map(int, input().split()):\n    if p <= low:\n        low = p\n        ans += 1\nprint(ans)\n","N = int(input())\nP = [int(i) for i in input().split()]\nans = {}\nfor i in range(N):\n    flag = 0\n    try:\n        i_min = min(P[:i])\n    except:\n        ans[i] = 0\n        continue\n    if P[i] <= i_min:\n        #print(P[i], i_max)\n        ans[i] = 0\n    \n    #if not flag:\n    #    ans += 1\n#print(ans.keys())\nprint(len(ans.keys()))","n = int(input())\np = list(map(int, input().split()))\n\nc = 1\n\nfor i in range(n):\n    if (i > 0):\n        if (p[i-1] < p[i]):\n            c += 1\nprint(c)","n=int(input())\np=map(int,input().split())\np_list=list(p)\nn_list=[]\nfor j in range(n):\n    for i in range(j,n):\n        if p_list[i]<=p_list[j]:\n            n_list.append(i)\ncount=0\nfor i in range(n):\n    if i+1==n_list.count(i):\n        count+=1\nprint(count)\n\n            ","N = int(input())\nL = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    Pi = L[i]\n    tes = True\n    for j in range(i + 1):\n        if Pi > L[j]:\n            tes = False\n    if tes:\n        ans +=1 \nprint(ans)","n,*l=map(int,open(0).read().split())\nt,c=n+1,0\nfor i in l:\n  if i<t: t=i; c+=1\nprint(c)","n = int(input())\np = [int(x) for x in input().split()]\n\nc = [1 if p[i] == min(p[:i+1]) else 0 for i in range(n)]\nprint(sum(c))\n","import numpy as np\nn = int(input())\np = list(map(int, input().split()))\np_diff = np.diff(p)\ncnt = 1\nfor x in p_diff:\n  if(x <= 0):\n    cnt += 1\nprint(cnt)","import numpy as np\n\nN = int(input())\nP = np.array(input().split(' '), dtype = int)\n\ncounta = 0\nfor i in range(N):\n    if np.sum((P >= P[i])[:i+1]) == i + 1:\n        counta += 1\nprint(counta)","N = int(input())\nP = list(map(int,input().split()))\n\"\"\"\n1\u4ee5\u4e0a\u524d\u63d0\n\u914d\u5217\u756a\u53f7(j<=i)\u3067\u3042\u308b\u3068\u304d\n\u914d\u5217\u8981\u7d20\u304ci<=j\u3068\u306a\u308b\u500b\u6570\n\n1~i\u307e\u3067\u3067\u4e2d\u8eab\u304c\u964d\u9806\u3067\u3042\u308b\u304b\u3069\u3046\u304b\n\u3059\u306a\u308f\u3061\u3001\u63a2\u7d22\u7bc4\u56f2\u3067\u306e\u5148\u982d\u304c\u6700\u5c0f\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308c\u3070\u3044\u3044\u3002\n\n\u554f\u984c\u65873\u884c\u76ee\u3088\u308a\u3001\u5fc5\u305aj,i\u306f1\u756a\u76ee\u3092\u63a2\u7d22\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\"\"\"\nres = 0\nbefore = 10**9 \nfor i in range(N):\n    if P[i] < before:\n        before = P[i]\n        res += 1\nelse:\n    print(res)\n","N = int(input())\nnum = list(map(int,input().split()))\ncnt = 0\nflag = False\nnum_min = 10**8\nfor i in range(N):\n\tif(i == 0):\n\t\tcnt+=1\n\t\tcontinue\n\tnum_min = min(num_min,num[i-1])\n\tif (num[i] <= num_min):\n\t\tcnt+=1\nprint(cnt)","N,*P = map(int, open(0).read().split())\nm = P[0]\nans = 0\nfor x in P:\n    if x <= m:\n        m = x\n        ans += 1\nprint(ans)","n = int(input())\np = list(map(int, input().split()))\n\nlower = p[0]\ncnt = 1\nfor i in range(1, n):\n    if lower > p[i]:\n        cnt += 1\n        lower = min(lower, p[i])\n\nprint(cnt)\n\n","N = int(input())\np = list(map(int, input().split()))\nans = 1\nfor i in range(1,N):\n    if p[i-1]>p[i]:\n        ans +=1\nprint(ans)","N = int(input())\nP = list(map(int, input().split()))\nc = 1\nfor i in range(N-1):\n    if P[i] >= P[i + 1]:\n        c += 1\nprint(c)\n","n=int(input())\nA=list(map(int,input().split()))\nans=1\nqq=A[0]\nfor i in range(n):\n  if qq<A[i+1]:\n    qq=A[i+1]\n    continue\n  else:\n    ans+=1\nprint(ans)","n = int(input())\nlist = list(map(int,input().split(\" \")))\nresult = n\ntem = list[0]\nfor i in range(n):\n    if tem >= list[i]:\n        tem = list[i]\n    else:\n        result -= 1\n\nprint(result)","n = int(input())\np = list(map(int,input().split()))\n\ncnt = 0\nfor i in range(n):\n  if min(p[:i+1]) == p[i]:\n    cnt += 1\nprint(cnt)","n = int(input())\nP = list(map(int, input().split()))\nm = P[0]\na = 0\nfor i in range(0, n):\n    if m >= P[i]: \n        a += 1\n        m = P[i]\nprint(a)","# -*- coding: utf-8 -*-\n\ndef main():\n  N = int(input())\n  P = list(map(int, input().split()))\n  count = 1\n  n_min = P[0]\n  for i in range(1, N):\n    if P[i] <= n_min:\n      count += 1\n      n_min = P[i]\n  print(count)\n\nif __name__ == '__main__':\n  main()","N = int(input())\n\nP = [int(x) for x in input().split()]\n\ncnt = 1\nmin_num = P[0]\n\nfor i in range(1,N):\n    if P[i] <= min_num:\n        cnt += 1\n        min_num = P[i]\nprint(cnt)\n","N=int(input())\na = [int(x) for x in input().split()]\ncount=1\nmini=a[0]\nprint(a)\nfor i in range (1,N):\n    if a[i]<mini:\n        count=count+1\n        mini=a[i]\n\nprint(count)","n = int(input())\np = list(map(int,input().split()))\nminp = p[0]\ncnt = 0\nfor i in range(n):\n    if p[i]<=minp:cnt+=1\n    minp = min(minp,p[i])\nprint(cnt)","n =int(input()) \nt = [int(i) for i in input().split()]\ns=1\nfor i in range(2,n+1):\n    for j in range(1,i):\n        if t.index(j)<t.index(i):\n            break\n    else:\n        s+=1\n        #print(i,j)\n        continue\nprint(s)","N = int(input())\np = [int(e) for e in input().split(\" \")]\nlow = p[0]\nc = 0\nfor i in range(N):\n    if(p[i] <= low):\n        c += 1\n        low = p[i]\nprint(c)","N = int(input())\nP = [int(i) for i in input().rstrip().split(' ')]\nc = 0\nfor i,p in enumerate(P):\n    if all([p <= q for q in P[:i+1]]):\n        c += 1\nprint(c)","N = int(input())\nP = list(map(int,input().split()))\nn = 1\npi_min = P[0]\nfor pi in P[1:]:\n  if pi < pi_min:\n    n += 1\n    pi_min = pi\nprint(n)","N = int(input())\nL = [int(x) for x in input().split()]\n\ndef Min(i,L):\n  if i == 0:\n    return L[0]\n  else:\n    return min(Min(i-1,L), L[i])\n\ncount = 1\nfor i in range(1,N):\n  if L[i]<=Min(i-1,L):\n    count+=1\nprint(count)","import sys\nimport math\nimport itertools\nN=int(input())\nP=list(map(int,input().split()))\nmn=10^6\ncnt=0\nfor i in range(N):\n    if P[i]<=mn:\n        mn=P[i]\n        cnt+=1\nprint(cnt)","N = int(input())\nS = list(map(int,input().split()))\ncounter = int(0)\ntmp = int(0)\nbreakPoint = int(0)\n\nif N == 1:\n  print(\"1\")\n\nelse:\n  for i in S:\n    tmp = tmp + 1\n    for j in range(0,tmp):\n      if S[j] >= i:\n        continue\n      else:\n        breakPoint = 1\n        break\n    if breakPoint == 0:\n      counter = counter + 1\n    else:\n      breakPoint = 0\n  print(counter)","n = int(input())\npList = list(map(int,input().split()))\n\ncount = 1\nfor i in range(1,n-1):\n  sp = sorted(pList[:i])\n  if sp[0] >= pList[i]:\n    count += 1\n\nif len(pList) != 1:\n    ls = sorted(pList[:-1])\n    if ls[0] >= pList[-1]:\n      count += 1\n\nprint(count)\n","n = int(input())\np = [int(i) for i in input().split()]\n\nflg=0\n\nfor j in range(n):\n    if min(p[0:j+1])==p[j]:\n        flg +=1\n\nprint(flg)","list_raw = [int(x) for x in input().split()]\n\nlist_parsed = []\n\ncount = 0\nfor elem in list_raw:\n    if max(list_parsed) <= elem:\n        count += 1\n\n    list_parsed.append(elem)\n\nprint(count)","a = int(input())\nb = list(map(int,input().split()))\nb[0:0]=0\nc = 0\nfor i in range(1,a+1):\n  switch = 0\n  for j in range(0,i):\n    if b[i] < b[j]:\n      switch = 1\n    if switch == 1:\n      c += 1\nprint(c)\n      \n      \n  ","N=int(input())\nP=list(map(int,input().split()))\nx=1\nMin=P[0]\nfor i in range(1,N):\n    if Min>P[i]:\n        Min=P[i]\n        x+=1\nprint(x)"]}
{"description_html":"<h1>Red Dragonfly<\/h1>\n\u3000\n<p>\n  It\u2019s still hot every day, but September has already come. It\u2019s autumn according to the calendar. Looking around, I see two red dragonflies at rest on the wall in front of me. It\u2019s autumn indeed.\n<\/p>\n\n<p>\n  When two red dragonflies\u2019 positional information as measured from the end of the wall is given, make a program to calculate the distance between their heads.\n<\/p>\n\n<h2>Input<\/h2>\n<p>\n  The input is given in the following format.\n<\/p>\n<pre>\n$x_1$ $x_2$\n<\/pre>\n\n<p>\n  The input line provides dragonflies\u2019 head positions $x_1$ and $x_2$ ($0 \\leq x_1, x_2 \\leq 100$) as integers.\n<\/p>\n\n<h2>Output<\/h2>\n<p>\n  Output the distance between the two red dragonflies in a line.\n<\/p>\n\n<h2>Sample Input 1<\/h2>\n<pre>\n20 30\n<\/pre>\n<h2>Sample Output 1<\/h2>\n<pre>\n10\n<\/pre>\n\n<h2>Sample Input 2<\/h2>\n\n<pre>\n50 25\n\n<\/pre>\n<h2>Sample Output 2<\/h2>\n<pre>\n25\n<\/pre>\n\n<h2>Sample Input 3<\/h2>\n<pre>\n25 25\n<\/pre>\n<h2>Sample output 3<\/h2>\n<pre>\n0\n<\/pre>\n","description_string":"Red Dragonfly\n\u3000\n\n  It\u2019s still hot every day, but September has already come. It\u2019s autumn according to the calendar. Looking around, I see two red dragonflies at rest on the wall in front of me. It\u2019s autumn indeed.\n\n\n  When two red dragonflies\u2019 positional information as measured from the end of the wall is given, make a program to calculate the distance between their heads.\n\nInput\n\n  The input is given in the following format.\n\n\n$x_1$ $x_2$\n\n\n  The input line provides dragonflies\u2019 head positions $x_1$ and $x_2$ ($0 \\leq x_1, x_2 \\leq 100$) as integers.\n\nOutput\n\n  Output the distance between the two red dragonflies in a line.\n\nSample Input 1\n\n20 30\n\nSample Output 1\n\n10\n\nSample Input 2\n\n50 25\n\n\nSample Output 2\n\n25\n\nSample Input 3\n\n25 25\n\nSample output 3\n\n0\n\n","orig_lang_html":"<h1>Red Dragonfly<\/h1>\n\u3000\n<p>\n  It\u2019s still hot every day, but September has already come. It\u2019s autumn according to the calendar. Looking around, I see two red dragonflies at rest on the wall in front of me. It\u2019s autumn indeed.\n<\/p>\n\n<p>\n  When two red dragonflies\u2019 positional information as measured from the end of the wall is given, make a program to calculate the distance between their heads.\n<\/p>\n\n<h2>Input<\/h2>\n<p>\n  The input is given in the following format.\n<\/p>\n<pre>\n$x_1$ $x_2$\n<\/pre>\n\n<p>\n  The input line provides dragonflies\u2019 head positions $x_1$ and $x_2$ ($0 \\leq x_1, x_2 \\leq 100$) as integers.\n<\/p>\n\n<h2>Output<\/h2>\n<p>\n  Output the distance between the two red dragonflies in a line.\n<\/p>\n\n<h2>Sample Input 1<\/h2>\n<pre>\n20 30\n<\/pre>\n<h2>Sample Output 1<\/h2>\n<pre>\n10\n<\/pre>\n\n<h2>Sample Input 2<\/h2>\n\n<pre>\n50 25\n\n<\/pre>\n<h2>Sample Output 2<\/h2>\n<pre>\n25\n<\/pre>\n\n<h2>Sample Input 3<\/h2>\n<pre>\n25 25\n<\/pre>\n<h2>Sample output 3<\/h2>\n<pre>\n0\n<\/pre>\n","orig_lang_string":"Red Dragonfly\n\u3000\n\n  It\u2019s still hot every day, but September has already come. It\u2019s autumn according to the calendar. Looking around, I see two red dragonflies at rest on the wall in front of me. It\u2019s autumn indeed.\n\n\n  When two red dragonflies\u2019 positional information as measured from the end of the wall is given, make a program to calculate the distance between their heads.\n\nInput\n\n  The input is given in the following format.\n\n\n$x_1$ $x_2$\n\n\n  The input line provides dragonflies\u2019 head positions $x_1$ and $x_2$ ($0 \\leq x_1, x_2 \\leq 100$) as integers.\n\nOutput\n\n  Output the distance between the two red dragonflies in a line.\n\nSample Input 1\n\n20 30\n\nSample Output 1\n\n10\n\nSample Input 2\n\n50 25\n\n\nSample Output 2\n\n25\n\nSample Input 3\n\n25 25\n\nSample output 3\n\n0\n\n","solve_rate":0.9605055292,"codenet_problem_id":"p00376","input_testcases":{"1":"25 13","62":"2 77","11":"35 37","63":"1 33","9":"26 0","35":"85 6","8":"27 37","3":"50 0","0":"50 12","32":"0 0","13":"50 14","47":"31 0","6":"58 0","36":"85 12","24":"21 0","39":"4 19","46":"18 0","22":"33 13","40":"1 17","28":"50 15","7":"25 11","4":"25 17","2":"27 30","103":"25 25","5":"27 22","14":"15 37","19":"22 13","61":"1 77","60":"0 77","33":"85 5","37":"60 12","100":"50 25","18":"84 6","102":"20 30","25":"32 8","101":"20 30","10":"50 11","30":"40 15","31":"85 4","29":"85 2","48":"17 0","38":"1 12","23":"87 0","16":"50 6","21":"84 0"},"output_testcases":{"1":"12\n","62":"75\n","11":"2\n","63":"32\n","9":"26\n","35":"79\n","8":"10\n","3":"50\n","0":"38\n","32":"0\n","13":"36\n","47":"31\n","6":"58\n","36":"73\n","24":"21\n","39":"15\n","46":"18\n","22":"20\n","40":"16\n","28":"35\n","7":"14\n","4":"8\n","2":"3\n","103":"0\n","5":"5\n","14":"22\n","19":"9\n","61":"76\n","60":"77\n","33":"80\n","37":"48\n","100":"25\n","18":"78\n","102":"10\n","25":"24\n","101":"10\n","10":"39\n","30":"25\n","31":"81\n","29":"83\n","48":"17\n","38":"11\n","23":"87\n","16":"44\n","21":"84\n"},"n_missing":59,"programs":["# coding: utf-8\n# Your code here!\n\na,b=map(int,input().split())\ny = abs(a-b)\nprint(y)\n","x1,x2=map(int,input().split())\nprint('{:.0f}'.format(((x1-x2)**2)**(1\/2)))\n","m,n = [ int(s) for s in input().split() ]\n  \nif m > n:\n    print(m-n)\nelse:\n    print(n-m)\n","a,b=(int(x) for x in input().split())\nc=abs(a-b)\nprint(c)\n","x1, x2 = map(int, input().split())\nprint(abs(x1 - x2))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse :\n    print(a-b)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n  print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nc=abs(x1-x2)\nprint(c)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x=input().split()\ny=list(map(int,x))\na=y[0]\nb=y[1]\nc=abs(a-b)\nprint(c)\n","a , b = map (int , input() . split())\nif( a>b ):\n    print( a-b )\nelse:\n    print( b-a )\n","x1, x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x, y = input().split(' ')\nprint(abs(int(x) - int(y)))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(0)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(int(x1-x2))\nelse:\n    print(int(x2-x1))\n","import math\na,b=map(int,input().split())\nc=int(a-b)\nd=abs(c)\nprint(d)\n","x_1,x_2 = map(int,input().split())\nx = abs(x_2-x_1)\nprint(x)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a,b=map(int,input().split())\nif a>b:\n    print(int(a-b))\nelse:\n    print(int(b-a))\n","a,b=map(int,input().split())\nif a<=b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b= map(int, input().split())\nif a < b:\n    print(b-a)\nelse:\n    print(a-b)\n","import math\na , b = map(int,input().split())\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(\"0\")\n","# coding:utf-8\n\nx = list(map(int, input().split(\" \")))\nif x[0] >= x[1]:\n    print(x[0] - x[1])\nelse:\n    print(x[1] - x[0])\n","x1,x2=map(int,input().split())\n\nif x1>x2:\n    print(x1 - x2)\nelse:\n    print(x2 - x1)\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelse :\n    print(x2-x1)\n\n","a,b=map(int,input().split())\nif a>=b:\n    print(int(a-b))\nelif b>a:\n    print(int(b-a))\n","a, b = map(int, input().split())\nprint(abs(a - b))\n","x,y=map(int,input().split())\nif x==y:\n    print(0)\nelif x>y:\n    print(x-y)\nelse:\n    print(y-x)\n","import math\nx,y=map(int,input().split())\nm=int(math.fabs(x-y))\nprint(m)\n","a,b=map(int,input().split())\n\nprint(abs(a-b))\n","x1, x2 = map(int, input().split())\nprint(abs(x2-x1))\n","a,b=map(int,input().split())\nif(a>b):\n    print(a-b)\nelse:\n    print(b-a)\n","a,b=map(int,input().split())\nif a>b:print(a-b)\nelse:print(b-a)\n","a,b = map(int, input().split())\nans = abs(a-b)\nprint(ans)\n","def main():\n     x = list(map(int,input().split()))\n     print(abs(x[0]-x[1]))\n\nif __name__ == '__main__':\n    main()\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelse :\n    print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x1,x2 = map(int,input().split())\nprint(abs(x2-x1))\n\n","x, y = map(int, input().split())\nif x >= y:\n    print(x-y)\nelse:\n    print(y-x)\n","# coding: utf-8\n\nx1, x2 = list(map(int, input().split(' ')))\ndist = abs(x1-x2)\nprint(dist)\n","x,y=(int(x)for x in input().split())\n\nif x>y:\n    print(x-y)\n    \nelif x<y:\n    print(y-x)\n    \nelif x==y:\n    print('0')\n","x1, x2 = map(int,input().split())\nprint(int(abs(x1-x2)))\n","x1,x2=input().split()\nx1=int(x1)\nx2=int(x2)\nif x1<=x2:\n    print(int(x2-x1))\nelse:\n    print(int(x1-x2))\n","x,y=map(int,input().split())\nif x<=y:\n    print(y-x)\nelse:\n    print(x-y)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","x1, x2 = map(int, input().split())\n\nif x1<=x2:\n    d = x2-x1\nelse:\n    d = x1-x2\n    \nprint(d)\n","a, b = map(int, input().split())\nprint(abs(a-b))\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","x = list(map(int, input().split()))\nprint(abs(x[0]-x[1]))\n\n","a,b = map(int,input().split())\nif a < b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a, b=map(int,input().split())\nif a > b:\n    x=a-b\n    print(x)\nelif a < b:\n    y=b-a\n    print(y)\nelse:\n    z=a-b\n    print(z)\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","x1,x2=map(int,input().split())\nif x1>x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","a,b = map(int,input().split(\" \"))\nif a > b:\n  print(a-b)\nelse:\n  print(b-a)\n","x1,x2 = list(map(int, input().split()))\nprint(abs(x1-x2))\n","a,b=map(int,input().split())\n\nif a>=b:\n    print(int(a-b))\nelse:\n    print(int(b-a))\n    \n","a,b=map(int,input().split())\nif a>b:print(a-b)\nelif a<b:print(b-a)\nelif a==b:print(0)\n\n","\nx1,x2 = map(int,input().split())\n\nif(x1 >= x2):\n    print(x1 - x2)\n\nelif(x1 < x2):\n    print(x2 - x1)\n\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","x_1,x_2=map(int,input().split())\nprint(abs(x_2-x_1))\n\n","a,b=map(int,input().split())\nif a-b==0:\n    print(0)\nelif a>b:\n    print(a-b)\nelse:\n    print(b-a)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelif x1<x2:\n    print(x2-x1)\n","x,y=map(int,input().split())\nprint(abs(x-y))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse :\n    print(a-b)\n","x1 ,x2 = map(int, input() . split())\nprint(abs(x1 - x2))\n\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","a,b=map(int, input().split())\nprint(abs(a-b))\n","#\u6a19\u6e96\u5165\u529b\u3092\u3057\u3001\u8ddd\u96e2\u306e\u5dee\u3092\u6c42\u3081\u308b\na,b = map(int,input().split())\nprint(abs(b - a))\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelif x2 > x1:\n    print(x2-x1)\nelse:\n    print(\"0\")\n","x1,x2=map(int,input().split())\nif x2>x1:\n    print(int(x2-x1))\nelif x2==x1:\n    print(int(x2-x1))\nelse:\n    print(int(x1-x2))\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","a , b = map(int,input().split())\nx = a - b\ny = abs(x)\nprint(y)\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b = map(int,input().split())\n\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(\"0\")\n","a,b=map(int,input().split())\nif a>b:\n  print(a-b)\nelse:\n  print(b-a)\n","a,b=map(int,split())\nprint(abs(a-b))\n","a,b = input().split()\nc=int(int(a)-int(b))\nif c<0 : c=c*(-1)\nprint(c)\n","x1,x2 = map(int,input().split())\nprint(abs(x1-x2))\n","x_1,x_2=map(int,input().split())\nprint(abs(x_2-x_1))\n","x1,x2=map(int,input().split())\na=abs(x1-x2)\nprint(a)\n\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n\n","import math\na,b=map(int,input().split())\nc=math.fabs(a-b)\nprint(math.floor(c))\n","a,b =map(int,(input().split()))\n\nprint(abs(a-b))\n","x1,x2=map(int,input().split())\nif x1<=x2:\n    print(x2 - x1)\nelse:\n    print(x1 - x2)\n","x1,x2 = map(int,input().split())\ny = abs(x1 - x2)\nprint(y)\n","a, b = map(int, input().split())\nprint(abs(b - a))\n","a,b = map(int,input().split())\nif a>b:\n    print(a-b)\nelse :\n    print(b-a)\n","a, b = map(int, input().split())\nprint(abs(a-b))\n","a,b = input().split()\na = int(a)\nb = int(b)\nif a<b:\n    c = b-a\nelse:\n    c = a-b\nprint(int(c))\n","x1, x2 = map(int,input().split())\nif x1 >= x2:\n    print(x1 - x2)\nelse:\n    print(x2 - x1)\n","x1, x2 = map(int, input().split())\n\nif x1 > x2:\n    a = x1 - x2\nelse:\n    a = x2 - x1\n\nprint(a)\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","import math\nx1, x2=map(int,input().split())\nprint(int(math.fabs(x1-x2)))\n","a,b=map(int,input().split())\nif b>a:\n    s=b - a\nelse:\n    s=a - b\nprint(int(s))\n"],"raw_generations":["# coding: utf-8\n# Your code here!\n\na,b=map(int,input().split())\ny = abs(a-b)\nprint(y)\n","x1,x2=map(int,input().split())\nprint('{:.0f}'.format(((x1-x2)**2)**(1\/2)))\n","m,n = [ int(s) for s in input().split() ]\n  \nif m > n:\n    print(m-n)\nelse:\n    print(n-m)\n","a,b=(int(x) for x in input().split())\nc=abs(a-b)\nprint(c)\n","x1, x2 = map(int, input().split())\nprint(abs(x1 - x2))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse :\n    print(a-b)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n  print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nc=abs(x1-x2)\nprint(c)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x=input().split()\ny=list(map(int,x))\na=y[0]\nb=y[1]\nc=abs(a-b)\nprint(c)\n","a , b = map (int , input() . split())\nif( a>b ):\n    print( a-b )\nelse:\n    print( b-a )\n","x1, x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x, y = input().split(' ')\nprint(abs(int(x) - int(y)))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(0)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(int(x1-x2))\nelse:\n    print(int(x2-x1))\n","import math\na,b=map(int,input().split())\nc=int(a-b)\nd=abs(c)\nprint(d)\n","x_1,x_2 = map(int,input().split())\nx = abs(x_2-x_1)\nprint(x)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a,b=map(int,input().split())\nif a>b:\n    print(int(a-b))\nelse:\n    print(int(b-a))\n","a,b=map(int,input().split())\nif a<=b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b= map(int, input().split())\nif a < b:\n    print(b-a)\nelse:\n    print(a-b)\n","import math\na , b = map(int,input().split())\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(\"0\")\n","# coding:utf-8\n\nx = list(map(int, input().split(\" \")))\nif x[0] >= x[1]:\n    print(x[0] - x[1])\nelse:\n    print(x[1] - x[0])\n","x1,x2=map(int,input().split())\n\nif x1>x2:\n    print(x1 - x2)\nelse:\n    print(x2 - x1)\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelse :\n    print(x2-x1)\n\n","a,b=map(int,input().split())\nif a>=b:\n    print(int(a-b))\nelif b>a:\n    print(int(b-a))\n","a, b = map(int, input().split())\nprint(abs(a - b))\n","x,y=map(int,input().split())\nif x==y:\n    print(0)\nelif x>y:\n    print(x-y)\nelse:\n    print(y-x)\n","import math\nx,y=map(int,input().split())\nm=int(math.fabs(x-y))\nprint(m)\n","a,b=map(int,input().split())\n\nprint(abs(a-b))\n","x1, x2 = map(int, input().split())\nprint(abs(x2-x1))\n","a,b=map(int,input().split())\nif(a>b):\n    print(a-b)\nelse:\n    print(b-a)\n","a,b=map(int,input().split())\nif a>b:print(a-b)\nelse:print(b-a)\n","a,b = map(int, input().split())\nans = abs(a-b)\nprint(ans)\n","def main():\n     x = list(map(int,input().split()))\n     print(abs(x[0]-x[1]))\n\nif __name__ == '__main__':\n    main()\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelse :\n    print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x1,x2 = map(int,input().split())\nprint(abs(x2-x1))\n\n","x, y = map(int, input().split())\nif x >= y:\n    print(x-y)\nelse:\n    print(y-x)\n","# coding: utf-8\n\nx1, x2 = list(map(int, input().split(' ')))\ndist = abs(x1-x2)\nprint(dist)\n","x,y=(int(x)for x in input().split())\n\nif x>y:\n    print(x-y)\n    \nelif x<y:\n    print(y-x)\n    \nelif x==y:\n    print('0')\n","x1, x2 = map(int,input().split())\nprint(int(abs(x1-x2)))\n","x1,x2=input().split()\nx1=int(x1)\nx2=int(x2)\nif x1<=x2:\n    print(int(x2-x1))\nelse:\n    print(int(x1-x2))\n","x,y=map(int,input().split())\nif x<=y:\n    print(y-x)\nelse:\n    print(x-y)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","x1, x2 = map(int, input().split())\n\nif x1<=x2:\n    d = x2-x1\nelse:\n    d = x1-x2\n    \nprint(d)\n","a, b = map(int, input().split())\nprint(abs(a-b))\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","x = list(map(int, input().split()))\nprint(abs(x[0]-x[1]))\n\n","a,b = map(int,input().split())\nif a < b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a, b=map(int,input().split())\nif a > b:\n    x=a-b\n    print(x)\nelif a < b:\n    y=b-a\n    print(y)\nelse:\n    z=a-b\n    print(z)\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","x1,x2=map(int,input().split())\nif x1>x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","a,b = map(int,input().split(\" \"))\nif a > b:\n  print(a-b)\nelse:\n  print(b-a)\n","x1,x2 = list(map(int, input().split()))\nprint(abs(x1-x2))\n","a,b=map(int,input().split())\n\nif a>=b:\n    print(int(a-b))\nelse:\n    print(int(b-a))\n    \n","a,b=map(int,input().split())\nif a>b:print(a-b)\nelif a<b:print(b-a)\nelif a==b:print(0)\n\n","\nx1,x2 = map(int,input().split())\n\nif(x1 >= x2):\n    print(x1 - x2)\n\nelif(x1 < x2):\n    print(x2 - x1)\n\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","x_1,x_2=map(int,input().split())\nprint(abs(x_2-x_1))\n\n","a,b=map(int,input().split())\nif a-b==0:\n    print(0)\nelif a>b:\n    print(a-b)\nelse:\n    print(b-a)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelif x1<x2:\n    print(x2-x1)\n","x,y=map(int,input().split())\nprint(abs(x-y))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse :\n    print(a-b)\n","x1 ,x2 = map(int, input() . split())\nprint(abs(x1 - x2))\n\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","a,b=map(int, input().split())\nprint(abs(a-b))\n","#\u6a19\u6e96\u5165\u529b\u3092\u3057\u3001\u8ddd\u96e2\u306e\u5dee\u3092\u6c42\u3081\u308b\na,b = map(int,input().split())\nprint(abs(b - a))\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelif x2 > x1:\n    print(x2-x1)\nelse:\n    print(\"0\")\n","x1,x2=map(int,input().split())\nif x2>x1:\n    print(int(x2-x1))\nelif x2==x1:\n    print(int(x2-x1))\nelse:\n    print(int(x1-x2))\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","a , b = map(int,input().split())\nx = a - b\ny = abs(x)\nprint(y)\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b = map(int,input().split())\n\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(\"0\")\n","a,b=map(int,input().split())\nif a>b:\n  print(a-b)\nelse:\n  print(b-a)\n","a,b=map(int,split())\nprint(abs(a-b))\n","a,b = input().split()\nc=int(int(a)-int(b))\nif c<0 : c=c*(-1)\nprint(c)\n","x1,x2 = map(int,input().split())\nprint(abs(x1-x2))\n","x_1,x_2=map(int,input().split())\nprint(abs(x_2-x_1))\n","x1,x2=map(int,input().split())\na=abs(x1-x2)\nprint(a)\n\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n\n","import math\na,b=map(int,input().split())\nc=math.fabs(a-b)\nprint(math.floor(c))\n","a,b =map(int,(input().split()))\n\nprint(abs(a-b))\n","x1,x2=map(int,input().split())\nif x1<=x2:\n    print(x2 - x1)\nelse:\n    print(x1 - x2)\n","x1,x2 = map(int,input().split())\ny = abs(x1 - x2)\nprint(y)\n","a, b = map(int, input().split())\nprint(abs(b - a))\n","a,b = map(int,input().split())\nif a>b:\n    print(a-b)\nelse :\n    print(b-a)\n","a, b = map(int, input().split())\nprint(abs(a-b))\n","a,b = input().split()\na = int(a)\nb = int(b)\nif a<b:\n    c = b-a\nelse:\n    c = a-b\nprint(int(c))\n","x1, x2 = map(int,input().split())\nif x1 >= x2:\n    print(x1 - x2)\nelse:\n    print(x2 - x1)\n","x1, x2 = map(int, input().split())\n\nif x1 > x2:\n    a = x1 - x2\nelse:\n    a = x2 - x1\n\nprint(a)\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","import math\nx1, x2=map(int,input().split())\nprint(int(math.fabs(x1-x2)))\n","a,b=map(int,input().split())\nif b>a:\n    s=b - a\nelse:\n    s=a - b\nprint(int(s))\n"],"formatted_programs":["# coding: utf-8\n# Your code here!\n\na,b=map(int,input().split())\ny = abs(a-b)\nprint(y)\n","x1,x2=map(int,input().split())\nprint('{:.0f}'.format(((x1-x2)**2)**(1\/2)))\n","m,n = [ int(s) for s in input().split() ]\n  \nif m > n:\n    print(m-n)\nelse:\n    print(n-m)\n","a,b=(int(x) for x in input().split())\nc=abs(a-b)\nprint(c)\n","x1, x2 = map(int, input().split())\nprint(abs(x1 - x2))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse :\n    print(a-b)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n  print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nc=abs(x1-x2)\nprint(c)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x=input().split()\ny=list(map(int,x))\na=y[0]\nb=y[1]\nc=abs(a-b)\nprint(c)\n","a , b = map (int , input() . split())\nif( a>b ):\n    print( a-b )\nelse:\n    print( b-a )\n","x1, x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x, y = input().split(' ')\nprint(abs(int(x) - int(y)))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(0)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(int(x1-x2))\nelse:\n    print(int(x2-x1))\n","import math\na,b=map(int,input().split())\nc=int(a-b)\nd=abs(c)\nprint(d)\n","x_1,x_2 = map(int,input().split())\nx = abs(x_2-x_1)\nprint(x)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a,b=map(int,input().split())\nif a>b:\n    print(int(a-b))\nelse:\n    print(int(b-a))\n","a,b=map(int,input().split())\nif a<=b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b= map(int, input().split())\nif a < b:\n    print(b-a)\nelse:\n    print(a-b)\n","import math\na , b = map(int,input().split())\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(\"0\")\n","# coding:utf-8\n\nx = list(map(int, input().split(\" \")))\nif x[0] >= x[1]:\n    print(x[0] - x[1])\nelse:\n    print(x[1] - x[0])\n","x1,x2=map(int,input().split())\n\nif x1>x2:\n    print(x1 - x2)\nelse:\n    print(x2 - x1)\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelse :\n    print(x2-x1)\n\n","a,b=map(int,input().split())\nif a>=b:\n    print(int(a-b))\nelif b>a:\n    print(int(b-a))\n","a, b = map(int, input().split())\nprint(abs(a - b))\n","x,y=map(int,input().split())\nif x==y:\n    print(0)\nelif x>y:\n    print(x-y)\nelse:\n    print(y-x)\n","import math\nx,y=map(int,input().split())\nm=int(math.fabs(x-y))\nprint(m)\n","a,b=map(int,input().split())\n\nprint(abs(a-b))\n","x1, x2 = map(int, input().split())\nprint(abs(x2-x1))\n","a,b=map(int,input().split())\nif(a>b):\n    print(a-b)\nelse:\n    print(b-a)\n","a,b=map(int,input().split())\nif a>b:print(a-b)\nelse:print(b-a)\n","a,b = map(int, input().split())\nans = abs(a-b)\nprint(ans)\n","def main():\n     x = list(map(int,input().split()))\n     print(abs(x[0]-x[1]))\n\nif __name__ == '__main__':\n    main()\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelse :\n    print(x2-x1)\n\n","x1,x2 = map(int, input().split())\nprint(abs(x1-x2))\n","x1,x2 = map(int,input().split())\nprint(abs(x2-x1))\n\n","x, y = map(int, input().split())\nif x >= y:\n    print(x-y)\nelse:\n    print(y-x)\n","# coding: utf-8\n\nx1, x2 = list(map(int, input().split(' ')))\ndist = abs(x1-x2)\nprint(dist)\n","x,y=(int(x)for x in input().split())\n\nif x>y:\n    print(x-y)\n    \nelif x<y:\n    print(y-x)\n    \nelif x==y:\n    print('0')\n","x1, x2 = map(int,input().split())\nprint(int(abs(x1-x2)))\n","x1,x2=input().split()\nx1=int(x1)\nx2=int(x2)\nif x1<=x2:\n    print(int(x2-x1))\nelse:\n    print(int(x1-x2))\n","x,y=map(int,input().split())\nif x<=y:\n    print(y-x)\nelse:\n    print(x-y)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","x1, x2 = map(int, input().split())\n\nif x1<=x2:\n    d = x2-x1\nelse:\n    d = x1-x2\n    \nprint(d)\n","a, b = map(int, input().split())\nprint(abs(a-b))\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","x = list(map(int, input().split()))\nprint(abs(x[0]-x[1]))\n\n","a,b = map(int,input().split())\nif a < b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b=map(int,input().split())\nprint(abs(a-b))\n","a, b=map(int,input().split())\nif a > b:\n    x=a-b\n    print(x)\nelif a < b:\n    y=b-a\n    print(y)\nelse:\n    z=a-b\n    print(z)\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","x1,x2=map(int,input().split())\nif x1>x2:\n    print(x1-x2)\nelse:\n    print(x2-x1)\n","a,b = map(int,input().split(\" \"))\nif a > b:\n  print(a-b)\nelse:\n  print(b-a)\n","x1,x2 = list(map(int, input().split()))\nprint(abs(x1-x2))\n","a,b=map(int,input().split())\n\nif a>=b:\n    print(int(a-b))\nelse:\n    print(int(b-a))\n    \n","a,b=map(int,input().split())\nif a>b:print(a-b)\nelif a<b:print(b-a)\nelif a==b:print(0)\n\n","\nx1,x2 = map(int,input().split())\n\nif(x1 >= x2):\n    print(x1 - x2)\n\nelif(x1 < x2):\n    print(x2 - x1)\n\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","x_1,x_2=map(int,input().split())\nprint(abs(x_2-x_1))\n\n","a,b=map(int,input().split())\nif a-b==0:\n    print(0)\nelif a>b:\n    print(a-b)\nelse:\n    print(b-a)\n","x1,x2=map(int,input().split())\nif x1>=x2:\n    print(x1-x2)\nelif x1<x2:\n    print(x2-x1)\n","x,y=map(int,input().split())\nprint(abs(x-y))\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse :\n    print(a-b)\n","x1 ,x2 = map(int, input() . split())\nprint(abs(x1 - x2))\n\n","x1,x2=map(int,input().split())\nif x1<x2:\n    print(x2-x1)\nelse:\n    print(x1-x2)\n","a,b=map(int, input().split())\nprint(abs(a-b))\n","#\u6a19\u6e96\u5165\u529b\u3092\u3057\u3001\u8ddd\u96e2\u306e\u5dee\u3092\u6c42\u3081\u308b\na,b = map(int,input().split())\nprint(abs(b - a))\n","x1,x2 = map(int,input().split())\nif x1 > x2:\n    print(x1-x2)\nelif x2 > x1:\n    print(x2-x1)\nelse:\n    print(\"0\")\n","x1,x2=map(int,input().split())\nif x2>x1:\n    print(int(x2-x1))\nelif x2==x1:\n    print(int(x2-x1))\nelse:\n    print(int(x1-x2))\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","a , b = map(int,input().split())\nx = a - b\ny = abs(x)\nprint(y)\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n","a,b = map(int,input().split())\n\nif a<b:\n    print(b-a)\nelif a>b:\n    print(a-b)\nelse:\n    print(\"0\")\n","a,b=map(int,input().split())\nif a>b:\n  print(a-b)\nelse:\n  print(b-a)\n","a,b=map(int,split())\nprint(abs(a-b))\n","a,b = input().split()\nc=int(int(a)-int(b))\nif c<0 : c=c*(-1)\nprint(c)\n","x1,x2 = map(int,input().split())\nprint(abs(x1-x2))\n","x_1,x_2=map(int,input().split())\nprint(abs(x_2-x_1))\n","x1,x2=map(int,input().split())\na=abs(x1-x2)\nprint(a)\n\n","a,b=map(int,input().split())\nif a<b:\n    print(b-a)\nelse:\n    print(a-b)\n\n","import math\na,b=map(int,input().split())\nc=math.fabs(a-b)\nprint(math.floor(c))\n","a,b =map(int,(input().split()))\n\nprint(abs(a-b))\n","x1,x2=map(int,input().split())\nif x1<=x2:\n    print(x2 - x1)\nelse:\n    print(x1 - x2)\n","x1,x2 = map(int,input().split())\ny = abs(x1 - x2)\nprint(y)\n","a, b = map(int, input().split())\nprint(abs(b - a))\n","a,b = map(int,input().split())\nif a>b:\n    print(a-b)\nelse :\n    print(b-a)\n","a, b = map(int, input().split())\nprint(abs(a-b))\n","a,b = input().split()\na = int(a)\nb = int(b)\nif a<b:\n    c = b-a\nelse:\n    c = a-b\nprint(int(c))\n","x1, x2 = map(int,input().split())\nif x1 >= x2:\n    print(x1 - x2)\nelse:\n    print(x2 - x1)\n","x1, x2 = map(int, input().split())\n\nif x1 > x2:\n    a = x1 - x2\nelse:\n    a = x2 - x1\n\nprint(a)\n","x1,x2=map(int,input().split())\nprint(abs(x1-x2))\n","import math\nx1, x2=map(int,input().split())\nprint(int(math.fabs(x1-x2)))\n","a,b=map(int,input().split())\nif b>a:\n    s=b - a\nelse:\n    s=a - b\nprint(int(s))\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Find the number of <em>palindromic numbers<\/em> among the integers between <var>A<\/var> and <var>B<\/var> (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base <var>10<\/var> (without leading zeros) reads the same forward and backward.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>10000 \\leq A \\leq B \\leq 99999<\/var><\/li>\n<li>All input values are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A<\/var> <var>B<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of <em>palindromic numbers<\/em> among the integers between <var>A<\/var> and <var>B<\/var> (inclusive).<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>11009 11332\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>4\n<\/pre>\n<p>There are four integers that satisfy the conditions: <var>11011<\/var>, <var>11111<\/var>, <var>11211<\/var> and <var>11311<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>31415 92653\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>612\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementFind the number of palindromic numbers among the integers between A and B (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.\n\n\n\n\nConstraints\n10000 \\leq A \\leq B \\leq 99999\nAll input values are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA B\n\n\n\n\n\nOutputPrint the number of palindromic numbers among the integers between A and B (inclusive).\n\n\n\n\n\n\nSample Input 111009 11332\n\n\n\n\n\nSample Output 14\n\nThere are four integers that satisfy the conditions: 11011, 11111, 11211 and 11311.\n\n\n\n\n\nSample Input 231415 92653\n\n\n\n\n\nSample Output 2612\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Find the number of <em>palindromic numbers<\/em> among the integers between <var>A<\/var> and <var>B<\/var> (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base <var>10<\/var> (without leading zeros) reads the same forward and backward.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>10000 \\leq A \\leq B \\leq 99999<\/var><\/li>\n<li>All input values are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A<\/var> <var>B<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of <em>palindromic numbers<\/em> among the integers between <var>A<\/var> and <var>B<\/var> (inclusive).<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>11009 11332\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>4\n<\/pre>\n<p>There are four integers that satisfy the conditions: <var>11011<\/var>, <var>11111<\/var>, <var>11211<\/var> and <var>11311<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>31415 92653\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>612\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementFind the number of palindromic numbers among the integers between A and B (inclusive).\nHere, a palindromic number is a positive integer whose string representation in base 10 (without leading zeros) reads the same forward and backward.\n\n\n\n\nConstraints\n10000 \\leq A \\leq B \\leq 99999\nAll input values are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA B\n\n\n\n\n\nOutputPrint the number of palindromic numbers among the integers between A and B (inclusive).\n\n\n\n\n\n\nSample Input 111009 11332\n\n\n\n\n\nSample Output 14\n\nThere are four integers that satisfy the conditions: 11011, 11111, 11211 and 11311.\n\n\n\n\n\nSample Input 231415 92653\n\n\n\n\n\nSample Output 2612\n\n\n","solve_rate":0.7189783772,"codenet_problem_id":"p03416","input_testcases":{"1":"31415 97709","15":"15714 19549","64":"24312 66218","62":"24312 55232","11":"31406 46102","44":"24908 32824","63":"24312 60075","9":"44323 46102","35":"25293 32824","82":"36382 46102","8":"15858 24247","3":"38168 41187","32":"12729 38240","13":"15858 19549","47":"29017 29966","6":"18202 20736","55":"44047 66137","36":"33508 40262","56":"25468 42009","59":"11516 30706","42":"12729 17376","17":"31415 62064","24":"15858 24806","45":"14752 24806","34":"21188 43235","39":"14142 45631","46":"44262 97019","20":"12729 24247","22":"21188 37031","40":"44262 76603","28":"31415 74914","43":"19680 73180","7":"44323 83416","58":"12636 22770","26":"36382 51391","4":"53417 77120","2":"31415 41187","54":"18215 30706","57":"20904 30706","5":"44323 77120","14":"36382 43069","19":"36170 51799","61":"11516 54019","60":"15435 22770","67":"35392 97954","33":"15006 73180","37":"16871 24806","12":"15858 66358","100":"11009 11332","27":"63090 67554","18":"31415 43295","102":"31415 92653","25":"13173 19549","101":"11009 11332","10":"15858 40262","66":"35243 97954","49":"20932 51391","30":"26137 70579","31":"10284 11332","29":"18413 21375","52":"10762 62888","51":"18215 24247","48":"34600 40262","50":"46246 62888","38":"63090 81666","65":"24312 97954","23":"26049 40262","16":"11009 14471","21":"53417 73180","53":"10845 11333","41":"25751 74914"},"output_testcases":{"1":"662\n","15":"38\n","64":"419\n","62":"309\n","11":"147\n","44":"80\n","63":"358\n","9":"18\n","35":"76\n","82":"97\n","8":"84\n","3":"31\n","32":"254\n","13":"36\n","47":"9\n","6":"26\n","55":"220\n","36":"68\n","56":"165\n","59":"192\n","42":"46\n","17":"306\n","24":"89\n","45":"100\n","34":"221\n","39":"314\n","46":"527\n","20":"115\n","22":"158\n","40":"323\n","28":"434\n","43":"536\n","7":"391\n","58":"101\n","26":"150\n","4":"237\n","2":"97\n","54":"126\n","57":"98\n","5":"328\n","14":"67\n","19":"156\n","61":"424\n","60":"74\n","67":"625\n","33":"582\n","37":"79\n","12":"504\n","100":"4\n","27":"44\n","18":"118\n","102":"612\n","25":"63\n","101":"4\n","10":"244\n","66":"627\n","49":"304\n","30":"445\n","31":"11\n","29":"30\n","52":"521\n","51":"61\n","48":"57\n","50":"167\n","38":"186\n","65":"736\n","23":"143\n","16":"35\n","21":"198\n","53":"5\n","41":"492\n"},"n_missing":32,"programs":["A,B=map(int,input().split())\ncount=0\nif i>=A and i<=B:\n    for j in i:\n        array_i=list(map(int,str(i)))\n        if array_i==reverse(array_i):\n            count+=1\nprint(count)","A,B = map(int,input().split())\n\ncount = 0\nfor i in range(A,B+1):\n    i = str(i)\n    if (i[0]==i[-1])and(i[1]==i[-2]):\n        count += 1\nprint(count)","A, B = map(int, input().split())\ncount=0\nfor i in range(A,B):\n    l = [int(x) for x in list(str(i))]\n    if l[0]==l[4]:\n        if l[1]==l[3]:\n            count+=1\n\nprint(count)\n","# -*- coding: utf-8 -*-\n\"\"\"\nB - Palindromic Numbers\nhttps:\/\/beta.atcoder.jp\/contests\/abc090\/tasks\/abc090_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef solve(A, B):\n    ans = 0\n    for i in range(A, B+1):\n        s1 = str(i)\n        s2 = s1[::-1]\n        if s1 == s2:\n            ans += 1\n    return ans\n\n\ndef main(args):\n    A, B = map(int, input().split())\n    ans = solve(A, B)\n    print(ans)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n","a, b = map(int, input().split())\n\nresult = 0\nfor i in range(a, b + 1):\n    i_str = str(i)\n    border = len(i_str) \/\/ 2\n\n    first_half = i_str[:border]\n    if len(i_str) % 2 != 0:\n        border += 1\n    second_half = i_str[border:]\n\n    compared = second_half[::-1]\n    if first_half == compared:\n        result += 1\n\nprint(result)\n","a,b= map(int,input().split())\nans = 0\nfor n in range(a,b+1):  \n  n_str = str(n)    \n  add = 1\n  for i in range(2):\n    if n_str[i] != n_str[-(1+i)]:\n      add = 0\n  ans += add\n\nprint(ans)  ","#!\/usr\/bin\/env python3\na, b = map(int, input().split())\nc = 0\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        c += 1\nprint(c)\n","a,b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    s = str(i)\n    flag = True\n    for j in range(len(s)):\n        if s[j] != s[-j-1]:\n            flag = False\n    ans += flag\n\nprint(ans)\n","A,B = map(int,input().split())\nans = 0\nfor i in range(A,B+1):\n    C = str(i)\n    if C[0] == C[4] and C[1] == C[3]:\n        ans += 1\nprint(ans)","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n    x=str(i)\n    if x == x[::-1]:\n        cnt+=1\nprint(cnt)","A, B = [int(i) for i in input().split()]\ncount = 0\n\nfor i in range(A, B+1):\n    str_A = str(A)\n    if str_A == str_A[::-1]:\n        count += 0\nprint(count)","# -*- coding: utf-8 -*-\n\nA, B = map(int, input().split(\" \"))\nc = 0\nfor i in range(A, B + 1):\n    num = str(i)\n    for j in range(len(num) \/\/ 2):\n        if num[j] != num[-1 - j]:\n            break\n        if j == (len(num) \/\/ 2 - 1):\n            c += 1\n\nprint(c)\n","A,B=list(map(int,input().split()))\n\nc=0\nfor i in range(A,B+1):\n\ts=str(i)\n\tif s[0]==s[4] and s[1]==s[3]: c+=1\n\nprint(c)","A,B = map(int,input().split())\nans = 0\nfor i in range(A,B+1):\n    i = str(i)\n    if i[0] == i[4]:\n        if i[1] == i[3]:\n            ans += 1\n            print(i)\n        else:\n            ans += 0\n    else:\n        ans += 0\nprint(ans)","a, b = map(int, input().split())\ncnt = 0\n\nfor i in range(a, b+1):\n    x = str(i)\n    if x == x[::-1]:\n        cnt += 1\n\nprint(cnt)","m,n=map(int,input().split())\nfor i in range(m,n+1):\n    c=int(i\/10000)\n    d=int(i\/1000%10)\n    e=int(i\/100%10)\n    f=int(i\/10%10)\n    g=int(i%10)\n    if((c+d*10+e*100+f*1000+g*10000)==i):\n        print(\"%d\"% i,end=\" \")","A,B = map(int,input().split())\nans = 0\nfor n in range(A,B+1):\n    s = str(n)\n    if s == s[::-1]:\n        ans += 1\nprint(ans)","a, b = map(int, input().split())\ntmp=str(a)\nc=0\nfor i in range(a,b+1):\n    tmp=str(i)\n    tmp2=\"\"\n    for s in range(len(tmp)):\n        tmp2=tmp2+tmp[len(tmp)-1-s]\n    if tmp==tmp2:\n        c=c+1\nprint(c)","#\n# abc090 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"11009 11332\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"31415 92653\"\"\"\n        output = \"\"\"612\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    A, B = map(int, input().split())\n    ans = 0\n    for i in range(A, B+1):\n        s = str(i)\n        for j in range(3):\n            if s[j] != s[-1-j]:\n                break\n        else:\n            ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n","a,b=map(int,input().split())\nans=0\nfor i in range(b+1)[a:]:\n  if len(str(i))%2==0:\n    p=list(str(i))[:len(str(i))\/\/2]\n    q=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n    if p==q:\n      ans+=1\n  else:\n    s=list(str(i))[:len(str(i))\/\/2+1]\n    d=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n    if s==d:\n      ans += 1\nprint(ans)","A=[int(x) for x in input().split()]\nlower=A[0]\/\/100\nupper=A[1]\/\/100\ncount=upper-lower+1\nif A[0]>lower*100+int(str(lower)[0])+int(str(lower)[1])*10:\n  count-=1\nif A[1]<upper*100+int(str(upper)[0])+int(str(upper)[1])*10:\n  count-=1\nprint(count)","ab= input().split()\n\na = int(ab[0])\nb = int(ab[1])\n\nans = 0\nx = []\nfor i in range(a, b+1):\n\tfor j in str(i):\n\t\tx.append(j)\n\tx.reverse()\n\ty = ''.join(x)\n\tif int(i) == int(y):\n\t\tans += 1\n\tx.clear()#\u914d\u5217\u306e\u4e2d\u8eab\u3092\u5168\u6d88\u3057\u3059\u308b\n\n\nprint(ans)","A, B = map(int,input().split())\ncnt = 0\nfor i in range(A,B+1):\n  if(str(i) == str(i)[::-1]):\n    cnt += 1\nprint(cnt)","A,B=map(int,input().split())\n\nanswer=0\nfor i in range(A,B+1):\n  list_i=list(str(i))\n  list_i_reverse=list_i[::-1]\n  if tuple(list_i)==tuple(list_i_reverse):\n    #print(i)\n    answer+=1\n    \nprint(answer)","#Palindromic Numbers\na,b = map(int, input().split())\n#12345\nans1=0\nans5=0\nans2=0\nans4=0\nans3=0\nn=0\nfor i in range(a,b+1):\n    ans5=i%10\n    ans4=(i\/\/10)%10\n    ans3=(i\/\/100)%10\n    ans2=(i\/\/1000)%10\n    ans1=(i\/\/10000)%10\n    if ans5 == ans1:\n        if  ans4 == ans2:\n            n+=1\nprint(n)\n\n","a,b=map(int,input().split())\ncnt=0\nfor l in range(a,b):\n            l_i=list(str(l))\n            if l_i[0]==l_i[-1] and l_i[1]==l_i[-2]:\n                        cnt+=1\nprint(cnt)                        \n","#a\u304b\u3089\uff42\u306e\u6574\u6570\u3002\na,b = map(int,input().split())\ncount=0\nfor i in range(a,b):\n    i = str(i)\n    if i == i[::-1]:\n        count +=1\n    else :\n        pass\nprint(count)\n\n\n","A, B = map(int, input().split())\n\ndef check_ans(num):\n  first = [i for i in str(num)]\n  if first[4] == 0:\n  \treturn 0\n  elif first[0] == first[4] and first[1] == first[3]:\n    return 1\n  else:\n    return 0\n\ncount = 0\nfor i in range(A, B+1):\n  count += check_ans(i)\nprint(count)","A, B = map(int, input().split())\n\nans = 0\nfor i in range(A, B+1):\n    a = str(i)\n    if a[:2] == a[3:][::-1]:\n        ans += 1\n\nprint(ans)","a,b=map(int,input().split())\nans=0\nfor i in range(a,b+1):\n  if str(i)==str(i)[::-1]:\n    ans+=1\nprint(ans)","a, b = map(int, input().split())\ncount = 0\n\nfor i in range(a, b+1):\n    if str(i) == str(i)[::-1]:\n        count += 1\n\nprint(count)\n","def PalindJudge(num):\n    \n    judge = 1\n    list = [0,0,0,0,0]\n    \n    for i in range(5):\n        list[i] = num%10\n        num \/\/= 10\n        \n    for i in range(3):\n        if list[i]!=list[4-i]:\n            judge *= 0\n            \n    return judge\n\nif __name__ == '__main__':\n    \n    a,b = map(int, input().split())\n    \n    count = 0\n    \n    for i in range(a, b+1):\n        if PalindJudge(i) == 1:\n            count += 1\n            \n    print(count)","# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nA, B = map(int, input().split())\n\n\ndef check(n):\n    s = str(n)\n    for c, cr in zip(s, reversed(s)):\n        if c == cr:\n            continue\n        else:\n            return False\n    return True\n\n\nans = 0\nfor i in range(A, B+1):\n    if check(i):\n        ans += 1\nprint(ans)\n","A,B = map(int,input().split())\n\ncnt = 0\nfor i in range(A,B+1):\n  i = str(i)\n  if i == i[::-1]:\n    cnt += 1\n    \nprint(cnt)","a,b = map(int,input().split())\nres = 0\nfor i in range(a,b+1):\n  i = str(i)\n  if i == i[::-1]:\n    res += 1\nprint(res)   \n","a,b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    c = str(i)[::-1]\n    if str(i) == c:\n        ans += 1\n        \nprint(ans)","A = input().split(\" \")\n\nB = int(A[0])\nC = int(A[1])\nBlis = list(A[0])\nClis = list(A[1])\n# print(B)\n# print(C)\n# print(Blis)\n# print(Clis)\n\nNUM = B\nkazu = 0\nwhile NUM <= C:\n    NUMlis = list(str(NUM))\n    if NUMlis[0] == NUMlis[4] and NUMlis[1] == NUMlis[3]:\n        kazu += 1\n    NUM += 1\nprint(kazu)\n","A,B = map(int,input().split(\" \"))\nc = 0\nfor i in range(A,B+1):\n    s = str(i)\n    if s[0] == s[4] and s[1] == s[3]:\n        c += 1\nprint(c)","a, b = input().split(' ')\n\nc = int(a[:3])\nif int(a[1::-1]) < int(a[3:]):\n    c += 1\n\nd = int(b[:3])\nif int(b[1::-1]) > int(b[3:]):\n    d -= 1\n\nprint(d - c + 1)","a,b = map(int,input().split())\n\ncount = 0\nfor i in range(a,b+1):\n    n = list(str(i))\n    n = n[::-1]\n    n = int(\"\".join(map(str,n)))\n    if n == i:\n        count += 1\n\n    n = -1\n\nprint(count)\n","a, b = map(int, input().split())\n\ncount = 0\n\nfor kk in range(a, b):\n    if str(kk)[0] == str(kk)[4] and str(kk)[1] == str(kk)[3]:\n        count += 1\n        \nprint(count)","#!\/usr\/bin\/env python3\n\nA, B, x, mid, count = map(int, input().split()), [], 2, 0\nfor i in range(A, B):\n    while(i > 10):\n        x.append(i % 10)\n        i = int(i\/10)\n    count = count+1 if(x[0:mid] == x[mid:len(x)]\n                       and len(x) > 0) else None\n    x.clear()\nprint(count)\n","a, b = map(int, input().split())\ndef kaibun(n):\n    n = list(str(n))\n    if n[0] == n[4] and n[1] == n[3]:\n        return 1\n    else:\n        return 0\ncnt = 0\nfor i in range(a, b+1):\n    if kaibun(i):\n        cnt += 1\nprint(cnt)","a, b = map(int, input().split())\nx = 0\n\nfor i in range(a, b-1):\n    if str(i)==str(i)[::-1]:\n        x+=1\n\nprint(x)","#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\n\nimport math\n\n\nA, B = map(int, input().split())\n\nresult = 0\n\nfor i in range(A, B + 1):\n    string    = str(i)\n    list_flag = [string[j] == string[-j - 1] for j in range(math.ceil(len(string) \/ 2))]\n    if (len(list_flag) == sum(list_flag)):\n        result += 1\n\nprint(result)\n","a, b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    val = str(i)\n    if val[0] == val[4] and val[1] == val[3]:\n        ans += 1\nprint(ans)","A,B = map(int,input().split())\n\nsu = abs(A -B)\ncount = 0\nfor i in range(A, B):\n    aa =str(i)\n    rslt = aa[::-1]\n    rr = aa\n    # print(\"rslt{}\".format(rslt))\n    # print(\"rr{}\".format(rr))\n    if rr == rslt:\n        count += 1\nprint(count)","a,b = input().split()\ncount = 0\n\nanum = int(a)\nbnum = int(b)\n\n# a = list(a)\n# b = list(b)\n\n\nfor i in range(anum,bnum):\n    stra = str(i)\n    if stra[0:2] == stra[3:5]:\n        #print(stra)\n        count += 1\n        \nprint(count)\n","A, B = map(int, input().split())\npal = [10001, 1010, 100]\ncount = 0\n\nfor i in range(1, 10):\n    for j in range(10):\n        for k in range(10):\n            if A <= pal[0] * i + pal[1] * j + pal[2] * k <= B:\n                count += 1\n            else:\n                continue\n\nprint(count)","A, B = map(int, input().split())\nnum = 0\nfor x in range(A, B + 1):\n    if str(x) == str(x)[::-1]:\n        num += 1\nprint(num)\n","\na,b=map(str,input().split())\na_l=list(a)\nb_l=list(b)\ncnt=0\nfor l in range(int(a),int(b)):\n            l_i=list(str(l))\n            if l_i[0]==l_i[-1] and l_i[1]==l_i[-2]:\n                        cnt+=1\nprint(cnt)\n","# -*- coding: utf-8 -*-\nA,B = map(int,input().split())\na = [] # \u56de\u6587\u6570\u306e\u500b\u6570\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nfor i in range(A,B+1):\n  if str(i) == str(i)[::-1]: #\u56de\u6587\u6570\u3092\u767a\u898b\u3057\u305f\u5834\u5408\n    a.append(1) #\u30ea\u30b9\u30c8a\u306b1\u3092\u8ffd\u52a0\u3059\u308b\n  else: #i\u304c\u56de\u6587\u6570\u3067\u306a\u3044\u5834\u5408\n    pass # \u4f55\u3082\u3057\u306a\u3044\n  \nprint(sum(a)) #\u30ea\u30b9\u30c8\u5185\u306e1\u3092\u3059\u3079\u3066\u8db3\u3059\n    ","A, B = map(int,input().split())\n\nans=0\nfor i in range(A,B+1):\n  if str(i) == str(i)[::-1]:\n    ans += 1\nprint(ans)","a,b=map(int,input().split())\nc=0\nfor i in range(a,b+1):\n  if str(i)==str(i)[::-1]:\n    c+=1\nprint(c)  \n","def main():\n    #1. input\n    a = int(input())\n    b = int(input())\n    \n    ans = 0\n    counter=0\n    \n    #2. from A to B\n    for i in range(a, b+1):\n        counter = counter+1\n        #2.1. judge if the number is palindromic\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n            ans = ans+1\n        \n    #3. output\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","cnt = 0\nfor _ in xrange(*map(int, raw_input().split())):\n    if str(_) == str(_)[::-1]:\n        cnt += 1\nprint cnt\n","A,B = map(int,input().split())\ni = 0\nwhile A <= B:\n    if(A\/\/10000 is A%10 and (A%10000)\/\/1000 is (A%100)\/\/10):\n        i+=1\n    A+=1\nprint(i)\n","import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n\n    count = 0\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    print(count)\n","def slove():\n    import sys\n    input = sys.stdin.readline\n    a, b = list(map(int, input().rstrip('\\n').split()))\n    cnt = 0\n    for i in range(a, b + 1):\n        s = str(i)\n        b = True\n        for j in range(len(s)):\n            if s[j] != s[-j-1]:\n                b = False\n                break\n        if b:\n            cnt += 1\n    print(cnt)\n\n\nif __name__ == '__main__':\n    slove()\n","a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n    S = []\n    t = i\n    while t!=0:\n        s = t%10\n        S.append(s)\n        t\/\/=10\n    if S[0]==S[4] and S[1]==S[3]:\n        count += 1\n\nprint(count)","a,b=map(int,input().split())\nans=0\nfor i in range(a,b+1):\n    if str(i)[::-1]==str(i):\n        ans+=1\nprint(ans)","a,b = list(map(int, input().strip().split()))\nc=0\nfor i in range(1,10):\n    for j in range(10):\n        for w in range(10):\n            # TODO: write code... in range(10):\n            if a<=i*10001+j*1010+w*100 and i*10001+j*1010+w*100<=b:\n                c=c+1\nprint(c)\n            ","a, b = map(int, input().split())\ncnt = 0\nfor i in range(a, b + 1):\n    flag = True\n    si = str(i)\n    for j in range(len(si) \/\/ 2):\n        if si[j] != si[-(j + 1)]:\n            flag = False\n    if flag:\n        cnt += 1\nprint(cnt)","a,b = input().strip().split(\" \")\na_= int(a)\nb_= int(b)\nc = (b_ - a_)\/\/100\n\na__ = int(a[1] + a[0]) < int(a[3:5])\nb__ = int(b[1] + b[0]) < int(b[3:5])\n\nprint(c + a__ + b__)  ","a,b=input().split()\na,b=int(a),int(b)\n#\u56de\u6587\u6570\u3067a\u4ee5\u4e0a\u3067\u6700\u5c0f\u306e\u3082\u306e\u3001b\u4ee5\u4e0b\u3067\u6700\u5927\u306e\u3082\u306e\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u308b\n#10~99\u3067\u3001\u305d\u308c\u305e\u308c10\u500b\ndef kaibun(n):\n    return (n\/\/100)*100+n\/\/10000+((n\/\/1000)%10)*10\nka=kaibun(a)\nif a>ka:\n    ka+=100\nkb=kaibun(b)\nif b<kb:\n    kb-=100\nprint(kb\/\/100-ka\/\/100+1)\n","a,b=map(int,input().split())\ncount=0\nfor i in range(a,b+1):\n    j=str(i)\n    if j[0]==j[4] and j[1]==j[3]:\n        count+=1\nprint(count)\n","A,B = [int(i) for i in input().rstrip().split()]\n\ntotal = 0\nfor i in range(A,B):\n  if i >= A and i <= B:\n    frontDigit = str(i)[:int(len(str(i))\/2)]\n    backDigit = str(i)[-int(len(str(i))\/2):]\n    if frontDigit == \"\".join(reversed(backDigit)):\n      total += 1\nprint(total)","a,b=map(int,input().split())\ncount=0\nfor i in range(a,b+1):\n    s=str(i)\n    ss=s[::-1]\n    if s==ss:\n        count+=1\nprint(count)\n\n","#! \/Library\/Frameworks\/Python.framework\/Versions\/3.7\/bin\/python3\nA, B = map(int, input().split())\ncount = 0\nfor i in range(B - A + 1):\n    L = list(str(A + i))\n    if L[0] == L[4] and L[1] == L[3]:\n        count += 1\nprint(str(count))\n","AB = input().split()\nA, B = int(AB[0]), int(AB[1])\na, b = 0, 0\nrA, rB  = AB[0][:3]+AB[0][1]+AB[0][0], AB[1][:3]+AB[1][1]+AB[1][0]\nans = 0\nprint(rA, rB)\n\n    \nif AB[0][0:3] != AB[1][0:3]:\n    if A <= int(rA):\n        a = 1\n    if B <= int(rB):\n        b = 1\n    ans = (int(str(B)[0:3])-b)-(int(str(A)[0:3])-a)\n\nelse:\n    if A<= int(rA) and int(rB) >= B:\n        ans = 1\n    \nprint(ans)   ","x,y = map(int,input().split())\ncount = 0\n\nfor i in range(x, y + 1):\n  t = str(i)\n  if t[0] == t[-1] and t[1] == t[-2]:\n    count += 1\n\nprint(count)","A,B= map(int,input().split(\" \"))\ncount = 0\nx = int(A\/10**4)\ny = int(A\/10**3) - x*10\nz = 0\nN = A \nwhile N <= B:\n    while y < 10:\n        while z < 10:\n                    N = x*(10**4)+y*(10**3)+z*(10**2)+y*(10**1)+x\n                    if N >= B:\n                        break\n                    count = count + 1\n                    z = z + 1\n        y = y + 1\n    x = x + 1\n    y = 0\n    z = 0\nprint(count)","a,b=map(int,input().split( ))\na_12 = int(a[0:2])\na_3 = int(a[2])\na_45 = int(a[3:5])\nb_12 = int(b[0:2])\nb_3 = int(b[2])\nb_45 = int(b[3:5])\na_21 = int(a[1]+a[0])\nb_21 = int(b[1]+b[0])\nans = (b_12-a_12+1)*10 - a_3 - (10 - b_3 - 1)\nif a_21 < a_45:\n    ans = ans - 1\nif b_21 > b_45:\n    ans = ans - 1\nprint(ans)","a, b = map(int, input().split())\nans = 0\nfor i in range(a, b+1):\n    i = str(i)\n    if i == i[-1::-1]:\n        ans += 1\nprint(ans)","a, b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    if str(i)[0] == str(i)[4] and str(i)[1] == str(i)[3]:\n        count += 1\nprint(count)","a,b=map(int,input().split());print(len([1 for i in range(a,b+1)if i\/\/1000==i%10*10+i%100\/\/10]))","A,B = map(int,input().split())\ncnt = 0\nfor i in range(A,B+1):\n  a = i\/\/10000\n  i = i%10000\n  b = i\/\/1000\n  i = i%1000\n  c = i\/\/100\n  i = i%100\n  d = i\/\/10\n  e = i%10\n  if b==d and a==e:\n    cnt+=1\nprint(cnt)","l, h = map(int, input().split())\nprint(sum(1 if str(x) == str(x)[::-1] else 0 for x in range(l, h+1)))\n","def solve(n, m):\n\n    ans = len([i for i in range(n, m+1) if str(i)[:2] == str(i)[:-2]])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    print(solve(n, m))\n","f, t = map(int, input().split(' '))\nkaibun = 0\nfor s in range(f, t + 1):\n     if str(s) == str(s)[::-1]:\n        kaibun += 1\nprint(kaibun)","A, B = map(int, input().split())\n\nans = 0\nfor i in range(A, B+1):\n  if str(i) == str(i)[::-1]:\n    ans += 1\nprint(ans)","A, B = map(int, input().split())\nans = 0\n\nfor i in range(A, B + 1):\n    i = str(i)\n\n    flag = True\n    for j in range(len(i) \/\/ 2):\n        if i[j] != i[len(i) - 1 - j]:\n            flag = False\n    if flag == True:\n        ans += 1\nprint(ans)\n","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n  s=str(i)\n  if s[0]==s[4] and s[1]==s[3]:\n    cnt+=1\nprint(cnt)","a, b = list(map(int, input().split()))\n\ncount = 0\nfor i in range(a, b + 1):\n    f = str(i)\n    b = f[::-1]\n    if f == b:\n        count += 1\n\nprint(count)\n","a, b = map(int, input().split())\ncnt = 0\nfor i in range(a, b + 1):\n    i = str(i)\n    if i[0] == i[4] and i[1] == i[3]:\n        cnt += 1\n        \nprint(cnt)"," A,B = map(int,input().split())\n \n \n  def kaibun(m, n):\n      key = 0\n      for i in range(m,n+1):\n          s = i\/\/10000\n          t = i%10\n          u = i\/\/1000 % 10\n          v = i\/\/10 % 10\n          if (s==t)&(u==v):\n              key += 1\n      return key\n \n  print(kaibun(A,B))","a,b = map(int,input().split())\nd = 0\nfor i in range(a,b+1):\n    s = str(i)\n    if s[0] == s[-1] and s[1] == s[-2]:\n        d += 1\nprint(d)","A,B = map(int,input().split())\n\nres = 0\nfor x in range(A,B+1):\n    x = str(x)\n    if x[0:2] == x[:2:-1]:\n        res += 1\nprint(res)","def dsum(n,x):\n  for i in range(n-1):\n    x \/\/= 10\n  return x % 10  \n\na, b = map(int, input().split())\ntotal = 0\nfor i in range(a,b+1):\n  if dsum(1,i) == dsum(5,i) and dsum(2,i) == dsum(4,i):\n    total += 1\nprint(total)","A,B = map(int,input().split(\" \"))\nans = 0\nfor i in range(A,B+1):\n    # print(i)\n    if (str(i)[0] == str(i)[4]) and (str(i)[1] == str(i)[3]):\n        ans+=1\nprint(ans)","a,b = input().split(\" \")\na = int(a)\nb = int(b)\n\nif a < 10000 or b > 99999:\n    sys.exit(1)\n\ncnt = 0\nfor i in range(a,b+1):\n    if str(i) == str(i)[::-1]:\n        cnt += 1\n\nprint(cnt)","a, b = map(int, input().split())\ncount = 0\nfor x in range(1,10) :\n    for y in range(0,10) :\n        for z in range(0, 10) :\n            if (a <= (10001 * x + 1010 * y + 100 * z)) and ((10001 * x + 1010 * y + 100 * z) <= b) :\n                count += 1\nprint(count)","# TLE?\n\na, b = map(int, input().split())\n\nans = 0\nfor i in range(a, b + 1):\n    if str(i)[::-1] == str(i):\n        ans += 1\n\nprint(ans)","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n    i = str(i)\n    if i[0]==i[4] and i[1] == i[3]:\n        cnt+=1\n\nprint(cnt)","A,B = map(int,input().split())\n\nans = 0\nfor i in range(A,B+1):\n    if str(i)==str(i)[::-1]:\n        ans += 1\n\nprint(ans)","a, b = map(int, input().split())\n\nnums = []\n\nfor i in range(a, b+1):\n    str_i = str(i)\n    if str_i[0] == str_i[-1] and str_i[1] == str_i[-2]:\n        nums.append(i)\n\nprint(len(nums))","a, b = map(int, input().split())\ncount = 0\nfor x in range(a, b + 1):\n    s = str(x)\n    if s == s[::-1]:\n        count += 1\nprint(count)","A = int(input())\nB = int(input())\ncount = 0\nfor i in range(A, B+1):\n    count += (str(i) == str(i)[::-1])\nprint(count)","a,b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    i = str(i)\n    if i == i[::-1]:count+=1\nprint(count)","a, b = map(int, input().split())\nans = 0\nfor i in range(a, b+1):\n  if str(i) == str(i)[::-1]:\n    ans+=1\nprint(ans)"],"raw_generations":["A,B=map(int,input().split())\ncount=0\nif i>=A and i<=B:\n    for j in i:\n        array_i=list(map(int,str(i)))\n        if array_i==reverse(array_i):\n            count+=1\nprint(count)","A,B = map(int,input().split())\n\ncount = 0\nfor i in range(A,B+1):\n    i = str(i)\n    if (i[0]==i[-1])and(i[1]==i[-2]):\n        count += 1\nprint(count)","A, B = map(int, input().split())\ncount=0\nfor i in range(A,B):\n    l = [int(x) for x in list(str(i))]\n    if l[0]==l[4]:\n        if l[1]==l[3]:\n            count+=1\n\nprint(count)\n","# -*- coding: utf-8 -*-\n\"\"\"\nB - Palindromic Numbers\nhttps:\/\/beta.atcoder.jp\/contests\/abc090\/tasks\/abc090_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef solve(A, B):\n    ans = 0\n    for i in range(A, B+1):\n        s1 = str(i)\n        s2 = s1[::-1]\n        if s1 == s2:\n            ans += 1\n    return ans\n\n\ndef main(args):\n    A, B = map(int, input().split())\n    ans = solve(A, B)\n    print(ans)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n","a, b = map(int, input().split())\n\nresult = 0\nfor i in range(a, b + 1):\n    i_str = str(i)\n    border = len(i_str) \/\/ 2\n\n    first_half = i_str[:border]\n    if len(i_str) % 2 != 0:\n        border += 1\n    second_half = i_str[border:]\n\n    compared = second_half[::-1]\n    if first_half == compared:\n        result += 1\n\nprint(result)\n","a,b= map(int,input().split())\nans = 0\nfor n in range(a,b+1):  \n  n_str = str(n)    \n  add = 1\n  for i in range(2):\n    if n_str[i] != n_str[-(1+i)]:\n      add = 0\n  ans += add\n\nprint(ans)  ","#!\/usr\/bin\/env python3\na, b = map(int, input().split())\nc = 0\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        c += 1\nprint(c)\n","a,b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    s = str(i)\n    flag = True\n    for j in range(len(s)):\n        if s[j] != s[-j-1]:\n            flag = False\n    ans += flag\n\nprint(ans)\n","A,B = map(int,input().split())\nans = 0\nfor i in range(A,B+1):\n    C = str(i)\n    if C[0] == C[4] and C[1] == C[3]:\n        ans += 1\nprint(ans)","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n    x=str(i)\n    if x == x[::-1]:\n        cnt+=1\nprint(cnt)","A, B = [int(i) for i in input().split()]\ncount = 0\n\nfor i in range(A, B+1):\n    str_A = str(A)\n    if str_A == str_A[::-1]:\n        count += 0\nprint(count)","# -*- coding: utf-8 -*-\n\nA, B = map(int, input().split(\" \"))\nc = 0\nfor i in range(A, B + 1):\n    num = str(i)\n    for j in range(len(num) \/\/ 2):\n        if num[j] != num[-1 - j]:\n            break\n        if j == (len(num) \/\/ 2 - 1):\n            c += 1\n\nprint(c)\n","A,B=list(map(int,input().split()))\n\nc=0\nfor i in range(A,B+1):\n\ts=str(i)\n\tif s[0]==s[4] and s[1]==s[3]: c+=1\n\nprint(c)","A,B = map(int,input().split())\nans = 0\nfor i in range(A,B+1):\n    i = str(i)\n    if i[0] == i[4]:\n        if i[1] == i[3]:\n            ans += 1\n            print(i)\n        else:\n            ans += 0\n    else:\n        ans += 0\nprint(ans)","a, b = map(int, input().split())\ncnt = 0\n\nfor i in range(a, b+1):\n    x = str(i)\n    if x == x[::-1]:\n        cnt += 1\n\nprint(cnt)","m,n=map(int,input().split())\nfor i in range(m,n+1):\n    c=int(i\/10000)\n    d=int(i\/1000%10)\n    e=int(i\/100%10)\n    f=int(i\/10%10)\n    g=int(i%10)\n    if((c+d*10+e*100+f*1000+g*10000)==i):\n        print(\"%d\"% i,end=\" \")","A,B = map(int,input().split())\nans = 0\nfor n in range(A,B+1):\n    s = str(n)\n    if s == s[::-1]:\n        ans += 1\nprint(ans)","a, b = map(int, input().split())\ntmp=str(a)\nc=0\nfor i in range(a,b+1):\n    tmp=str(i)\n    tmp2=\"\"\n    for s in range(len(tmp)):\n        tmp2=tmp2+tmp[len(tmp)-1-s]\n    if tmp==tmp2:\n        c=c+1\nprint(c)","#\n# abc090 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"11009 11332\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"31415 92653\"\"\"\n        output = \"\"\"612\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    A, B = map(int, input().split())\n    ans = 0\n    for i in range(A, B+1):\n        s = str(i)\n        for j in range(3):\n            if s[j] != s[-1-j]:\n                break\n        else:\n            ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n","a,b=map(int,input().split())\nans=0\nfor i in range(b+1)[a:]:\n  if len(str(i))%2==0:\n    p=list(str(i))[:len(str(i))\/\/2]\n    q=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n    if p==q:\n      ans+=1\n  else:\n    s=list(str(i))[:len(str(i))\/\/2+1]\n    d=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n    if s==d:\n      ans += 1\nprint(ans)","A=[int(x) for x in input().split()]\nlower=A[0]\/\/100\nupper=A[1]\/\/100\ncount=upper-lower+1\nif A[0]>lower*100+int(str(lower)[0])+int(str(lower)[1])*10:\n  count-=1\nif A[1]<upper*100+int(str(upper)[0])+int(str(upper)[1])*10:\n  count-=1\nprint(count)","ab= input().split()\n\na = int(ab[0])\nb = int(ab[1])\n\nans = 0\nx = []\nfor i in range(a, b+1):\n\tfor j in str(i):\n\t\tx.append(j)\n\tx.reverse()\n\ty = ''.join(x)\n\tif int(i) == int(y):\n\t\tans += 1\n\tx.clear()#\u914d\u5217\u306e\u4e2d\u8eab\u3092\u5168\u6d88\u3057\u3059\u308b\n\n\nprint(ans)","A, B = map(int,input().split())\ncnt = 0\nfor i in range(A,B+1):\n  if(str(i) == str(i)[::-1]):\n    cnt += 1\nprint(cnt)","A,B=map(int,input().split())\n\nanswer=0\nfor i in range(A,B+1):\n  list_i=list(str(i))\n  list_i_reverse=list_i[::-1]\n  if tuple(list_i)==tuple(list_i_reverse):\n    #print(i)\n    answer+=1\n    \nprint(answer)","#Palindromic Numbers\na,b = map(int, input().split())\n#12345\nans1=0\nans5=0\nans2=0\nans4=0\nans3=0\nn=0\nfor i in range(a,b+1):\n    ans5=i%10\n    ans4=(i\/\/10)%10\n    ans3=(i\/\/100)%10\n    ans2=(i\/\/1000)%10\n    ans1=(i\/\/10000)%10\n    if ans5 == ans1:\n        if  ans4 == ans2:\n            n+=1\nprint(n)\n\n","a,b=map(int,input().split())\ncnt=0\nfor l in range(a,b):\n            l_i=list(str(l))\n            if l_i[0]==l_i[-1] and l_i[1]==l_i[-2]:\n                        cnt+=1\nprint(cnt)                        \n","#a\u304b\u3089\uff42\u306e\u6574\u6570\u3002\na,b = map(int,input().split())\ncount=0\nfor i in range(a,b):\n    i = str(i)\n    if i == i[::-1]:\n        count +=1\n    else :\n        pass\nprint(count)\n\n\n","A, B = map(int, input().split())\n\ndef check_ans(num):\n  first = [i for i in str(num)]\n  if first[4] == 0:\n  \treturn 0\n  elif first[0] == first[4] and first[1] == first[3]:\n    return 1\n  else:\n    return 0\n\ncount = 0\nfor i in range(A, B+1):\n  count += check_ans(i)\nprint(count)","A, B = map(int, input().split())\n\nans = 0\nfor i in range(A, B+1):\n    a = str(i)\n    if a[:2] == a[3:][::-1]:\n        ans += 1\n\nprint(ans)","a,b=map(int,input().split())\nans=0\nfor i in range(a,b+1):\n  if str(i)==str(i)[::-1]:\n    ans+=1\nprint(ans)","a, b = map(int, input().split())\ncount = 0\n\nfor i in range(a, b+1):\n    if str(i) == str(i)[::-1]:\n        count += 1\n\nprint(count)\n","def PalindJudge(num):\n    \n    judge = 1\n    list = [0,0,0,0,0]\n    \n    for i in range(5):\n        list[i] = num%10\n        num \/\/= 10\n        \n    for i in range(3):\n        if list[i]!=list[4-i]:\n            judge *= 0\n            \n    return judge\n\nif __name__ == '__main__':\n    \n    a,b = map(int, input().split())\n    \n    count = 0\n    \n    for i in range(a, b+1):\n        if PalindJudge(i) == 1:\n            count += 1\n            \n    print(count)","# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nA, B = map(int, input().split())\n\n\ndef check(n):\n    s = str(n)\n    for c, cr in zip(s, reversed(s)):\n        if c == cr:\n            continue\n        else:\n            return False\n    return True\n\n\nans = 0\nfor i in range(A, B+1):\n    if check(i):\n        ans += 1\nprint(ans)\n","A,B = map(int,input().split())\n\ncnt = 0\nfor i in range(A,B+1):\n  i = str(i)\n  if i == i[::-1]:\n    cnt += 1\n    \nprint(cnt)","a,b = map(int,input().split())\nres = 0\nfor i in range(a,b+1):\n  i = str(i)\n  if i == i[::-1]:\n    res += 1\nprint(res)   \n","a,b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    c = str(i)[::-1]\n    if str(i) == c:\n        ans += 1\n        \nprint(ans)","A = input().split(\" \")\n\nB = int(A[0])\nC = int(A[1])\nBlis = list(A[0])\nClis = list(A[1])\n# print(B)\n# print(C)\n# print(Blis)\n# print(Clis)\n\nNUM = B\nkazu = 0\nwhile NUM <= C:\n    NUMlis = list(str(NUM))\n    if NUMlis[0] == NUMlis[4] and NUMlis[1] == NUMlis[3]:\n        kazu += 1\n    NUM += 1\nprint(kazu)\n","A,B = map(int,input().split(\" \"))\nc = 0\nfor i in range(A,B+1):\n    s = str(i)\n    if s[0] == s[4] and s[1] == s[3]:\n        c += 1\nprint(c)","a, b = input().split(' ')\n\nc = int(a[:3])\nif int(a[1::-1]) < int(a[3:]):\n    c += 1\n\nd = int(b[:3])\nif int(b[1::-1]) > int(b[3:]):\n    d -= 1\n\nprint(d - c + 1)","a,b = map(int,input().split())\n\ncount = 0\nfor i in range(a,b+1):\n    n = list(str(i))\n    n = n[::-1]\n    n = int(\"\".join(map(str,n)))\n    if n == i:\n        count += 1\n\n    n = -1\n\nprint(count)\n","a, b = map(int, input().split())\n\ncount = 0\n\nfor kk in range(a, b):\n    if str(kk)[0] == str(kk)[4] and str(kk)[1] == str(kk)[3]:\n        count += 1\n        \nprint(count)","#!\/usr\/bin\/env python3\n\nA, B, x, mid, count = map(int, input().split()), [], 2, 0\nfor i in range(A, B):\n    while(i > 10):\n        x.append(i % 10)\n        i = int(i\/10)\n    count = count+1 if(x[0:mid] == x[mid:len(x)]\n                       and len(x) > 0) else None\n    x.clear()\nprint(count)\n","a, b = map(int, input().split())\ndef kaibun(n):\n    n = list(str(n))\n    if n[0] == n[4] and n[1] == n[3]:\n        return 1\n    else:\n        return 0\ncnt = 0\nfor i in range(a, b+1):\n    if kaibun(i):\n        cnt += 1\nprint(cnt)","a, b = map(int, input().split())\nx = 0\n\nfor i in range(a, b-1):\n    if str(i)==str(i)[::-1]:\n        x+=1\n\nprint(x)","#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\n\nimport math\n\n\nA, B = map(int, input().split())\n\nresult = 0\n\nfor i in range(A, B + 1):\n    string    = str(i)\n    list_flag = [string[j] == string[-j - 1] for j in range(math.ceil(len(string) \/ 2))]\n    if (len(list_flag) == sum(list_flag)):\n        result += 1\n\nprint(result)\n","a, b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    val = str(i)\n    if val[0] == val[4] and val[1] == val[3]:\n        ans += 1\nprint(ans)","A,B = map(int,input().split())\n\nsu = abs(A -B)\ncount = 0\nfor i in range(A, B):\n    aa =str(i)\n    rslt = aa[::-1]\n    rr = aa\n    # print(\"rslt{}\".format(rslt))\n    # print(\"rr{}\".format(rr))\n    if rr == rslt:\n        count += 1\nprint(count)","a,b = input().split()\ncount = 0\n\nanum = int(a)\nbnum = int(b)\n\n# a = list(a)\n# b = list(b)\n\n\nfor i in range(anum,bnum):\n    stra = str(i)\n    if stra[0:2] == stra[3:5]:\n        #print(stra)\n        count += 1\n        \nprint(count)\n","A, B = map(int, input().split())\npal = [10001, 1010, 100]\ncount = 0\n\nfor i in range(1, 10):\n    for j in range(10):\n        for k in range(10):\n            if A <= pal[0] * i + pal[1] * j + pal[2] * k <= B:\n                count += 1\n            else:\n                continue\n\nprint(count)","A, B = map(int, input().split())\nnum = 0\nfor x in range(A, B + 1):\n    if str(x) == str(x)[::-1]:\n        num += 1\nprint(num)\n","\na,b=map(str,input().split())\na_l=list(a)\nb_l=list(b)\ncnt=0\nfor l in range(int(a),int(b)):\n            l_i=list(str(l))\n            if l_i[0]==l_i[-1] and l_i[1]==l_i[-2]:\n                        cnt+=1\nprint(cnt)\n","# -*- coding: utf-8 -*-\nA,B = map(int,input().split())\na = [] # \u56de\u6587\u6570\u306e\u500b\u6570\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nfor i in range(A,B+1):\n  if str(i) == str(i)[::-1]: #\u56de\u6587\u6570\u3092\u767a\u898b\u3057\u305f\u5834\u5408\n    a.append(1) #\u30ea\u30b9\u30c8a\u306b1\u3092\u8ffd\u52a0\u3059\u308b\n  else: #i\u304c\u56de\u6587\u6570\u3067\u306a\u3044\u5834\u5408\n    pass # \u4f55\u3082\u3057\u306a\u3044\n  \nprint(sum(a)) #\u30ea\u30b9\u30c8\u5185\u306e1\u3092\u3059\u3079\u3066\u8db3\u3059\n    ","A, B = map(int,input().split())\n\nans=0\nfor i in range(A,B+1):\n  if str(i) == str(i)[::-1]:\n    ans += 1\nprint(ans)","a,b=map(int,input().split())\nc=0\nfor i in range(a,b+1):\n  if str(i)==str(i)[::-1]:\n    c+=1\nprint(c)  \n","def main():\n    #1. input\n    a = int(input())\n    b = int(input())\n    \n    ans = 0\n    counter=0\n    \n    #2. from A to B\n    for i in range(a, b+1):\n        counter = counter+1\n        #2.1. judge if the number is palindromic\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n            ans = ans+1\n        \n    #3. output\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","cnt = 0\nfor _ in xrange(*map(int, raw_input().split())):\n    if str(_) == str(_)[::-1]:\n        cnt += 1\nprint cnt\n","A,B = map(int,input().split())\ni = 0\nwhile A <= B:\n    if(A\/\/10000 is A%10 and (A%10000)\/\/1000 is (A%100)\/\/10):\n        i+=1\n    A+=1\nprint(i)\n","import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n\n    count = 0\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    print(count)\n","def slove():\n    import sys\n    input = sys.stdin.readline\n    a, b = list(map(int, input().rstrip('\\n').split()))\n    cnt = 0\n    for i in range(a, b + 1):\n        s = str(i)\n        b = True\n        for j in range(len(s)):\n            if s[j] != s[-j-1]:\n                b = False\n                break\n        if b:\n            cnt += 1\n    print(cnt)\n\n\nif __name__ == '__main__':\n    slove()\n","a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n    S = []\n    t = i\n    while t!=0:\n        s = t%10\n        S.append(s)\n        t\/\/=10\n    if S[0]==S[4] and S[1]==S[3]:\n        count += 1\n\nprint(count)","a,b=map(int,input().split())\nans=0\nfor i in range(a,b+1):\n    if str(i)[::-1]==str(i):\n        ans+=1\nprint(ans)","a,b = list(map(int, input().strip().split()))\nc=0\nfor i in range(1,10):\n    for j in range(10):\n        for w in range(10):\n            # TODO: write code... in range(10):\n            if a<=i*10001+j*1010+w*100 and i*10001+j*1010+w*100<=b:\n                c=c+1\nprint(c)\n            ","a, b = map(int, input().split())\ncnt = 0\nfor i in range(a, b + 1):\n    flag = True\n    si = str(i)\n    for j in range(len(si) \/\/ 2):\n        if si[j] != si[-(j + 1)]:\n            flag = False\n    if flag:\n        cnt += 1\nprint(cnt)","a,b = input().strip().split(\" \")\na_= int(a)\nb_= int(b)\nc = (b_ - a_)\/\/100\n\na__ = int(a[1] + a[0]) < int(a[3:5])\nb__ = int(b[1] + b[0]) < int(b[3:5])\n\nprint(c + a__ + b__)  ","a,b=input().split()\na,b=int(a),int(b)\n#\u56de\u6587\u6570\u3067a\u4ee5\u4e0a\u3067\u6700\u5c0f\u306e\u3082\u306e\u3001b\u4ee5\u4e0b\u3067\u6700\u5927\u306e\u3082\u306e\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u308b\n#10~99\u3067\u3001\u305d\u308c\u305e\u308c10\u500b\ndef kaibun(n):\n    return (n\/\/100)*100+n\/\/10000+((n\/\/1000)%10)*10\nka=kaibun(a)\nif a>ka:\n    ka+=100\nkb=kaibun(b)\nif b<kb:\n    kb-=100\nprint(kb\/\/100-ka\/\/100+1)\n","a,b=map(int,input().split())\ncount=0\nfor i in range(a,b+1):\n    j=str(i)\n    if j[0]==j[4] and j[1]==j[3]:\n        count+=1\nprint(count)\n","A,B = [int(i) for i in input().rstrip().split()]\n\ntotal = 0\nfor i in range(A,B):\n  if i >= A and i <= B:\n    frontDigit = str(i)[:int(len(str(i))\/2)]\n    backDigit = str(i)[-int(len(str(i))\/2):]\n    if frontDigit == \"\".join(reversed(backDigit)):\n      total += 1\nprint(total)","a,b=map(int,input().split())\ncount=0\nfor i in range(a,b+1):\n    s=str(i)\n    ss=s[::-1]\n    if s==ss:\n        count+=1\nprint(count)\n\n","#! \/Library\/Frameworks\/Python.framework\/Versions\/3.7\/bin\/python3\nA, B = map(int, input().split())\ncount = 0\nfor i in range(B - A + 1):\n    L = list(str(A + i))\n    if L[0] == L[4] and L[1] == L[3]:\n        count += 1\nprint(str(count))\n","AB = input().split()\nA, B = int(AB[0]), int(AB[1])\na, b = 0, 0\nrA, rB  = AB[0][:3]+AB[0][1]+AB[0][0], AB[1][:3]+AB[1][1]+AB[1][0]\nans = 0\nprint(rA, rB)\n\n    \nif AB[0][0:3] != AB[1][0:3]:\n    if A <= int(rA):\n        a = 1\n    if B <= int(rB):\n        b = 1\n    ans = (int(str(B)[0:3])-b)-(int(str(A)[0:3])-a)\n\nelse:\n    if A<= int(rA) and int(rB) >= B:\n        ans = 1\n    \nprint(ans)   ","x,y = map(int,input().split())\ncount = 0\n\nfor i in range(x, y + 1):\n  t = str(i)\n  if t[0] == t[-1] and t[1] == t[-2]:\n    count += 1\n\nprint(count)","A,B= map(int,input().split(\" \"))\ncount = 0\nx = int(A\/10**4)\ny = int(A\/10**3) - x*10\nz = 0\nN = A \nwhile N <= B:\n    while y < 10:\n        while z < 10:\n                    N = x*(10**4)+y*(10**3)+z*(10**2)+y*(10**1)+x\n                    if N >= B:\n                        break\n                    count = count + 1\n                    z = z + 1\n        y = y + 1\n    x = x + 1\n    y = 0\n    z = 0\nprint(count)","a,b=map(int,input().split( ))\na_12 = int(a[0:2])\na_3 = int(a[2])\na_45 = int(a[3:5])\nb_12 = int(b[0:2])\nb_3 = int(b[2])\nb_45 = int(b[3:5])\na_21 = int(a[1]+a[0])\nb_21 = int(b[1]+b[0])\nans = (b_12-a_12+1)*10 - a_3 - (10 - b_3 - 1)\nif a_21 < a_45:\n    ans = ans - 1\nif b_21 > b_45:\n    ans = ans - 1\nprint(ans)","a, b = map(int, input().split())\nans = 0\nfor i in range(a, b+1):\n    i = str(i)\n    if i == i[-1::-1]:\n        ans += 1\nprint(ans)","a, b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    if str(i)[0] == str(i)[4] and str(i)[1] == str(i)[3]:\n        count += 1\nprint(count)","a,b=map(int,input().split());print(len([1 for i in range(a,b+1)if i\/\/1000==i%10*10+i%100\/\/10]))","A,B = map(int,input().split())\ncnt = 0\nfor i in range(A,B+1):\n  a = i\/\/10000\n  i = i%10000\n  b = i\/\/1000\n  i = i%1000\n  c = i\/\/100\n  i = i%100\n  d = i\/\/10\n  e = i%10\n  if b==d and a==e:\n    cnt+=1\nprint(cnt)","l, h = map(int, input().split())\nprint(sum(1 if str(x) == str(x)[::-1] else 0 for x in range(l, h+1)))\n","def solve(n, m):\n\n    ans = len([i for i in range(n, m+1) if str(i)[:2] == str(i)[:-2]])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    print(solve(n, m))\n","f, t = map(int, input().split(' '))\nkaibun = 0\nfor s in range(f, t + 1):\n     if str(s) == str(s)[::-1]:\n        kaibun += 1\nprint(kaibun)","A, B = map(int, input().split())\n\nans = 0\nfor i in range(A, B+1):\n  if str(i) == str(i)[::-1]:\n    ans += 1\nprint(ans)","A, B = map(int, input().split())\nans = 0\n\nfor i in range(A, B + 1):\n    i = str(i)\n\n    flag = True\n    for j in range(len(i) \/\/ 2):\n        if i[j] != i[len(i) - 1 - j]:\n            flag = False\n    if flag == True:\n        ans += 1\nprint(ans)\n","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n  s=str(i)\n  if s[0]==s[4] and s[1]==s[3]:\n    cnt+=1\nprint(cnt)","a, b = list(map(int, input().split()))\n\ncount = 0\nfor i in range(a, b + 1):\n    f = str(i)\n    b = f[::-1]\n    if f == b:\n        count += 1\n\nprint(count)\n","a, b = map(int, input().split())\ncnt = 0\nfor i in range(a, b + 1):\n    i = str(i)\n    if i[0] == i[4] and i[1] == i[3]:\n        cnt += 1\n        \nprint(cnt)"," A,B = map(int,input().split())\n \n \n  def kaibun(m, n):\n      key = 0\n      for i in range(m,n+1):\n          s = i\/\/10000\n          t = i%10\n          u = i\/\/1000 % 10\n          v = i\/\/10 % 10\n          if (s==t)&(u==v):\n              key += 1\n      return key\n \n  print(kaibun(A,B))","a,b = map(int,input().split())\nd = 0\nfor i in range(a,b+1):\n    s = str(i)\n    if s[0] == s[-1] and s[1] == s[-2]:\n        d += 1\nprint(d)","A,B = map(int,input().split())\n\nres = 0\nfor x in range(A,B+1):\n    x = str(x)\n    if x[0:2] == x[:2:-1]:\n        res += 1\nprint(res)","def dsum(n,x):\n  for i in range(n-1):\n    x \/\/= 10\n  return x % 10  \n\na, b = map(int, input().split())\ntotal = 0\nfor i in range(a,b+1):\n  if dsum(1,i) == dsum(5,i) and dsum(2,i) == dsum(4,i):\n    total += 1\nprint(total)","A,B = map(int,input().split(\" \"))\nans = 0\nfor i in range(A,B+1):\n    # print(i)\n    if (str(i)[0] == str(i)[4]) and (str(i)[1] == str(i)[3]):\n        ans+=1\nprint(ans)","a,b = input().split(\" \")\na = int(a)\nb = int(b)\n\nif a < 10000 or b > 99999:\n    sys.exit(1)\n\ncnt = 0\nfor i in range(a,b+1):\n    if str(i) == str(i)[::-1]:\n        cnt += 1\n\nprint(cnt)","a, b = map(int, input().split())\ncount = 0\nfor x in range(1,10) :\n    for y in range(0,10) :\n        for z in range(0, 10) :\n            if (a <= (10001 * x + 1010 * y + 100 * z)) and ((10001 * x + 1010 * y + 100 * z) <= b) :\n                count += 1\nprint(count)","# TLE?\n\na, b = map(int, input().split())\n\nans = 0\nfor i in range(a, b + 1):\n    if str(i)[::-1] == str(i):\n        ans += 1\n\nprint(ans)","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n    i = str(i)\n    if i[0]==i[4] and i[1] == i[3]:\n        cnt+=1\n\nprint(cnt)","A,B = map(int,input().split())\n\nans = 0\nfor i in range(A,B+1):\n    if str(i)==str(i)[::-1]:\n        ans += 1\n\nprint(ans)","a, b = map(int, input().split())\n\nnums = []\n\nfor i in range(a, b+1):\n    str_i = str(i)\n    if str_i[0] == str_i[-1] and str_i[1] == str_i[-2]:\n        nums.append(i)\n\nprint(len(nums))","a, b = map(int, input().split())\ncount = 0\nfor x in range(a, b + 1):\n    s = str(x)\n    if s == s[::-1]:\n        count += 1\nprint(count)","A = int(input())\nB = int(input())\ncount = 0\nfor i in range(A, B+1):\n    count += (str(i) == str(i)[::-1])\nprint(count)","a,b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    i = str(i)\n    if i == i[::-1]:count+=1\nprint(count)","a, b = map(int, input().split())\nans = 0\nfor i in range(a, b+1):\n  if str(i) == str(i)[::-1]:\n    ans+=1\nprint(ans)"],"formatted_programs":["A,B=map(int,input().split())\ncount=0\nif i>=A and i<=B:\n    for j in i:\n        array_i=list(map(int,str(i)))\n        if array_i==reverse(array_i):\n            count+=1\nprint(count)","A,B = map(int,input().split())\n\ncount = 0\nfor i in range(A,B+1):\n    i = str(i)\n    if (i[0]==i[-1])and(i[1]==i[-2]):\n        count += 1\nprint(count)","A, B = map(int, input().split())\ncount=0\nfor i in range(A,B):\n    l = [int(x) for x in list(str(i))]\n    if l[0]==l[4]:\n        if l[1]==l[3]:\n            count+=1\n\nprint(count)\n","# -*- coding: utf-8 -*-\n\"\"\"\nB - Palindromic Numbers\nhttps:\/\/beta.atcoder.jp\/contests\/abc090\/tasks\/abc090_b\n\n\"\"\"\nimport sys\nfrom sys import stdin\ninput = stdin.readline\n\n\ndef solve(A, B):\n    ans = 0\n    for i in range(A, B+1):\n        s1 = str(i)\n        s2 = s1[::-1]\n        if s1 == s2:\n            ans += 1\n    return ans\n\n\ndef main(args):\n    A, B = map(int, input().split())\n    ans = solve(A, B)\n    print(ans)\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n","a, b = map(int, input().split())\n\nresult = 0\nfor i in range(a, b + 1):\n    i_str = str(i)\n    border = len(i_str) \/\/ 2\n\n    first_half = i_str[:border]\n    if len(i_str) % 2 != 0:\n        border += 1\n    second_half = i_str[border:]\n\n    compared = second_half[::-1]\n    if first_half == compared:\n        result += 1\n\nprint(result)\n","a,b= map(int,input().split())\nans = 0\nfor n in range(a,b+1):  \n  n_str = str(n)    \n  add = 1\n  for i in range(2):\n    if n_str[i] != n_str[-(1+i)]:\n      add = 0\n  ans += add\n\nprint(ans)  ","#!\/usr\/bin\/env python3\na, b = map(int, input().split())\nc = 0\nfor i in range(a, b + 1):\n    if str(i) == str(i)[::-1]:\n        c += 1\nprint(c)\n","a,b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    s = str(i)\n    flag = True\n    for j in range(len(s)):\n        if s[j] != s[-j-1]:\n            flag = False\n    ans += flag\n\nprint(ans)\n","A,B = map(int,input().split())\nans = 0\nfor i in range(A,B+1):\n    C = str(i)\n    if C[0] == C[4] and C[1] == C[3]:\n        ans += 1\nprint(ans)","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n    x=str(i)\n    if x == x[::-1]:\n        cnt+=1\nprint(cnt)","A, B = [int(i) for i in input().split()]\ncount = 0\n\nfor i in range(A, B+1):\n    str_A = str(A)\n    if str_A == str_A[::-1]:\n        count += 0\nprint(count)","# -*- coding: utf-8 -*-\n\nA, B = map(int, input().split(\" \"))\nc = 0\nfor i in range(A, B + 1):\n    num = str(i)\n    for j in range(len(num) \/\/ 2):\n        if num[j] != num[-1 - j]:\n            break\n        if j == (len(num) \/\/ 2 - 1):\n            c += 1\n\nprint(c)\n","A,B=list(map(int,input().split()))\n\nc=0\nfor i in range(A,B+1):\n\ts=str(i)\n\tif s[0]==s[4] and s[1]==s[3]: c+=1\n\nprint(c)","A,B = map(int,input().split())\nans = 0\nfor i in range(A,B+1):\n    i = str(i)\n    if i[0] == i[4]:\n        if i[1] == i[3]:\n            ans += 1\n            print(i)\n        else:\n            ans += 0\n    else:\n        ans += 0\nprint(ans)","a, b = map(int, input().split())\ncnt = 0\n\nfor i in range(a, b+1):\n    x = str(i)\n    if x == x[::-1]:\n        cnt += 1\n\nprint(cnt)","m,n=map(int,input().split())\nfor i in range(m,n+1):\n    c=int(i\/10000)\n    d=int(i\/1000%10)\n    e=int(i\/100%10)\n    f=int(i\/10%10)\n    g=int(i%10)\n    if((c+d*10+e*100+f*1000+g*10000)==i):\n        print(\"%d\"% i,end=\" \")","A,B = map(int,input().split())\nans = 0\nfor n in range(A,B+1):\n    s = str(n)\n    if s == s[::-1]:\n        ans += 1\nprint(ans)","a, b = map(int, input().split())\ntmp=str(a)\nc=0\nfor i in range(a,b+1):\n    tmp=str(i)\n    tmp2=\"\"\n    for s in range(len(tmp)):\n        tmp2=tmp2+tmp[len(tmp)-1-s]\n    if tmp==tmp2:\n        c=c+1\nprint(c)","#\n# abc090 b\n#\nimport sys\nfrom io import StringIO\nimport unittest\n\n\nclass TestClass(unittest.TestCase):\n    def assertIO(self, input, output):\n        stdout, stdin = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(input)\n        resolve()\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, stdin\n        self.assertEqual(out, output)\n\n    def test_\u5165\u529b\u4f8b_1(self):\n        input = \"\"\"11009 11332\"\"\"\n        output = \"\"\"4\"\"\"\n        self.assertIO(input, output)\n\n    def test_\u5165\u529b\u4f8b_2(self):\n        input = \"\"\"31415 92653\"\"\"\n        output = \"\"\"612\"\"\"\n        self.assertIO(input, output)\n\n\ndef resolve():\n    A, B = map(int, input().split())\n    ans = 0\n    for i in range(A, B+1):\n        s = str(i)\n        for j in range(3):\n            if s[j] != s[-1-j]:\n                break\n        else:\n            ans += 1\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    # unittest.main()\n    resolve()\n","a,b=map(int,input().split())\nans=0\nfor i in range(b+1)[a:]:\n  if len(str(i))%2==0:\n    p=list(str(i))[:len(str(i))\/\/2]\n    q=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n    if p==q:\n      ans+=1\n  else:\n    s=list(str(i))[:len(str(i))\/\/2+1]\n    d=list(reversed(list(str(i))[len(str(i))\/\/2:]))\n    if s==d:\n      ans += 1\nprint(ans)","A=[int(x) for x in input().split()]\nlower=A[0]\/\/100\nupper=A[1]\/\/100\ncount=upper-lower+1\nif A[0]>lower*100+int(str(lower)[0])+int(str(lower)[1])*10:\n  count-=1\nif A[1]<upper*100+int(str(upper)[0])+int(str(upper)[1])*10:\n  count-=1\nprint(count)","ab= input().split()\n\na = int(ab[0])\nb = int(ab[1])\n\nans = 0\nx = []\nfor i in range(a, b+1):\n\tfor j in str(i):\n\t\tx.append(j)\n\tx.reverse()\n\ty = ''.join(x)\n\tif int(i) == int(y):\n\t\tans += 1\n\tx.clear()#\u914d\u5217\u306e\u4e2d\u8eab\u3092\u5168\u6d88\u3057\u3059\u308b\n\n\nprint(ans)","A, B = map(int,input().split())\ncnt = 0\nfor i in range(A,B+1):\n  if(str(i) == str(i)[::-1]):\n    cnt += 1\nprint(cnt)","A,B=map(int,input().split())\n\nanswer=0\nfor i in range(A,B+1):\n  list_i=list(str(i))\n  list_i_reverse=list_i[::-1]\n  if tuple(list_i)==tuple(list_i_reverse):\n    #print(i)\n    answer+=1\n    \nprint(answer)","#Palindromic Numbers\na,b = map(int, input().split())\n#12345\nans1=0\nans5=0\nans2=0\nans4=0\nans3=0\nn=0\nfor i in range(a,b+1):\n    ans5=i%10\n    ans4=(i\/\/10)%10\n    ans3=(i\/\/100)%10\n    ans2=(i\/\/1000)%10\n    ans1=(i\/\/10000)%10\n    if ans5 == ans1:\n        if  ans4 == ans2:\n            n+=1\nprint(n)\n\n","a,b=map(int,input().split())\ncnt=0\nfor l in range(a,b):\n            l_i=list(str(l))\n            if l_i[0]==l_i[-1] and l_i[1]==l_i[-2]:\n                        cnt+=1\nprint(cnt)                        \n","#a\u304b\u3089\uff42\u306e\u6574\u6570\u3002\na,b = map(int,input().split())\ncount=0\nfor i in range(a,b):\n    i = str(i)\n    if i == i[::-1]:\n        count +=1\n    else :\n        pass\nprint(count)\n\n\n","A, B = map(int, input().split())\n\ndef check_ans(num):\n  first = [i for i in str(num)]\n  if first[4] == 0:\n  \treturn 0\n  elif first[0] == first[4] and first[1] == first[3]:\n    return 1\n  else:\n    return 0\n\ncount = 0\nfor i in range(A, B+1):\n  count += check_ans(i)\nprint(count)","A, B = map(int, input().split())\n\nans = 0\nfor i in range(A, B+1):\n    a = str(i)\n    if a[:2] == a[3:][::-1]:\n        ans += 1\n\nprint(ans)","a,b=map(int,input().split())\nans=0\nfor i in range(a,b+1):\n  if str(i)==str(i)[::-1]:\n    ans+=1\nprint(ans)","a, b = map(int, input().split())\ncount = 0\n\nfor i in range(a, b+1):\n    if str(i) == str(i)[::-1]:\n        count += 1\n\nprint(count)\n","def PalindJudge(num):\n    \n    judge = 1\n    list = [0,0,0,0,0]\n    \n    for i in range(5):\n        list[i] = num%10\n        num \/\/= 10\n        \n    for i in range(3):\n        if list[i]!=list[4-i]:\n            judge *= 0\n            \n    return judge\n\nif __name__ == '__main__':\n    \n    a,b = map(int, input().split())\n    \n    count = 0\n    \n    for i in range(a, b+1):\n        if PalindJudge(i) == 1:\n            count += 1\n            \n    print(count)","# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\nA, B = map(int, input().split())\n\n\ndef check(n):\n    s = str(n)\n    for c, cr in zip(s, reversed(s)):\n        if c == cr:\n            continue\n        else:\n            return False\n    return True\n\n\nans = 0\nfor i in range(A, B+1):\n    if check(i):\n        ans += 1\nprint(ans)\n","A,B = map(int,input().split())\n\ncnt = 0\nfor i in range(A,B+1):\n  i = str(i)\n  if i == i[::-1]:\n    cnt += 1\n    \nprint(cnt)","a,b = map(int,input().split())\nres = 0\nfor i in range(a,b+1):\n  i = str(i)\n  if i == i[::-1]:\n    res += 1\nprint(res)   \n","a,b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    c = str(i)[::-1]\n    if str(i) == c:\n        ans += 1\n        \nprint(ans)","A = input().split(\" \")\n\nB = int(A[0])\nC = int(A[1])\nBlis = list(A[0])\nClis = list(A[1])\n# print(B)\n# print(C)\n# print(Blis)\n# print(Clis)\n\nNUM = B\nkazu = 0\nwhile NUM <= C:\n    NUMlis = list(str(NUM))\n    if NUMlis[0] == NUMlis[4] and NUMlis[1] == NUMlis[3]:\n        kazu += 1\n    NUM += 1\nprint(kazu)\n","A,B = map(int,input().split(\" \"))\nc = 0\nfor i in range(A,B+1):\n    s = str(i)\n    if s[0] == s[4] and s[1] == s[3]:\n        c += 1\nprint(c)","a, b = input().split(' ')\n\nc = int(a[:3])\nif int(a[1::-1]) < int(a[3:]):\n    c += 1\n\nd = int(b[:3])\nif int(b[1::-1]) > int(b[3:]):\n    d -= 1\n\nprint(d - c + 1)","a,b = map(int,input().split())\n\ncount = 0\nfor i in range(a,b+1):\n    n = list(str(i))\n    n = n[::-1]\n    n = int(\"\".join(map(str,n)))\n    if n == i:\n        count += 1\n\n    n = -1\n\nprint(count)\n","a, b = map(int, input().split())\n\ncount = 0\n\nfor kk in range(a, b):\n    if str(kk)[0] == str(kk)[4] and str(kk)[1] == str(kk)[3]:\n        count += 1\n        \nprint(count)","#!\/usr\/bin\/env python3\n\nA, B, x, mid, count = map(int, input().split()), [], 2, 0\nfor i in range(A, B):\n    while(i > 10):\n        x.append(i % 10)\n        i = int(i\/10)\n    count = count+1 if(x[0:mid] == x[mid:len(x)]\n                       and len(x) > 0) else None\n    x.clear()\nprint(count)\n","a, b = map(int, input().split())\ndef kaibun(n):\n    n = list(str(n))\n    if n[0] == n[4] and n[1] == n[3]:\n        return 1\n    else:\n        return 0\ncnt = 0\nfor i in range(a, b+1):\n    if kaibun(i):\n        cnt += 1\nprint(cnt)","a, b = map(int, input().split())\nx = 0\n\nfor i in range(a, b-1):\n    if str(i)==str(i)[::-1]:\n        x+=1\n\nprint(x)","#!\/usr\/bin\/env python3\n# -*- coding: utf-8 -*-\n\n\nimport math\n\n\nA, B = map(int, input().split())\n\nresult = 0\n\nfor i in range(A, B + 1):\n    string    = str(i)\n    list_flag = [string[j] == string[-j - 1] for j in range(math.ceil(len(string) \/ 2))]\n    if (len(list_flag) == sum(list_flag)):\n        result += 1\n\nprint(result)\n","a, b = map(int,input().split())\nans = 0\nfor i in range(a,b+1):\n    val = str(i)\n    if val[0] == val[4] and val[1] == val[3]:\n        ans += 1\nprint(ans)","A,B = map(int,input().split())\n\nsu = abs(A -B)\ncount = 0\nfor i in range(A, B):\n    aa =str(i)\n    rslt = aa[::-1]\n    rr = aa\n    # print(\"rslt{}\".format(rslt))\n    # print(\"rr{}\".format(rr))\n    if rr == rslt:\n        count += 1\nprint(count)","a,b = input().split()\ncount = 0\n\nanum = int(a)\nbnum = int(b)\n\n# a = list(a)\n# b = list(b)\n\n\nfor i in range(anum,bnum):\n    stra = str(i)\n    if stra[0:2] == stra[3:5]:\n        #print(stra)\n        count += 1\n        \nprint(count)\n","A, B = map(int, input().split())\npal = [10001, 1010, 100]\ncount = 0\n\nfor i in range(1, 10):\n    for j in range(10):\n        for k in range(10):\n            if A <= pal[0] * i + pal[1] * j + pal[2] * k <= B:\n                count += 1\n            else:\n                continue\n\nprint(count)","A, B = map(int, input().split())\nnum = 0\nfor x in range(A, B + 1):\n    if str(x) == str(x)[::-1]:\n        num += 1\nprint(num)\n","\na,b=map(str,input().split())\na_l=list(a)\nb_l=list(b)\ncnt=0\nfor l in range(int(a),int(b)):\n            l_i=list(str(l))\n            if l_i[0]==l_i[-1] and l_i[1]==l_i[-2]:\n                        cnt+=1\nprint(cnt)\n","# -*- coding: utf-8 -*-\nA,B = map(int,input().split())\na = [] # \u56de\u6587\u6570\u306e\u500b\u6570\u3092\u5165\u308c\u308b\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\nfor i in range(A,B+1):\n  if str(i) == str(i)[::-1]: #\u56de\u6587\u6570\u3092\u767a\u898b\u3057\u305f\u5834\u5408\n    a.append(1) #\u30ea\u30b9\u30c8a\u306b1\u3092\u8ffd\u52a0\u3059\u308b\n  else: #i\u304c\u56de\u6587\u6570\u3067\u306a\u3044\u5834\u5408\n    pass # \u4f55\u3082\u3057\u306a\u3044\n  \nprint(sum(a)) #\u30ea\u30b9\u30c8\u5185\u306e1\u3092\u3059\u3079\u3066\u8db3\u3059\n    ","A, B = map(int,input().split())\n\nans=0\nfor i in range(A,B+1):\n  if str(i) == str(i)[::-1]:\n    ans += 1\nprint(ans)","a,b=map(int,input().split())\nc=0\nfor i in range(a,b+1):\n  if str(i)==str(i)[::-1]:\n    c+=1\nprint(c)  \n","def main():\n    #1. input\n    a = int(input())\n    b = int(input())\n    \n    ans = 0\n    counter=0\n    \n    #2. from A to B\n    for i in range(a, b+1):\n        counter = counter+1\n        #2.1. judge if the number is palindromic\n        if (str(i)[0]==str(i)[4]) and (str(i)[1]==str(i)[3]):\n            ans = ans+1\n        \n    #3. output\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","cnt = 0\nfor _ in xrange(*map(int, raw_input().split())):\n    if str(_) == str(_)[::-1]:\n        cnt += 1\nprint cnt\n","A,B = map(int,input().split())\ni = 0\nwhile A <= B:\n    if(A\/\/10000 is A%10 and (A%10000)\/\/1000 is (A%100)\/\/10):\n        i+=1\n    A+=1\nprint(i)\n","import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\nif __name__ == \"__main__\":\n    a, b = map(int, input().split())\n\n    count = 0\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            count += 1\n\n    print(count)\n","def slove():\n    import sys\n    input = sys.stdin.readline\n    a, b = list(map(int, input().rstrip('\\n').split()))\n    cnt = 0\n    for i in range(a, b + 1):\n        s = str(i)\n        b = True\n        for j in range(len(s)):\n            if s[j] != s[-j-1]:\n                b = False\n                break\n        if b:\n            cnt += 1\n    print(cnt)\n\n\nif __name__ == '__main__':\n    slove()\n","a,b = list(map(int,input().split()))\n\ncount = 0\n\nfor i in range(a,b+1):\n    S = []\n    t = i\n    while t!=0:\n        s = t%10\n        S.append(s)\n        t\/\/=10\n    if S[0]==S[4] and S[1]==S[3]:\n        count += 1\n\nprint(count)","a,b=map(int,input().split())\nans=0\nfor i in range(a,b+1):\n    if str(i)[::-1]==str(i):\n        ans+=1\nprint(ans)","a,b = list(map(int, input().strip().split()))\nc=0\nfor i in range(1,10):\n    for j in range(10):\n        for w in range(10):\n            # TODO: write code... in range(10):\n            if a<=i*10001+j*1010+w*100 and i*10001+j*1010+w*100<=b:\n                c=c+1\nprint(c)\n            ","a, b = map(int, input().split())\ncnt = 0\nfor i in range(a, b + 1):\n    flag = True\n    si = str(i)\n    for j in range(len(si) \/\/ 2):\n        if si[j] != si[-(j + 1)]:\n            flag = False\n    if flag:\n        cnt += 1\nprint(cnt)","a,b = input().strip().split(\" \")\na_= int(a)\nb_= int(b)\nc = (b_ - a_)\/\/100\n\na__ = int(a[1] + a[0]) < int(a[3:5])\nb__ = int(b[1] + b[0]) < int(b[3:5])\n\nprint(c + a__ + b__)  ","a,b=input().split()\na,b=int(a),int(b)\n#\u56de\u6587\u6570\u3067a\u4ee5\u4e0a\u3067\u6700\u5c0f\u306e\u3082\u306e\u3001b\u4ee5\u4e0b\u3067\u6700\u5927\u306e\u3082\u306e\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u308b\n#10~99\u3067\u3001\u305d\u308c\u305e\u308c10\u500b\ndef kaibun(n):\n    return (n\/\/100)*100+n\/\/10000+((n\/\/1000)%10)*10\nka=kaibun(a)\nif a>ka:\n    ka+=100\nkb=kaibun(b)\nif b<kb:\n    kb-=100\nprint(kb\/\/100-ka\/\/100+1)\n","a,b=map(int,input().split())\ncount=0\nfor i in range(a,b+1):\n    j=str(i)\n    if j[0]==j[4] and j[1]==j[3]:\n        count+=1\nprint(count)\n","A,B = [int(i) for i in input().rstrip().split()]\n\ntotal = 0\nfor i in range(A,B):\n  if i >= A and i <= B:\n    frontDigit = str(i)[:int(len(str(i))\/2)]\n    backDigit = str(i)[-int(len(str(i))\/2):]\n    if frontDigit == \"\".join(reversed(backDigit)):\n      total += 1\nprint(total)","a,b=map(int,input().split())\ncount=0\nfor i in range(a,b+1):\n    s=str(i)\n    ss=s[::-1]\n    if s==ss:\n        count+=1\nprint(count)\n\n","#! \/Library\/Frameworks\/Python.framework\/Versions\/3.7\/bin\/python3\nA, B = map(int, input().split())\ncount = 0\nfor i in range(B - A + 1):\n    L = list(str(A + i))\n    if L[0] == L[4] and L[1] == L[3]:\n        count += 1\nprint(str(count))\n","AB = input().split()\nA, B = int(AB[0]), int(AB[1])\na, b = 0, 0\nrA, rB  = AB[0][:3]+AB[0][1]+AB[0][0], AB[1][:3]+AB[1][1]+AB[1][0]\nans = 0\nprint(rA, rB)\n\n    \nif AB[0][0:3] != AB[1][0:3]:\n    if A <= int(rA):\n        a = 1\n    if B <= int(rB):\n        b = 1\n    ans = (int(str(B)[0:3])-b)-(int(str(A)[0:3])-a)\n\nelse:\n    if A<= int(rA) and int(rB) >= B:\n        ans = 1\n    \nprint(ans)   ","x,y = map(int,input().split())\ncount = 0\n\nfor i in range(x, y + 1):\n  t = str(i)\n  if t[0] == t[-1] and t[1] == t[-2]:\n    count += 1\n\nprint(count)","A,B= map(int,input().split(\" \"))\ncount = 0\nx = int(A\/10**4)\ny = int(A\/10**3) - x*10\nz = 0\nN = A \nwhile N <= B:\n    while y < 10:\n        while z < 10:\n                    N = x*(10**4)+y*(10**3)+z*(10**2)+y*(10**1)+x\n                    if N >= B:\n                        break\n                    count = count + 1\n                    z = z + 1\n        y = y + 1\n    x = x + 1\n    y = 0\n    z = 0\nprint(count)","a,b=map(int,input().split( ))\na_12 = int(a[0:2])\na_3 = int(a[2])\na_45 = int(a[3:5])\nb_12 = int(b[0:2])\nb_3 = int(b[2])\nb_45 = int(b[3:5])\na_21 = int(a[1]+a[0])\nb_21 = int(b[1]+b[0])\nans = (b_12-a_12+1)*10 - a_3 - (10 - b_3 - 1)\nif a_21 < a_45:\n    ans = ans - 1\nif b_21 > b_45:\n    ans = ans - 1\nprint(ans)","a, b = map(int, input().split())\nans = 0\nfor i in range(a, b+1):\n    i = str(i)\n    if i == i[-1::-1]:\n        ans += 1\nprint(ans)","a, b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    if str(i)[0] == str(i)[4] and str(i)[1] == str(i)[3]:\n        count += 1\nprint(count)","a,b=map(int,input().split());print(len([1 for i in range(a,b+1)if i\/\/1000==i%10*10+i%100\/\/10]))","A,B = map(int,input().split())\ncnt = 0\nfor i in range(A,B+1):\n  a = i\/\/10000\n  i = i%10000\n  b = i\/\/1000\n  i = i%1000\n  c = i\/\/100\n  i = i%100\n  d = i\/\/10\n  e = i%10\n  if b==d and a==e:\n    cnt+=1\nprint(cnt)","l, h = map(int, input().split())\nprint(sum(1 if str(x) == str(x)[::-1] else 0 for x in range(l, h+1)))\n","def solve(n, m):\n\n    ans = len([i for i in range(n, m+1) if str(i)[:2] == str(i)[:-2]])\n    return ans\n\nif __name__ == \"__main__\":\n    n, m = [int(i) for i in input().split()]\n    print(solve(n, m))\n","f, t = map(int, input().split(' '))\nkaibun = 0\nfor s in range(f, t + 1):\n     if str(s) == str(s)[::-1]:\n        kaibun += 1\nprint(kaibun)","A, B = map(int, input().split())\n\nans = 0\nfor i in range(A, B+1):\n  if str(i) == str(i)[::-1]:\n    ans += 1\nprint(ans)","A, B = map(int, input().split())\nans = 0\n\nfor i in range(A, B + 1):\n    i = str(i)\n\n    flag = True\n    for j in range(len(i) \/\/ 2):\n        if i[j] != i[len(i) - 1 - j]:\n            flag = False\n    if flag == True:\n        ans += 1\nprint(ans)\n","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n  s=str(i)\n  if s[0]==s[4] and s[1]==s[3]:\n    cnt+=1\nprint(cnt)","a, b = list(map(int, input().split()))\n\ncount = 0\nfor i in range(a, b + 1):\n    f = str(i)\n    b = f[::-1]\n    if f == b:\n        count += 1\n\nprint(count)\n","a, b = map(int, input().split())\ncnt = 0\nfor i in range(a, b + 1):\n    i = str(i)\n    if i[0] == i[4] and i[1] == i[3]:\n        cnt += 1\n        \nprint(cnt)"," A,B = map(int,input().split())\n \n \n  def kaibun(m, n):\n      key = 0\n      for i in range(m,n+1):\n          s = i\/\/10000\n          t = i%10\n          u = i\/\/1000 % 10\n          v = i\/\/10 % 10\n          if (s==t)&(u==v):\n              key += 1\n      return key\n \n  print(kaibun(A,B))","a,b = map(int,input().split())\nd = 0\nfor i in range(a,b+1):\n    s = str(i)\n    if s[0] == s[-1] and s[1] == s[-2]:\n        d += 1\nprint(d)","A,B = map(int,input().split())\n\nres = 0\nfor x in range(A,B+1):\n    x = str(x)\n    if x[0:2] == x[:2:-1]:\n        res += 1\nprint(res)","def dsum(n,x):\n  for i in range(n-1):\n    x \/\/= 10\n  return x % 10  \n\na, b = map(int, input().split())\ntotal = 0\nfor i in range(a,b+1):\n  if dsum(1,i) == dsum(5,i) and dsum(2,i) == dsum(4,i):\n    total += 1\nprint(total)","A,B = map(int,input().split(\" \"))\nans = 0\nfor i in range(A,B+1):\n    # print(i)\n    if (str(i)[0] == str(i)[4]) and (str(i)[1] == str(i)[3]):\n        ans+=1\nprint(ans)","a,b = input().split(\" \")\na = int(a)\nb = int(b)\n\nif a < 10000 or b > 99999:\n    sys.exit(1)\n\ncnt = 0\nfor i in range(a,b+1):\n    if str(i) == str(i)[::-1]:\n        cnt += 1\n\nprint(cnt)","a, b = map(int, input().split())\ncount = 0\nfor x in range(1,10) :\n    for y in range(0,10) :\n        for z in range(0, 10) :\n            if (a <= (10001 * x + 1010 * y + 100 * z)) and ((10001 * x + 1010 * y + 100 * z) <= b) :\n                count += 1\nprint(count)","# TLE?\n\na, b = map(int, input().split())\n\nans = 0\nfor i in range(a, b + 1):\n    if str(i)[::-1] == str(i):\n        ans += 1\n\nprint(ans)","a,b=map(int,input().split())\ncnt=0\nfor i in range(a,b+1):\n    i = str(i)\n    if i[0]==i[4] and i[1] == i[3]:\n        cnt+=1\n\nprint(cnt)","A,B = map(int,input().split())\n\nans = 0\nfor i in range(A,B+1):\n    if str(i)==str(i)[::-1]:\n        ans += 1\n\nprint(ans)","a, b = map(int, input().split())\n\nnums = []\n\nfor i in range(a, b+1):\n    str_i = str(i)\n    if str_i[0] == str_i[-1] and str_i[1] == str_i[-2]:\n        nums.append(i)\n\nprint(len(nums))","a, b = map(int, input().split())\ncount = 0\nfor x in range(a, b + 1):\n    s = str(x)\n    if s == s[::-1]:\n        count += 1\nprint(count)","A = int(input())\nB = int(input())\ncount = 0\nfor i in range(A, B+1):\n    count += (str(i) == str(i)[::-1])\nprint(count)","a,b = map(int, input().split())\ncount = 0\nfor i in range(a, b+1):\n    i = str(i)\n    if i == i[::-1]:count+=1\nprint(count)","a, b = map(int, input().split())\nans = 0\nfor i in range(a, b+1):\n  if str(i) == str(i)[::-1]:\n    ans+=1\nprint(ans)"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>We have a bingo card with a <var>3\\times3<\/var> grid. The square at the <var>i<\/var>-th row from the top and the <var>j<\/var>-th column from the left contains the number <var>A_{i, j}<\/var>.<\/p>\n<p>The MC will choose <var>N<\/var> numbers, <var>b_1, b_2, \\cdots, b_N<\/var>. If our bingo sheet contains some of those numbers, we will mark them on our sheet.<\/p>\n<p>Determine whether we will have a bingo when the <var>N<\/var> numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq A_{i, j} \\leq 100<\/var><\/li>\n<li><var>A_{i_1, j_1} \\neq A_{i_2, j_2} ((i_1, j_1) \\neq (i_2, j_2))<\/var><\/li>\n<li><var>1 \\leq N \\leq 10<\/var><\/li>\n<li><var>1 \\leq b_i \\leq 100<\/var><\/li>\n<li><var>b_i \\neq b_j (i \\neq j)<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A_{1, 1}<\/var> <var>A_{1, 2}<\/var> <var>A_{1, 3}<\/var>\n<var>A_{2, 1}<\/var> <var>A_{2, 2}<\/var> <var>A_{2, 3}<\/var>\n<var>A_{3, 1}<\/var> <var>A_{3, 2}<\/var> <var>A_{3, 3}<\/var>\n<var>N<\/var>\n<var>b_1<\/var>\n<var>\\vdots<\/var>\n<var>b_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>If we will have a bingo, print <code>Yes<\/code>; otherwise, print <code>No<\/code>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>Yes\n<\/pre>\n<p>We will mark <var>A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}<\/var>, and complete the diagonal from the top-left to the bottom-right.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>41 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>No\n<\/pre>\n<p>We will mark nothing.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>Yes\n<\/pre>\n<p>We will mark all the squares.<\/p><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementWe have a bingo card with a 3\\times3 grid. The square at the i-th row from the top and the j-th column from the left contains the number A_{i, j}.\nThe MC will choose N numbers, b_1, b_2, \\cdots, b_N. If our bingo sheet contains some of those numbers, we will mark them on our sheet.\nDetermine whether we will have a bingo when the N numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq A_{i, j} \\leq 100\nA_{i_1, j_1} \\neq A_{i_2, j_2} ((i_1, j_1) \\neq (i_2, j_2))\n1 \\leq N \\leq 10\n1 \\leq b_i \\leq 100\nb_i \\neq b_j (i \\neq j)\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA_{1, 1} A_{1, 2} A_{1, 3}\nA_{2, 1} A_{2, 2} A_{2, 3}\nA_{3, 1} A_{3, 2} A_{3, 3}\nN\nb_1\n\\vdots\nb_N\n\n\n\n\n\nOutputIf we will have a bingo, print Yes; otherwise, print No.\n\n\n\n\n\n\nSample Input 184 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n\n\n\n\n\nSample Output 1Yes\n\nWe will mark A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}, and complete the diagonal from the top-left to the bottom-right.\n\n\n\n\n\nSample Input 241 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17\n\n\n\n\n\nSample Output 2No\n\nWe will mark nothing.\n\n\n\n\n\nSample Input 360 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n\n\n\n\n\nSample Output 3Yes\n\nWe will mark all the squares.\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>We have a bingo card with a <var>3\\times3<\/var> grid. The square at the <var>i<\/var>-th row from the top and the <var>j<\/var>-th column from the left contains the number <var>A_{i, j}<\/var>.<\/p>\n<p>The MC will choose <var>N<\/var> numbers, <var>b_1, b_2, \\cdots, b_N<\/var>. If our bingo sheet contains some of those numbers, we will mark them on our sheet.<\/p>\n<p>Determine whether we will have a bingo when the <var>N<\/var> numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq A_{i, j} \\leq 100<\/var><\/li>\n<li><var>A_{i_1, j_1} \\neq A_{i_2, j_2} ((i_1, j_1) \\neq (i_2, j_2))<\/var><\/li>\n<li><var>1 \\leq N \\leq 10<\/var><\/li>\n<li><var>1 \\leq b_i \\leq 100<\/var><\/li>\n<li><var>b_i \\neq b_j (i \\neq j)<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A_{1, 1}<\/var> <var>A_{1, 2}<\/var> <var>A_{1, 3}<\/var>\n<var>A_{2, 1}<\/var> <var>A_{2, 2}<\/var> <var>A_{2, 3}<\/var>\n<var>A_{3, 1}<\/var> <var>A_{3, 2}<\/var> <var>A_{3, 3}<\/var>\n<var>N<\/var>\n<var>b_1<\/var>\n<var>\\vdots<\/var>\n<var>b_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>If we will have a bingo, print <code>Yes<\/code>; otherwise, print <code>No<\/code>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>Yes\n<\/pre>\n<p>We will mark <var>A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}<\/var>, and complete the diagonal from the top-left to the bottom-right.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>41 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>No\n<\/pre>\n<p>We will mark nothing.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>Yes\n<\/pre>\n<p>We will mark all the squares.<\/p><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementWe have a bingo card with a 3\\times3 grid. The square at the i-th row from the top and the j-th column from the left contains the number A_{i, j}.\nThe MC will choose N numbers, b_1, b_2, \\cdots, b_N. If our bingo sheet contains some of those numbers, we will mark them on our sheet.\nDetermine whether we will have a bingo when the N numbers are chosen, that is, the sheet will contain three marked numbers in a row, column, or diagonal.\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq A_{i, j} \\leq 100\nA_{i_1, j_1} \\neq A_{i_2, j_2} ((i_1, j_1) \\neq (i_2, j_2))\n1 \\leq N \\leq 10\n1 \\leq b_i \\leq 100\nb_i \\neq b_j (i \\neq j)\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA_{1, 1} A_{1, 2} A_{1, 3}\nA_{2, 1} A_{2, 2} A_{2, 3}\nA_{3, 1} A_{3, 2} A_{3, 3}\nN\nb_1\n\\vdots\nb_N\n\n\n\n\n\nOutputIf we will have a bingo, print Yes; otherwise, print No.\n\n\n\n\n\n\nSample Input 184 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30\n\n\n\n\n\nSample Output 1Yes\n\nWe will mark A_{1, 1}, A_{2, 1}, A_{2, 2}, A_{3, 3}, and complete the diagonal from the top-left to the bottom-right.\n\n\n\n\n\nSample Input 241 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17\n\n\n\n\n\nSample Output 2No\n\nWe will mark nothing.\n\n\n\n\n\nSample Input 360 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n\n\n\n\n\nSample Output 3Yes\n\nWe will mark all the squares.\n\n","solve_rate":0.5459241988,"codenet_problem_id":"p02760","input_testcases":{"48":"36 68 8\n61 41 0\n39 47 93\n4\n74\n43\n12\n10\n48\n73\n65\n66\n127\n57","22":"84 199 119\n31 89 6\n61 59 7\n7\n127\n7\n146\n79\n24\n84\n30","16":"84 176 119\n31 89 6\n61 59 7\n7\n95\n7\n146\n79\n24\n84\n30","71":"258 26 180\n22 89 6\n14 40 14\n3\n209\n5\n271\n230\n48\n83\n58","9":"60 68 34\n92 41 43\n39 73 48\n10\n60\n43\n88\n10\n48\n73\n65\n41\n92\n34","94":"49 50 1\n113 41 0\n39 23 8\n7\n139\n18\n12\n18\n5\n51\n13\n23\n127\n253","69":"258 26 180\n22 89 6\n14 40 14\n3\n209\n5\n271\n230\n24\n83\n58","13":"84 176 66\n31 89 6\n61 59 7\n7\n95\n7\n146\n79\n24\n84\n30","62":"36 72 8\n61 41 0\n39 23 8\n4\n139\n43\n12\n9\n48\n73\n65\n66\n127\n152","17":"41 3 46\n1 89 2\n78 92 8\n5\n12\n15\n16\n61\n17","47":"137 39 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n147\n24\n83\n59","54":"36 72 8\n61 41 0\n39 47 93\n4\n139\n43\n12\n9\n48\n73\n65\n66\n127\n57","57":"258 26 119\n22 89 6\n14 40 7\n3\n209\n5\n271\n230\n24\n83\n59","73":"258 26 180\n22 89 6\n14 40 14\n3\n209\n5\n271\n230\n48\n83\n77","36":"36 68 8\n92 41 13\n39 47 49\n4\n74\n43\n88\n10\n48\n73\n65\n66\n125\n34","29":"84 199 119\n22 89 6\n61 59 7\n2\n127\n7\n271\n79\n24\n84\n30","88":"49 72 1\n113 41 0\n39 23 8\n7\n139\n43\n12\n18\n48\n51\n13\n23\n127\n253","84":"49 72 1\n113 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n51\n13\n23\n127\n295","50":"36 72 8\n61 41 0\n39 47 93\n4\n74\n43\n12\n10\n48\n73\n65\n66\n127\n57","10":"84 176 66\n79 89 6\n61 59 7\n7\n95\n7\n146\n79\n24\n84\n30","81":"340 26 180\n22 89 6\n14 40 14\n4\n209\n5\n339\n230\n48\n83\n148","56":"36 72 8\n61 41 0\n39 47 93\n4\n139\n43\n12\n9\n48\n73\n65\n66\n127\n92","89":"91 26 264\n31 89 10\n14 40 14\n4\n209\n5\n339\n230\n48\n83\n148","65":"258 26 180\n22 89 6\n14 40 13\n3\n209\n5\n271\n230\n24\n83\n43","55":"258 26 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n230\n24\n83\n59","103":"84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30","14":"41 6 46\n1 89 2\n78 92 8\n5\n12\n15\n16\n61\n17","60":"36 72 8\n61 41 0\n39 23 8\n4\n139\n43\n12\n9\n48\n73\n65\n66\n127\n92","33":"137 199 119\n22 89 6\n61 59 7\n2\n127\n5\n271\n79\n24\n84\n30","61":"258 26 186\n22 89 6\n14 40 13\n3\n209\n5\n271\n230\n24\n83\n59","39":"137 199 119\n22 89 6\n61 40 7\n2\n127\n5\n271\n147\n24\n84\n59","28":"36 68 8\n92 41 13\n39 47 39\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","78":"49 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n51\n13\n44\n127\n295","21":"60 68 8\n92 41 13\n39 73 39\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","49":"137 26 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n147\n24\n83\n59","0":"60 88 34\n92 41 43\n39 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34","34":"36 68 8\n92 41 13\n39 47 49\n10\n74\n43\n88\n10\n48\n73\n65\n66\n125\n34","6":"60 68 34\n92 41 43\n39 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34","23":"41 3 46\n1 89 2\n78 92 8\n5\n11\n15\n16\n94\n17","83":"340 26 180\n31 89 6\n14 40 14\n4\n209\n5\n339\n230\n48\n83\n148","72":"49 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n73\n71\n66\n127\n295","18":"60 68 8\n92 41 13\n39 73 48\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","24":"60 68 8\n92 41 13\n39 47 39\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","98":"49 50 1\n113 41 0\n39 34 8\n7\n139\n18\n12\n18\n5\n51\n13\n23\n127\n253","90":"49 72 1\n113 41 0\n39 23 8\n7\n139\n43\n12\n18\n5\n51\n13\n23\n127\n253","59":"258 26 119\n22 89 6\n14 40 13\n3\n209\n5\n271\n230\n24\n83\n59","53":"252 26 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n230\n24\n83\n59","12":"60 68 34\n92 41 43\n39 73 48\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","80":"49 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n51\n13\n23\n127\n295","93":"91 26 264\n31 89 10\n14 38 14\n4\n209\n5\n339\n73\n48\n83\n148","70":"49 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n73\n65\n66\n127\n295","25":"84 199 119\n31 89 6\n61 59 7\n7\n127\n7\n271\n79\n24\n84\n30","19":"84 199 119\n31 89 6\n61 59 7\n7\n95\n7\n146\n79\n24\n84\n30","99":"91 26 264\n1 89 10\n7 38 14\n4\n209\n5\n127\n73\n48\n83\n148","79":"340 26 180\n22 89 6\n14 40 14\n4\n209\n5\n271\n230\n48\n83\n148","46":"36 68 8\n92 41 0\n39 47 93\n4\n74\n43\n12\n10\n48\n73\n65\n66\n127\n57","27":"84 199 119\n22 89 6\n61 59 7\n7\n127\n7\n271\n79\n24\n84\n30","31":"137 199 119\n22 89 6\n61 59 7\n2\n127\n7\n271\n79\n24\n84\n30","85":"340 26 264\n31 89 6\n14 40 14\n4\n209\n5\n339\n230\n48\n83\n148","40":"36 68 8\n92 41 13\n39 47 49\n4\n74\n43\n12\n10\n48\n73\n65\n66\n125\n57","68":"36 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n73\n65\n66\n127\n295","45":"137 199 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n147\n24\n83\n59","42":"36 68 8\n92 41 13\n39 47 49\n4\n74\n43\n12\n10\n48\n73\n65\n66\n127\n57","102":"41 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17","77":"258 26 180\n22 89 6\n14 40 14\n4\n209\n5\n271\n230\n48\n83\n148","101":"84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30","64":"36 72 8\n61 41 0\n39 23 8\n4\n139\n43\n12\n9\n48\n73\n65\n66\n127\n295","74":"49 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n73\n13\n66\n127\n295","35":"137 199 119\n22 89 6\n61 59 7\n2\n127\n5\n271\n79\n24\n84\n59","8":"41 6 46\n1 89 2\n78 92 8\n5\n12\n45\n16\n57\n17","26":"114 68 8\n92 41 13\n39 47 39\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","66":"36 72 8\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n73\n65\n66\n127\n295","97":"91 26 264\n31 89 10\n7 38 14\n4\n209\n5\n127\n73\n48\n83\n148","38":"36 68 8\n92 41 13\n39 47 49\n4\n74\n43\n12\n10\n48\n73\n65\n66\n125\n34","41":"137 199 119\n22 89 6\n14 40 7\n2\n127\n5\n271\n147\n24\n84\n59","87":"340 26 264\n31 89 10\n14 40 14\n4\n209\n5\n339\n230\n48\n83\n148","37":"137 199 119\n22 89 6\n61 40 7\n2\n127\n5\n271\n79\n24\n84\n59","7":"84 97 66\n79 89 6\n61 59 7\n7\n95\n7\n146\n79\n24\n84\n30","5":"41 6 46\n26 89 2\n78 92 8\n5\n12\n45\n16\n57\n17","51":"252 26 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n147\n24\n83\n59","100":"60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34","95":"91 26 264\n31 89 10\n14 38 14\n4\n209\n5\n127\n73\n48\n83\n148","32":"36 68 8\n92 41 13\n39 47 49\n10\n74\n43\n88\n10\n48\n73\n65\n66\n92\n34","43":"137 199 119\n22 89 6\n14 40 7\n3\n127\n5\n271\n147\n24\n84\n59","82":"49 72 1\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n51\n13\n23\n127\n295","75":"258 26 180\n22 89 6\n14 40 14\n3\n209\n5\n271\n230\n48\n83\n148","76":"49 72 7\n61 41 0\n39 23 8\n4\n139\n43\n12\n18\n48\n51\n13\n66\n127\n295","20":"41 3 46\n1 89 2\n78 92 8\n5\n12\n15\n16\n94\n17","44":"36 68 8\n92 41 0\n39 47 49\n4\n74\n43\n12\n10\n48\n73\n65\n66\n127\n57","4":"84 97 66\n79 89 11\n61 59 7\n7\n95\n7\n146\n79\n24\n84\n30","86":"49 72 1\n113 41 0\n39 23 8\n7\n139\n43\n12\n18\n48\n51\n13\n23\n127\n295","30":"36 68 8\n92 41 13\n39 47 49\n10\n74\n43\n88\n10\n48\n73\n65\n41\n92\n34","2":"84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n146\n79\n24\n84\n30","3":"60 106 34\n92 41 43\n39 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34","92":"49 50 1\n113 41 0\n39 23 8\n7\n139\n43\n12\n18\n5\n51\n13\n23\n127\n253","1":"41 7 46\n26 89 2\n78 92 8\n5\n12\n45\n16\n57\n17","63":"258 26 186\n22 89 6\n14 40 13\n3\n209\n5\n271\n230\n24\n83\n43","11":"41 6 46\n1 89 2\n78 92 8\n5\n12\n45\n16\n61\n17","91":"91 26 264\n31 89 10\n14 38 14\n4\n209\n5\n339\n230\n48\n83\n148","96":"49 50 1\n113 41 0\n39 29 8\n7\n139\n18\n12\n18\n5\n51\n13\n23\n127\n253","52":"36 72 8\n61 41 0\n39 47 93\n4\n74\n43\n12\n9\n48\n73\n65\n66\n127\n57","58":"36 72 8\n61 41 0\n39 23 93\n4\n139\n43\n12\n9\n48\n73\n65\n66\n127\n92","67":"258 26 180\n22 89 6\n14 40 14\n3\n209\n5\n271\n230\n24\n83\n43"},"output_testcases":{"48":"No\n","22":"No\n","16":"No\n","71":"No\n","9":"Yes\n","94":"No\n","69":"No\n","13":"No\n","62":"No\n","17":"No\n","47":"No\n","54":"No\n","57":"No\n","73":"No\n","36":"No\n","29":"No\n","88":"No\n","84":"No\n","50":"No\n","10":"No\n","81":"No\n","56":"No\n","89":"No\n","65":"No\n","55":"No\n","103":"Yes\n","14":"No\n","60":"No\n","33":"No\n","61":"No\n","39":"No\n","28":"No\n","78":"No\n","21":"No\n","49":"No\n","0":"Yes\n","34":"No\n","6":"Yes\n","23":"No\n","83":"No\n","72":"No\n","18":"No\n","24":"No\n","98":"No\n","90":"No\n","59":"No\n","53":"No\n","12":"Yes\n","80":"No\n","93":"No\n","70":"No\n","25":"No\n","19":"No\n","99":"No\n","79":"No\n","46":"No\n","27":"No\n","31":"No\n","85":"No\n","40":"No\n","68":"No\n","45":"No\n","42":"No\n","102":"No\n","77":"No\n","101":"Yes\n","64":"No\n","74":"No\n","35":"No\n","8":"No\n","26":"No\n","66":"No\n","97":"No\n","38":"No\n","41":"No\n","87":"No\n","37":"No\n","7":"No\n","5":"No\n","51":"No\n","100":"Yes\n","95":"No\n","32":"No\n","43":"No\n","82":"No\n","75":"No\n","76":"No\n","20":"No\n","44":"No\n","4":"No\n","86":"No\n","30":"No\n","2":"Yes\n","3":"Yes\n","92":"No\n","1":"No\n","63":"No\n","11":"No\n","91":"No\n","96":"No\n","52":"No\n","58":"No\n","67":"No\n"},"n_missing":1,"programs":["a = [[int(i) for i in input().split()] for _ in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\n\nans = \"No\"\nfor i in range(3):\n  for j in range(3):\n    if a[i][j] in b:\n      a[i][j] = \"x\"\n      \nif (a[0][0]==a[1][1]==a[2][2]==\"x\") or (a[2][0]==a[1][1]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \nif (a[0][0]==a[1][0]==a[2][0]==\"x\")or(a[0][1]==a[1][1]==a[2][1]==\"x\")or(a[0][2]==a[1][2]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \nif (a[0][0]==a[0][1]==a[0][2]==\"x\")or(a[1][0]==a[1][1]==a[1][2]==\"x\")or(a[2][0]==a[2][1]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \n  \nprint(ans)","A = []\nfor _ in range(3):\n    A.append(list(map(int, input().split())))\n\nN = int(input())\n\nB = []\nfor _ in range(N):\n    B.append(int(input()))\n\npunch = []\nfor b in B:\n    for row in range(3):\n        if b in A[row]:\n            punch.append((row, A[row].index(b)))\n\nfor i in range(3):\n    if (i, 0) in punch:\n        if (i, 1) in punch and (i, 2) in punch:\n            print('Yes')\n            exit()\n        if (i-1, 0) in punch and (i+1, 0) in punch:\n            print('Yes')\n            exit()\n        if (i+1, 1) in punch and (i+2, 2) in punch:\n            print('Yes')\n            exit()\n\nif (2, 0) in punch:\n    if (1, 1) in punch and (0, 2) in punch:\n        print('Yes')\n        exit()\n\n\nprint('No')","bingo = []\nchecker = 0\nfor i in range(3):\n    bingo.append([int(j) for j in input().split()])\nn = int(input())\nfor i in range(n):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if bingo[j][k] == b:\n                bingo[j][k] = 0\nfor i in range(3):\n    if checker == 1:\n        break\n    if bingo[i][0] ==0 and  bingo[i][1] == 0 and bingo[i][2] == 0:\n        checker = 1\n    if bingo[0][i] == 0 and bingo[1][i] == 0 and bingo[2][i] == 0:\n        checker = 1\n    if bingo[0][0] == 0 and  bingo[1][1] == 0 and bingo[2][2] == 0:\n        checker = 1\n    if bingo[0][2] == 0 and bingo[1][1] == 0 and bingo[2][0] == 0:\n        checker = 1\n\nif checker:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","li_1 = list(map(int, input().split()))\nli_2 = list(map(int, input().split()))\nli_3 = list(map(int, input().split()))\nn = int(input())\nb = [int(input()) for i in range(n)]\n\nindex = 0\nans = 'No'\n\nfor i in b:\n    for j in li_1:\n        if i == j:\n            li_1[index] = 0\n        index += 1\n    index = 0\nfor i in b:\n    for j in li_2:\n        if i == j:\n            li_2[index] = 0\n        index += 1\n    index = 0\nfor i in b:\n    for j in li_3:\n        if i == j:\n            li_3[index] = 0\n        index += 1\n    index = 0\n\nif li_1[0] == 0 and li_1[1] == 0 and li_1[2] == 0:\n    ans = 'Yes'\nif li_2[0] == 0 and li_2[1] == 0 and li_2[2] == 0:\n    ans = 'Yes'\nif li_3[0] == 0 and li_3[1] == 0 and li_3[2] == 0:\n    ans = 'Yes'\n\nif li_1[0] == 0 and li_2[0] == 0 and li_3[0] == 0:\n    ans = 'Yes'\nif li_1[1] == 0 and li_2[1] == 0 and li_3[1] == 0:\n    ans = 'Yes'\nif li_1[2] == 0 and li_2[2] == 0 and li_3[2] == 0:\n    ans = 'Yes'\n\nif li_1[0] == 0 and li_2[1] == 0 and li_3[2] == 0:\n    ans = 'Yes'\nif li_1[2] == 0 and li_2[1] == 0 and li_3[0] == 0:\n    ans = 'Yes'\n\nprint(ans)","a,b,c=map(int,input().split())\nd,e,f=map(int,input().split())\ng,h,i=map(int,input().split())\nN=int(input())\nL=[int(input()) for i in range(N)]\nif a in L and b in L and c in L:\n  print('Yes')\nelif d in L and e in L and  f in L:\n  print('Yes')\nelif g in L and h in L and  i in L:\n  print('Yes')\nelif a in L and d in L and  g in L:\n  print('Yes')\nelif b in L and e in L and  h in L:\n  print('Yes')\nelif c in L and f in L and  i in L:\n  print('Yes')\nelif a in L and e in L and  i in L:\n  print('Yes')\nelif c in L and e in L and  g in L:\n  print('Yes')\nelse:\n  print('No')","num=[]\nfor i in range(3):\n    array = list(map(int, input().strip().split()))\n    num.append(array)\nN = int(input())\na = [int(input()) for i in range(N)]\n\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if a[i] == num[j][k]:\n                num[j][k] = False\nbingo = 0\nfor m in range(3):\n    if num[0][m] == num[1][m] == num[2][m] == False:bingo = 1\n\nfor n in range(3):\n    if num[n][0] ==  num[n][1] ==  num[n][2] == 0:bingo = 1 \nif num[0][0] == num[1][1] == num[2][2] == 0 :bingo = 1\nif num[0][2] == num[1][1] == num[2][0] == 0 :bingo = 1\n\nif bingo == 1:print(\"Yes\")\nelif bingo == 0:print(\"No\")\n\n\n","# ANSHUL GAUTAM\n# IIIT-D\n\nfrom math import *\nfrom copy import *\nfrom string import *\t\t\t\t# alpha = ascii_lowercase\nfrom random import *\t\t\t\t# l.sort(key=lambda l1:l1[0]-l1[1]) => ex: sort on the basis difference\nfrom sys import stdin\nfrom sys import maxsize\nfrom operator import *\t\t\t\t# d = sorted(d.items(), key=itemgetter(1))\nfrom itertools import *\nfrom collections import Counter\t\t# d = dict(Counter(l))\nfrom collections import defaultdict # d = defaultdict(list)\n\n'''\n\n'''\n\ndef solve(l):\n\tn = len(l)\n\t\n\nL = []\nfor i in range(3):\n\tl = list(map(int, stdin.readline().rstrip().split()))\n\tL.append(l)\n# for i in L:\n# \tprint(i)\nN = int(input())\nfor _ in range(N):\n\tq = int(input())\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif(L[i][j] == q):\n\t\t\t\tL[i][j] = -1\nf = 0\nfor i in range(3):\n\tif(L[i] == [-1,-1,-1]):\n\t\tf = 1\nif(not f):\n\tif(L[0][0] == L[1][0] == L[2][0] == -1):\n\t\tf = 1\n\tif(L[0][1] == L[1][1] == L[2][1] == -1):\n\t\tf = 1\n\tif(L[0][2] == L[1][2] == L[2][2] == -1):\n\t\tf = 1\n\tif(L[0][0] == L[1][1] == L[2][2] == -1):\n\t\tf = 1\n\tif(L[0][2] == L[1][1] == L[2][0] == -1):\n\t\tf = 1\n\t\n# for i in L:\n# \tprint(i)\nif(f):\n\tprint('Yes')\nelse:\n\tprint('No')\n","a = [list(map(int,input().split()))\t for i in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\nfor i in range(n):\n    for j in range(3):\n        for k in range(3):\n            if b[i] == a[j][k]:\n                a[j][k] = 0\n\nfor i in range(3):\n    yoko=0\n    for j in range(3):\n        if a[i][j]==0:\n            yoko+=1\n            if yoko == 3:\n                print(\"Yes\")\n                exit()\nif (a[0][0] == 0 and a[1][1] == 0 and a[2][2]==0) or (a[0][2] == 0 and a[1][1] == 0 and a[2][0]==0):\n    print(\"Yes\")\n    exit()\nfor i in range(3):\n    tate=0\n    for j in range(3):\n        if a[j][i]==0:\n            tate+=1\n            if tate == 3:\n                print(\"Yes\")\n                exit()\nprint(\"No\")","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [int(input()) for i in range(N)]\nbingo = \"No\"\n\nfor i in range(N):\n    for a in range(3):\n        for b in range(3):\n            if(B[i]==A[a][b]):\n                A[a][b] = 0\nfor i in range(3):\n    if(A[i]==[0,0,0]):\n        bingo = \"Yes\"\n    if(A[0][i]==0 and A[1][i]==0 and A[2][i]==0):\n        bingo = \"Yes\"\nif(A[0][0]==0 and A[1][1]==0 and A[2][2]==0):\n        bingo = \"Yes\"\nif(A[0][2]==0 and A[1][1]==0 and A[2][0]==0):\n        bingo = \"Yes\"\n\nprint(bingo)","def judge(board):\n    for i in range(0, 3):\n        if board[i][0] == board[i][1] == board[i][2] == 0 :\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == 0:\n            return True\n    \n    if board[0][0] == board[1][1] == board[2][2] == 0:\n        return True\n    if board[0][2] == board[1][1] == borad[2][0] == 0:\n        return True\n    \n    return False\n\n\nupper  = list(map(int, input().split(\" \")))\nmiddle = list(map(int, input().split(\" \")))\nlower  = list(map(int, input().split(\" \")))\n\nboard = (upper,middle,lower)\n\nN = int(input())\nbingos = list()\n\nfor i in range(0, N):\n    bingos.append(int(input()))\n\nfor i in range(0, 3):\n    for j in range(0, 3):\n        if upper[j] == bingos[i]:\n            board[0][j] = 0\n            break\n        elif middle[j] == bingos[i]:\n            board[1][j] = 0\n            break\n        elif lower[j] == bingos[i]:\n            board[2][j] = 0\n            break\n        else:\n            pass\n\nif judge(board):\n    print('Yes')\nelse:\n    print('No')\n","import numpy as np\n\nA = [list(map(int,input().split())) for _ in range(3)]\nN = int(input())\nB = [int(input()) for _ in range(N)]\n\nBINGO = np.array([[False for i in range(3)]for j in range(3)])\n\nfor i in range(3):\n    for j in range(3):\n        if A[i][j] in B:\n            BINGO[i][j] = True\n\n#\u6a2a\u78ba\u8a8d\nfor i in BINGO:\n    if False not in i:\n        print(\"Yes\")\n        exit()\n\nBINGO = BINGO.T # \u7e26\u6a2a\u3092\u5165\u308c\u66ff\u3048T\u306fnumpy\u306e\u95a2\u6570\n\n#\u7e26\u78ba\u8a8d\nfor i in BINGO:\n    if False not in i:\n        print(\"Yes\")\n        exit()\n\n#\u659c\u3081\u78ba\u8a8d\ncross = [BINGO[i][i] for i in range(3)]\ncross_re = [BINGO[i][2-i] for i in range(3)]\n\nif False not in (cross or cross_re):\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")","def q2(data, num_list):\n    data = [int(num) for d in data for num in d.split()]\n    num_list = [int(n) for n in num_list]\n\n    for num in num_list:\n        data = [d if d != num else 0 for d in data]\n        if check_bingo(data):\n            return 'Yes'\n\n    else:\n        return 'No'\n\n\ndef check_bingo(data):\n    # case1\n    if sum(data[:3]) == 0: return True\n    if sum(data[3:6]) == 0: return True\n    if sum(data[6:]) == 0: return True\n    if sum([data[0], data[3], data[6]]) == 0: return True\n    if sum([data[3*i+1] for i in range(3)]) == 0: return True\n    if sum([data[3*i + 2] for i in range(3)]) == 0: return True\n    if sum([data[0], data[4], data[8]]) == 0: return True\n    if sum([data[2], data[4], data[6]]) == 0: return True\n\n    return False\n  \n\ndata = [input() for _ in range(3)]\n\nnum = int(input())\n\nnum_list = [int(input()) for _ in range(num)]\n\nprint(q2(data, num_list))\n","import numpy as np\n\nsheet=[input().split() for l in range(3)]\nn=int(input())\nb=[input() for i in range(n)]\na=np.array(sheet)\ni,j,k,c,z=0,0,0,0,0\n\nfor i in range(3):\n    for j in range(3):\n        for k in range(n):\n            if a[i][j]==b[k]:\n                a[i][j]=\"x\"\n\n\nif a[0][0]==a[1][1]==a[2][2]==\"x\":\n    c+=1\n\nif a[0][2]==a[1][1]==a[2][0]==\"x\":\n    c+=1\n\nfor z in range(3):\n    if a[0][z]==a[1][z]==a[2][z]==\"x\":\n        c+=1\nprint(a)\nif c!=0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","A = [input().split() for i in range(3)]\nN = int(input())\nb = list(map(int,input().split()))\nA = [[int(v) for v in l] for l in A]\nimport numpy as np\nA = np.array(A)\nl = []\nfor i in range(N):\n  if b[i] in A:\n    l.append(tuple(nd[0] for nd in np.where(A == b[i])))\nif (0, 0) in l and (1, 0) in l and (2, 0) in l:\n  print(\"Yes\")\nelif (0, 0) in l and (1, 1) in l and (2, 2) in l:\n  print(\"Yes\")\nelif (0, 1) in l and (1, 1) in l and (2, 1) in l:\n  print(\"Yes\")\nelif (0, 2) in l and (1, 1) in l and (2, 0) in l:\n  print(\"Yes\")\nelif (0, 2) in l and (1, 2) in l and (2, 2) in l:\n  print(\"Yes\")\nelif (0, 0) in l and (0, 1) in l and (0, 2) in l:\n  print(\"Yes\")\nelif (1, 0) in l and (1, 1) in l and (1, 2) in l:\n  print(\"Yes\")\nelif (2, 0) in l and (2, 1) in l and (2, 2) in l:\n  print(\"Yes\")\nelse:\n  print(\"No\")","\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \n\nCopy\nCopy\nA=[]\nflag=0\nfor i in range(3):\n  A.append(list(map(int,input().split())))\nn=int(input())\nfor i in range(n):\n  s=int(input())\n  for k in range(3):\n    if s in A[k]:\n      A[k][A[k].index(s)]=0\n\nif A[0]==[0,0,0] or A[1]==[0,0,0] or A[2]==[0,0,0]:\n  print(\"Yes\")\n  flag=1\nelif A[1][1]==0 and A[2][2]==0 and A[0][0]==0:\n  print(\"Yes\")\n  flag=1\nelif A[0][2]==0 and A[1][1]==0 and A[2][0]==0:\n  print(\"Yes\")\n  flag=1\nelse:\n  for i in range(3):\n    if A[0][i]==0 and A[1][i]==0 and A[2][i]==0:\n      print(\"Yes\")\n      flag=1\n      break\nif flag == 0:\n  print(\"No\")","class Bingo:\n    def check_num(self, arr, B):\n        for b in B:\n            for y in range(3):\n                for x in range(3):\n                    if arr[y][x] == b:\n                        arr[y][x] = -1\n        return arr\n    def check_bingo(self, arr):\n        for y in range(3):\n            f = True\n            for x in range(3):\n                if arr[y][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for x in range(3):\n            f = True\n            for y in range(3):\n                if arr[y][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for y in range(3):\n            f = True\n            for y in range(3):\n                if arr[y][y] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for x in range(3):\n            f = True\n            for x in range(3):\n                if arr[x][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        print('No')\n\nif __name__ == \"__main__\":\n    A1 = list(map(int, input().split())) \n    A2 = list(map(int, input().split())) \n    A3 = list(map(int, input().split())) \n    arr = [A1, A2, A3]\n    N = int(input())\n    B = [int(input()) for _ in range(N)]\n    b = Bingo()\n    result_list = b.check_num(arr, B)\n    b.check_bingo(result_list)\n","A_1 = list(map(int, input().split()))\nA_2 = list(map(int, input().split()))\nA_3 = list(map(int, input().split()))\nA = A_1 + A_2 + A_3\nN = int(input())\nB = []\nfor _ in range(N):\n  B.append(int(input()))\nfor b in range(N):\n  for a in range(9):\n    if B[b] == A[a]:\n      A[a] = 0\nBINGO = 'No'\nfor i in range(3):\n  if A[i*3] + A[i*3+1] + A[i*3+2] == 0:\n    BINGO = 'Yes'\n  if A[i] + A[i+3] + A[i+6] == 0:\n      BINGO = 'Yes'\nif (A[0] + A[4] + A[8] == 0):\n  BINGO = 'Yes'\nif (A[2] + A[4] + A[6] == 0):\n  BINGO = 'Yes'\nprint(BINGO)","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [int(input()) for i in range(N)]\n\nfor i in range(3):\n\tfor j in range(3):\n\t\tfor k in range(N):\n\t\t\tif A[i][j] == B[k]:\n\t\t\t\tA[i][j] = 0\n\ncnt = 0\nfor i in range(3):\n\tS = 0\n\tfor j in range(3):\n\t\tS += A[i][j]\n\tif S == 0:\n\t\tcnt = 1\n\t\t\nfor j in range(3):\n\tS = 0\n\tfor i in range(3):\n\t\tS += A[i][j]\n\tif S == 0:\n\t\tcnt = 1\n\t\t\nS = A[0][0] + A[1][1] + A[2][2]\nif S == 0:\n\tcnt = 1\n\t\nS = A[0][2] + A[1][1] + A[2][0]\nif S == 0:\n\tcnt = 1\n\t\nif cnt == 1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")","def check():\n    A = [[int(i) for i in input().split()] for _ in range(3)]\n    N = int(input())\n    \n    for _ in range(N):\n        num = int(input())\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == num:\n                    A[i][j] = '*'\n    checklist = [a for a in A]\n    checklist2 = [[a[i] for a in A] for i in range(3)]\n    checklist3 = [[A[0][0], A[1][1], A[2][2]], [A[0][2], A[1][1], A[2][0]]]\n    \n    a = [checklist, checklist2, checklist3]\n    \n    for aaa in a:\n        for check in aaa:\n            if check == ['*', '*', '*']:\n                return 'Yes'\n    return 'No'\nprint(check())","import sys \nA = [input().split() for l in range(3)]\nN = int(input())\n\nb = ['0'] * N\nfor i in range(0,N):\n    b[i] = input()\n\nfor i in range(0,3):\n    for j in range(0,3):\n        if A[i][j] in b:\n            A[i][j] = '0'\n\nfor i in range(0,3):\n    count = 0\n    for j in range(0,3):\n        if A[i][j] == '0':\n            count += 1\n    if count == 3:\n        print('Yes')\n        sys.exit()\n\nfor j in range(0,3):\n    count = 0\n    for i in range(0,3):\n        if A[i][j] == '0':\n            count += 1\n    if count == 3:\n        print('Yes')\n        sys.exit()\n\nif A[0][0] == '0' and A[1][1] == '0' and A[2][2] == '0':\n    print('Yes')\n    sys.exit()\nelif A[0][2] == '0' and A[1][1] == '0' and A[2][0] == '0':\n    print('Yes')\n    sys.exit()\nelse:\n    print('No')\n    sys.exit()\n\n \n\n\n\n\n\n    ","A = [[],[],[]]\nb = []\nB = [[False]*3]*3\n\nA[0] = list(map(int,input().split(\" \")))\nA[1] = list(map(int,input().split(\" \")))\nA[2] = list(map(int,input().split(\" \")))\nN = int(input())\n\n_N = N\nwhile(_N>0):\n    _N -= 1\n    b.append(int(input()))\n\nfor c in b:\n    for i in range(3):\n        for j in range(3):\n            if(A[i][j] == c):\n                B[i][j] = True\n\nbingo = \"No\"\n# tate\nfor i in range(3):\n    # tate\n    if(B[i][0] and B[i][1] and B[i][2]):\n        bingo = \"Yes\"\n    # yoko\n    if(B[0][i] and B[1][i] and B[2][i]):\n        bingo = \"Yes\"\n# naname\nif(B[0][0] and B[1][1] and B[2][2]):\n    bingo = \"Yes\"\nif(B[0][2] and B[1][1] and B[2][0]):\n    bingo = \"Yes\"\n\nprint(bingo)","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nb = [int(input()) for _ in range(N)]\nB = [[0,0,0],[0,0,0],[0,0,0]]\n\nans = 'No'\nfor i, row in enumerate(A):\n    for j, value in enumerate(row):\n        if value in b:\n            B[i][j] = 1\nprint(B)\nif B[0][0]==B[0][1]==B[0][2]==1 or B[1][0]==B[1][1]==B[1][2]==1 or B[2][0]==B[2][1]==B[2][2]==1:\n    ans = 'Yes'\nelif B[0][0]==B[1][0]==B[2][0]==1 or B[0][1]==B[1][1]==B[2][1]==1 or B[0][2]==B[1][2]==B[2][2]==1:\n    ans = 'Yes'\nelif B[0][0]==B[1][1]==B[2][2]==1 or B[0][2]==B[1][1]==B[2][0]==1:\n    ans = 'Yes'\nprint(ans)","a = [list(map(int, input().split())) for i in range(3)]\nfor j in range(int(input())):\n  b = int(input())\n  for h in range(3):\n    for k in range(3):\n      if a[h][k] == b:\n        a[h][k] = 0\n\nans = 'No'        \nfor m in range(3):\n  if a[m][0] == a[m][1] == a[m][2]:\n    ans = 'Yes'\n  if a[0][m] == a[1][m] == a[2][m]:\n    ans = 'Yes'\nif a[0][0] == a[1][1] == a[2][2]:\n  ans = 'Yes'\nif a[0][2] == a[1][1] == a[2][0]:\n  ans = 'Yes'\nprint(ans)","from collections import Counter\nA1=list(map(int,input().split()))\nA2=list(map(int,input().split()))\nA3=list(map(int,input().split()))\nA=[A1,A2,A3]\nN=int(input())\nfor _ in range(N):\n  b=int(input())\n  #\u7a74\u3092\u3042\u3051\u308b\n  for tmpA in A:\n    if b in tmpA:\n      index=tmpA.index(b)\n      tmpA[index]=-1\n      break\n  \n#bingo\u30c1\u30a7\u30c3\u30af\n  \n#\u305f\u3066\nif True in [A[0][i]==A[1][i] and A[1][i]==A[2][i] for i in range(3)]:\n  print(\"Yes\")\n#\u3088\u3053\nelif len(Counter(A[0]))==1 or len(Counter(A[1]))==1 or len(Counter(A[2]))==1:\n  print(\"Yes\")\n#\u306a\u306a\u3081\nelif A[1][1]==-1 and (A[0][0] == A[2][2] or A[0][2]==A[2][0]):\n  print(\"Yes\")\n#\u30c0\u30e1\nelse:\n  print(\"No\")\n","M=[]\nfor _i in range(3):\n  M.append(list(map(int,input().split())))\nn= int(input())\nfor a in range(n):\n  b= int(input())\n  for i in range(3):\n    for j in range(3):\n      if M[i][j]==b:\n        M[i][j]=-1\noassiy= False\nfor i in range(3):\n  cont=0\n  for j in range(3):\n    if M[i][j]==-1:\n      cont+=1\n  if cont==3:\n    break\n    oassiy=True\n\nif not oassiy:\n for j in range(3):\n  cont=0\n  for i in range(3):\n    if M[i][j]==-1:\n      cont+=1\n  if cont==3:\n    break\n    oassiy=True\n\nif not oassiy:\n  cont1 = cont2= 0\n  for i in range(3):\n    if M[i][i]==-1:\n      cont1+=1\n    if M[i][2-i]==-1:\n      cont2+=1\nif (cont1==3) or (cont2==3):\n    oassiy=True\n\nprint('Yes' if oassiy else 'No')\n","#157 b\na=[]\ncall_num=[]\nfor i in range(3):\n    x,y,z=map(int,input().split())\n    a.append(x)\n    a.append(y)\n    a.append(z)\nn=int(input())\nfor i in range(n):\n    x=int(input())\n    if x in a:\n        call_num.append(a.index(x))\nbingo\nans=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\nfor x in ans:\n    flag=True\n    for y in x:\n        if y not in call_num:\n            flag=False\n    if flag:\n        print(\"Yes\")\n        bing=True\n        break\nif bingo!=True:        \n    print(\"No\")\n","import numpy as np\n\nA_list = []\n\nfor i in range(3):\n    a = list(map(int, input().split()))\n    A_list.append(a)\n\nN = int(input())\nnarray = np.zeros((3, 3), dtype=np.int)\n\n\nfor j in range(N):\n    b = int(input())\n\n    for n in range(3):\n        for m in range(3): \n            if A_list[n][m] == b:\n                narray[n, m] = 1\n\n\nn_list = np.count_nonzero(narray == 1, axis = 0)\nm_list = np.count_nonzero(narray == 1, axis = 1)\n\nif np.any(n_list == 3) or np.any(m_list == 3):\n    print('Yes')\n    exit()\n\nif narray[0, 0] == 1 and narray[1, 1] == 1 and narray[2, 2] == 1:\n    print('Yes')\n    exit()\n\nif narray[0, 2] == 1 and narray[1, 1] == 1 and narray[2, 0] == 1:\n    print('Yes')\n    exit()\n\nprint('No')","import numpy as np\nb_card = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nnums = [int(input()) for _ in range(N)]\n\ncard_st = np.zeros((3, 3))\n\nfor num in nums:\n    for index, card_num in enumerate(b_card):\n        if num in card_num:\n            card_st[index][card_num.index(num)] = 1\n\nif True in np.all(card_st, axis=0):\n    print('Yes')\nelif True in np.all(card_st, axis=1):\n    print('Yes')\nelif np.all(np.diag(card_st) == 1):\n    print('Yes')\nelif np.all(np.diag(np.fliplr(card_st)) == 1):\n    print('Yes')\nelse:\n    print('No')","class Bar:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.left = False\n        self.center = False\n        self.right = False\n\n    def open(self, v):\n        if v == self.a:\n            self.left = True\n        elif v == self.b:\n            self.center = True\n        elif v == self.c:\n            self.right = True\n\n    def bingo(self):\n        return all([self.left, self.right, self.center])\n\n\ntop = Bar(*map(int, input().split()))\ncenter = Bar(*map(int, input().split()))\nbottom = Bar(*map(int, input().split()))\nfor x in range(int(input())):\n    value = int(input())\n    top.open(value)\n    center.open(value)\n    bottom.open(value)\n\n\ndef ok():\n    print(\"Yes\")\n    exit()\n\n\nif top.bingo() or center.bingo() or bottom.bingo():\n    ok()\n\nif top.left == center.left == bottom.left == True:\n    ok()\n\nif top.center == center.center == bottom.center == True:\n    ok()\n\nif top.right == center.right == bottom.right == True:\n    ok()\n\nif top.left == center.center == bottom.right == True:\n    ok()\n\nif top.right == center.center == bottom.left == True:\n    ok()\n\nprint('No')\n\n\n","X = [list(map(int, input().split())) for j in range(3)]\nN = int(input())\nb = []\nfor i in range(N):\n    b.append(int(input()))\n\nlis_bingo = (\n    [X[0], X[1], X[2], \n    [X[0][0], X[1][0], X[2][0]], \n    [X[0][1], X[1][1], X[2][1]], \n    [X[0][2], X[1][2], X[2][2]], \n    [X[0][0], X[1][1], X[2][2]], \n    [X[0][2], X[1][1], X[2][0]]]\n)\n\nn = 0\nwhile n <= 7:\n    ans_bool = set(lis_bingo[n]) <= set(b)\n    if ans_bool:\n        break\n    n += 1\n\nif ans_bool:\n    print('Yes')\nelse :\n    print(\"No\")\n","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB = []\nfor _ in range(n):\n    B.append(input())\n\nfor b in B:\n    for x in range(3):\n        for y in range(3) :\n            if a[x][y] == b:\n                a[x][y] = 0\n\nif A[0][0] * A[1][0] * A[2][0] == 0 or A[0][1] * A[1][1] * A[2][1] == 0 or A[0][2] * A[1][2] * A[2][2] == 0 or A[0][0] * A[0][1] * A[0][2] == 0 or A[1][0] * A[1][1] * A[1][2] == 0 or A[2][0] * A[2][1] * A[2][2] == 0 or A[0][0] * A[1][1] * A[2][2] == 0 or A[0][2] * A[1][1] * A[2][0] == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\") \n","bingo = []\nfor i in range(3):\n    bingo.append(list(map(int, input().split())))\nn = int(input())\nb = [int(input()) for _ in range(n)]\n\nresult = [[False, False, False] for _ in range(3)]\n\nfor i in range(n):\n    for j in range(3):\n        if b[i] in bingo[j]:\n            result[j][bingo[j].index(b[i])] = True\n\n# \u6a2a\nfor i in result:\n    if all(i):\n        print('Yes')\n        exit()\n# \u7e26\nfor i in range(3):\n    if all([result[0][i], result[1][i], result[2][i]]):\n        print('Yes')\n        exit()\n# \u659c\u3081\nif all([result[0][0], result[1][1], result[2][2]]) or all([result[0][2], result[1][1], result[2][0]]):\n    print('Yes')\n    exit()\n\nprint('No')","a=[[0]*3 for i in range(3)]\nb=[]\nfor i in range(3):\n  x=input().split()\n  a[i][0]=x[0]\n  a[i][1]=x[1]\n  a[i][2]=x[2]\nn=int(input())\nfor i in range(n):\n  b.append(input())\nfor i in range(n):\n  for j in range(9):\n    if b[i]==a[j\/\/3][j%3]:\n      a[j\/\/3][j%3]='X'\njud=[0,0,0,0]\nz=0\nfor i in range(3):\n  for j in range(2):\n    if a[i][j]==a[i][j+1]:\n      jud[0]+=1\n    if a[j][i]==a[j+1][i]:\n      jud[1]+=1\n    if a[j][j]==a[j+1][j+1]:\n      jud[2]+=1\n    if a[j][2-j]==a[j+1][2-j-1]:\n      jud[3]+=1\n  if max(jud)>1:\n    print('Yes')\n    break\n  else:\n    z+=1\nif z==3:\n  print('No')","import numpy as np\n\na_list = list(map(int, input().split()))\na_list_2 = list(map(int, input().split()))\na_list_3 = list(map(int, input().split()))\n\na_total_list = np.array([a_list, a_list_2, a_list_3])\nbingo_array = np.zeros((3, 3))\n\nN = int(input())\n\nb_list = []\n\nfor i in range(N):\n    b = int(input())\n    if b in a_total_list:\n        bingo_array[np.where(a_total_list == b)[0][0]][np.where(a_total_list == b)[1][0]] = 1\n\nbingo_x_y = 0\nbreak_flag = False\nfor i in range(3):\n    if break_flag is True:\n        break\n    else:\n        bingo_x = 0\n        bingo_y = 0\n    for j in range(3):\n        if bingo_array[i][j] == 1:\n            bingo_x += 1\n            if bingo_x == 3:\n                break_flag = True\n                break\n        if bingo_array[j][i] == 1:\n            bingo_y += 1\n            if bingo_y == 3:\n                break_flag = True\n                break\n        if i == j:\n            if bingo_array[i][j] == 1:\n                bingo_x_y += 1\n                if bingo_x_y == 3:\n                    break_flag = True\n                    break\n\nif bingo_x >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_y >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_x_y >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_array[0][2] == 1 and bingo_array[1][1] == 1 and bingo_array[2][0] == 1:\n    print(\"Yes\")\n    exit()\nelse:\n    print(\"No\")\n    exit()","a=[input().split() for i in range(3)]\nn=int(input())\nb=[input() for i in range(n)]\nflg=0\nfor k in range(3):\n  if a[k][0] in b:\n    if a[k][1] and a[k][2] in b:\n      flg=1\n  elif a[0][k] in b:\n    if a[1][k] and a[2][k] in b:  \n      flg=1\n  elif a[0][0] and a[1][1] and a[2][2] in b:\n    flg=1\n  elif a[0][2] and a[1][1] and a[2][0] in b:\n    flg=1\nprint(['No','Yes'][flg])","bingo = [int(input()),int(input()),int(input()),int(input()),\n         int(input()),int(input()),int(input()),int(input()),int(input())]\na_list= []\nN = int(input())\nfor i in range(0,N):\n    b = int(input())\n    if b in bingo:\n        a_list.append(bingo.index(b))\nprint(a_list)\nif 0 in a_list:\n    if 1 in a_list:\n        if 2 in a_list:\n            yes = 1\n    if 3 in a_list:\n        if 6 in a_list:\n            yes = 1\n    if 4 in a_list:\n        if 8 in a_list:\n            yes = 1\nif 1 in a_list:\n    if 4 in a_list:\n        if 7 in a_list:\n            yes = 1\nif 2 in a_list:\n    if 4 in a_list:\n        if 6 in a_list:\n            yes = 1\n    if 5 in a_list:\n        if 8 in a_list:\n            yes = 1\nif 3 in a_list:\n    if 4 in a_list:\n        if 5 in a_list:\n            yes = 1\nif 6 in a_list:\n    if 7 in a_list:\n        if 8 in a_list:\n            yes = 1\nif yes == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n","A = []\nfor _ in range(3):\n    A.append([int(i) for i in input().split(' ')])\nN = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nfor num in a:\n    for i in range(3):\n        for j in range(3):\n            if num == A[i][j]:\n                A[i][j] = '*'\n\nans = 'No'\nfor i in range(3):\n    flg = 0 \n    b1 = all(A[i][j] == '*' for j in range(3))\n    b2 = all(A[j][i] == '*' for j in range(3))\n    b3 = all(A[j][j] == '*' for j in range(3))\n    b4 = all(A[2-j][j] == '*' for j in range(3))\n    if b1 or b2 or b3 or b4:\n        ans = 'Yes'\n\nprint(ans)\n        ","A1 = list(map(int,input().split()))\nA2 = list(map(int,input().split()))\nA3 = list(map(int,input().split()))\nN = int(input())\nB = [int(input()) for i in range(N)]\n\nflag = True\nfor i in range(3):\n    if (A1[0] in B) and (A1[1] in B) and (A1[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A2[0] in B) and (A2[1] in B) and (A2[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A3[0] in B) and (A3[1] in B) and (A3[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A1[i] in B) and (A2[i] in B) and (A3[i] in B):\n        print('Yes')\n        flag = False\n        break \n    elif (A1[0] in B) and (A2[1] in B) and (A3[2] in B):\n        print('Yes')\n        flag = False\n        break \n    elif (A1[2] in B) and (A2[1] in B) and (A3[0] in B):\n        print('Yes')\n        flag = False\n        break \nif flag == True:\n    print('No')","A = np.array([list(map(int,input().split())),list(map(int,input().split())),list(map(int,input().split()))])\nN = int(input())\nB = [input() for _  in range(N)]\nC = [1000, 1000, 1000]\nfor z in range(N):\n    for x in range(3):\n        for y in range(3):\n            if B[z] == A[x][y]:\n                A[x][y] = 1000\n                \n\nif (A[0] == C).all or (A.T[0] == C).all or (A[1] == C).all or (A[2] == C).all or (A.T[1] == C).all or (A.T[2] == C).all\n    print('Yes')\nelif A[0][1] == A[1][1] == A[2][2] or A[0][2] == A[1][1] == A[2][0]:   \n    print('Yes')\nelse:\n    print('No')","import sys\nimport math\ndef i():return int(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef i2():return map(int,sys.stdin.readline().replace(\"\\n\",\"\").split())\ndef s():return str(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef l():return list(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef intl():return [int(k) for k in sys.stdin.readline().replace(\"\\n\",\"\").split()]\ndef lx():return list(map(lambda x:int(x)*-1,sys.stdin.readline().replace(\"\\n\",\"\").split()))\ndef t():return tuple(map(int,sys.stdin.readline().replace(\"\\n\",\"\").split()))\n\nif __name__ == \"__main__\":pass\na1,a2,a3 = i2()\nb1,b2,b3 = i2()\nc1,c2,c3 = i2()\nl = [a1,a2,a3,b1,b2,b3,c1,c2,c3]\nn = i()\nfor i in range(n):\n    k = int(input())\n    if k in l:\n        try:\n            l[l.index(k)] = 0\n        except IndexError:pass  \nif (l[0] == 0 and l[1] == 0 and  l[2]== 0):\n    print(\"Yes\")\nelif (l[3] == 0 and l[4] == 0 and  l[5]== 0):\n    print(\"Yes\")\nelif (l[6] == 0 and l[7] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[0] == 0 and l[3] == 0 and  l[6]== 0):\n    print(\"Yes\")\nelif (l[1] == 0 and l[4] == 0 and  l[7] == 0):\n    print(\"Yes\")\nelif (l[2] == 0 and l[5] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[0] == 0 and l[4] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[2] == 0 and l[4] == 0 and l[6] == 0):\n    print(\"Yes\")\nelse:print(\"No\")","import math\na1 = list(map(int, input().split())) \na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\na = [a1,a2,a3]\n\nN = int(input())\n\nb = []\nfor i in range(N) :\n    b.append(int(input()))\n\nm = [[0,0,0],[0,0,0],[0,0,0]]\n\nfor i in range(N) :\n    for j in range(3) :\n        for k in range(3) :\n            if b[i] == a[j][k] :\n                m[j][k] = 1\nif  m[0].count(1) == 3 or \\\n    m[1].count(1) == 3 or \\\n    m[2].count(1) == 3 or \\\n    [x[0] for x in m].count(1) == 3 or \\\n    [x[1] for x in m].count(1) == 3 or \\\n    [x[2] for x in m].count(1) == 3 or \\\n    (x[0][0] == 1 and x [1][1] == 1 and x [2][2] == 2) or \\\n    (x[2][0] == 1 and x [1][1] == 1 and x [2][0] == 2) :\n    print('Yes')\nelse :\n    print('No')","# import math\n# import bisect\n# import heapq\n# from collections import deque\n# import numpy as np\n\n# n, m = map(int, input().split())\n\na = [0] * 9\ni = 0\nfor i in range(3):\n    b,c,d = map(int, input().split())\n    # print(b,c,d)\n    a[3*i],a[3*i+1],a[3*i+2] = b,c,d\n\nans = 'No'\n\nn = int(input())\n\nb = [ int(input()) for i in range(n) ]\n# print(b)\nfor i in range(n):\n    for j in range(9):\n        a[j] = -1 if b[i] == a[j] else a[j]\n\npairs = [\n    [0,1,2],[3,4,5],[6,7,8],\n    [0,3,6],[1,4,7],[2,5,8],\n    [0,4,8],[2,4,6]]\n\nfor p in pairs:\n    if a[p[0]] == -1 and a[p[1]] == -1 and a[p[2]] == -1:\n        ans = 'Yes'\n\n\nprint(ans)","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [list(map(int,input().split())) for i in range(N)]\nfor k in range(N):\n    for i in range(3):\n        for j in range(3):\n            if B[k][0] == A[i][j]:\n                A[i][j] = 0\n\nif A[0][0] == A[0][1] == A[0][2] ==0:\n    print(\"Yes\")\nelif A[1][0] == A[1][1] == A[1][2] ==0:\n    print(\"Yes\")\nelif A[2][0] == A[2][1] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][0] == A[1][0] == A[2][0] ==0:\n    print(\"Yes\")\nelif A[0][1] == A[1][1] == A[2][1] ==0:\n    print(\"Yes\")\nelif A[0][2] == A[1][2] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][0] == A[1][1] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][2] == A[1][1] == A[2][0] ==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A = []\nfor i in range(3):\n    A.append(list(input().split()))\nN = int(input())\nB = []\nfor i in range(N):\n    B.append(input())\nif A[0] <= B or A[1] <= B or A[2] <= B or {A[0][0], A[1][0], A[2][0]} <= set(B) or\\\n{A[0][1], A[1][1], A[2][1]} <= set(B) or {A[0][2], A[1][2], A[2][2]} <= set(B) \\\nor {A[0][0], A[1][1], A[2][2]} <= set(B) or {A[0][2], A[1][1], A[2][0]} <= set(B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","A = []\nfor i in range(3):\n    A.append(list(input().split()))\nN = int(input())\nB = []\nfor i in range(N):\n    B.append(input())\nif A[0] <= B or A[1] <= B or A[2] <= B or {A[0][0], A[1][0], A[2][0]} <= set(B) or\\\n{A[0][1], A[1][1], A[2][1]} <= set(B) or {A[0][2], A[1][2], A[2][2]} <= set(B) \\\nor {A[0][0], A[1][1], A[2][2]} <= set(B) or {A[0][2], A[1][1], A[2][0]} <= set(B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","A1=list(map(int, input().split()))\nA2=list(map(int, input().split()))\nA3=list(map(int, input().split()))\nA=A1+A2+A3\nN=int(input())\ns=set()\nfor _ in range(N):\n  b=int(input())\n  if b in A:\n    s|={A.index(b)}\nbingo=[{0,1,2},{0,3,6},{0,4,8},{1,4,7},{2,5,8},{2,4,6},{3,4,5},{6,7,8}]\nprint(['No','Yes'][any(s>=b for b in bingo)])","A = [list(map(int,input().split())) for i in range(3)]\nn = int(input())\nfor j in range(n):\n  b = int(input())\n  for j in range(3):\n    for k in range(3): \n    \tif b==A[j][k]:\n      \t\tA[j][k]=-1\n\nfor k in range(3):\n  if A[k][:]==[-1,-1,-1]:\n    print('Yes')\n    exit(0)\n \nfor k in range(3):\n  if sum(A[:][k])==[-1,-1,-1]:\n    print('Yes')\n    exit(0)\n \nif (A[0][0]==A[1][1]==A[2][2]==-1)or(A[2][0]==A[1][1]==A[0][2]==-1): \n    print('Yes')\n    exit(0)\n    \nprint('No')","A = [[0]*3 for _ in range(3)]\nfor i in range(3):\n    A[i] = list(map(int,input().split()))\n\nN = int(input())\nB = [0 for i in range(N)]\nfor i in range(N):\n    B[i] = int(input())\n\nBingo = [[False]*3 for _ in range(3)]\nfor k in range(9):\n    i = k \/\/ 3\n    j = k % 3\n    for b in B:\n        if A[i][j] == b:\n            Bingo[i][j] = True\n\nfor i in range(3):\n    if Bingo[i][1] and Bingo[i][2] and Bingo[i][0] == True:\n        print(\"Yes\")\n        exit()\n    if Bingo[1][i] and Bingo[2][i] and Bingo[0][i] == True:\n        print(\"Yes\")\n        exit()\n\nif Bingo[1][1] and Bingo[2][2] and Bingo[0][0] == True:\n    print(\"Yes\")\n    exit()\nif Bingo[0][2] and Bingo[1][1] and Bingo[2][0] == True:\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")\n\n     \n\n\n","a1 = [int(e) for e in input().split()]\na2 = [int(e) for e in input().split()]\na3 = [int(e) for e in input().split()]\nn = int(input())\nbs = []\nfor _ in range(n):\n    bs.append(int(input()))\n\ndef is_bingo(mat,hits):\n    row_pattern = [[mat[i][j] for j in range(3)] for i in range(3)]\n    col_pattern = [[mat[j][i] for j in range(3)] for i in range(3)]\n    cross_patten= [[mat[i][i] for i in range(3)] , [mat[0][2],mat[1][1],mat[2][0]]]\n    if any([set(pattern).issubset(hits) for pattern in row_pattern+col_pattern+cross_patten]):\n        return True\n    return False\n  \nm=[a1,a2,a3]\nprint('Yes' if is_bingo(m,bs) else 'No')","a=list(map(int, input().split()))\nb=list(map(int, input().split()))\nc=list(map(int, input().split()))\nn=int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\nimport numpy as np\ny=np.zeros(9).reshape(3,3)\nfor i in range(n):\n    for x in range(3):\n        if a[x]==l[i][0]:\n            y[0][x]=1\nfor i in range(n):\n    for x in range(3):\n        if b[x]==l[i][0]:\n            y[1][x]=1\nfor i in range(n):\n    for x in range(3):\n        if c[x]==l[i][0]:\n            y[2][x]=1\nif sum(y[0])==3:\n    print('Yes')\nelif sum(y[1])==3:\n    print('Yes')\nelif sum(y[2])==3:\n    print('Yes')\nelif sum(y[1])==3:\n    print('Yes')\nelif y[0][0]+y[1][0]+y[2][0]==3:\n    print('Yes')\nelif y[0][1]+y[1][1]+y[2][1]==3:\n    print('Yes')\nelif y[0][2]+y[1][2]+y[2][2]==3:\n    print('Yes')\nelif y[0][0]+y[1][1]+y[2][2]==3:\n    print('Yes')\nelif y[0][2]+y[1][1]+y[2][0]==3:\n    print('Yes')\nelse:\n    print('No')","A = []\nb = []\nfor i in range(3):\n  A.append(list(map(int, input().split())))\nN = int(input())\nfor i in range(N):\n  b.append(int(input()))\n\nfor i in range(N):\n  for j in range(3):\n    if b[i] in A[j]:\n      A[j][A[j].index(b[i])] = 0\n\nflag = 0\n\nfor i in range(3):\n  if sum(A[i]) == 0:\n    flag = 1\n\nfor i in range(3):\n  if A[0][i] + A[1][i] + A[2][i] == 0:\n    flag = 1\n\nif A[0][0] + A[1][1] + A[2][2] == 0:\n  flag = 1\n\nif A[0][2] + A[1][1] + A[0][2] == 0:\n  flag = 1\n\nif flag == 1:\n  print('Yes')\nelse:\n  print('No')","Ai_j = []\nfor i in range(3):\n    Ai_j.append(list(map(int,input().split())))\nN = int(input())\nnumber_list = []\nfor i in range(N):\n    number_list.append(int(input()))\n'''\nprint(Ai_j)\nprint(N)\nprint(number_list)\n'''\n\nfor x in number_list:\n    for i in range(3):\n        for j in range(3):\n           if  Ai_j[i][j] == x:\n               Ai_j[i][j] = '\u25cb'\n#print(Ai_j)\n\ncount = 0\n\nif Ai_j[0][0] == Ai_j[0][2] == Ai_j[0][1] == '\u25cb': count+=1\nif Ai_j[1][0] == Ai_j[1][2] == Ai_j[1][1] == '\u25cb': count+=1\nif Ai_j[2][0] == Ai_j[2][2] == Ai_j[2][1] == '\u25cb': count+=1\nif Ai_j[0][0] == Ai_j[1][0] == Ai_j[2][0] == '\u25cb': count+=1\nif Ai_j[0][1] == Ai_j[1][1] == Ai_j[2][1] == '\u25cb': count+=1\nif Ai_j[0][2] == Ai_j[1][2] == Ai_j[2][2] == '\u25cb': count+=1\nif Ai_j[0][0] == Ai_j[1][1] == Ai_j[2][2] == '\u25cb': count+=1\nif Ai_j[0][2] == Ai_j[1][1] == Ai_j[2][0] == '\u25cb': count+=1\n\nif count == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","import itertools\na = []\ncnt_list = []\nfor _ in range(3):\n    a += map(int, input().split())\nn = int(input())\nfor _ in range(n):\n    b = int(input())\n    for i, j in enumerate(a):\n        if b == j:\n            cnt_list.append(i)\nans = 'No'\nif len(cnt_list) > 2:\n    cnt_list = set(cnt_list)\n    for k in list(itertools.permutations(cnt_list, 3)):\n        if sum(k) % 3 == 0:\n            ans = 'Yes'\nprint(ans)","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\n\nfor i in range(n):\n  b=int(input())\n  for j in range(3):\n    for k in range(3):\n      if a[j][k]==b:\n        a[j][k]=0\n\nans=0\nfor i in range(3):\n  if a[i][0]==0 and a[i][1]==0 and a[i][2]==0:\n    ans=1\n  elif a[0][i]==0 and a[1][i]==0 and a[2][i]==0:\n    ans=1\n\nif a[1][1]==0 and a[2][2]==0 and a[0][0]==0:\n  ans=1\n\nif ans==1:\n  print('Yes')\nelse:\n  print('No')","A = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\n\nmark = []\nfor i in range(N):\n    b = int(input())\n    for j, a in enumerate(A):\n        for k, aa in enumerate(a):\n            if aa == b:\n                mark.append((j,k))\n\n\nif (((0,0) and (0,1) and (0,2)) or ((1,0) and (1,1) and (1,2)) or ((2,0) and (2,1) and (2,2))) in mark:\n    print('Yes')\nelif (( (0,0) and (1,1) and (2,2) ) or ( (0,2) and (1,1) and (2,0) ) ) in mark:\n    print(\"Yes\")\nelif (((0,0) and (1,0) and (2,0)) or ((0,1) and (1,1) and (2,1)) or ((0,2) and (1,2) and (2,2))) in mark:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\nb=[int(input()) for _ in range(n)]\nused=[[False]*3 for _ in range(3)]\nfor k in range(n):\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==b[k]:\n                used[i][j]==True\n\nfor i in range(3):\n    if used[0][i] and used[1][i] and used[2][i]:\n        print(\"Yes\")\n        exit()\n        \nfor i in range(3):\n    if used[i][0] and used[i][1] and used[i][2]:\n        print(\"Yes\")\n        exit()\n\nif used[0][0] and used[1][1] and used[2][2]:\n        print(\"Yes\")\n        exit()\n\nif used[0][2] and used[1][1] and used[2][0]:\n        print(\"Yes\")\n        exit()                \nprint(\"No\")","one = list(map(int, input().split()))\ntwo = list(map(int, input().split()))\nthree = list(map(int, input().split()))\nn = int(input())\nout = [int(input()) for x in range(n)]\n\n\ndef judge(a_list):\n    for i in a_list:\n        if i not in out:\n            return False\n\n    return True\n\n\nfor_judge = [one, two, three]\n\nfor i in range(3):\n    tmp = [one[i], two[i], three[i]]\n    for_judge.append(tmp)\n\n\nnaname1 = [one[0], two[1], three[2]]\nnaname2 = [one[2], two[1], three[0]]\n\nfor_judge.append(naname1)\nfor_judge.append(naname2)\n\nfor a_list in for_judge:\n    if judge(a_list):\n        print('Yes')\n        exit()\n\nprint('No')\n","a = [input().split() for l in range(3)]\na = [[int(item) for item in row] for row in a]\nN = int(input())\nb = [input() for i in range(n)]\nx = 1\nfor i in range(N):\n  for j in range(3):\n    for k in range(3):\n      if a[j][k] == b[i]:\n        a[j][k] = 0\nfor i in range(3):\n  if a[i][0]*a[i][1]*a[i][2] == 0 | a[0][i]*a[1][i]*a[2][i] == 0:\n    x = 0\nif a[0][0]*a[1][1]*a[2][2] == 0 | a[0][2]*a[1][1]*a[2][0] == 0:\n  x = 0\nif x:\n  print('No')\nelse:\n  print('Yes')\n  ","\nA = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if A[j][k] == b:\n                A[j][k] = 0\nif A[0][0] == 0 and A[0][1] == 0 and A[0][2] == 0:\n    print('yes')\nelif A[1][0] == 0 and A[1][1] == 0 and A[1][2] == 0:\n    print('yes')\nelif A[2][0] == 0 and A[2][1] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][0] == 0 and A[1][0] == 0 and A[2][0] == 0:\n    print('yes')\nelif A[0][1] == 0 and A[1][1] == 0 and A[2][1] == 0:\n    print('yes')\nelif A[0][2] == 0 and A[1][2] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][0] == 0 and A[1][1] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][2] == 0 and A[1][1] == 0 and A[2][0] == 0:\n    print('yes')\nelse:\n    print('No')","def resolve():\n    A = []\n    for i in range(3):\n        aa = map(int, input().split())\n        A.append(list(aa))\n\n    N = int(input())\n    B = []\n    for i in range(N):\n        bb = int(input())\n        B.append(bb)\n\n    ans = 'No'\n\n    for bbb in list(B):\n        for i in range(3):\n            if A[i][0] == bbb:\n                A[i][0] = 1000\n            if A[i][1] == bbb:\n                A[i][1] = 1000\n            if A[i][2] == bbb:\n                A[i][2] = 1000\n\n    for i in range(3):\n        if A[i][0] == 1000 and A[i][1] == 1000 and A[i][2] == 1000:\n            ans = 'Yes'\n\n    for i in range(3):\n        if A[0][i] == 1000 and A[1][i] == 1000 and A[2][i] == 1000:\n            ans = 'Yes'\n\n    if A[0][0] == 1000 and A[1][1] == 1000 and A[2][2] == 1000:\n        ans = 'Yes'\n    if A[0][2] == 1000 and A[1][1] == 1000 and A[2][0] == 1000:\n        ans = 'Yes'\n\n    print(ans)\n\n\nresolve()","60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n","a = []\nfor i in range(3):\n    a += list(map(int, input().split()))\nc = [False] * 9\nn = int(input())\nfor i in range(n):\n    b = int(input())\n    if b in a:\n        c[a.index(b)] = True\nd = [[c[0], c[1], c[2]], [c[3], c[4], c[5]], [c[6], c[7], c[8]], [c[0], c[3], c[6]], [c[1], c[4], c[7]], [c[2], c[5], c[8]], [c[0], c[4], c[8]], [c[2], c[4], c[6]]]\nif [True, True, True] in d:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A=sum([list(map(int,input().split())) for _ in range(3)],[])\nN=int(input())\nb=[int(input()) for _ in range(N)]\nf=0\nfor i in range(9):if A[i]in b:f|=1<<i\nprint('Yes'if sum(f&v==v for v in[7,23,56,84,146,273,292,448])else'No')","# ABC157b\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**6)\n    # \u518d\u5e30\u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u9650\u308aPypy\u3067\u51fa\u3059\u3053\u3068\n    bing = [list(map(int, input().split())) for _ in range(3)]\n    n = int(input())\n    b = [int(input()) for _ in range(n)]\n    for num in b:\n        for i in bing:\n            try:\n                while True:\n                    t = i.index(num)\n                    i[t] = -1\n            except:\n                continue\n    # print(bing)\n\n    naname = [((0, 0), (1, 1), (2, 2)), (2, 0), (1, 1), (0, 2)]\n    if sum(bing[0]) == -3 or sum(bing[1]) == -3 or sum(bing[2]) == -3 or bing[0][0]+bing[0][1]+bing[0][2] == -3 or bing[1][0]+bing[1][1]+bing[1][2] == -3 or bing[2][0]+bing[2][1]+bing[2][2] == -3 or bing[0][0]+bing[1][1]+bing[2][2] == -3 or bing[0][2]+bing[1][1]+bing[2][0] == -3:\n        print('Yes')\n        exit(0)\n\n    print('No')\n\n\nif __name__ == '__main__':\n    main()\n","a1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nn = int(input())\ns = list(map(int, [input() for i in range(n)]))\nl = [\n  [0, 0, 0]\n  , [0, 0, 0]\n  , [0, 0, 0]\n]\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a1[i] == s[j]:\n      l[0][i] = i+1\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a2[i] == s[j]:\n      l[1][i] = i+1\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a3[i] == s[j]:\n      l[2][i] = i+1\nn = []\nfor i in l:\n  for j in i:\n    if j != 0:\n      n.append(j)\ncount = 0\nfor i in range(0, 3):\n  if l[i][0] and l[i][1] and l[i][2]:\n    count += 1\nif (l[0][0] and l[1][1] and l[2][2]) or (l[2][0] and l[1][1] and l[0][2]):\n  count += 1\nelse:\n  for i in range(1, 4):\n    if n.count(i) == 3:\n      count += 1\nprint('Yes' if count >= 1 else 'No')","A=[list(map(int,input().split())) for _ in range(3)]\nN=int(input())\nb=[int(input()) for _ in range(N)]\n\ns=[]\nt=[]\ncross_1=0\ncross_2=0\n\nans=\"No\"\n\nfor i in b:\n    for j in range(3):\n        if i in A[j]:\n            s.append(j)\n            t.append(A[j].index(i))\n            if j==A[j].index(i):\n                cross_1+=1\n            elif j==2-A[j].index(i):\n                cross_2+=1\nfor k in range(3):\n    if s.count(k)==3:\n        ans=\"Yes\"\nfor l in range(3):\n    if t.count(l)==3:\n        ans=0\nif cross_1==3 or cross_2==3:\n    ans=\"Yes\"\n\nprint(ans)\n    \n    \n","# import math\n# import bisect\n# import heapq\n# from collections import deque\n# import numpy as np\n\n# n, m = map(int, input().split())\n\na = [0] * 9\ni = 0\nfor _ in range(3):\n    b,c,d = map(int, input().split())\n    # print(b,c,d)\n    a[i],a[i+1],a[i+2] = b,c,d\n\n    i += 3\n# print(a)\nans = 'No'\n\nn = int(input())\n\nb = [ int(input()) for i in range(n) ]\n# print(b)\nfor i in range(n):\n    for j in range(9):\n        a[j] = -1 if b[i] == a[j] else a[j]\n\npairs = [\n    [0,1,2],[3,4,5],[6,7,8],\n    [0,3,6],[1,4,7],[3,5,8],\n    [0,4,8],[2,4,6]]\n\nfor p in pairs:\n    if a[p[0]] == -1 and a[p[1]] == -1 and a[p[2]] == -1:\n        ans = 'Yes'\n\n\nprint(ans)","import sys\na =[]\na.append(list(map(int,input().split())))\na.append(list(map(int,input().split())))\na.append(list(map(int,input().split())))\nn = int(input())\nb =[]\nfor i in range(n):\n    b.append(int(input()))\n#print(b)\nfor i in range(3):\n    for j in range(3):\n        if a[i][j] in b:\n            a[i][j] = 0","x=list(map(int,input().split()))\ny=list(map(int,input().split()))\nz=list(map(int,input().split()))\nn=int(input())\nX1=3\nY1=3\nZ1=3\nfor i in range(n):\n    b=list(map(int,input().split('\\n')))\n    for j in range(3):\n        if x[j]==b[i]:\n            X1 -= 1\n            if X1==0:\n                print('Yes')\n                exit()\n        elif y[j]==b[i]:\n            Y1 -= 1\n            if Y1==0:\n                print('Yes')\n                exit()\n        elif z[j]==b[i]:\n            Z1 -= 1\n            if Z1==0:\n                print('Yes')\n                exit()\nprint('No')","def solve(A, n, b):\n    for x in b:\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == x:\n                    A[i][j] = -1\n    for i in range(3):\n        ok = True\n        for j in range(3):\n            if A[i][j] != -1:\n                ok = False\n                break\n        if ok:\n            return \"Yes\"\n    for j in range(3):\n        ok = True\n        for i in range(3):\n            if A[i][j] != -1:\n                ok = False\n                break\n        if ok:\n            return \"Yes\"\n    ok = True\n    for i in range(3):\n        if A[i][i] != -1:\n            ok = False\n    if ok:\n        return \"Yes\"\n    ok = True\n    for i in range(3):\n        if A[2-i][i] != -1:\n            ok = False\n    if ok:\n        return \"Yes\"\n    return \"No\"\n\nA = [list(map(int, input().split())) for i in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\nprint(solve(A, n, b))","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\n\n\nfor _ in range(N):\n    B = int(input())\n    for i in range(3):\n      for j in range(3):\n          if A[i][j] == B:\n              A[i][j] == 0\n        \nbingo = False\nfor row in A:\n  if sum(row) == 0:\n    bingo = True\nfor col in zip(*A):\n  if sum(col) == 0:\n    bingo= True\nif sum(A[i][i] for i in range(3) )== 0:\n  bingo =True\nif sum(A[i][3 - i - 1] for i in range(3)) == 0:\n  bingo = True\n  \nprint(\"Yes\" if bingo == True else \"No\")","# \u30d3\u30f3\u30b4\u30ab\u30fc\u30c9\nbingo_card = list()\nfor i in range(3):\n    bingo_card.append(input().split(' '))\n# \u5f15\u3044\u305f\u56de\u6570\npick_count = int(input().strip())\n# \u5f15\u3044\u305f\u756a\u53f7\npicked_number = list()\nfor j in range(pick_count):\n    picked_number.append(input().strip())\n\n# \u30d3\u30f3\u30b4\u6210\u7acb\u6761\u4ef6\nbingo_line = list()\n# \u6a2a\nfor i in range(3):\n    bingo_line.append(bingo_card[i-1])\n# \u7e26\nbingo_line.append([bingo_card[0][0], bingo_card[1][0], bingo_card[2][0]])\nbingo_line.append([bingo_card[0][1], bingo_card[1][1], bingo_card[2][1]])\nbingo_line.append([bingo_card[0][2], bingo_card[1][2], bingo_card[2][2]])\n# \u659c\u3081\nbingo_line.append([bingo_card[0][0], bingo_card[1][1], bingo_card[2][2]])\nbingo_line.append([bingo_card[0][2], bingo_card[1][1], bingo_card[2][0]])\n\nestablished_line = [line for line in bingo_line if len(set(line) & set(picked_number)) == 3]\nprint('Yes' if len(established_line) > 0 else 'No')\n","# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport math\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9 +7\nINF = float('inf')\n\n#############\n# Functions #\n#############\n\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n):\n    return kaijo_memo[n]\n  if(len(kaijo_memo) == 0):\n    kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n):\n    kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n):\n    return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0):\n    gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n):\n    gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if(n == r):\n    return 1\n  if(n < r or r < 0):\n    return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\n\n#############\n# Main Code #\n#############\n\na,b,c = list(map(int,input().split()))\nd,e,f = list(map(int,input().split()))\ng,h,i = list(map(int,input().split()))\n\nbingo = [a,b,c,d,e,f,g,h,i]\n\n\ncheck = [0,0,0,0,0,0,0,0,0]\n\nN = int(input())\nfor i in range(N):\n  z = int(input())\n  for j in range(9):\n    if bingo[j] == z:\n      check[j] = 1\n      \nis_bingo = 0\n\nif check[0] and check[1] and check[2]:\n  is_bingo = 1\nif check[3] and check[4] and check[5]:\n  is_bingo = 1\nif check[6] and check[7] and check[8]:\n  is_bingo = 1\nif check[0] and check[3] and check[6]:\n  is_bingo = 1\nif check[1] and check[4] and check[7]:\n  is_bingo = 1\nif check[2] and check[5] and check[8]:\n  is_bingo = 1\nif check[0] and check[4] and check[8]:\n  is_bingo = 1\nif check[2] and check[4] and check[6]:\n  is_bingo = 1\n\n  \nif is_bingo:\n  print(\"Yes\")\nelse:\n  print(\"No\")","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\n\nfor i in range(n):\n  b=int(input())\n  for j in range(3):\n    for k in range(3):\n      if b==a[j][k]:\n        a[j][k]=0\n\nif a[0][0]==a[0][1]==a[0][2] or a[1][0]==a[1][1]==a[1][2] or a[2][0]==a[2][1]==a[2][2]\\\nor a[0][0]==a[1][0]==a[2][0] or a[0][1]==a[1][1]==a[2][1] or a[0][2]==a[1][2]==a[2][2]\\\nor a[0][0]==a[1][1]==a[2][2] or a[2][0]==a[1][1]==a[0][2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")","ary = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nn = int(input())\nwhile n > 0:\n    num = int(input())\n    if num == a1[0]:\n        ary[0][0] = 1\n    if num == a1[1]:\n        ary[0][1] = 1\n    if num == a1[2]:\n        ary[0][2] = 1\n    if num == a2[0]:\n        ary[1][0] = 1\n    if num == a2[1]:\n        ary[1][1] = 1\n    if num == a2[2]:\n        ary[1][2] = 1\n    if num == a3[0]:\n        ary[2][0] = 1\n    if num == a3[1]:\n        ary[2][1] = 1\n    if num == a3[2]:\n        ary[2][2] = 1\n    n = n - 1\nif (ary[0][0] == 1 and ary[0][1] == 1 and ary[0][2] == 1) or\\\n   (ary[1][0] == 1 and ary[1][1] == 1 and ary[1][2] == 1) or\\\n   (ary[2][0] == 1 and ary[2][1] == 1 and ary[2][2] == 1) or\\\n   (ary[0][0] == 1 and ary[1][0] == 1 and ary[2][0] == 1) or\\\n   (ary[0][1] == 1 and ary[1][1] == 1 and ary[2][1] == 1) or\\\n   (ary[0][2] == 1 and ary[1][2] == 1 and ary[2][2] == 1) or\\\n   (ary[0][0] == 1 and ary[1][1] == 1 and ary[2][2] == 1) or\\\n   (ary[0][2] == 1 and ary[1][1] == 1 and ary[2][0] == 1):\n    print('Yes')\nelse:\n    print('No')\n","A = []\nA_1 = list(map(int,input().split()))\nA_2 = list(map(int,input().split()))\nA_3 = list(map(int,input().split()))\nA.append(A_1)\nA.append(A_2)\nA.append(A_3)\nB = []\ncheck=0\nBingocountR=0\nBingocountG=0\nN = int(input())\nArrayBingo =[[0,0,0],[0,0,0],[0,0,0]]\nfor i in range(N):\n    B.append(int(input()))\nfor j in range (3):\n    for k in range (3):\n        for l in range (N):\n            if A[j][k]==B[l]:\n                ArrayBingo[j][k]=1\nfor i in range(3):\n    for j in range(3):\n        if ArrayBingo[j][i]==1:\n            BingocountR+=1\n            if BingocountR ==3:\n                check+=1\n    BingocountR = 0\nfor i in range(3):\n    for j in range(3):\n        if ArrayBingo[i][j]==1:\n            BingocountG+=1\n            if BingocountG ==3:\n                check+=1\n    BingocountG = 0\nif (ArrayBingo[0][0] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][2] == 1) or (ArrayBingo[0][2] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][0] == 1):\n    check += 1\nif check>0:\n    print('Yes')\nelse:\n    print('No')\n    ","\/\/Generated at 2020-03-01 20:59:55 UTC+8\n\/\/Created by Alphagocc\n#include<bits\/stdc++.h>\n#ifdef USE_PBDS\n#include<ext\/pb_ds\/assoc_container.hpp>\n#include<ext\/pb_ds\/priority_queue.hpp>\n#endif\n#define FORCE_INLINE __inline__ __attribute__((always_inline))\nclass IO\n{\nstatic const int bufSize=1<<18;char inBuf[bufSize],outBuf[bufSize];char*ip1=inBuf,*ip2=inBuf;int goodReadBit=0,op1=-1,op2=bufSize-1;\ntemplate <typename T>FORCE_INLINE void __RI(T&x){int ch=gc(),neg=1;x=0;for(;!(isdigit(ch)||ch=='-'||ch==EOF);ch=gc());if(ch==EOF){goodReadBit=0;return;}if(ch=='-')neg=-1,ch=gc();for(;isdigit(ch);ch=gc())x=x * 10 +(ch - 48) * neg;}\ntemplate <typename T>FORCE_INLINE void __RC(T&x){unsigned char ch;while(isspace(ch=gc()));x=ch;}\nFORCE_INLINE void __RS(std::string&x){char ch;x.clear();for(ch=gc();isspace(ch);ch=gc());if(ch==EOF){goodReadBit=0;return;}for(;!isspace(ch);ch=gc())x.push_back(ch);}\npublic:\nFORCE_INLINE int gc(){return ip1==ip2 &&(ip2 =(ip1=inBuf)+fread(inBuf,1,bufSize,stdin),ip1==ip2)? EOF: *ip1++;}\nFORCE_INLINE void R(char&x){__RC(x);}FORCE_INLINE void R(unsigned char&x){__RC(x);}FORCE_INLINE void R(std::string&x){__RS(x);}\ntemplate <typename T1,typename T2>FORCE_INLINE void R(std::pair<T1,T2>&x){R(x.first),R(x.second);}template <typename T>FORCE_INLINE void R(std::vector<T>&x){for(auto it=x.begin();it != x.end();++it)R(*it);}\ntemplate <typename T,typename...Args>FORCE_INLINE void RA(T*a,int n){for(int i=0;i < n;++i)R(a[i]);}template <typename T,typename...Args>FORCE_INLINE void R(T&x,Args&...args){R(x),R(args...);}\ntemplate <typename T,typename...Args>FORCE_INLINE void RA(T*a,int n,Args...args){for(int i=0;i < n;++i)RA(a[i],args...);}template <typename T>FORCE_INLINE void R(T&x){static_assert(std::is_integral<T>::value,\"Unsupported types\");if(std::is_integral<T>::value)__RI(x);}\nprivate:\nchar space;template <typename T>FORCE_INLINE void __WI(T x){static char buf[64];static int len=-1;if(x >= 0){do{buf[++len]=x % 10+48,x \/= 10;} while(x);} else{pc('-');do{buf[++len]=-(x%10)+48,x\/=10;}while(x);}while(len>=0){pc(buf[len]),--len;}}\npublic:\nFORCE_INLINE void pc(const char&x){if(op1==op2)flush();outBuf[++op1]=x;}\nFORCE_INLINE void flush(){fwrite(outBuf,1,op1+1,stdout),op1=-1;}FORCE_INLINE void W(const char&x){pc(x);}FORCE_INLINE void W(const char* x){while(*x!='\\0')pc(*(x++));}FORCE_INLINE void W(const std::string&x){W(x.c_str());}\ntemplate <typename T>FORCE_INLINE void W(const std::vector<T>&x){for(auto it=x.begin();it != x.end();it++)WS(*it);WL();}FORCE_INLINE void WL(){W('\\n');}\ntemplate <typename T>FORCE_INLINE void WL(const T&x){W(x),W('\\n');}FORCE_INLINE void WS(){W(' ');}\ntemplate <typename T>FORCE_INLINE void WS(const T&x){W(x),W(space);}\ntemplate <typename T>FORCE_INLINE void WA(T* a,int n){for(int i=0;i < n;i++)WS(a[i]);WL();}\ntemplate <typename T,typename...Args>FORCE_INLINE void W(const T&x,const Args&...args){W(x),W(space),W(args...);}\ntemplate <typename...Args>FORCE_INLINE void WL(const Args&...args){W(args...),W('\\n');}\ntemplate <typename T,typename...Args>FORCE_INLINE void WA(T* a,int n,Args...args){for(int i=0;i < n;i++)WA(a[i],args...);}\ntemplate <typename T>FORCE_INLINE void W(const T&x){static_assert(std::is_integral<T>::value,\"Unsupported types\");if(std::is_integral<T>::value)__WI(x);}\ntemplate <typename T>FORCE_INLINE IO&operator>>(T&x){R(x);return(*this);}\ntemplate <typename T>FORCE_INLINE IO&operator<<(const T&x){W(x);return(*this);}IO(){space=' ';}\n} io;\nnamespace Alphagocc{decltype(std::chrono::high_resolution_clock::now()) tStart;};void TimeBegin(){Alphagocc::tStart=std::chrono::high_resolution_clock::now();}long long TimeEnd(){return(std::chrono::high_resolution_clock::now() - Alphagocc::tStart).count();} \/\/ namespace Alphagocc\nusing namespace std;\n#define REP(i,x,y) for(int i=x;i < y;i++)\nconst int8_t INFC=0x3f;\nconst int16_t INFS=0x3f3f;\nconst int32_t INF=0x3f3f3f3f;\nconst int64_t INFL=0x3f3f3f3f3f3f3f3fLL;\n\nnamespace Alphagocc\n{\nint MAIN()\n{\n    int n = 3;\n    set<int> s;\n    for (int i = 0; i < n * n; i++) {\n        int x;\n        io >> x;\n        s.insert(x);\n    }\n    int q;\n    io >> q;\n    while (q--) {\n        int x;\n        io >> x;\n        if (s.count(x)) {\n            io.WL(\"YES\"), io.flush();\n            return 0;\n        }\n    }\n    io.WL(\"NO\");\n    io.flush();\n    return 0;\n}\n} \/\/ namespace Alphagocc\nint main() { return Alphagocc::MAIN(); }","A = []\n[A.extend(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB = [int(input()) for _ in range(N)]\nfor b in B:\n    try:\n        i = A.index(b)\n        A[i] = 0\n    except:\n        pass\nlines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n]\nans = \"No\"\nfor line in lines:\n    a, b, c = line\n    if A[a] == 0 and A[a] == A[b] and A[a] == A[c]:\n        ans = \"Yes\"\nprint(ans)\n","a1_1, a1_2, a1_3 = map(int, input().split())\na2_1, a2_2, a2_3 = map(int, input().split())\na3_1, a3_2, a3_3 = map(int, input().split())\na_list=[a1_1, a1_2, a1_3, a2_1, a2_2, a2_3, a3_1, a3_2, a3_3]\nn = int(input())\nb=[]\nfor i in range(n):\n  b_i = int(input())\n  b.append(b_i)\n  for j, a_j in enumerate(a_list):\n    if a_j == b_i:\n      a_list[j] = -1\n    \nif ((a_list[0]==-1 and a_list[3] == -1 and a_list[6] == -1) or\n    (a_list[1]==-1 and a_list[4] == -1 and a_list[7] == -1) or\n    (a_list[2]==-1 and a_list[5] == -1 and a_list[8] == -1) or\n\t(a_list[0]==-1 and a_list[4] == -1 and a_list[8] == -1) or\n\t(a_list[2]==-1 and a_list[4] == -1 and a_list[6] == -1)):\n  print(\"YES\")\nelse:\n  print(\"NO\")","a=open(0).read().split();print('YNeos'[all(t-set(map(a.index,a[10:]))for t in({0,3,6},{0,4,8},{2,4,6},{2,5,8},{3,4,5},{6,7,8}))::2])","A = []\nfor i in range(3):\n    a = list(map(int,input().split()))\n    A.extend(a)\nn = int(input())\nB = [0]*9\nfor i in range(n):\n    b = int(input())\n    for i in range(9):\n        if A[i] == b:\n            B[i] = 1\nans = 0\nfor i in range(3):\n    if B[i*3] == B[i*3+1] == B[i*3+2] == 1:\n        ans = 1\n    if B[i] == B[i+3] == B[i+6] == 1:\n        ans = 1\n    if B[0] == B[4] == B[8] == 1:\n        ans = 1\n    if B[2] == B[4] == B[6] == 1:\n        ans = 1\nif ans == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")","# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\n# list(map(int, list(input()))) # \u30b9\u30da\u30fc\u30b9\u304c\u306a\u3044\u6570\u5b57\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nimport math\nimport fractions\nimport sys\nimport bisect\nimport heapq  # \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc(\u6700\u5c0f\u5024\u53d6\u308a\u51fa\u3057)\nimport collections\nfrom collections import Counter\nfrom collections import deque\nimport pprint\nimport itertools\n\nsr = lambda: input()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\"n\u3092\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n\"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    if n == 1:\n        return arr\n\n    for i in range(2, int(-(-n ** 0.5 \/\/ 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\n# a^n\ndef power(a, n, mod):\n    x = 1\n    while n:\n        if n & 1:\n            x *= a % mod\n        n >>= 1\n        a *= a % mod\n    return x % mod\n\n\n# n*(n-1)*...*(l+1)*l\ndef kaijo(n, l, mod):\n    if n == 0:\n        return 1\n    a = n\n    tmp = n - 1\n    while (tmp >= l):\n        a = a * tmp % mod\n        tmp -= 1\n    return a\n\n# Union Find\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# \u7d04\u6570\u751f\u6210\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n\n    divisors.sort()\n    return divisors\n\n\ninf = 10 ** 18\nmod = 10 ** 9 + 7\n\na_list = []\na = []\nc = [False for i in range(9)]\nfor i in range(3):\n    a_list = lr()\n    for num in a_list:\n        a.append(num)\nn = int(input())\nfor i in range(n):\n    num = ir()\n    if num in a:\n        index = a.index(num)\n        c[index] = True\n\nif (c[0] and c[3] and c[6]) or (c[1] and c[4] and c[7]) or (c[2] and c[5] and c[8]) or (c[0] and c[1] and c[2]) or (c[3] and c[4] and c[5]) or (c[6] and c[7] and c[8]) or (c[0] and c[4] and c[8]) or (c[2] and c[4] and c[6]):\n    print('Yes')\nelse:\n    print('No')","\ndate = []\ndict = {}\nflag = 0\nfor i in range(3):\n    temp = [int(j) for j in input().split()]\n    date.append(temp)\nN = int(input())\n\nfor i in date:\n    for j in i:\n        dict[j] = 0\n\nfor i in  range(N):\n    m = int(input())\n    for j in date:\n        if m in j:\n            dict[m] = 1\nindex = list(dict.values())\nli = []\nli.append(index[0:3])\nli.append(index[3:6])\nli.append(index[6:9])\nprint(li)\nif li[0][0] == 1 and li[0][1]==1 and li[0][2]==1:\n    flag = 1\nif li[1][0] == 1 and li[1][1]==1 and li[1][2]==1:\n    flag = 1\nif li[2][0] == 1 and li[2][1]==1 and li[2][2]==1:\n    flag = 1\nif li[0][0] == 1 and li[1][0]==1 and li[2][0]==1:\n    flag = 1\nif li[0][1] == 1 and li[1][1]==1 and li[2][1]==1:\n    flag = 1\nif li[0][2] == 1 and li[1][2]==1 and li[2][2]==1:\n    flag = 1\nif li[0][0] == 1 and li[1][1]==1 and li[2][2]==1:\n    flag = 1\nif li[0][2] == 1 and li[1][1]==1 and li[2][0]==1:\n    flag = 1\n\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","a = [list(map(int, input().split())) for _ in range(3)]\nn = int(input())\nb = set([int(input()) for _ in range(n)])\n\ntate = [[(i,j) for i in range(3)] for j in range(3)]\nnaname = [[(i,i) for i in range(3)], [(i,2 - i) for i in range(3)]]\n\natari = set()\nfor i in range(3):\n    for j in range(3):\n        if a[i][j] in b:\n            atari.add((i, j))\n\nif len(atari) < 3:\n    print('No')\nelse:        \n    for i in range(3):\n        if (a[i][0] in atari and a[i][1] in atari and a[i][2] in atari) or (tate[i][0] in atari and tate[i][1] in atari and tate[i][2] in atari):\n            print('Yes')\n            exit()\n    \n    for i in range(2):\n        if naname[i][0] in atari and naname[i][1] in atari and naname[i][2] in atari:\n            print('Yes')\n            exit()\n    \n    print('No')\n    \n        \n","Array = [list(map(int,input().split())) for _ in range(3)]\nArrayBingo = [[0,0,0],[0,0,0,],[0,0,0]]\nN = int(input())\nB = []\ncheckR = 0\ncheckG = 0\ncheckN = 0\nfor i in range (N):\n    B.append(int(input()))\nfor l in range (N):\n    for j in range (3):\n        for k in range (3):\n            if Array[j][k]==B[l]:\n                ArrayBingo[j][k]=1\nfor i in range (3): \n    if (ArrayBingo[i][0] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR=4\n    if checkR !=4:\n        checkR=0\nfor i in range (3): \n    if (ArrayBingo[i][1] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR=4\nif checkR!=4    \n    checkR=0\nfor i in range (3): \n    if (ArrayBingo[i][2] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR =4\nelse:\n    checkR=0\nfor j in range (3):\n    if (ArrayBingo[0][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nif checkG !=4:\n    checkG=0\nfor j in range (3):\n    if (ArrayBingo[1][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nif checkG !=4:\n    checkG=0\nfor j in range (3):    \n    if (ArrayBingo[2][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nelse:\n    checkG=0\nif (ArrayBingo[0][0] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][2] == 1) or (ArrayBingo[0][2] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][0] == 1):\n    checkN = 1\nelse:\n    checkN = 0\nif checkR != 4 and checkG !=4 and checkN==1:\n    print('Yes')\nif checkR == 0 and checkG ==0 and checkN==0:\n    print('No')\n","from sys import stdin\nli = [list(map(int,stdin.readline().rstrip().split())) for _ in range(3)]\nlin = []\nfor i in range(3):\n    for j in range(3):\n        lin.append(li[i][j])\nn = int(stdin.readline().rstrip())\nlis = [int(stdin.readline().rstrip()) for _ in range(n)]\nliv = []\nfor i in lin:\n    if i in lis:\n        liv.append(0)\n    else:\n        liv.append(1)\nif liv[0:3] == [0,0,0] or liv[3:6] == [0,0,0] or liv[6:9] == [0,0,0]:\n    print(\"Yes\")\n    exit()\nfor i in range(3):\n    if liv[3*i] == 0 and liv[3*i+1] == 0 and liv[3*i+2] == 0:\n        print(\"Yes\")\n        exit()\nif liv[0] == 0 and liv[4] == 0 and liv[8] == 0:\n    print(\"Yes\")\n    exit()\nif liv[2] == 0 and liv[4] == 0 and liv[6] == 0:\n    print(\"Yes\")\n    exit()\nprint(\"No\")","#ABC157.B\nA1 = list(map(int,input().split()))\nA2 = list(map(int,input().split()))\nA3 = list(map(int,input().split()))\nN = int(input())\nb = [int(input())for _ in range(N)]\nif (A1[0] in b)and (A1[1]in b)and (A1[2] in b):\n    print('Yes')\nelif (A2[0]in b)and(A2[1] in b)and(A2[2]in b):\n    print('Yes')\nelif (A3[0]in b)and(A3[1]in b)and (A3[2]in b):\n    print('Yes')\nelif (A1[0]in b)and(A2[0]in b)and(A3[0]in b):\n    print('Yes')\nelif (A1[1]in b)and (A2[1]in b)and(A3[1]in b):\n    print('Yes')\nelif (A1[2] in b)and (A2[2]in b)and(A3[2]in b):\n    print('Yes')\nelif (A1[0]in b)and (A2[1]in b)and(A3[2]in b):\n    print('Yes')\nelif (A1[2]in b)and (A2[1]in b)and(A3[0]in b):\n    print('Yes')\nelse:\n    print('No')","A1 = list(map(int, input().split()))\nA2 = list(map(int, input().split()))\nA3 = list(map(int, input().split()))\nN = int(input())\n\n\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        if A1[j] == b:\n            A1[j] = 0\n        if A2[j] == b:\n            A2[j] = 0\n        if A3[j] == b:\n            A3[j] = 0\n\nf = 0\n\nif A1[0] == 0 and A1[1] == 0 and A1[2] == 0:\n    f = 1\nif A2[0] == 0 and A2[1] == 0 and A2[2] == 0:\n    f = 1\nif A3[0] == 0 and A3[1] == 0 and A3[2] == 0:\n    f = 1\nif A1[0] == 0 and A2[0] == 0 and A3[0] == 0:\n    f = 1\nif A1[1] == 0 and A2[1] == 0 and A3[1] == 0:\n    f = 1\nif A1[2] == 0 and A2[2] == 0 and A3[2] == 0:\n    f = 1\nif A1[0] == 0 and A2[1] == 0 and A3[2] == 0:\n    f = 1\nif A1[2] == 0 and A2[1] == 0 and A3[0] == 0:\n    f = 1\nif f == 1:\n    print('Yes')\nelse:\n    print('No')\n","def IsBingo(arr_9):\n    BINGO=['x','x','x']\n    C1=arr_9[0::2]\n    C2=arr_9[1::2]\n    C3=arr_9[2::2]\n    X1=[arr_9[0],arr_9[4],arr_9[8]]\n    X2=[arr_9[2],arr_9[4],arr_9[6]]\n    if arr_9[:3]==BINGO or arr_9[3:6]==BINGO or arr_9[6:]==BINGO or C1==BINGO or C2==BINGO or C3==BINGO or X1==BINGO or X2==BINGO:\n        return 'BINGO'\n\n\nA1=list(input().split())\nA2=list(input().split())\nA3=list(input().split())\nA=A1+A2+A3\nN=int(input())\nfor _ in range(N):\n    n=input()\n    if A.count(n)==1:\n        A[A.index(n)]=\"x\"\n# A1=A[:3]\n# A2=A[3:6]\n# A3=A[6:]\n# print(A1,A2,A3)\n\nif IsBingo(A)=='BINGO':\n    print('Yes')\nelse:\n    print('No')","import itertools\na = []\ncnt_list = []\nfor _ in range(3):\n    a += map(int, input().split())\nn = int(input())\nfor _ in range(n):\n    b = int(input())\n    for i, j in enumerate(a):\n        if b == j:\n            cnt_list.append(i)\nans = 'No'\nif len(cnt_list) > 2:\n    for k in list(itertools.permutations(cnt_list, 3)):\n        if sum(k) % 3 == 0:\n            ans = 'Yes'\nprint(ans)","l = list(map(int, input().split()))\nl += list(map(int, input().split()))\nl += list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n  b = int(input())\n  if b in l:\n    index = l.index(b)\n    l[index] = 0\nif l[0] == l[1] == l[2] or l[3] == l[4] == l[5] or l[6] == l[7] == l[8] or l[0] == l[3] == l[6] or l[1] == l[4] == l[7] or l[2] == l[5] == l[8] or l[0] == l[4] == l[8] or l[2] == l[4] == l[6]:\n  print(\"Yes\")\nelse:\n  print(\"No\")","List_A = [list(map(int,input().split())) for i in range(3)] # [[1,2],[3,4],[5,6]]\nN = int(input()) # \u6570\u5b57\u3092\u5909\u6570\u306b\u683c\u7d0d\nList_B = [int(input()) for i in range(N)] # \u8907\u6570\u306e\u6570\u5b57\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d # [1,2,3]\n\nList_C = [[0,0,0] for i in range(3)]\n\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if List_B[i] == List_A[j][k]:\n                List_C[j][k] = 1\n                \nresult = 'No'\n\nfor i in range(3):\n    if List_C[i][0] * List_C[i][1] * List_C[i][2] == 1:\n        result = 'Yes'\n    if List_C[0][i] * List_C[1][i] * List_C[2][i] == 1:\n        result = 'Yes'\n    if List_C[0][0] * List_C[1][1] * List_C[2][2] == 1:\n        result = 'Yes'\n    if List_C[0][2] * List_C[1][1] * List_C[2][0] == 1:\n        result = 'Yes'\n\nprint(result)","A = [[int(i) for i in input().split()] for _ in range(3)]\nB = [[False, False, False], [False, False, False], [False, False, False]]\nN = int(input())\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if A[j][k]==b:\n                B[j][k]=True\nfor r in B:\n    if all(r):\n        print(\"Yes\")\n        quit()\n\nfor c in zip(*B):\n    if all(c):\n        print(\"Yes\")\n        quit()\n# print(B)\nif (B[0][0] and B[1][1] and B[2][2]) or (B[0][2] and B[1][1] and B[2][0]):\n    print(\"Yes\")\n    quit()\n\nprint(\"No\")","a1 = list(map(int,input().split()))\na2 = list(map(int,input().split()))\na3 = list(map(int,input().split()))\nrow = int(input())\ndetame = [int(input()) for i in range(row)]\nbingo = 0\nif (a1[0]) in detame and (a1[1]) in detame and (a1[2]) in detame:\n    bingo=bingo+1\nelif (a2[0]) in detame and (a2[1]) in detame and (a2[2]) in detame:\n    bingo=bingo+1\nelif (a3[0]) in detame and (a3[1]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[0]) in detame and (a2[0]) in detame and (a3[0]) in detame:\n    bingo=bingo+1\nelif (a1[1]) in detame and (a2[1]) in detame and (a3[1]) in detame:\n    bingo=bingo+1\nelif (a1[2]) in detame and (a2[2]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[0]) in detame and (a2[1]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[2]) in detame and (a2[1]) in detame and (a3[0]) in detame:\n    bingo=bingo+1\nif bingo==0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A = []\nfor i in range(3):\n    a1,a2,a3 = list(map(int,input().split()))\n    Ai = [a1,a2,a3]\n    A.extend(Ai)\nn = int(input())\nana = []\nfor i in range(n):\n    b = int(input())\n    if b in A:\n        idx = A.index(b)\n        ana.append(idx)\natari = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,7]]\njudje = False\nfor i in range(len(atari)):\n    if (atari[i][0] in ana and atari[i][1] in ana)  and atari[i][1] in ana:\n        judje = True\n        break\nif judje == True:    \n    print(\"Yes\")\nelse:\n    print(\"No\")","row1 = list(map(int,input().split()))\nrow2 = list(map(int,input().split()))\nrow3 = list(map(int,input().split()))\n\nn = int(input())\nnums = []\nans = \"No\"\n\nfor i in range(0, n):\n  nums.append(int(input()))\n  \nfor i in range(0,3):\n  if row1[i] in nums: row1[i] == \"O\"\n  if row2[i] in nums: row2[i] == \"O\"\n  if row3[i] in nums: row3[i] == \"O\"\n    \n#Columns\nfor i in range(0,3):\n  if row1[i] == row2[i] == row3[i]: ans = \"Yes\"\n    \n#Rows\nif row1 == [\"O\",\"O\",\"O\"] or row2 == [\"O\",\"O\",\"O\"] or row3 == [\"O\",\"O\",\"O\"]: ans = \"Yes\"\n  \n#Diagonals\nif row1[0] == row2[1] == row3[2] or row1[2] == row2[1] == row3[0]: ans = \"Yes\"\n  \nprint(ans)","A=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\nB=[int(input()) for _ in range(n)]\n\nbingo=[[0]*3 for _ in range(3)]\nfor i in range(n):\n  for ai in range(3):\n    for aj in range(3):\n      if A[ai][aj]==B[i]:\n        bingo[ai][aj]=1\nflag=False\nif bingo[0][0]==bingo[0][1]==bingo[0][2]==1: flag=True\nif bingo[1][0]==bingo[1][1]==bingo[1][2]==1: flag=True\nif bingo[2][0]==bingo[2][1]==bingo[2][2]==1: flag=True\n  \nif bingo[0][0]==bingo[1][0]==bingo[2][0]==1: flag=True\nif bingo[0][1]==bingo[1][1]==bingo[2][1]==1: flag=True\nif bingo[0][2]==bingo[1][2]==bingo[2][2]==1: flag=True\n  \nif bingo[0][0]==bingo[1][1]==bingo[2][2]==1: flag=True\nif bingo[0][2]==bingo[1][1]==bingo[2][0]==1: flag=True\nif flag:\n  print('Yes')\nelse:\n  print('No')","A=[list(map(int,input().split())) for i in range(3)]\nn=int(input())\n\nfor i in range(n):\n  o=int(input())\n  for x in range(3):\n    for y in range(3):\n      if o == A[x][y]:\n        A[x][y]=-1\nfor x in range(3):\n  if A[x][0]==-1:\n    f=True\n    for y in range(3):\n      if A[x][y]!=-1:\n        f=False\n        if f:\n          print('Yes')\n          exit()\nfor y in range(3):\n  if A[0][y] == -1:\n    f=True\n    for x in range(3):\n      if A[y][x]!=-1:\n        f=False\n        if f:\n          print('Yes')\n          exit()\nf=True\nfor i in range(3):\n  if A[i][i]!=-1:\n    f=False\nif f:\n  print('Yes')\n  exit()\nf=True\nfor i in range(1,3):\n  if A[-i][-i]!=-1:\n    f=False\nif f:\n  print('Yes')\n  exit()\n\nprint('No')","a = [list(map(int, input().split())) for i in range(3)]\nn = int(input())\n\nb = set(int(input()) for i in range(n))\n\ndef check():\n    for i in range(3):\n        if all(a[i][j] in b for j in range(3)):\n            return True\n        if all(a[j][i] in b for j in range(3)):\n            return True\n    return all(a[i][i] in b for i in range(3)) or all(a[2-i][i] in b for i in range(3))\n\nprint('Yes' if check() else 'No')","a = [list(map(int, input().split())) for _ in range(3)]\nn = int(input())\n\nfor i in range(n):\n    b = int(input())\n    for r in range(3):\n        for c in range(3):\n            if a[r][c] == b:\n                a[r][c] = 0\n\nis_bingo = False\nfor i in range(3):\n    if sum([a[i][j] for j in range(3)]) == 0:\n        is_bingo = True\n        break\n    if sum([a[j][i] for j in range(3)]) == 0:\n        is_bingo = True\n        break\n\nif sum([a[j][j] for j in range(3)]) == 0:\n    is_bingo = True\nif sum([a[j][2 - j] for j in range(3)]) == 0:\n    is_bingo = True\n\nans = 'Yes' if is_bingo else 'No'\nprint(ans)\n"],"raw_generations":["a = [[int(i) for i in input().split()] for _ in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\n\nans = \"No\"\nfor i in range(3):\n  for j in range(3):\n    if a[i][j] in b:\n      a[i][j] = \"x\"\n      \nif (a[0][0]==a[1][1]==a[2][2]==\"x\") or (a[2][0]==a[1][1]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \nif (a[0][0]==a[1][0]==a[2][0]==\"x\")or(a[0][1]==a[1][1]==a[2][1]==\"x\")or(a[0][2]==a[1][2]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \nif (a[0][0]==a[0][1]==a[0][2]==\"x\")or(a[1][0]==a[1][1]==a[1][2]==\"x\")or(a[2][0]==a[2][1]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \n  \nprint(ans)","A = []\nfor _ in range(3):\n    A.append(list(map(int, input().split())))\n\nN = int(input())\n\nB = []\nfor _ in range(N):\n    B.append(int(input()))\n\npunch = []\nfor b in B:\n    for row in range(3):\n        if b in A[row]:\n            punch.append((row, A[row].index(b)))\n\nfor i in range(3):\n    if (i, 0) in punch:\n        if (i, 1) in punch and (i, 2) in punch:\n            print('Yes')\n            exit()\n        if (i-1, 0) in punch and (i+1, 0) in punch:\n            print('Yes')\n            exit()\n        if (i+1, 1) in punch and (i+2, 2) in punch:\n            print('Yes')\n            exit()\n\nif (2, 0) in punch:\n    if (1, 1) in punch and (0, 2) in punch:\n        print('Yes')\n        exit()\n\n\nprint('No')","bingo = []\nchecker = 0\nfor i in range(3):\n    bingo.append([int(j) for j in input().split()])\nn = int(input())\nfor i in range(n):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if bingo[j][k] == b:\n                bingo[j][k] = 0\nfor i in range(3):\n    if checker == 1:\n        break\n    if bingo[i][0] ==0 and  bingo[i][1] == 0 and bingo[i][2] == 0:\n        checker = 1\n    if bingo[0][i] == 0 and bingo[1][i] == 0 and bingo[2][i] == 0:\n        checker = 1\n    if bingo[0][0] == 0 and  bingo[1][1] == 0 and bingo[2][2] == 0:\n        checker = 1\n    if bingo[0][2] == 0 and bingo[1][1] == 0 and bingo[2][0] == 0:\n        checker = 1\n\nif checker:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","li_1 = list(map(int, input().split()))\nli_2 = list(map(int, input().split()))\nli_3 = list(map(int, input().split()))\nn = int(input())\nb = [int(input()) for i in range(n)]\n\nindex = 0\nans = 'No'\n\nfor i in b:\n    for j in li_1:\n        if i == j:\n            li_1[index] = 0\n        index += 1\n    index = 0\nfor i in b:\n    for j in li_2:\n        if i == j:\n            li_2[index] = 0\n        index += 1\n    index = 0\nfor i in b:\n    for j in li_3:\n        if i == j:\n            li_3[index] = 0\n        index += 1\n    index = 0\n\nif li_1[0] == 0 and li_1[1] == 0 and li_1[2] == 0:\n    ans = 'Yes'\nif li_2[0] == 0 and li_2[1] == 0 and li_2[2] == 0:\n    ans = 'Yes'\nif li_3[0] == 0 and li_3[1] == 0 and li_3[2] == 0:\n    ans = 'Yes'\n\nif li_1[0] == 0 and li_2[0] == 0 and li_3[0] == 0:\n    ans = 'Yes'\nif li_1[1] == 0 and li_2[1] == 0 and li_3[1] == 0:\n    ans = 'Yes'\nif li_1[2] == 0 and li_2[2] == 0 and li_3[2] == 0:\n    ans = 'Yes'\n\nif li_1[0] == 0 and li_2[1] == 0 and li_3[2] == 0:\n    ans = 'Yes'\nif li_1[2] == 0 and li_2[1] == 0 and li_3[0] == 0:\n    ans = 'Yes'\n\nprint(ans)","a,b,c=map(int,input().split())\nd,e,f=map(int,input().split())\ng,h,i=map(int,input().split())\nN=int(input())\nL=[int(input()) for i in range(N)]\nif a in L and b in L and c in L:\n  print('Yes')\nelif d in L and e in L and  f in L:\n  print('Yes')\nelif g in L and h in L and  i in L:\n  print('Yes')\nelif a in L and d in L and  g in L:\n  print('Yes')\nelif b in L and e in L and  h in L:\n  print('Yes')\nelif c in L and f in L and  i in L:\n  print('Yes')\nelif a in L and e in L and  i in L:\n  print('Yes')\nelif c in L and e in L and  g in L:\n  print('Yes')\nelse:\n  print('No')","num=[]\nfor i in range(3):\n    array = list(map(int, input().strip().split()))\n    num.append(array)\nN = int(input())\na = [int(input()) for i in range(N)]\n\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if a[i] == num[j][k]:\n                num[j][k] = False\nbingo = 0\nfor m in range(3):\n    if num[0][m] == num[1][m] == num[2][m] == False:bingo = 1\n\nfor n in range(3):\n    if num[n][0] ==  num[n][1] ==  num[n][2] == 0:bingo = 1 \nif num[0][0] == num[1][1] == num[2][2] == 0 :bingo = 1\nif num[0][2] == num[1][1] == num[2][0] == 0 :bingo = 1\n\nif bingo == 1:print(\"Yes\")\nelif bingo == 0:print(\"No\")\n\n\n","# ANSHUL GAUTAM\n# IIIT-D\n\nfrom math import *\nfrom copy import *\nfrom string import *\t\t\t\t# alpha = ascii_lowercase\nfrom random import *\t\t\t\t# l.sort(key=lambda l1:l1[0]-l1[1]) => ex: sort on the basis difference\nfrom sys import stdin\nfrom sys import maxsize\nfrom operator import *\t\t\t\t# d = sorted(d.items(), key=itemgetter(1))\nfrom itertools import *\nfrom collections import Counter\t\t# d = dict(Counter(l))\nfrom collections import defaultdict # d = defaultdict(list)\n\n'''\n\n'''\n\ndef solve(l):\n\tn = len(l)\n\t\n\nL = []\nfor i in range(3):\n\tl = list(map(int, stdin.readline().rstrip().split()))\n\tL.append(l)\n# for i in L:\n# \tprint(i)\nN = int(input())\nfor _ in range(N):\n\tq = int(input())\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif(L[i][j] == q):\n\t\t\t\tL[i][j] = -1\nf = 0\nfor i in range(3):\n\tif(L[i] == [-1,-1,-1]):\n\t\tf = 1\nif(not f):\n\tif(L[0][0] == L[1][0] == L[2][0] == -1):\n\t\tf = 1\n\tif(L[0][1] == L[1][1] == L[2][1] == -1):\n\t\tf = 1\n\tif(L[0][2] == L[1][2] == L[2][2] == -1):\n\t\tf = 1\n\tif(L[0][0] == L[1][1] == L[2][2] == -1):\n\t\tf = 1\n\tif(L[0][2] == L[1][1] == L[2][0] == -1):\n\t\tf = 1\n\t\n# for i in L:\n# \tprint(i)\nif(f):\n\tprint('Yes')\nelse:\n\tprint('No')\n","a = [list(map(int,input().split()))\t for i in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\nfor i in range(n):\n    for j in range(3):\n        for k in range(3):\n            if b[i] == a[j][k]:\n                a[j][k] = 0\n\nfor i in range(3):\n    yoko=0\n    for j in range(3):\n        if a[i][j]==0:\n            yoko+=1\n            if yoko == 3:\n                print(\"Yes\")\n                exit()\nif (a[0][0] == 0 and a[1][1] == 0 and a[2][2]==0) or (a[0][2] == 0 and a[1][1] == 0 and a[2][0]==0):\n    print(\"Yes\")\n    exit()\nfor i in range(3):\n    tate=0\n    for j in range(3):\n        if a[j][i]==0:\n            tate+=1\n            if tate == 3:\n                print(\"Yes\")\n                exit()\nprint(\"No\")","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [int(input()) for i in range(N)]\nbingo = \"No\"\n\nfor i in range(N):\n    for a in range(3):\n        for b in range(3):\n            if(B[i]==A[a][b]):\n                A[a][b] = 0\nfor i in range(3):\n    if(A[i]==[0,0,0]):\n        bingo = \"Yes\"\n    if(A[0][i]==0 and A[1][i]==0 and A[2][i]==0):\n        bingo = \"Yes\"\nif(A[0][0]==0 and A[1][1]==0 and A[2][2]==0):\n        bingo = \"Yes\"\nif(A[0][2]==0 and A[1][1]==0 and A[2][0]==0):\n        bingo = \"Yes\"\n\nprint(bingo)","def judge(board):\n    for i in range(0, 3):\n        if board[i][0] == board[i][1] == board[i][2] == 0 :\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == 0:\n            return True\n    \n    if board[0][0] == board[1][1] == board[2][2] == 0:\n        return True\n    if board[0][2] == board[1][1] == borad[2][0] == 0:\n        return True\n    \n    return False\n\n\nupper  = list(map(int, input().split(\" \")))\nmiddle = list(map(int, input().split(\" \")))\nlower  = list(map(int, input().split(\" \")))\n\nboard = (upper,middle,lower)\n\nN = int(input())\nbingos = list()\n\nfor i in range(0, N):\n    bingos.append(int(input()))\n\nfor i in range(0, 3):\n    for j in range(0, 3):\n        if upper[j] == bingos[i]:\n            board[0][j] = 0\n            break\n        elif middle[j] == bingos[i]:\n            board[1][j] = 0\n            break\n        elif lower[j] == bingos[i]:\n            board[2][j] = 0\n            break\n        else:\n            pass\n\nif judge(board):\n    print('Yes')\nelse:\n    print('No')\n","import numpy as np\n\nA = [list(map(int,input().split())) for _ in range(3)]\nN = int(input())\nB = [int(input()) for _ in range(N)]\n\nBINGO = np.array([[False for i in range(3)]for j in range(3)])\n\nfor i in range(3):\n    for j in range(3):\n        if A[i][j] in B:\n            BINGO[i][j] = True\n\n#\u6a2a\u78ba\u8a8d\nfor i in BINGO:\n    if False not in i:\n        print(\"Yes\")\n        exit()\n\nBINGO = BINGO.T # \u7e26\u6a2a\u3092\u5165\u308c\u66ff\u3048T\u306fnumpy\u306e\u95a2\u6570\n\n#\u7e26\u78ba\u8a8d\nfor i in BINGO:\n    if False not in i:\n        print(\"Yes\")\n        exit()\n\n#\u659c\u3081\u78ba\u8a8d\ncross = [BINGO[i][i] for i in range(3)]\ncross_re = [BINGO[i][2-i] for i in range(3)]\n\nif False not in (cross or cross_re):\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")","def q2(data, num_list):\n    data = [int(num) for d in data for num in d.split()]\n    num_list = [int(n) for n in num_list]\n\n    for num in num_list:\n        data = [d if d != num else 0 for d in data]\n        if check_bingo(data):\n            return 'Yes'\n\n    else:\n        return 'No'\n\n\ndef check_bingo(data):\n    # case1\n    if sum(data[:3]) == 0: return True\n    if sum(data[3:6]) == 0: return True\n    if sum(data[6:]) == 0: return True\n    if sum([data[0], data[3], data[6]]) == 0: return True\n    if sum([data[3*i+1] for i in range(3)]) == 0: return True\n    if sum([data[3*i + 2] for i in range(3)]) == 0: return True\n    if sum([data[0], data[4], data[8]]) == 0: return True\n    if sum([data[2], data[4], data[6]]) == 0: return True\n\n    return False\n  \n\ndata = [input() for _ in range(3)]\n\nnum = int(input())\n\nnum_list = [int(input()) for _ in range(num)]\n\nprint(q2(data, num_list))\n","import numpy as np\n\nsheet=[input().split() for l in range(3)]\nn=int(input())\nb=[input() for i in range(n)]\na=np.array(sheet)\ni,j,k,c,z=0,0,0,0,0\n\nfor i in range(3):\n    for j in range(3):\n        for k in range(n):\n            if a[i][j]==b[k]:\n                a[i][j]=\"x\"\n\n\nif a[0][0]==a[1][1]==a[2][2]==\"x\":\n    c+=1\n\nif a[0][2]==a[1][1]==a[2][0]==\"x\":\n    c+=1\n\nfor z in range(3):\n    if a[0][z]==a[1][z]==a[2][z]==\"x\":\n        c+=1\nprint(a)\nif c!=0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","A = [input().split() for i in range(3)]\nN = int(input())\nb = list(map(int,input().split()))\nA = [[int(v) for v in l] for l in A]\nimport numpy as np\nA = np.array(A)\nl = []\nfor i in range(N):\n  if b[i] in A:\n    l.append(tuple(nd[0] for nd in np.where(A == b[i])))\nif (0, 0) in l and (1, 0) in l and (2, 0) in l:\n  print(\"Yes\")\nelif (0, 0) in l and (1, 1) in l and (2, 2) in l:\n  print(\"Yes\")\nelif (0, 1) in l and (1, 1) in l and (2, 1) in l:\n  print(\"Yes\")\nelif (0, 2) in l and (1, 1) in l and (2, 0) in l:\n  print(\"Yes\")\nelif (0, 2) in l and (1, 2) in l and (2, 2) in l:\n  print(\"Yes\")\nelif (0, 0) in l and (0, 1) in l and (0, 2) in l:\n  print(\"Yes\")\nelif (1, 0) in l and (1, 1) in l and (1, 2) in l:\n  print(\"Yes\")\nelif (2, 0) in l and (2, 1) in l and (2, 2) in l:\n  print(\"Yes\")\nelse:\n  print(\"No\")","\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \n\nCopy\nCopy\nA=[]\nflag=0\nfor i in range(3):\n  A.append(list(map(int,input().split())))\nn=int(input())\nfor i in range(n):\n  s=int(input())\n  for k in range(3):\n    if s in A[k]:\n      A[k][A[k].index(s)]=0\n\nif A[0]==[0,0,0] or A[1]==[0,0,0] or A[2]==[0,0,0]:\n  print(\"Yes\")\n  flag=1\nelif A[1][1]==0 and A[2][2]==0 and A[0][0]==0:\n  print(\"Yes\")\n  flag=1\nelif A[0][2]==0 and A[1][1]==0 and A[2][0]==0:\n  print(\"Yes\")\n  flag=1\nelse:\n  for i in range(3):\n    if A[0][i]==0 and A[1][i]==0 and A[2][i]==0:\n      print(\"Yes\")\n      flag=1\n      break\nif flag == 0:\n  print(\"No\")","class Bingo:\n    def check_num(self, arr, B):\n        for b in B:\n            for y in range(3):\n                for x in range(3):\n                    if arr[y][x] == b:\n                        arr[y][x] = -1\n        return arr\n    def check_bingo(self, arr):\n        for y in range(3):\n            f = True\n            for x in range(3):\n                if arr[y][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for x in range(3):\n            f = True\n            for y in range(3):\n                if arr[y][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for y in range(3):\n            f = True\n            for y in range(3):\n                if arr[y][y] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for x in range(3):\n            f = True\n            for x in range(3):\n                if arr[x][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        print('No')\n\nif __name__ == \"__main__\":\n    A1 = list(map(int, input().split())) \n    A2 = list(map(int, input().split())) \n    A3 = list(map(int, input().split())) \n    arr = [A1, A2, A3]\n    N = int(input())\n    B = [int(input()) for _ in range(N)]\n    b = Bingo()\n    result_list = b.check_num(arr, B)\n    b.check_bingo(result_list)\n","A_1 = list(map(int, input().split()))\nA_2 = list(map(int, input().split()))\nA_3 = list(map(int, input().split()))\nA = A_1 + A_2 + A_3\nN = int(input())\nB = []\nfor _ in range(N):\n  B.append(int(input()))\nfor b in range(N):\n  for a in range(9):\n    if B[b] == A[a]:\n      A[a] = 0\nBINGO = 'No'\nfor i in range(3):\n  if A[i*3] + A[i*3+1] + A[i*3+2] == 0:\n    BINGO = 'Yes'\n  if A[i] + A[i+3] + A[i+6] == 0:\n      BINGO = 'Yes'\nif (A[0] + A[4] + A[8] == 0):\n  BINGO = 'Yes'\nif (A[2] + A[4] + A[6] == 0):\n  BINGO = 'Yes'\nprint(BINGO)","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [int(input()) for i in range(N)]\n\nfor i in range(3):\n\tfor j in range(3):\n\t\tfor k in range(N):\n\t\t\tif A[i][j] == B[k]:\n\t\t\t\tA[i][j] = 0\n\ncnt = 0\nfor i in range(3):\n\tS = 0\n\tfor j in range(3):\n\t\tS += A[i][j]\n\tif S == 0:\n\t\tcnt = 1\n\t\t\nfor j in range(3):\n\tS = 0\n\tfor i in range(3):\n\t\tS += A[i][j]\n\tif S == 0:\n\t\tcnt = 1\n\t\t\nS = A[0][0] + A[1][1] + A[2][2]\nif S == 0:\n\tcnt = 1\n\t\nS = A[0][2] + A[1][1] + A[2][0]\nif S == 0:\n\tcnt = 1\n\t\nif cnt == 1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")","def check():\n    A = [[int(i) for i in input().split()] for _ in range(3)]\n    N = int(input())\n    \n    for _ in range(N):\n        num = int(input())\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == num:\n                    A[i][j] = '*'\n    checklist = [a for a in A]\n    checklist2 = [[a[i] for a in A] for i in range(3)]\n    checklist3 = [[A[0][0], A[1][1], A[2][2]], [A[0][2], A[1][1], A[2][0]]]\n    \n    a = [checklist, checklist2, checklist3]\n    \n    for aaa in a:\n        for check in aaa:\n            if check == ['*', '*', '*']:\n                return 'Yes'\n    return 'No'\nprint(check())","import sys \nA = [input().split() for l in range(3)]\nN = int(input())\n\nb = ['0'] * N\nfor i in range(0,N):\n    b[i] = input()\n\nfor i in range(0,3):\n    for j in range(0,3):\n        if A[i][j] in b:\n            A[i][j] = '0'\n\nfor i in range(0,3):\n    count = 0\n    for j in range(0,3):\n        if A[i][j] == '0':\n            count += 1\n    if count == 3:\n        print('Yes')\n        sys.exit()\n\nfor j in range(0,3):\n    count = 0\n    for i in range(0,3):\n        if A[i][j] == '0':\n            count += 1\n    if count == 3:\n        print('Yes')\n        sys.exit()\n\nif A[0][0] == '0' and A[1][1] == '0' and A[2][2] == '0':\n    print('Yes')\n    sys.exit()\nelif A[0][2] == '0' and A[1][1] == '0' and A[2][0] == '0':\n    print('Yes')\n    sys.exit()\nelse:\n    print('No')\n    sys.exit()\n\n \n\n\n\n\n\n    ","A = [[],[],[]]\nb = []\nB = [[False]*3]*3\n\nA[0] = list(map(int,input().split(\" \")))\nA[1] = list(map(int,input().split(\" \")))\nA[2] = list(map(int,input().split(\" \")))\nN = int(input())\n\n_N = N\nwhile(_N>0):\n    _N -= 1\n    b.append(int(input()))\n\nfor c in b:\n    for i in range(3):\n        for j in range(3):\n            if(A[i][j] == c):\n                B[i][j] = True\n\nbingo = \"No\"\n# tate\nfor i in range(3):\n    # tate\n    if(B[i][0] and B[i][1] and B[i][2]):\n        bingo = \"Yes\"\n    # yoko\n    if(B[0][i] and B[1][i] and B[2][i]):\n        bingo = \"Yes\"\n# naname\nif(B[0][0] and B[1][1] and B[2][2]):\n    bingo = \"Yes\"\nif(B[0][2] and B[1][1] and B[2][0]):\n    bingo = \"Yes\"\n\nprint(bingo)","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nb = [int(input()) for _ in range(N)]\nB = [[0,0,0],[0,0,0],[0,0,0]]\n\nans = 'No'\nfor i, row in enumerate(A):\n    for j, value in enumerate(row):\n        if value in b:\n            B[i][j] = 1\nprint(B)\nif B[0][0]==B[0][1]==B[0][2]==1 or B[1][0]==B[1][1]==B[1][2]==1 or B[2][0]==B[2][1]==B[2][2]==1:\n    ans = 'Yes'\nelif B[0][0]==B[1][0]==B[2][0]==1 or B[0][1]==B[1][1]==B[2][1]==1 or B[0][2]==B[1][2]==B[2][2]==1:\n    ans = 'Yes'\nelif B[0][0]==B[1][1]==B[2][2]==1 or B[0][2]==B[1][1]==B[2][0]==1:\n    ans = 'Yes'\nprint(ans)","a = [list(map(int, input().split())) for i in range(3)]\nfor j in range(int(input())):\n  b = int(input())\n  for h in range(3):\n    for k in range(3):\n      if a[h][k] == b:\n        a[h][k] = 0\n\nans = 'No'        \nfor m in range(3):\n  if a[m][0] == a[m][1] == a[m][2]:\n    ans = 'Yes'\n  if a[0][m] == a[1][m] == a[2][m]:\n    ans = 'Yes'\nif a[0][0] == a[1][1] == a[2][2]:\n  ans = 'Yes'\nif a[0][2] == a[1][1] == a[2][0]:\n  ans = 'Yes'\nprint(ans)","from collections import Counter\nA1=list(map(int,input().split()))\nA2=list(map(int,input().split()))\nA3=list(map(int,input().split()))\nA=[A1,A2,A3]\nN=int(input())\nfor _ in range(N):\n  b=int(input())\n  #\u7a74\u3092\u3042\u3051\u308b\n  for tmpA in A:\n    if b in tmpA:\n      index=tmpA.index(b)\n      tmpA[index]=-1\n      break\n  \n#bingo\u30c1\u30a7\u30c3\u30af\n  \n#\u305f\u3066\nif True in [A[0][i]==A[1][i] and A[1][i]==A[2][i] for i in range(3)]:\n  print(\"Yes\")\n#\u3088\u3053\nelif len(Counter(A[0]))==1 or len(Counter(A[1]))==1 or len(Counter(A[2]))==1:\n  print(\"Yes\")\n#\u306a\u306a\u3081\nelif A[1][1]==-1 and (A[0][0] == A[2][2] or A[0][2]==A[2][0]):\n  print(\"Yes\")\n#\u30c0\u30e1\nelse:\n  print(\"No\")\n","M=[]\nfor _i in range(3):\n  M.append(list(map(int,input().split())))\nn= int(input())\nfor a in range(n):\n  b= int(input())\n  for i in range(3):\n    for j in range(3):\n      if M[i][j]==b:\n        M[i][j]=-1\noassiy= False\nfor i in range(3):\n  cont=0\n  for j in range(3):\n    if M[i][j]==-1:\n      cont+=1\n  if cont==3:\n    break\n    oassiy=True\n\nif not oassiy:\n for j in range(3):\n  cont=0\n  for i in range(3):\n    if M[i][j]==-1:\n      cont+=1\n  if cont==3:\n    break\n    oassiy=True\n\nif not oassiy:\n  cont1 = cont2= 0\n  for i in range(3):\n    if M[i][i]==-1:\n      cont1+=1\n    if M[i][2-i]==-1:\n      cont2+=1\nif (cont1==3) or (cont2==3):\n    oassiy=True\n\nprint('Yes' if oassiy else 'No')\n","#157 b\na=[]\ncall_num=[]\nfor i in range(3):\n    x,y,z=map(int,input().split())\n    a.append(x)\n    a.append(y)\n    a.append(z)\nn=int(input())\nfor i in range(n):\n    x=int(input())\n    if x in a:\n        call_num.append(a.index(x))\nbingo\nans=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\nfor x in ans:\n    flag=True\n    for y in x:\n        if y not in call_num:\n            flag=False\n    if flag:\n        print(\"Yes\")\n        bing=True\n        break\nif bingo!=True:        \n    print(\"No\")\n","import numpy as np\n\nA_list = []\n\nfor i in range(3):\n    a = list(map(int, input().split()))\n    A_list.append(a)\n\nN = int(input())\nnarray = np.zeros((3, 3), dtype=np.int)\n\n\nfor j in range(N):\n    b = int(input())\n\n    for n in range(3):\n        for m in range(3): \n            if A_list[n][m] == b:\n                narray[n, m] = 1\n\n\nn_list = np.count_nonzero(narray == 1, axis = 0)\nm_list = np.count_nonzero(narray == 1, axis = 1)\n\nif np.any(n_list == 3) or np.any(m_list == 3):\n    print('Yes')\n    exit()\n\nif narray[0, 0] == 1 and narray[1, 1] == 1 and narray[2, 2] == 1:\n    print('Yes')\n    exit()\n\nif narray[0, 2] == 1 and narray[1, 1] == 1 and narray[2, 0] == 1:\n    print('Yes')\n    exit()\n\nprint('No')","import numpy as np\nb_card = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nnums = [int(input()) for _ in range(N)]\n\ncard_st = np.zeros((3, 3))\n\nfor num in nums:\n    for index, card_num in enumerate(b_card):\n        if num in card_num:\n            card_st[index][card_num.index(num)] = 1\n\nif True in np.all(card_st, axis=0):\n    print('Yes')\nelif True in np.all(card_st, axis=1):\n    print('Yes')\nelif np.all(np.diag(card_st) == 1):\n    print('Yes')\nelif np.all(np.diag(np.fliplr(card_st)) == 1):\n    print('Yes')\nelse:\n    print('No')","class Bar:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.left = False\n        self.center = False\n        self.right = False\n\n    def open(self, v):\n        if v == self.a:\n            self.left = True\n        elif v == self.b:\n            self.center = True\n        elif v == self.c:\n            self.right = True\n\n    def bingo(self):\n        return all([self.left, self.right, self.center])\n\n\ntop = Bar(*map(int, input().split()))\ncenter = Bar(*map(int, input().split()))\nbottom = Bar(*map(int, input().split()))\nfor x in range(int(input())):\n    value = int(input())\n    top.open(value)\n    center.open(value)\n    bottom.open(value)\n\n\ndef ok():\n    print(\"Yes\")\n    exit()\n\n\nif top.bingo() or center.bingo() or bottom.bingo():\n    ok()\n\nif top.left == center.left == bottom.left == True:\n    ok()\n\nif top.center == center.center == bottom.center == True:\n    ok()\n\nif top.right == center.right == bottom.right == True:\n    ok()\n\nif top.left == center.center == bottom.right == True:\n    ok()\n\nif top.right == center.center == bottom.left == True:\n    ok()\n\nprint('No')\n\n\n","X = [list(map(int, input().split())) for j in range(3)]\nN = int(input())\nb = []\nfor i in range(N):\n    b.append(int(input()))\n\nlis_bingo = (\n    [X[0], X[1], X[2], \n    [X[0][0], X[1][0], X[2][0]], \n    [X[0][1], X[1][1], X[2][1]], \n    [X[0][2], X[1][2], X[2][2]], \n    [X[0][0], X[1][1], X[2][2]], \n    [X[0][2], X[1][1], X[2][0]]]\n)\n\nn = 0\nwhile n <= 7:\n    ans_bool = set(lis_bingo[n]) <= set(b)\n    if ans_bool:\n        break\n    n += 1\n\nif ans_bool:\n    print('Yes')\nelse :\n    print(\"No\")\n","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB = []\nfor _ in range(n):\n    B.append(input())\n\nfor b in B:\n    for x in range(3):\n        for y in range(3) :\n            if a[x][y] == b:\n                a[x][y] = 0\n\nif A[0][0] * A[1][0] * A[2][0] == 0 or A[0][1] * A[1][1] * A[2][1] == 0 or A[0][2] * A[1][2] * A[2][2] == 0 or A[0][0] * A[0][1] * A[0][2] == 0 or A[1][0] * A[1][1] * A[1][2] == 0 or A[2][0] * A[2][1] * A[2][2] == 0 or A[0][0] * A[1][1] * A[2][2] == 0 or A[0][2] * A[1][1] * A[2][0] == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\") \n","bingo = []\nfor i in range(3):\n    bingo.append(list(map(int, input().split())))\nn = int(input())\nb = [int(input()) for _ in range(n)]\n\nresult = [[False, False, False] for _ in range(3)]\n\nfor i in range(n):\n    for j in range(3):\n        if b[i] in bingo[j]:\n            result[j][bingo[j].index(b[i])] = True\n\n# \u6a2a\nfor i in result:\n    if all(i):\n        print('Yes')\n        exit()\n# \u7e26\nfor i in range(3):\n    if all([result[0][i], result[1][i], result[2][i]]):\n        print('Yes')\n        exit()\n# \u659c\u3081\nif all([result[0][0], result[1][1], result[2][2]]) or all([result[0][2], result[1][1], result[2][0]]):\n    print('Yes')\n    exit()\n\nprint('No')","a=[[0]*3 for i in range(3)]\nb=[]\nfor i in range(3):\n  x=input().split()\n  a[i][0]=x[0]\n  a[i][1]=x[1]\n  a[i][2]=x[2]\nn=int(input())\nfor i in range(n):\n  b.append(input())\nfor i in range(n):\n  for j in range(9):\n    if b[i]==a[j\/\/3][j%3]:\n      a[j\/\/3][j%3]='X'\njud=[0,0,0,0]\nz=0\nfor i in range(3):\n  for j in range(2):\n    if a[i][j]==a[i][j+1]:\n      jud[0]+=1\n    if a[j][i]==a[j+1][i]:\n      jud[1]+=1\n    if a[j][j]==a[j+1][j+1]:\n      jud[2]+=1\n    if a[j][2-j]==a[j+1][2-j-1]:\n      jud[3]+=1\n  if max(jud)>1:\n    print('Yes')\n    break\n  else:\n    z+=1\nif z==3:\n  print('No')","import numpy as np\n\na_list = list(map(int, input().split()))\na_list_2 = list(map(int, input().split()))\na_list_3 = list(map(int, input().split()))\n\na_total_list = np.array([a_list, a_list_2, a_list_3])\nbingo_array = np.zeros((3, 3))\n\nN = int(input())\n\nb_list = []\n\nfor i in range(N):\n    b = int(input())\n    if b in a_total_list:\n        bingo_array[np.where(a_total_list == b)[0][0]][np.where(a_total_list == b)[1][0]] = 1\n\nbingo_x_y = 0\nbreak_flag = False\nfor i in range(3):\n    if break_flag is True:\n        break\n    else:\n        bingo_x = 0\n        bingo_y = 0\n    for j in range(3):\n        if bingo_array[i][j] == 1:\n            bingo_x += 1\n            if bingo_x == 3:\n                break_flag = True\n                break\n        if bingo_array[j][i] == 1:\n            bingo_y += 1\n            if bingo_y == 3:\n                break_flag = True\n                break\n        if i == j:\n            if bingo_array[i][j] == 1:\n                bingo_x_y += 1\n                if bingo_x_y == 3:\n                    break_flag = True\n                    break\n\nif bingo_x >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_y >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_x_y >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_array[0][2] == 1 and bingo_array[1][1] == 1 and bingo_array[2][0] == 1:\n    print(\"Yes\")\n    exit()\nelse:\n    print(\"No\")\n    exit()","a=[input().split() for i in range(3)]\nn=int(input())\nb=[input() for i in range(n)]\nflg=0\nfor k in range(3):\n  if a[k][0] in b:\n    if a[k][1] and a[k][2] in b:\n      flg=1\n  elif a[0][k] in b:\n    if a[1][k] and a[2][k] in b:  \n      flg=1\n  elif a[0][0] and a[1][1] and a[2][2] in b:\n    flg=1\n  elif a[0][2] and a[1][1] and a[2][0] in b:\n    flg=1\nprint(['No','Yes'][flg])","bingo = [int(input()),int(input()),int(input()),int(input()),\n         int(input()),int(input()),int(input()),int(input()),int(input())]\na_list= []\nN = int(input())\nfor i in range(0,N):\n    b = int(input())\n    if b in bingo:\n        a_list.append(bingo.index(b))\nprint(a_list)\nif 0 in a_list:\n    if 1 in a_list:\n        if 2 in a_list:\n            yes = 1\n    if 3 in a_list:\n        if 6 in a_list:\n            yes = 1\n    if 4 in a_list:\n        if 8 in a_list:\n            yes = 1\nif 1 in a_list:\n    if 4 in a_list:\n        if 7 in a_list:\n            yes = 1\nif 2 in a_list:\n    if 4 in a_list:\n        if 6 in a_list:\n            yes = 1\n    if 5 in a_list:\n        if 8 in a_list:\n            yes = 1\nif 3 in a_list:\n    if 4 in a_list:\n        if 5 in a_list:\n            yes = 1\nif 6 in a_list:\n    if 7 in a_list:\n        if 8 in a_list:\n            yes = 1\nif yes == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n","A = []\nfor _ in range(3):\n    A.append([int(i) for i in input().split(' ')])\nN = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nfor num in a:\n    for i in range(3):\n        for j in range(3):\n            if num == A[i][j]:\n                A[i][j] = '*'\n\nans = 'No'\nfor i in range(3):\n    flg = 0 \n    b1 = all(A[i][j] == '*' for j in range(3))\n    b2 = all(A[j][i] == '*' for j in range(3))\n    b3 = all(A[j][j] == '*' for j in range(3))\n    b4 = all(A[2-j][j] == '*' for j in range(3))\n    if b1 or b2 or b3 or b4:\n        ans = 'Yes'\n\nprint(ans)\n        ","A1 = list(map(int,input().split()))\nA2 = list(map(int,input().split()))\nA3 = list(map(int,input().split()))\nN = int(input())\nB = [int(input()) for i in range(N)]\n\nflag = True\nfor i in range(3):\n    if (A1[0] in B) and (A1[1] in B) and (A1[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A2[0] in B) and (A2[1] in B) and (A2[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A3[0] in B) and (A3[1] in B) and (A3[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A1[i] in B) and (A2[i] in B) and (A3[i] in B):\n        print('Yes')\n        flag = False\n        break \n    elif (A1[0] in B) and (A2[1] in B) and (A3[2] in B):\n        print('Yes')\n        flag = False\n        break \n    elif (A1[2] in B) and (A2[1] in B) and (A3[0] in B):\n        print('Yes')\n        flag = False\n        break \nif flag == True:\n    print('No')","A = np.array([list(map(int,input().split())),list(map(int,input().split())),list(map(int,input().split()))])\nN = int(input())\nB = [input() for _  in range(N)]\nC = [1000, 1000, 1000]\nfor z in range(N):\n    for x in range(3):\n        for y in range(3):\n            if B[z] == A[x][y]:\n                A[x][y] = 1000\n                \n\nif (A[0] == C).all or (A.T[0] == C).all or (A[1] == C).all or (A[2] == C).all or (A.T[1] == C).all or (A.T[2] == C).all\n    print('Yes')\nelif A[0][1] == A[1][1] == A[2][2] or A[0][2] == A[1][1] == A[2][0]:   \n    print('Yes')\nelse:\n    print('No')","import sys\nimport math\ndef i():return int(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef i2():return map(int,sys.stdin.readline().replace(\"\\n\",\"\").split())\ndef s():return str(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef l():return list(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef intl():return [int(k) for k in sys.stdin.readline().replace(\"\\n\",\"\").split()]\ndef lx():return list(map(lambda x:int(x)*-1,sys.stdin.readline().replace(\"\\n\",\"\").split()))\ndef t():return tuple(map(int,sys.stdin.readline().replace(\"\\n\",\"\").split()))\n\nif __name__ == \"__main__\":pass\na1,a2,a3 = i2()\nb1,b2,b3 = i2()\nc1,c2,c3 = i2()\nl = [a1,a2,a3,b1,b2,b3,c1,c2,c3]\nn = i()\nfor i in range(n):\n    k = int(input())\n    if k in l:\n        try:\n            l[l.index(k)] = 0\n        except IndexError:pass  \nif (l[0] == 0 and l[1] == 0 and  l[2]== 0):\n    print(\"Yes\")\nelif (l[3] == 0 and l[4] == 0 and  l[5]== 0):\n    print(\"Yes\")\nelif (l[6] == 0 and l[7] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[0] == 0 and l[3] == 0 and  l[6]== 0):\n    print(\"Yes\")\nelif (l[1] == 0 and l[4] == 0 and  l[7] == 0):\n    print(\"Yes\")\nelif (l[2] == 0 and l[5] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[0] == 0 and l[4] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[2] == 0 and l[4] == 0 and l[6] == 0):\n    print(\"Yes\")\nelse:print(\"No\")","import math\na1 = list(map(int, input().split())) \na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\na = [a1,a2,a3]\n\nN = int(input())\n\nb = []\nfor i in range(N) :\n    b.append(int(input()))\n\nm = [[0,0,0],[0,0,0],[0,0,0]]\n\nfor i in range(N) :\n    for j in range(3) :\n        for k in range(3) :\n            if b[i] == a[j][k] :\n                m[j][k] = 1\nif  m[0].count(1) == 3 or \\\n    m[1].count(1) == 3 or \\\n    m[2].count(1) == 3 or \\\n    [x[0] for x in m].count(1) == 3 or \\\n    [x[1] for x in m].count(1) == 3 or \\\n    [x[2] for x in m].count(1) == 3 or \\\n    (x[0][0] == 1 and x [1][1] == 1 and x [2][2] == 2) or \\\n    (x[2][0] == 1 and x [1][1] == 1 and x [2][0] == 2) :\n    print('Yes')\nelse :\n    print('No')","# import math\n# import bisect\n# import heapq\n# from collections import deque\n# import numpy as np\n\n# n, m = map(int, input().split())\n\na = [0] * 9\ni = 0\nfor i in range(3):\n    b,c,d = map(int, input().split())\n    # print(b,c,d)\n    a[3*i],a[3*i+1],a[3*i+2] = b,c,d\n\nans = 'No'\n\nn = int(input())\n\nb = [ int(input()) for i in range(n) ]\n# print(b)\nfor i in range(n):\n    for j in range(9):\n        a[j] = -1 if b[i] == a[j] else a[j]\n\npairs = [\n    [0,1,2],[3,4,5],[6,7,8],\n    [0,3,6],[1,4,7],[2,5,8],\n    [0,4,8],[2,4,6]]\n\nfor p in pairs:\n    if a[p[0]] == -1 and a[p[1]] == -1 and a[p[2]] == -1:\n        ans = 'Yes'\n\n\nprint(ans)","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [list(map(int,input().split())) for i in range(N)]\nfor k in range(N):\n    for i in range(3):\n        for j in range(3):\n            if B[k][0] == A[i][j]:\n                A[i][j] = 0\n\nif A[0][0] == A[0][1] == A[0][2] ==0:\n    print(\"Yes\")\nelif A[1][0] == A[1][1] == A[1][2] ==0:\n    print(\"Yes\")\nelif A[2][0] == A[2][1] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][0] == A[1][0] == A[2][0] ==0:\n    print(\"Yes\")\nelif A[0][1] == A[1][1] == A[2][1] ==0:\n    print(\"Yes\")\nelif A[0][2] == A[1][2] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][0] == A[1][1] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][2] == A[1][1] == A[2][0] ==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A = []\nfor i in range(3):\n    A.append(list(input().split()))\nN = int(input())\nB = []\nfor i in range(N):\n    B.append(input())\nif A[0] <= B or A[1] <= B or A[2] <= B or {A[0][0], A[1][0], A[2][0]} <= set(B) or\\\n{A[0][1], A[1][1], A[2][1]} <= set(B) or {A[0][2], A[1][2], A[2][2]} <= set(B) \\\nor {A[0][0], A[1][1], A[2][2]} <= set(B) or {A[0][2], A[1][1], A[2][0]} <= set(B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","A = []\nfor i in range(3):\n    A.append(list(input().split()))\nN = int(input())\nB = []\nfor i in range(N):\n    B.append(input())\nif A[0] <= B or A[1] <= B or A[2] <= B or {A[0][0], A[1][0], A[2][0]} <= set(B) or\\\n{A[0][1], A[1][1], A[2][1]} <= set(B) or {A[0][2], A[1][2], A[2][2]} <= set(B) \\\nor {A[0][0], A[1][1], A[2][2]} <= set(B) or {A[0][2], A[1][1], A[2][0]} <= set(B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","A1=list(map(int, input().split()))\nA2=list(map(int, input().split()))\nA3=list(map(int, input().split()))\nA=A1+A2+A3\nN=int(input())\ns=set()\nfor _ in range(N):\n  b=int(input())\n  if b in A:\n    s|={A.index(b)}\nbingo=[{0,1,2},{0,3,6},{0,4,8},{1,4,7},{2,5,8},{2,4,6},{3,4,5},{6,7,8}]\nprint(['No','Yes'][any(s>=b for b in bingo)])","A = [list(map(int,input().split())) for i in range(3)]\nn = int(input())\nfor j in range(n):\n  b = int(input())\n  for j in range(3):\n    for k in range(3): \n    \tif b==A[j][k]:\n      \t\tA[j][k]=-1\n\nfor k in range(3):\n  if A[k][:]==[-1,-1,-1]:\n    print('Yes')\n    exit(0)\n \nfor k in range(3):\n  if sum(A[:][k])==[-1,-1,-1]:\n    print('Yes')\n    exit(0)\n \nif (A[0][0]==A[1][1]==A[2][2]==-1)or(A[2][0]==A[1][1]==A[0][2]==-1): \n    print('Yes')\n    exit(0)\n    \nprint('No')","A = [[0]*3 for _ in range(3)]\nfor i in range(3):\n    A[i] = list(map(int,input().split()))\n\nN = int(input())\nB = [0 for i in range(N)]\nfor i in range(N):\n    B[i] = int(input())\n\nBingo = [[False]*3 for _ in range(3)]\nfor k in range(9):\n    i = k \/\/ 3\n    j = k % 3\n    for b in B:\n        if A[i][j] == b:\n            Bingo[i][j] = True\n\nfor i in range(3):\n    if Bingo[i][1] and Bingo[i][2] and Bingo[i][0] == True:\n        print(\"Yes\")\n        exit()\n    if Bingo[1][i] and Bingo[2][i] and Bingo[0][i] == True:\n        print(\"Yes\")\n        exit()\n\nif Bingo[1][1] and Bingo[2][2] and Bingo[0][0] == True:\n    print(\"Yes\")\n    exit()\nif Bingo[0][2] and Bingo[1][1] and Bingo[2][0] == True:\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")\n\n     \n\n\n","a1 = [int(e) for e in input().split()]\na2 = [int(e) for e in input().split()]\na3 = [int(e) for e in input().split()]\nn = int(input())\nbs = []\nfor _ in range(n):\n    bs.append(int(input()))\n\ndef is_bingo(mat,hits):\n    row_pattern = [[mat[i][j] for j in range(3)] for i in range(3)]\n    col_pattern = [[mat[j][i] for j in range(3)] for i in range(3)]\n    cross_patten= [[mat[i][i] for i in range(3)] , [mat[0][2],mat[1][1],mat[2][0]]]\n    if any([set(pattern).issubset(hits) for pattern in row_pattern+col_pattern+cross_patten]):\n        return True\n    return False\n  \nm=[a1,a2,a3]\nprint('Yes' if is_bingo(m,bs) else 'No')","a=list(map(int, input().split()))\nb=list(map(int, input().split()))\nc=list(map(int, input().split()))\nn=int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\nimport numpy as np\ny=np.zeros(9).reshape(3,3)\nfor i in range(n):\n    for x in range(3):\n        if a[x]==l[i][0]:\n            y[0][x]=1\nfor i in range(n):\n    for x in range(3):\n        if b[x]==l[i][0]:\n            y[1][x]=1\nfor i in range(n):\n    for x in range(3):\n        if c[x]==l[i][0]:\n            y[2][x]=1\nif sum(y[0])==3:\n    print('Yes')\nelif sum(y[1])==3:\n    print('Yes')\nelif sum(y[2])==3:\n    print('Yes')\nelif sum(y[1])==3:\n    print('Yes')\nelif y[0][0]+y[1][0]+y[2][0]==3:\n    print('Yes')\nelif y[0][1]+y[1][1]+y[2][1]==3:\n    print('Yes')\nelif y[0][2]+y[1][2]+y[2][2]==3:\n    print('Yes')\nelif y[0][0]+y[1][1]+y[2][2]==3:\n    print('Yes')\nelif y[0][2]+y[1][1]+y[2][0]==3:\n    print('Yes')\nelse:\n    print('No')","A = []\nb = []\nfor i in range(3):\n  A.append(list(map(int, input().split())))\nN = int(input())\nfor i in range(N):\n  b.append(int(input()))\n\nfor i in range(N):\n  for j in range(3):\n    if b[i] in A[j]:\n      A[j][A[j].index(b[i])] = 0\n\nflag = 0\n\nfor i in range(3):\n  if sum(A[i]) == 0:\n    flag = 1\n\nfor i in range(3):\n  if A[0][i] + A[1][i] + A[2][i] == 0:\n    flag = 1\n\nif A[0][0] + A[1][1] + A[2][2] == 0:\n  flag = 1\n\nif A[0][2] + A[1][1] + A[0][2] == 0:\n  flag = 1\n\nif flag == 1:\n  print('Yes')\nelse:\n  print('No')","Ai_j = []\nfor i in range(3):\n    Ai_j.append(list(map(int,input().split())))\nN = int(input())\nnumber_list = []\nfor i in range(N):\n    number_list.append(int(input()))\n'''\nprint(Ai_j)\nprint(N)\nprint(number_list)\n'''\n\nfor x in number_list:\n    for i in range(3):\n        for j in range(3):\n           if  Ai_j[i][j] == x:\n               Ai_j[i][j] = '\u25cb'\n#print(Ai_j)\n\ncount = 0\n\nif Ai_j[0][0] == Ai_j[0][2] == Ai_j[0][1] == '\u25cb': count+=1\nif Ai_j[1][0] == Ai_j[1][2] == Ai_j[1][1] == '\u25cb': count+=1\nif Ai_j[2][0] == Ai_j[2][2] == Ai_j[2][1] == '\u25cb': count+=1\nif Ai_j[0][0] == Ai_j[1][0] == Ai_j[2][0] == '\u25cb': count+=1\nif Ai_j[0][1] == Ai_j[1][1] == Ai_j[2][1] == '\u25cb': count+=1\nif Ai_j[0][2] == Ai_j[1][2] == Ai_j[2][2] == '\u25cb': count+=1\nif Ai_j[0][0] == Ai_j[1][1] == Ai_j[2][2] == '\u25cb': count+=1\nif Ai_j[0][2] == Ai_j[1][1] == Ai_j[2][0] == '\u25cb': count+=1\n\nif count == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","import itertools\na = []\ncnt_list = []\nfor _ in range(3):\n    a += map(int, input().split())\nn = int(input())\nfor _ in range(n):\n    b = int(input())\n    for i, j in enumerate(a):\n        if b == j:\n            cnt_list.append(i)\nans = 'No'\nif len(cnt_list) > 2:\n    cnt_list = set(cnt_list)\n    for k in list(itertools.permutations(cnt_list, 3)):\n        if sum(k) % 3 == 0:\n            ans = 'Yes'\nprint(ans)","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\n\nfor i in range(n):\n  b=int(input())\n  for j in range(3):\n    for k in range(3):\n      if a[j][k]==b:\n        a[j][k]=0\n\nans=0\nfor i in range(3):\n  if a[i][0]==0 and a[i][1]==0 and a[i][2]==0:\n    ans=1\n  elif a[0][i]==0 and a[1][i]==0 and a[2][i]==0:\n    ans=1\n\nif a[1][1]==0 and a[2][2]==0 and a[0][0]==0:\n  ans=1\n\nif ans==1:\n  print('Yes')\nelse:\n  print('No')","A = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\n\nmark = []\nfor i in range(N):\n    b = int(input())\n    for j, a in enumerate(A):\n        for k, aa in enumerate(a):\n            if aa == b:\n                mark.append((j,k))\n\n\nif (((0,0) and (0,1) and (0,2)) or ((1,0) and (1,1) and (1,2)) or ((2,0) and (2,1) and (2,2))) in mark:\n    print('Yes')\nelif (( (0,0) and (1,1) and (2,2) ) or ( (0,2) and (1,1) and (2,0) ) ) in mark:\n    print(\"Yes\")\nelif (((0,0) and (1,0) and (2,0)) or ((0,1) and (1,1) and (2,1)) or ((0,2) and (1,2) and (2,2))) in mark:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\nb=[int(input()) for _ in range(n)]\nused=[[False]*3 for _ in range(3)]\nfor k in range(n):\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==b[k]:\n                used[i][j]==True\n\nfor i in range(3):\n    if used[0][i] and used[1][i] and used[2][i]:\n        print(\"Yes\")\n        exit()\n        \nfor i in range(3):\n    if used[i][0] and used[i][1] and used[i][2]:\n        print(\"Yes\")\n        exit()\n\nif used[0][0] and used[1][1] and used[2][2]:\n        print(\"Yes\")\n        exit()\n\nif used[0][2] and used[1][1] and used[2][0]:\n        print(\"Yes\")\n        exit()                \nprint(\"No\")","one = list(map(int, input().split()))\ntwo = list(map(int, input().split()))\nthree = list(map(int, input().split()))\nn = int(input())\nout = [int(input()) for x in range(n)]\n\n\ndef judge(a_list):\n    for i in a_list:\n        if i not in out:\n            return False\n\n    return True\n\n\nfor_judge = [one, two, three]\n\nfor i in range(3):\n    tmp = [one[i], two[i], three[i]]\n    for_judge.append(tmp)\n\n\nnaname1 = [one[0], two[1], three[2]]\nnaname2 = [one[2], two[1], three[0]]\n\nfor_judge.append(naname1)\nfor_judge.append(naname2)\n\nfor a_list in for_judge:\n    if judge(a_list):\n        print('Yes')\n        exit()\n\nprint('No')\n","a = [input().split() for l in range(3)]\na = [[int(item) for item in row] for row in a]\nN = int(input())\nb = [input() for i in range(n)]\nx = 1\nfor i in range(N):\n  for j in range(3):\n    for k in range(3):\n      if a[j][k] == b[i]:\n        a[j][k] = 0\nfor i in range(3):\n  if a[i][0]*a[i][1]*a[i][2] == 0 | a[0][i]*a[1][i]*a[2][i] == 0:\n    x = 0\nif a[0][0]*a[1][1]*a[2][2] == 0 | a[0][2]*a[1][1]*a[2][0] == 0:\n  x = 0\nif x:\n  print('No')\nelse:\n  print('Yes')\n  ","\nA = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if A[j][k] == b:\n                A[j][k] = 0\nif A[0][0] == 0 and A[0][1] == 0 and A[0][2] == 0:\n    print('yes')\nelif A[1][0] == 0 and A[1][1] == 0 and A[1][2] == 0:\n    print('yes')\nelif A[2][0] == 0 and A[2][1] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][0] == 0 and A[1][0] == 0 and A[2][0] == 0:\n    print('yes')\nelif A[0][1] == 0 and A[1][1] == 0 and A[2][1] == 0:\n    print('yes')\nelif A[0][2] == 0 and A[1][2] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][0] == 0 and A[1][1] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][2] == 0 and A[1][1] == 0 and A[2][0] == 0:\n    print('yes')\nelse:\n    print('No')","def resolve():\n    A = []\n    for i in range(3):\n        aa = map(int, input().split())\n        A.append(list(aa))\n\n    N = int(input())\n    B = []\n    for i in range(N):\n        bb = int(input())\n        B.append(bb)\n\n    ans = 'No'\n\n    for bbb in list(B):\n        for i in range(3):\n            if A[i][0] == bbb:\n                A[i][0] = 1000\n            if A[i][1] == bbb:\n                A[i][1] = 1000\n            if A[i][2] == bbb:\n                A[i][2] = 1000\n\n    for i in range(3):\n        if A[i][0] == 1000 and A[i][1] == 1000 and A[i][2] == 1000:\n            ans = 'Yes'\n\n    for i in range(3):\n        if A[0][i] == 1000 and A[1][i] == 1000 and A[2][i] == 1000:\n            ans = 'Yes'\n\n    if A[0][0] == 1000 and A[1][1] == 1000 and A[2][2] == 1000:\n        ans = 'Yes'\n    if A[0][2] == 1000 and A[1][1] == 1000 and A[2][0] == 1000:\n        ans = 'Yes'\n\n    print(ans)\n\n\nresolve()","60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n","a = []\nfor i in range(3):\n    a += list(map(int, input().split()))\nc = [False] * 9\nn = int(input())\nfor i in range(n):\n    b = int(input())\n    if b in a:\n        c[a.index(b)] = True\nd = [[c[0], c[1], c[2]], [c[3], c[4], c[5]], [c[6], c[7], c[8]], [c[0], c[3], c[6]], [c[1], c[4], c[7]], [c[2], c[5], c[8]], [c[0], c[4], c[8]], [c[2], c[4], c[6]]]\nif [True, True, True] in d:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A=sum([list(map(int,input().split())) for _ in range(3)],[])\nN=int(input())\nb=[int(input()) for _ in range(N)]\nf=0\nfor i in range(9):if A[i]in b:f|=1<<i\nprint('Yes'if sum(f&v==v for v in[7,23,56,84,146,273,292,448])else'No')","# ABC157b\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**6)\n    # \u518d\u5e30\u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u9650\u308aPypy\u3067\u51fa\u3059\u3053\u3068\n    bing = [list(map(int, input().split())) for _ in range(3)]\n    n = int(input())\n    b = [int(input()) for _ in range(n)]\n    for num in b:\n        for i in bing:\n            try:\n                while True:\n                    t = i.index(num)\n                    i[t] = -1\n            except:\n                continue\n    # print(bing)\n\n    naname = [((0, 0), (1, 1), (2, 2)), (2, 0), (1, 1), (0, 2)]\n    if sum(bing[0]) == -3 or sum(bing[1]) == -3 or sum(bing[2]) == -3 or bing[0][0]+bing[0][1]+bing[0][2] == -3 or bing[1][0]+bing[1][1]+bing[1][2] == -3 or bing[2][0]+bing[2][1]+bing[2][2] == -3 or bing[0][0]+bing[1][1]+bing[2][2] == -3 or bing[0][2]+bing[1][1]+bing[2][0] == -3:\n        print('Yes')\n        exit(0)\n\n    print('No')\n\n\nif __name__ == '__main__':\n    main()\n","a1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nn = int(input())\ns = list(map(int, [input() for i in range(n)]))\nl = [\n  [0, 0, 0]\n  , [0, 0, 0]\n  , [0, 0, 0]\n]\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a1[i] == s[j]:\n      l[0][i] = i+1\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a2[i] == s[j]:\n      l[1][i] = i+1\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a3[i] == s[j]:\n      l[2][i] = i+1\nn = []\nfor i in l:\n  for j in i:\n    if j != 0:\n      n.append(j)\ncount = 0\nfor i in range(0, 3):\n  if l[i][0] and l[i][1] and l[i][2]:\n    count += 1\nif (l[0][0] and l[1][1] and l[2][2]) or (l[2][0] and l[1][1] and l[0][2]):\n  count += 1\nelse:\n  for i in range(1, 4):\n    if n.count(i) == 3:\n      count += 1\nprint('Yes' if count >= 1 else 'No')","A=[list(map(int,input().split())) for _ in range(3)]\nN=int(input())\nb=[int(input()) for _ in range(N)]\n\ns=[]\nt=[]\ncross_1=0\ncross_2=0\n\nans=\"No\"\n\nfor i in b:\n    for j in range(3):\n        if i in A[j]:\n            s.append(j)\n            t.append(A[j].index(i))\n            if j==A[j].index(i):\n                cross_1+=1\n            elif j==2-A[j].index(i):\n                cross_2+=1\nfor k in range(3):\n    if s.count(k)==3:\n        ans=\"Yes\"\nfor l in range(3):\n    if t.count(l)==3:\n        ans=0\nif cross_1==3 or cross_2==3:\n    ans=\"Yes\"\n\nprint(ans)\n    \n    \n","# import math\n# import bisect\n# import heapq\n# from collections import deque\n# import numpy as np\n\n# n, m = map(int, input().split())\n\na = [0] * 9\ni = 0\nfor _ in range(3):\n    b,c,d = map(int, input().split())\n    # print(b,c,d)\n    a[i],a[i+1],a[i+2] = b,c,d\n\n    i += 3\n# print(a)\nans = 'No'\n\nn = int(input())\n\nb = [ int(input()) for i in range(n) ]\n# print(b)\nfor i in range(n):\n    for j in range(9):\n        a[j] = -1 if b[i] == a[j] else a[j]\n\npairs = [\n    [0,1,2],[3,4,5],[6,7,8],\n    [0,3,6],[1,4,7],[3,5,8],\n    [0,4,8],[2,4,6]]\n\nfor p in pairs:\n    if a[p[0]] == -1 and a[p[1]] == -1 and a[p[2]] == -1:\n        ans = 'Yes'\n\n\nprint(ans)","import sys\na =[]\na.append(list(map(int,input().split())))\na.append(list(map(int,input().split())))\na.append(list(map(int,input().split())))\nn = int(input())\nb =[]\nfor i in range(n):\n    b.append(int(input()))\n#print(b)\nfor i in range(3):\n    for j in range(3):\n        if a[i][j] in b:\n            a[i][j] = 0","x=list(map(int,input().split()))\ny=list(map(int,input().split()))\nz=list(map(int,input().split()))\nn=int(input())\nX1=3\nY1=3\nZ1=3\nfor i in range(n):\n    b=list(map(int,input().split('\\n')))\n    for j in range(3):\n        if x[j]==b[i]:\n            X1 -= 1\n            if X1==0:\n                print('Yes')\n                exit()\n        elif y[j]==b[i]:\n            Y1 -= 1\n            if Y1==0:\n                print('Yes')\n                exit()\n        elif z[j]==b[i]:\n            Z1 -= 1\n            if Z1==0:\n                print('Yes')\n                exit()\nprint('No')","def solve(A, n, b):\n    for x in b:\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == x:\n                    A[i][j] = -1\n    for i in range(3):\n        ok = True\n        for j in range(3):\n            if A[i][j] != -1:\n                ok = False\n                break\n        if ok:\n            return \"Yes\"\n    for j in range(3):\n        ok = True\n        for i in range(3):\n            if A[i][j] != -1:\n                ok = False\n                break\n        if ok:\n            return \"Yes\"\n    ok = True\n    for i in range(3):\n        if A[i][i] != -1:\n            ok = False\n    if ok:\n        return \"Yes\"\n    ok = True\n    for i in range(3):\n        if A[2-i][i] != -1:\n            ok = False\n    if ok:\n        return \"Yes\"\n    return \"No\"\n\nA = [list(map(int, input().split())) for i in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\nprint(solve(A, n, b))","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\n\n\nfor _ in range(N):\n    B = int(input())\n    for i in range(3):\n      for j in range(3):\n          if A[i][j] == B:\n              A[i][j] == 0\n        \nbingo = False\nfor row in A:\n  if sum(row) == 0:\n    bingo = True\nfor col in zip(*A):\n  if sum(col) == 0:\n    bingo= True\nif sum(A[i][i] for i in range(3) )== 0:\n  bingo =True\nif sum(A[i][3 - i - 1] for i in range(3)) == 0:\n  bingo = True\n  \nprint(\"Yes\" if bingo == True else \"No\")","# \u30d3\u30f3\u30b4\u30ab\u30fc\u30c9\nbingo_card = list()\nfor i in range(3):\n    bingo_card.append(input().split(' '))\n# \u5f15\u3044\u305f\u56de\u6570\npick_count = int(input().strip())\n# \u5f15\u3044\u305f\u756a\u53f7\npicked_number = list()\nfor j in range(pick_count):\n    picked_number.append(input().strip())\n\n# \u30d3\u30f3\u30b4\u6210\u7acb\u6761\u4ef6\nbingo_line = list()\n# \u6a2a\nfor i in range(3):\n    bingo_line.append(bingo_card[i-1])\n# \u7e26\nbingo_line.append([bingo_card[0][0], bingo_card[1][0], bingo_card[2][0]])\nbingo_line.append([bingo_card[0][1], bingo_card[1][1], bingo_card[2][1]])\nbingo_line.append([bingo_card[0][2], bingo_card[1][2], bingo_card[2][2]])\n# \u659c\u3081\nbingo_line.append([bingo_card[0][0], bingo_card[1][1], bingo_card[2][2]])\nbingo_line.append([bingo_card[0][2], bingo_card[1][1], bingo_card[2][0]])\n\nestablished_line = [line for line in bingo_line if len(set(line) & set(picked_number)) == 3]\nprint('Yes' if len(established_line) > 0 else 'No')\n","# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport math\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9 +7\nINF = float('inf')\n\n#############\n# Functions #\n#############\n\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n):\n    return kaijo_memo[n]\n  if(len(kaijo_memo) == 0):\n    kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n):\n    kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n):\n    return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0):\n    gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n):\n    gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if(n == r):\n    return 1\n  if(n < r or r < 0):\n    return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\n\n#############\n# Main Code #\n#############\n\na,b,c = list(map(int,input().split()))\nd,e,f = list(map(int,input().split()))\ng,h,i = list(map(int,input().split()))\n\nbingo = [a,b,c,d,e,f,g,h,i]\n\n\ncheck = [0,0,0,0,0,0,0,0,0]\n\nN = int(input())\nfor i in range(N):\n  z = int(input())\n  for j in range(9):\n    if bingo[j] == z:\n      check[j] = 1\n      \nis_bingo = 0\n\nif check[0] and check[1] and check[2]:\n  is_bingo = 1\nif check[3] and check[4] and check[5]:\n  is_bingo = 1\nif check[6] and check[7] and check[8]:\n  is_bingo = 1\nif check[0] and check[3] and check[6]:\n  is_bingo = 1\nif check[1] and check[4] and check[7]:\n  is_bingo = 1\nif check[2] and check[5] and check[8]:\n  is_bingo = 1\nif check[0] and check[4] and check[8]:\n  is_bingo = 1\nif check[2] and check[4] and check[6]:\n  is_bingo = 1\n\n  \nif is_bingo:\n  print(\"Yes\")\nelse:\n  print(\"No\")","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\n\nfor i in range(n):\n  b=int(input())\n  for j in range(3):\n    for k in range(3):\n      if b==a[j][k]:\n        a[j][k]=0\n\nif a[0][0]==a[0][1]==a[0][2] or a[1][0]==a[1][1]==a[1][2] or a[2][0]==a[2][1]==a[2][2]\\\nor a[0][0]==a[1][0]==a[2][0] or a[0][1]==a[1][1]==a[2][1] or a[0][2]==a[1][2]==a[2][2]\\\nor a[0][0]==a[1][1]==a[2][2] or a[2][0]==a[1][1]==a[0][2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")","ary = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nn = int(input())\nwhile n > 0:\n    num = int(input())\n    if num == a1[0]:\n        ary[0][0] = 1\n    if num == a1[1]:\n        ary[0][1] = 1\n    if num == a1[2]:\n        ary[0][2] = 1\n    if num == a2[0]:\n        ary[1][0] = 1\n    if num == a2[1]:\n        ary[1][1] = 1\n    if num == a2[2]:\n        ary[1][2] = 1\n    if num == a3[0]:\n        ary[2][0] = 1\n    if num == a3[1]:\n        ary[2][1] = 1\n    if num == a3[2]:\n        ary[2][2] = 1\n    n = n - 1\nif (ary[0][0] == 1 and ary[0][1] == 1 and ary[0][2] == 1) or\\\n   (ary[1][0] == 1 and ary[1][1] == 1 and ary[1][2] == 1) or\\\n   (ary[2][0] == 1 and ary[2][1] == 1 and ary[2][2] == 1) or\\\n   (ary[0][0] == 1 and ary[1][0] == 1 and ary[2][0] == 1) or\\\n   (ary[0][1] == 1 and ary[1][1] == 1 and ary[2][1] == 1) or\\\n   (ary[0][2] == 1 and ary[1][2] == 1 and ary[2][2] == 1) or\\\n   (ary[0][0] == 1 and ary[1][1] == 1 and ary[2][2] == 1) or\\\n   (ary[0][2] == 1 and ary[1][1] == 1 and ary[2][0] == 1):\n    print('Yes')\nelse:\n    print('No')\n","A = []\nA_1 = list(map(int,input().split()))\nA_2 = list(map(int,input().split()))\nA_3 = list(map(int,input().split()))\nA.append(A_1)\nA.append(A_2)\nA.append(A_3)\nB = []\ncheck=0\nBingocountR=0\nBingocountG=0\nN = int(input())\nArrayBingo =[[0,0,0],[0,0,0],[0,0,0]]\nfor i in range(N):\n    B.append(int(input()))\nfor j in range (3):\n    for k in range (3):\n        for l in range (N):\n            if A[j][k]==B[l]:\n                ArrayBingo[j][k]=1\nfor i in range(3):\n    for j in range(3):\n        if ArrayBingo[j][i]==1:\n            BingocountR+=1\n            if BingocountR ==3:\n                check+=1\n    BingocountR = 0\nfor i in range(3):\n    for j in range(3):\n        if ArrayBingo[i][j]==1:\n            BingocountG+=1\n            if BingocountG ==3:\n                check+=1\n    BingocountG = 0\nif (ArrayBingo[0][0] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][2] == 1) or (ArrayBingo[0][2] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][0] == 1):\n    check += 1\nif check>0:\n    print('Yes')\nelse:\n    print('No')\n    ","\/\/Generated at 2020-03-01 20:59:55 UTC+8\n\/\/Created by Alphagocc\n#include<bits\/stdc++.h>\n#ifdef USE_PBDS\n#include<ext\/pb_ds\/assoc_container.hpp>\n#include<ext\/pb_ds\/priority_queue.hpp>\n#endif\n#define FORCE_INLINE __inline__ __attribute__((always_inline))\nclass IO\n{\nstatic const int bufSize=1<<18;char inBuf[bufSize],outBuf[bufSize];char*ip1=inBuf,*ip2=inBuf;int goodReadBit=0,op1=-1,op2=bufSize-1;\ntemplate <typename T>FORCE_INLINE void __RI(T&x){int ch=gc(),neg=1;x=0;for(;!(isdigit(ch)||ch=='-'||ch==EOF);ch=gc());if(ch==EOF){goodReadBit=0;return;}if(ch=='-')neg=-1,ch=gc();for(;isdigit(ch);ch=gc())x=x * 10 +(ch - 48) * neg;}\ntemplate <typename T>FORCE_INLINE void __RC(T&x){unsigned char ch;while(isspace(ch=gc()));x=ch;}\nFORCE_INLINE void __RS(std::string&x){char ch;x.clear();for(ch=gc();isspace(ch);ch=gc());if(ch==EOF){goodReadBit=0;return;}for(;!isspace(ch);ch=gc())x.push_back(ch);}\npublic:\nFORCE_INLINE int gc(){return ip1==ip2 &&(ip2 =(ip1=inBuf)+fread(inBuf,1,bufSize,stdin),ip1==ip2)? EOF: *ip1++;}\nFORCE_INLINE void R(char&x){__RC(x);}FORCE_INLINE void R(unsigned char&x){__RC(x);}FORCE_INLINE void R(std::string&x){__RS(x);}\ntemplate <typename T1,typename T2>FORCE_INLINE void R(std::pair<T1,T2>&x){R(x.first),R(x.second);}template <typename T>FORCE_INLINE void R(std::vector<T>&x){for(auto it=x.begin();it != x.end();++it)R(*it);}\ntemplate <typename T,typename...Args>FORCE_INLINE void RA(T*a,int n){for(int i=0;i < n;++i)R(a[i]);}template <typename T,typename...Args>FORCE_INLINE void R(T&x,Args&...args){R(x),R(args...);}\ntemplate <typename T,typename...Args>FORCE_INLINE void RA(T*a,int n,Args...args){for(int i=0;i < n;++i)RA(a[i],args...);}template <typename T>FORCE_INLINE void R(T&x){static_assert(std::is_integral<T>::value,\"Unsupported types\");if(std::is_integral<T>::value)__RI(x);}\nprivate:\nchar space;template <typename T>FORCE_INLINE void __WI(T x){static char buf[64];static int len=-1;if(x >= 0){do{buf[++len]=x % 10+48,x \/= 10;} while(x);} else{pc('-');do{buf[++len]=-(x%10)+48,x\/=10;}while(x);}while(len>=0){pc(buf[len]),--len;}}\npublic:\nFORCE_INLINE void pc(const char&x){if(op1==op2)flush();outBuf[++op1]=x;}\nFORCE_INLINE void flush(){fwrite(outBuf,1,op1+1,stdout),op1=-1;}FORCE_INLINE void W(const char&x){pc(x);}FORCE_INLINE void W(const char* x){while(*x!='\\0')pc(*(x++));}FORCE_INLINE void W(const std::string&x){W(x.c_str());}\ntemplate <typename T>FORCE_INLINE void W(const std::vector<T>&x){for(auto it=x.begin();it != x.end();it++)WS(*it);WL();}FORCE_INLINE void WL(){W('\\n');}\ntemplate <typename T>FORCE_INLINE void WL(const T&x){W(x),W('\\n');}FORCE_INLINE void WS(){W(' ');}\ntemplate <typename T>FORCE_INLINE void WS(const T&x){W(x),W(space);}\ntemplate <typename T>FORCE_INLINE void WA(T* a,int n){for(int i=0;i < n;i++)WS(a[i]);WL();}\ntemplate <typename T,typename...Args>FORCE_INLINE void W(const T&x,const Args&...args){W(x),W(space),W(args...);}\ntemplate <typename...Args>FORCE_INLINE void WL(const Args&...args){W(args...),W('\\n');}\ntemplate <typename T,typename...Args>FORCE_INLINE void WA(T* a,int n,Args...args){for(int i=0;i < n;i++)WA(a[i],args...);}\ntemplate <typename T>FORCE_INLINE void W(const T&x){static_assert(std::is_integral<T>::value,\"Unsupported types\");if(std::is_integral<T>::value)__WI(x);}\ntemplate <typename T>FORCE_INLINE IO&operator>>(T&x){R(x);return(*this);}\ntemplate <typename T>FORCE_INLINE IO&operator<<(const T&x){W(x);return(*this);}IO(){space=' ';}\n} io;\nnamespace Alphagocc{decltype(std::chrono::high_resolution_clock::now()) tStart;};void TimeBegin(){Alphagocc::tStart=std::chrono::high_resolution_clock::now();}long long TimeEnd(){return(std::chrono::high_resolution_clock::now() - Alphagocc::tStart).count();} \/\/ namespace Alphagocc\nusing namespace std;\n#define REP(i,x,y) for(int i=x;i < y;i++)\nconst int8_t INFC=0x3f;\nconst int16_t INFS=0x3f3f;\nconst int32_t INF=0x3f3f3f3f;\nconst int64_t INFL=0x3f3f3f3f3f3f3f3fLL;\n\nnamespace Alphagocc\n{\nint MAIN()\n{\n    int n = 3;\n    set<int> s;\n    for (int i = 0; i < n * n; i++) {\n        int x;\n        io >> x;\n        s.insert(x);\n    }\n    int q;\n    io >> q;\n    while (q--) {\n        int x;\n        io >> x;\n        if (s.count(x)) {\n            io.WL(\"YES\"), io.flush();\n            return 0;\n        }\n    }\n    io.WL(\"NO\");\n    io.flush();\n    return 0;\n}\n} \/\/ namespace Alphagocc\nint main() { return Alphagocc::MAIN(); }","A = []\n[A.extend(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB = [int(input()) for _ in range(N)]\nfor b in B:\n    try:\n        i = A.index(b)\n        A[i] = 0\n    except:\n        pass\nlines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n]\nans = \"No\"\nfor line in lines:\n    a, b, c = line\n    if A[a] == 0 and A[a] == A[b] and A[a] == A[c]:\n        ans = \"Yes\"\nprint(ans)\n","a1_1, a1_2, a1_3 = map(int, input().split())\na2_1, a2_2, a2_3 = map(int, input().split())\na3_1, a3_2, a3_3 = map(int, input().split())\na_list=[a1_1, a1_2, a1_3, a2_1, a2_2, a2_3, a3_1, a3_2, a3_3]\nn = int(input())\nb=[]\nfor i in range(n):\n  b_i = int(input())\n  b.append(b_i)\n  for j, a_j in enumerate(a_list):\n    if a_j == b_i:\n      a_list[j] = -1\n    \nif ((a_list[0]==-1 and a_list[3] == -1 and a_list[6] == -1) or\n    (a_list[1]==-1 and a_list[4] == -1 and a_list[7] == -1) or\n    (a_list[2]==-1 and a_list[5] == -1 and a_list[8] == -1) or\n\t(a_list[0]==-1 and a_list[4] == -1 and a_list[8] == -1) or\n\t(a_list[2]==-1 and a_list[4] == -1 and a_list[6] == -1)):\n  print(\"YES\")\nelse:\n  print(\"NO\")","a=open(0).read().split();print('YNeos'[all(t-set(map(a.index,a[10:]))for t in({0,3,6},{0,4,8},{2,4,6},{2,5,8},{3,4,5},{6,7,8}))::2])","A = []\nfor i in range(3):\n    a = list(map(int,input().split()))\n    A.extend(a)\nn = int(input())\nB = [0]*9\nfor i in range(n):\n    b = int(input())\n    for i in range(9):\n        if A[i] == b:\n            B[i] = 1\nans = 0\nfor i in range(3):\n    if B[i*3] == B[i*3+1] == B[i*3+2] == 1:\n        ans = 1\n    if B[i] == B[i+3] == B[i+6] == 1:\n        ans = 1\n    if B[0] == B[4] == B[8] == 1:\n        ans = 1\n    if B[2] == B[4] == B[6] == 1:\n        ans = 1\nif ans == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")","# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\n# list(map(int, list(input()))) # \u30b9\u30da\u30fc\u30b9\u304c\u306a\u3044\u6570\u5b57\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nimport math\nimport fractions\nimport sys\nimport bisect\nimport heapq  # \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc(\u6700\u5c0f\u5024\u53d6\u308a\u51fa\u3057)\nimport collections\nfrom collections import Counter\nfrom collections import deque\nimport pprint\nimport itertools\n\nsr = lambda: input()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\"n\u3092\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n\"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    if n == 1:\n        return arr\n\n    for i in range(2, int(-(-n ** 0.5 \/\/ 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\n# a^n\ndef power(a, n, mod):\n    x = 1\n    while n:\n        if n & 1:\n            x *= a % mod\n        n >>= 1\n        a *= a % mod\n    return x % mod\n\n\n# n*(n-1)*...*(l+1)*l\ndef kaijo(n, l, mod):\n    if n == 0:\n        return 1\n    a = n\n    tmp = n - 1\n    while (tmp >= l):\n        a = a * tmp % mod\n        tmp -= 1\n    return a\n\n# Union Find\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# \u7d04\u6570\u751f\u6210\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n\n    divisors.sort()\n    return divisors\n\n\ninf = 10 ** 18\nmod = 10 ** 9 + 7\n\na_list = []\na = []\nc = [False for i in range(9)]\nfor i in range(3):\n    a_list = lr()\n    for num in a_list:\n        a.append(num)\nn = int(input())\nfor i in range(n):\n    num = ir()\n    if num in a:\n        index = a.index(num)\n        c[index] = True\n\nif (c[0] and c[3] and c[6]) or (c[1] and c[4] and c[7]) or (c[2] and c[5] and c[8]) or (c[0] and c[1] and c[2]) or (c[3] and c[4] and c[5]) or (c[6] and c[7] and c[8]) or (c[0] and c[4] and c[8]) or (c[2] and c[4] and c[6]):\n    print('Yes')\nelse:\n    print('No')","\ndate = []\ndict = {}\nflag = 0\nfor i in range(3):\n    temp = [int(j) for j in input().split()]\n    date.append(temp)\nN = int(input())\n\nfor i in date:\n    for j in i:\n        dict[j] = 0\n\nfor i in  range(N):\n    m = int(input())\n    for j in date:\n        if m in j:\n            dict[m] = 1\nindex = list(dict.values())\nli = []\nli.append(index[0:3])\nli.append(index[3:6])\nli.append(index[6:9])\nprint(li)\nif li[0][0] == 1 and li[0][1]==1 and li[0][2]==1:\n    flag = 1\nif li[1][0] == 1 and li[1][1]==1 and li[1][2]==1:\n    flag = 1\nif li[2][0] == 1 and li[2][1]==1 and li[2][2]==1:\n    flag = 1\nif li[0][0] == 1 and li[1][0]==1 and li[2][0]==1:\n    flag = 1\nif li[0][1] == 1 and li[1][1]==1 and li[2][1]==1:\n    flag = 1\nif li[0][2] == 1 and li[1][2]==1 and li[2][2]==1:\n    flag = 1\nif li[0][0] == 1 and li[1][1]==1 and li[2][2]==1:\n    flag = 1\nif li[0][2] == 1 and li[1][1]==1 and li[2][0]==1:\n    flag = 1\n\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","a = [list(map(int, input().split())) for _ in range(3)]\nn = int(input())\nb = set([int(input()) for _ in range(n)])\n\ntate = [[(i,j) for i in range(3)] for j in range(3)]\nnaname = [[(i,i) for i in range(3)], [(i,2 - i) for i in range(3)]]\n\natari = set()\nfor i in range(3):\n    for j in range(3):\n        if a[i][j] in b:\n            atari.add((i, j))\n\nif len(atari) < 3:\n    print('No')\nelse:        \n    for i in range(3):\n        if (a[i][0] in atari and a[i][1] in atari and a[i][2] in atari) or (tate[i][0] in atari and tate[i][1] in atari and tate[i][2] in atari):\n            print('Yes')\n            exit()\n    \n    for i in range(2):\n        if naname[i][0] in atari and naname[i][1] in atari and naname[i][2] in atari:\n            print('Yes')\n            exit()\n    \n    print('No')\n    \n        \n","Array = [list(map(int,input().split())) for _ in range(3)]\nArrayBingo = [[0,0,0],[0,0,0,],[0,0,0]]\nN = int(input())\nB = []\ncheckR = 0\ncheckG = 0\ncheckN = 0\nfor i in range (N):\n    B.append(int(input()))\nfor l in range (N):\n    for j in range (3):\n        for k in range (3):\n            if Array[j][k]==B[l]:\n                ArrayBingo[j][k]=1\nfor i in range (3): \n    if (ArrayBingo[i][0] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR=4\n    if checkR !=4:\n        checkR=0\nfor i in range (3): \n    if (ArrayBingo[i][1] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR=4\nif checkR!=4    \n    checkR=0\nfor i in range (3): \n    if (ArrayBingo[i][2] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR =4\nelse:\n    checkR=0\nfor j in range (3):\n    if (ArrayBingo[0][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nif checkG !=4:\n    checkG=0\nfor j in range (3):\n    if (ArrayBingo[1][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nif checkG !=4:\n    checkG=0\nfor j in range (3):    \n    if (ArrayBingo[2][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nelse:\n    checkG=0\nif (ArrayBingo[0][0] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][2] == 1) or (ArrayBingo[0][2] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][0] == 1):\n    checkN = 1\nelse:\n    checkN = 0\nif checkR != 4 and checkG !=4 and checkN==1:\n    print('Yes')\nif checkR == 0 and checkG ==0 and checkN==0:\n    print('No')\n","from sys import stdin\nli = [list(map(int,stdin.readline().rstrip().split())) for _ in range(3)]\nlin = []\nfor i in range(3):\n    for j in range(3):\n        lin.append(li[i][j])\nn = int(stdin.readline().rstrip())\nlis = [int(stdin.readline().rstrip()) for _ in range(n)]\nliv = []\nfor i in lin:\n    if i in lis:\n        liv.append(0)\n    else:\n        liv.append(1)\nif liv[0:3] == [0,0,0] or liv[3:6] == [0,0,0] or liv[6:9] == [0,0,0]:\n    print(\"Yes\")\n    exit()\nfor i in range(3):\n    if liv[3*i] == 0 and liv[3*i+1] == 0 and liv[3*i+2] == 0:\n        print(\"Yes\")\n        exit()\nif liv[0] == 0 and liv[4] == 0 and liv[8] == 0:\n    print(\"Yes\")\n    exit()\nif liv[2] == 0 and liv[4] == 0 and liv[6] == 0:\n    print(\"Yes\")\n    exit()\nprint(\"No\")","#ABC157.B\nA1 = list(map(int,input().split()))\nA2 = list(map(int,input().split()))\nA3 = list(map(int,input().split()))\nN = int(input())\nb = [int(input())for _ in range(N)]\nif (A1[0] in b)and (A1[1]in b)and (A1[2] in b):\n    print('Yes')\nelif (A2[0]in b)and(A2[1] in b)and(A2[2]in b):\n    print('Yes')\nelif (A3[0]in b)and(A3[1]in b)and (A3[2]in b):\n    print('Yes')\nelif (A1[0]in b)and(A2[0]in b)and(A3[0]in b):\n    print('Yes')\nelif (A1[1]in b)and (A2[1]in b)and(A3[1]in b):\n    print('Yes')\nelif (A1[2] in b)and (A2[2]in b)and(A3[2]in b):\n    print('Yes')\nelif (A1[0]in b)and (A2[1]in b)and(A3[2]in b):\n    print('Yes')\nelif (A1[2]in b)and (A2[1]in b)and(A3[0]in b):\n    print('Yes')\nelse:\n    print('No')","A1 = list(map(int, input().split()))\nA2 = list(map(int, input().split()))\nA3 = list(map(int, input().split()))\nN = int(input())\n\n\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        if A1[j] == b:\n            A1[j] = 0\n        if A2[j] == b:\n            A2[j] = 0\n        if A3[j] == b:\n            A3[j] = 0\n\nf = 0\n\nif A1[0] == 0 and A1[1] == 0 and A1[2] == 0:\n    f = 1\nif A2[0] == 0 and A2[1] == 0 and A2[2] == 0:\n    f = 1\nif A3[0] == 0 and A3[1] == 0 and A3[2] == 0:\n    f = 1\nif A1[0] == 0 and A2[0] == 0 and A3[0] == 0:\n    f = 1\nif A1[1] == 0 and A2[1] == 0 and A3[1] == 0:\n    f = 1\nif A1[2] == 0 and A2[2] == 0 and A3[2] == 0:\n    f = 1\nif A1[0] == 0 and A2[1] == 0 and A3[2] == 0:\n    f = 1\nif A1[2] == 0 and A2[1] == 0 and A3[0] == 0:\n    f = 1\nif f == 1:\n    print('Yes')\nelse:\n    print('No')\n","def IsBingo(arr_9):\n    BINGO=['x','x','x']\n    C1=arr_9[0::2]\n    C2=arr_9[1::2]\n    C3=arr_9[2::2]\n    X1=[arr_9[0],arr_9[4],arr_9[8]]\n    X2=[arr_9[2],arr_9[4],arr_9[6]]\n    if arr_9[:3]==BINGO or arr_9[3:6]==BINGO or arr_9[6:]==BINGO or C1==BINGO or C2==BINGO or C3==BINGO or X1==BINGO or X2==BINGO:\n        return 'BINGO'\n\n\nA1=list(input().split())\nA2=list(input().split())\nA3=list(input().split())\nA=A1+A2+A3\nN=int(input())\nfor _ in range(N):\n    n=input()\n    if A.count(n)==1:\n        A[A.index(n)]=\"x\"\n# A1=A[:3]\n# A2=A[3:6]\n# A3=A[6:]\n# print(A1,A2,A3)\n\nif IsBingo(A)=='BINGO':\n    print('Yes')\nelse:\n    print('No')","import itertools\na = []\ncnt_list = []\nfor _ in range(3):\n    a += map(int, input().split())\nn = int(input())\nfor _ in range(n):\n    b = int(input())\n    for i, j in enumerate(a):\n        if b == j:\n            cnt_list.append(i)\nans = 'No'\nif len(cnt_list) > 2:\n    for k in list(itertools.permutations(cnt_list, 3)):\n        if sum(k) % 3 == 0:\n            ans = 'Yes'\nprint(ans)","l = list(map(int, input().split()))\nl += list(map(int, input().split()))\nl += list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n  b = int(input())\n  if b in l:\n    index = l.index(b)\n    l[index] = 0\nif l[0] == l[1] == l[2] or l[3] == l[4] == l[5] or l[6] == l[7] == l[8] or l[0] == l[3] == l[6] or l[1] == l[4] == l[7] or l[2] == l[5] == l[8] or l[0] == l[4] == l[8] or l[2] == l[4] == l[6]:\n  print(\"Yes\")\nelse:\n  print(\"No\")","List_A = [list(map(int,input().split())) for i in range(3)] # [[1,2],[3,4],[5,6]]\nN = int(input()) # \u6570\u5b57\u3092\u5909\u6570\u306b\u683c\u7d0d\nList_B = [int(input()) for i in range(N)] # \u8907\u6570\u306e\u6570\u5b57\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d # [1,2,3]\n\nList_C = [[0,0,0] for i in range(3)]\n\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if List_B[i] == List_A[j][k]:\n                List_C[j][k] = 1\n                \nresult = 'No'\n\nfor i in range(3):\n    if List_C[i][0] * List_C[i][1] * List_C[i][2] == 1:\n        result = 'Yes'\n    if List_C[0][i] * List_C[1][i] * List_C[2][i] == 1:\n        result = 'Yes'\n    if List_C[0][0] * List_C[1][1] * List_C[2][2] == 1:\n        result = 'Yes'\n    if List_C[0][2] * List_C[1][1] * List_C[2][0] == 1:\n        result = 'Yes'\n\nprint(result)","A = [[int(i) for i in input().split()] for _ in range(3)]\nB = [[False, False, False], [False, False, False], [False, False, False]]\nN = int(input())\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if A[j][k]==b:\n                B[j][k]=True\nfor r in B:\n    if all(r):\n        print(\"Yes\")\n        quit()\n\nfor c in zip(*B):\n    if all(c):\n        print(\"Yes\")\n        quit()\n# print(B)\nif (B[0][0] and B[1][1] and B[2][2]) or (B[0][2] and B[1][1] and B[2][0]):\n    print(\"Yes\")\n    quit()\n\nprint(\"No\")","a1 = list(map(int,input().split()))\na2 = list(map(int,input().split()))\na3 = list(map(int,input().split()))\nrow = int(input())\ndetame = [int(input()) for i in range(row)]\nbingo = 0\nif (a1[0]) in detame and (a1[1]) in detame and (a1[2]) in detame:\n    bingo=bingo+1\nelif (a2[0]) in detame and (a2[1]) in detame and (a2[2]) in detame:\n    bingo=bingo+1\nelif (a3[0]) in detame and (a3[1]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[0]) in detame and (a2[0]) in detame and (a3[0]) in detame:\n    bingo=bingo+1\nelif (a1[1]) in detame and (a2[1]) in detame and (a3[1]) in detame:\n    bingo=bingo+1\nelif (a1[2]) in detame and (a2[2]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[0]) in detame and (a2[1]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[2]) in detame and (a2[1]) in detame and (a3[0]) in detame:\n    bingo=bingo+1\nif bingo==0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A = []\nfor i in range(3):\n    a1,a2,a3 = list(map(int,input().split()))\n    Ai = [a1,a2,a3]\n    A.extend(Ai)\nn = int(input())\nana = []\nfor i in range(n):\n    b = int(input())\n    if b in A:\n        idx = A.index(b)\n        ana.append(idx)\natari = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,7]]\njudje = False\nfor i in range(len(atari)):\n    if (atari[i][0] in ana and atari[i][1] in ana)  and atari[i][1] in ana:\n        judje = True\n        break\nif judje == True:    \n    print(\"Yes\")\nelse:\n    print(\"No\")","row1 = list(map(int,input().split()))\nrow2 = list(map(int,input().split()))\nrow3 = list(map(int,input().split()))\n\nn = int(input())\nnums = []\nans = \"No\"\n\nfor i in range(0, n):\n  nums.append(int(input()))\n  \nfor i in range(0,3):\n  if row1[i] in nums: row1[i] == \"O\"\n  if row2[i] in nums: row2[i] == \"O\"\n  if row3[i] in nums: row3[i] == \"O\"\n    \n#Columns\nfor i in range(0,3):\n  if row1[i] == row2[i] == row3[i]: ans = \"Yes\"\n    \n#Rows\nif row1 == [\"O\",\"O\",\"O\"] or row2 == [\"O\",\"O\",\"O\"] or row3 == [\"O\",\"O\",\"O\"]: ans = \"Yes\"\n  \n#Diagonals\nif row1[0] == row2[1] == row3[2] or row1[2] == row2[1] == row3[0]: ans = \"Yes\"\n  \nprint(ans)","A=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\nB=[int(input()) for _ in range(n)]\n\nbingo=[[0]*3 for _ in range(3)]\nfor i in range(n):\n  for ai in range(3):\n    for aj in range(3):\n      if A[ai][aj]==B[i]:\n        bingo[ai][aj]=1\nflag=False\nif bingo[0][0]==bingo[0][1]==bingo[0][2]==1: flag=True\nif bingo[1][0]==bingo[1][1]==bingo[1][2]==1: flag=True\nif bingo[2][0]==bingo[2][1]==bingo[2][2]==1: flag=True\n  \nif bingo[0][0]==bingo[1][0]==bingo[2][0]==1: flag=True\nif bingo[0][1]==bingo[1][1]==bingo[2][1]==1: flag=True\nif bingo[0][2]==bingo[1][2]==bingo[2][2]==1: flag=True\n  \nif bingo[0][0]==bingo[1][1]==bingo[2][2]==1: flag=True\nif bingo[0][2]==bingo[1][1]==bingo[2][0]==1: flag=True\nif flag:\n  print('Yes')\nelse:\n  print('No')","A=[list(map(int,input().split())) for i in range(3)]\nn=int(input())\n\nfor i in range(n):\n  o=int(input())\n  for x in range(3):\n    for y in range(3):\n      if o == A[x][y]:\n        A[x][y]=-1\nfor x in range(3):\n  if A[x][0]==-1:\n    f=True\n    for y in range(3):\n      if A[x][y]!=-1:\n        f=False\n        if f:\n          print('Yes')\n          exit()\nfor y in range(3):\n  if A[0][y] == -1:\n    f=True\n    for x in range(3):\n      if A[y][x]!=-1:\n        f=False\n        if f:\n          print('Yes')\n          exit()\nf=True\nfor i in range(3):\n  if A[i][i]!=-1:\n    f=False\nif f:\n  print('Yes')\n  exit()\nf=True\nfor i in range(1,3):\n  if A[-i][-i]!=-1:\n    f=False\nif f:\n  print('Yes')\n  exit()\n\nprint('No')","a = [list(map(int, input().split())) for i in range(3)]\nn = int(input())\n\nb = set(int(input()) for i in range(n))\n\ndef check():\n    for i in range(3):\n        if all(a[i][j] in b for j in range(3)):\n            return True\n        if all(a[j][i] in b for j in range(3)):\n            return True\n    return all(a[i][i] in b for i in range(3)) or all(a[2-i][i] in b for i in range(3))\n\nprint('Yes' if check() else 'No')","a = [list(map(int, input().split())) for _ in range(3)]\nn = int(input())\n\nfor i in range(n):\n    b = int(input())\n    for r in range(3):\n        for c in range(3):\n            if a[r][c] == b:\n                a[r][c] = 0\n\nis_bingo = False\nfor i in range(3):\n    if sum([a[i][j] for j in range(3)]) == 0:\n        is_bingo = True\n        break\n    if sum([a[j][i] for j in range(3)]) == 0:\n        is_bingo = True\n        break\n\nif sum([a[j][j] for j in range(3)]) == 0:\n    is_bingo = True\nif sum([a[j][2 - j] for j in range(3)]) == 0:\n    is_bingo = True\n\nans = 'Yes' if is_bingo else 'No'\nprint(ans)\n"],"formatted_programs":["a = [[int(i) for i in input().split()] for _ in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\n\nans = \"No\"\nfor i in range(3):\n  for j in range(3):\n    if a[i][j] in b:\n      a[i][j] = \"x\"\n      \nif (a[0][0]==a[1][1]==a[2][2]==\"x\") or (a[2][0]==a[1][1]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \nif (a[0][0]==a[1][0]==a[2][0]==\"x\")or(a[0][1]==a[1][1]==a[2][1]==\"x\")or(a[0][2]==a[1][2]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \nif (a[0][0]==a[0][1]==a[0][2]==\"x\")or(a[1][0]==a[1][1]==a[1][2]==\"x\")or(a[2][0]==a[2][1]==a[2][2]==\"x\"):\n  print(\"Yes\")\n  exit()\n  \n  \nprint(ans)","A = []\nfor _ in range(3):\n    A.append(list(map(int, input().split())))\n\nN = int(input())\n\nB = []\nfor _ in range(N):\n    B.append(int(input()))\n\npunch = []\nfor b in B:\n    for row in range(3):\n        if b in A[row]:\n            punch.append((row, A[row].index(b)))\n\nfor i in range(3):\n    if (i, 0) in punch:\n        if (i, 1) in punch and (i, 2) in punch:\n            print('Yes')\n            exit()\n        if (i-1, 0) in punch and (i+1, 0) in punch:\n            print('Yes')\n            exit()\n        if (i+1, 1) in punch and (i+2, 2) in punch:\n            print('Yes')\n            exit()\n\nif (2, 0) in punch:\n    if (1, 1) in punch and (0, 2) in punch:\n        print('Yes')\n        exit()\n\n\nprint('No')","bingo = []\nchecker = 0\nfor i in range(3):\n    bingo.append([int(j) for j in input().split()])\nn = int(input())\nfor i in range(n):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if bingo[j][k] == b:\n                bingo[j][k] = 0\nfor i in range(3):\n    if checker == 1:\n        break\n    if bingo[i][0] ==0 and  bingo[i][1] == 0 and bingo[i][2] == 0:\n        checker = 1\n    if bingo[0][i] == 0 and bingo[1][i] == 0 and bingo[2][i] == 0:\n        checker = 1\n    if bingo[0][0] == 0 and  bingo[1][1] == 0 and bingo[2][2] == 0:\n        checker = 1\n    if bingo[0][2] == 0 and bingo[1][1] == 0 and bingo[2][0] == 0:\n        checker = 1\n\nif checker:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","li_1 = list(map(int, input().split()))\nli_2 = list(map(int, input().split()))\nli_3 = list(map(int, input().split()))\nn = int(input())\nb = [int(input()) for i in range(n)]\n\nindex = 0\nans = 'No'\n\nfor i in b:\n    for j in li_1:\n        if i == j:\n            li_1[index] = 0\n        index += 1\n    index = 0\nfor i in b:\n    for j in li_2:\n        if i == j:\n            li_2[index] = 0\n        index += 1\n    index = 0\nfor i in b:\n    for j in li_3:\n        if i == j:\n            li_3[index] = 0\n        index += 1\n    index = 0\n\nif li_1[0] == 0 and li_1[1] == 0 and li_1[2] == 0:\n    ans = 'Yes'\nif li_2[0] == 0 and li_2[1] == 0 and li_2[2] == 0:\n    ans = 'Yes'\nif li_3[0] == 0 and li_3[1] == 0 and li_3[2] == 0:\n    ans = 'Yes'\n\nif li_1[0] == 0 and li_2[0] == 0 and li_3[0] == 0:\n    ans = 'Yes'\nif li_1[1] == 0 and li_2[1] == 0 and li_3[1] == 0:\n    ans = 'Yes'\nif li_1[2] == 0 and li_2[2] == 0 and li_3[2] == 0:\n    ans = 'Yes'\n\nif li_1[0] == 0 and li_2[1] == 0 and li_3[2] == 0:\n    ans = 'Yes'\nif li_1[2] == 0 and li_2[1] == 0 and li_3[0] == 0:\n    ans = 'Yes'\n\nprint(ans)","a,b,c=map(int,input().split())\nd,e,f=map(int,input().split())\ng,h,i=map(int,input().split())\nN=int(input())\nL=[int(input()) for i in range(N)]\nif a in L and b in L and c in L:\n  print('Yes')\nelif d in L and e in L and  f in L:\n  print('Yes')\nelif g in L and h in L and  i in L:\n  print('Yes')\nelif a in L and d in L and  g in L:\n  print('Yes')\nelif b in L and e in L and  h in L:\n  print('Yes')\nelif c in L and f in L and  i in L:\n  print('Yes')\nelif a in L and e in L and  i in L:\n  print('Yes')\nelif c in L and e in L and  g in L:\n  print('Yes')\nelse:\n  print('No')","num=[]\nfor i in range(3):\n    array = list(map(int, input().strip().split()))\n    num.append(array)\nN = int(input())\na = [int(input()) for i in range(N)]\n\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if a[i] == num[j][k]:\n                num[j][k] = False\nbingo = 0\nfor m in range(3):\n    if num[0][m] == num[1][m] == num[2][m] == False:bingo = 1\n\nfor n in range(3):\n    if num[n][0] ==  num[n][1] ==  num[n][2] == 0:bingo = 1 \nif num[0][0] == num[1][1] == num[2][2] == 0 :bingo = 1\nif num[0][2] == num[1][1] == num[2][0] == 0 :bingo = 1\n\nif bingo == 1:print(\"Yes\")\nelif bingo == 0:print(\"No\")\n\n\n","# ANSHUL GAUTAM\n# IIIT-D\n\nfrom math import *\nfrom copy import *\nfrom string import *\t\t\t\t# alpha = ascii_lowercase\nfrom random import *\t\t\t\t# l.sort(key=lambda l1:l1[0]-l1[1]) => ex: sort on the basis difference\nfrom sys import stdin\nfrom sys import maxsize\nfrom operator import *\t\t\t\t# d = sorted(d.items(), key=itemgetter(1))\nfrom itertools import *\nfrom collections import Counter\t\t# d = dict(Counter(l))\nfrom collections import defaultdict # d = defaultdict(list)\n\n'''\n\n'''\n\ndef solve(l):\n\tn = len(l)\n\t\n\nL = []\nfor i in range(3):\n\tl = list(map(int, stdin.readline().rstrip().split()))\n\tL.append(l)\n# for i in L:\n# \tprint(i)\nN = int(input())\nfor _ in range(N):\n\tq = int(input())\n\tfor i in range(3):\n\t\tfor j in range(3):\n\t\t\tif(L[i][j] == q):\n\t\t\t\tL[i][j] = -1\nf = 0\nfor i in range(3):\n\tif(L[i] == [-1,-1,-1]):\n\t\tf = 1\nif(not f):\n\tif(L[0][0] == L[1][0] == L[2][0] == -1):\n\t\tf = 1\n\tif(L[0][1] == L[1][1] == L[2][1] == -1):\n\t\tf = 1\n\tif(L[0][2] == L[1][2] == L[2][2] == -1):\n\t\tf = 1\n\tif(L[0][0] == L[1][1] == L[2][2] == -1):\n\t\tf = 1\n\tif(L[0][2] == L[1][1] == L[2][0] == -1):\n\t\tf = 1\n\t\n# for i in L:\n# \tprint(i)\nif(f):\n\tprint('Yes')\nelse:\n\tprint('No')\n","a = [list(map(int,input().split()))\t for i in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\nfor i in range(n):\n    for j in range(3):\n        for k in range(3):\n            if b[i] == a[j][k]:\n                a[j][k] = 0\n\nfor i in range(3):\n    yoko=0\n    for j in range(3):\n        if a[i][j]==0:\n            yoko+=1\n            if yoko == 3:\n                print(\"Yes\")\n                exit()\nif (a[0][0] == 0 and a[1][1] == 0 and a[2][2]==0) or (a[0][2] == 0 and a[1][1] == 0 and a[2][0]==0):\n    print(\"Yes\")\n    exit()\nfor i in range(3):\n    tate=0\n    for j in range(3):\n        if a[j][i]==0:\n            tate+=1\n            if tate == 3:\n                print(\"Yes\")\n                exit()\nprint(\"No\")","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [int(input()) for i in range(N)]\nbingo = \"No\"\n\nfor i in range(N):\n    for a in range(3):\n        for b in range(3):\n            if(B[i]==A[a][b]):\n                A[a][b] = 0\nfor i in range(3):\n    if(A[i]==[0,0,0]):\n        bingo = \"Yes\"\n    if(A[0][i]==0 and A[1][i]==0 and A[2][i]==0):\n        bingo = \"Yes\"\nif(A[0][0]==0 and A[1][1]==0 and A[2][2]==0):\n        bingo = \"Yes\"\nif(A[0][2]==0 and A[1][1]==0 and A[2][0]==0):\n        bingo = \"Yes\"\n\nprint(bingo)","def judge(board):\n    for i in range(0, 3):\n        if board[i][0] == board[i][1] == board[i][2] == 0 :\n            return True\n        if board[0][i] == board[1][i] == board[2][i] == 0:\n            return True\n    \n    if board[0][0] == board[1][1] == board[2][2] == 0:\n        return True\n    if board[0][2] == board[1][1] == borad[2][0] == 0:\n        return True\n    \n    return False\n\n\nupper  = list(map(int, input().split(\" \")))\nmiddle = list(map(int, input().split(\" \")))\nlower  = list(map(int, input().split(\" \")))\n\nboard = (upper,middle,lower)\n\nN = int(input())\nbingos = list()\n\nfor i in range(0, N):\n    bingos.append(int(input()))\n\nfor i in range(0, 3):\n    for j in range(0, 3):\n        if upper[j] == bingos[i]:\n            board[0][j] = 0\n            break\n        elif middle[j] == bingos[i]:\n            board[1][j] = 0\n            break\n        elif lower[j] == bingos[i]:\n            board[2][j] = 0\n            break\n        else:\n            pass\n\nif judge(board):\n    print('Yes')\nelse:\n    print('No')\n","import numpy as np\n\nA = [list(map(int,input().split())) for _ in range(3)]\nN = int(input())\nB = [int(input()) for _ in range(N)]\n\nBINGO = np.array([[False for i in range(3)]for j in range(3)])\n\nfor i in range(3):\n    for j in range(3):\n        if A[i][j] in B:\n            BINGO[i][j] = True\n\n#\u6a2a\u78ba\u8a8d\nfor i in BINGO:\n    if False not in i:\n        print(\"Yes\")\n        exit()\n\nBINGO = BINGO.T # \u7e26\u6a2a\u3092\u5165\u308c\u66ff\u3048T\u306fnumpy\u306e\u95a2\u6570\n\n#\u7e26\u78ba\u8a8d\nfor i in BINGO:\n    if False not in i:\n        print(\"Yes\")\n        exit()\n\n#\u659c\u3081\u78ba\u8a8d\ncross = [BINGO[i][i] for i in range(3)]\ncross_re = [BINGO[i][2-i] for i in range(3)]\n\nif False not in (cross or cross_re):\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")","def q2(data, num_list):\n    data = [int(num) for d in data for num in d.split()]\n    num_list = [int(n) for n in num_list]\n\n    for num in num_list:\n        data = [d if d != num else 0 for d in data]\n        if check_bingo(data):\n            return 'Yes'\n\n    else:\n        return 'No'\n\n\ndef check_bingo(data):\n    # case1\n    if sum(data[:3]) == 0: return True\n    if sum(data[3:6]) == 0: return True\n    if sum(data[6:]) == 0: return True\n    if sum([data[0], data[3], data[6]]) == 0: return True\n    if sum([data[3*i+1] for i in range(3)]) == 0: return True\n    if sum([data[3*i + 2] for i in range(3)]) == 0: return True\n    if sum([data[0], data[4], data[8]]) == 0: return True\n    if sum([data[2], data[4], data[6]]) == 0: return True\n\n    return False\n  \n\ndata = [input() for _ in range(3)]\n\nnum = int(input())\n\nnum_list = [int(input()) for _ in range(num)]\n\nprint(q2(data, num_list))\n","import numpy as np\n\nsheet=[input().split() for l in range(3)]\nn=int(input())\nb=[input() for i in range(n)]\na=np.array(sheet)\ni,j,k,c,z=0,0,0,0,0\n\nfor i in range(3):\n    for j in range(3):\n        for k in range(n):\n            if a[i][j]==b[k]:\n                a[i][j]=\"x\"\n\n\nif a[0][0]==a[1][1]==a[2][2]==\"x\":\n    c+=1\n\nif a[0][2]==a[1][1]==a[2][0]==\"x\":\n    c+=1\n\nfor z in range(3):\n    if a[0][z]==a[1][z]==a[2][z]==\"x\":\n        c+=1\nprint(a)\nif c!=0:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","A = [input().split() for i in range(3)]\nN = int(input())\nb = list(map(int,input().split()))\nA = [[int(v) for v in l] for l in A]\nimport numpy as np\nA = np.array(A)\nl = []\nfor i in range(N):\n  if b[i] in A:\n    l.append(tuple(nd[0] for nd in np.where(A == b[i])))\nif (0, 0) in l and (1, 0) in l and (2, 0) in l:\n  print(\"Yes\")\nelif (0, 0) in l and (1, 1) in l and (2, 2) in l:\n  print(\"Yes\")\nelif (0, 1) in l and (1, 1) in l and (2, 1) in l:\n  print(\"Yes\")\nelif (0, 2) in l and (1, 1) in l and (2, 0) in l:\n  print(\"Yes\")\nelif (0, 2) in l and (1, 2) in l and (2, 2) in l:\n  print(\"Yes\")\nelif (0, 0) in l and (0, 1) in l and (0, 2) in l:\n  print(\"Yes\")\nelif (1, 0) in l and (1, 1) in l and (1, 2) in l:\n  print(\"Yes\")\nelif (2, 0) in l and (2, 1) in l and (2, 2) in l:\n  print(\"Yes\")\nelse:\n  print(\"No\")","\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \n\nCopy\nCopy\nA=[]\nflag=0\nfor i in range(3):\n  A.append(list(map(int,input().split())))\nn=int(input())\nfor i in range(n):\n  s=int(input())\n  for k in range(3):\n    if s in A[k]:\n      A[k][A[k].index(s)]=0\n\nif A[0]==[0,0,0] or A[1]==[0,0,0] or A[2]==[0,0,0]:\n  print(\"Yes\")\n  flag=1\nelif A[1][1]==0 and A[2][2]==0 and A[0][0]==0:\n  print(\"Yes\")\n  flag=1\nelif A[0][2]==0 and A[1][1]==0 and A[2][0]==0:\n  print(\"Yes\")\n  flag=1\nelse:\n  for i in range(3):\n    if A[0][i]==0 and A[1][i]==0 and A[2][i]==0:\n      print(\"Yes\")\n      flag=1\n      break\nif flag == 0:\n  print(\"No\")","class Bingo:\n    def check_num(self, arr, B):\n        for b in B:\n            for y in range(3):\n                for x in range(3):\n                    if arr[y][x] == b:\n                        arr[y][x] = -1\n        return arr\n    def check_bingo(self, arr):\n        for y in range(3):\n            f = True\n            for x in range(3):\n                if arr[y][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for x in range(3):\n            f = True\n            for y in range(3):\n                if arr[y][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for y in range(3):\n            f = True\n            for y in range(3):\n                if arr[y][y] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        for x in range(3):\n            f = True\n            for x in range(3):\n                if arr[x][x] != -1:\n                    f = False\n        if f:\n            print(\"Yes\")\n            exit()\n        print('No')\n\nif __name__ == \"__main__\":\n    A1 = list(map(int, input().split())) \n    A2 = list(map(int, input().split())) \n    A3 = list(map(int, input().split())) \n    arr = [A1, A2, A3]\n    N = int(input())\n    B = [int(input()) for _ in range(N)]\n    b = Bingo()\n    result_list = b.check_num(arr, B)\n    b.check_bingo(result_list)\n","A_1 = list(map(int, input().split()))\nA_2 = list(map(int, input().split()))\nA_3 = list(map(int, input().split()))\nA = A_1 + A_2 + A_3\nN = int(input())\nB = []\nfor _ in range(N):\n  B.append(int(input()))\nfor b in range(N):\n  for a in range(9):\n    if B[b] == A[a]:\n      A[a] = 0\nBINGO = 'No'\nfor i in range(3):\n  if A[i*3] + A[i*3+1] + A[i*3+2] == 0:\n    BINGO = 'Yes'\n  if A[i] + A[i+3] + A[i+6] == 0:\n      BINGO = 'Yes'\nif (A[0] + A[4] + A[8] == 0):\n  BINGO = 'Yes'\nif (A[2] + A[4] + A[6] == 0):\n  BINGO = 'Yes'\nprint(BINGO)","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [int(input()) for i in range(N)]\n\nfor i in range(3):\n\tfor j in range(3):\n\t\tfor k in range(N):\n\t\t\tif A[i][j] == B[k]:\n\t\t\t\tA[i][j] = 0\n\ncnt = 0\nfor i in range(3):\n\tS = 0\n\tfor j in range(3):\n\t\tS += A[i][j]\n\tif S == 0:\n\t\tcnt = 1\n\t\t\nfor j in range(3):\n\tS = 0\n\tfor i in range(3):\n\t\tS += A[i][j]\n\tif S == 0:\n\t\tcnt = 1\n\t\t\nS = A[0][0] + A[1][1] + A[2][2]\nif S == 0:\n\tcnt = 1\n\t\nS = A[0][2] + A[1][1] + A[2][0]\nif S == 0:\n\tcnt = 1\n\t\nif cnt == 1:\n\tprint(\"Yes\")\nelse:\n\tprint(\"No\")","def check():\n    A = [[int(i) for i in input().split()] for _ in range(3)]\n    N = int(input())\n    \n    for _ in range(N):\n        num = int(input())\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == num:\n                    A[i][j] = '*'\n    checklist = [a for a in A]\n    checklist2 = [[a[i] for a in A] for i in range(3)]\n    checklist3 = [[A[0][0], A[1][1], A[2][2]], [A[0][2], A[1][1], A[2][0]]]\n    \n    a = [checklist, checklist2, checklist3]\n    \n    for aaa in a:\n        for check in aaa:\n            if check == ['*', '*', '*']:\n                return 'Yes'\n    return 'No'\nprint(check())","import sys \nA = [input().split() for l in range(3)]\nN = int(input())\n\nb = ['0'] * N\nfor i in range(0,N):\n    b[i] = input()\n\nfor i in range(0,3):\n    for j in range(0,3):\n        if A[i][j] in b:\n            A[i][j] = '0'\n\nfor i in range(0,3):\n    count = 0\n    for j in range(0,3):\n        if A[i][j] == '0':\n            count += 1\n    if count == 3:\n        print('Yes')\n        sys.exit()\n\nfor j in range(0,3):\n    count = 0\n    for i in range(0,3):\n        if A[i][j] == '0':\n            count += 1\n    if count == 3:\n        print('Yes')\n        sys.exit()\n\nif A[0][0] == '0' and A[1][1] == '0' and A[2][2] == '0':\n    print('Yes')\n    sys.exit()\nelif A[0][2] == '0' and A[1][1] == '0' and A[2][0] == '0':\n    print('Yes')\n    sys.exit()\nelse:\n    print('No')\n    sys.exit()\n\n \n\n\n\n\n\n    ","A = [[],[],[]]\nb = []\nB = [[False]*3]*3\n\nA[0] = list(map(int,input().split(\" \")))\nA[1] = list(map(int,input().split(\" \")))\nA[2] = list(map(int,input().split(\" \")))\nN = int(input())\n\n_N = N\nwhile(_N>0):\n    _N -= 1\n    b.append(int(input()))\n\nfor c in b:\n    for i in range(3):\n        for j in range(3):\n            if(A[i][j] == c):\n                B[i][j] = True\n\nbingo = \"No\"\n# tate\nfor i in range(3):\n    # tate\n    if(B[i][0] and B[i][1] and B[i][2]):\n        bingo = \"Yes\"\n    # yoko\n    if(B[0][i] and B[1][i] and B[2][i]):\n        bingo = \"Yes\"\n# naname\nif(B[0][0] and B[1][1] and B[2][2]):\n    bingo = \"Yes\"\nif(B[0][2] and B[1][1] and B[2][0]):\n    bingo = \"Yes\"\n\nprint(bingo)","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nb = [int(input()) for _ in range(N)]\nB = [[0,0,0],[0,0,0],[0,0,0]]\n\nans = 'No'\nfor i, row in enumerate(A):\n    for j, value in enumerate(row):\n        if value in b:\n            B[i][j] = 1\nprint(B)\nif B[0][0]==B[0][1]==B[0][2]==1 or B[1][0]==B[1][1]==B[1][2]==1 or B[2][0]==B[2][1]==B[2][2]==1:\n    ans = 'Yes'\nelif B[0][0]==B[1][0]==B[2][0]==1 or B[0][1]==B[1][1]==B[2][1]==1 or B[0][2]==B[1][2]==B[2][2]==1:\n    ans = 'Yes'\nelif B[0][0]==B[1][1]==B[2][2]==1 or B[0][2]==B[1][1]==B[2][0]==1:\n    ans = 'Yes'\nprint(ans)","a = [list(map(int, input().split())) for i in range(3)]\nfor j in range(int(input())):\n  b = int(input())\n  for h in range(3):\n    for k in range(3):\n      if a[h][k] == b:\n        a[h][k] = 0\n\nans = 'No'        \nfor m in range(3):\n  if a[m][0] == a[m][1] == a[m][2]:\n    ans = 'Yes'\n  if a[0][m] == a[1][m] == a[2][m]:\n    ans = 'Yes'\nif a[0][0] == a[1][1] == a[2][2]:\n  ans = 'Yes'\nif a[0][2] == a[1][1] == a[2][0]:\n  ans = 'Yes'\nprint(ans)","from collections import Counter\nA1=list(map(int,input().split()))\nA2=list(map(int,input().split()))\nA3=list(map(int,input().split()))\nA=[A1,A2,A3]\nN=int(input())\nfor _ in range(N):\n  b=int(input())\n  #\u7a74\u3092\u3042\u3051\u308b\n  for tmpA in A:\n    if b in tmpA:\n      index=tmpA.index(b)\n      tmpA[index]=-1\n      break\n  \n#bingo\u30c1\u30a7\u30c3\u30af\n  \n#\u305f\u3066\nif True in [A[0][i]==A[1][i] and A[1][i]==A[2][i] for i in range(3)]:\n  print(\"Yes\")\n#\u3088\u3053\nelif len(Counter(A[0]))==1 or len(Counter(A[1]))==1 or len(Counter(A[2]))==1:\n  print(\"Yes\")\n#\u306a\u306a\u3081\nelif A[1][1]==-1 and (A[0][0] == A[2][2] or A[0][2]==A[2][0]):\n  print(\"Yes\")\n#\u30c0\u30e1\nelse:\n  print(\"No\")\n","M=[]\nfor _i in range(3):\n  M.append(list(map(int,input().split())))\nn= int(input())\nfor a in range(n):\n  b= int(input())\n  for i in range(3):\n    for j in range(3):\n      if M[i][j]==b:\n        M[i][j]=-1\noassiy= False\nfor i in range(3):\n  cont=0\n  for j in range(3):\n    if M[i][j]==-1:\n      cont+=1\n  if cont==3:\n    break\n    oassiy=True\n\nif not oassiy:\n for j in range(3):\n  cont=0\n  for i in range(3):\n    if M[i][j]==-1:\n      cont+=1\n  if cont==3:\n    break\n    oassiy=True\n\nif not oassiy:\n  cont1 = cont2= 0\n  for i in range(3):\n    if M[i][i]==-1:\n      cont1+=1\n    if M[i][2-i]==-1:\n      cont2+=1\nif (cont1==3) or (cont2==3):\n    oassiy=True\n\nprint('Yes' if oassiy else 'No')\n","#157 b\na=[]\ncall_num=[]\nfor i in range(3):\n    x,y,z=map(int,input().split())\n    a.append(x)\n    a.append(y)\n    a.append(z)\nn=int(input())\nfor i in range(n):\n    x=int(input())\n    if x in a:\n        call_num.append(a.index(x))\nbingo\nans=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]]\nfor x in ans:\n    flag=True\n    for y in x:\n        if y not in call_num:\n            flag=False\n    if flag:\n        print(\"Yes\")\n        bing=True\n        break\nif bingo!=True:        \n    print(\"No\")\n","import numpy as np\n\nA_list = []\n\nfor i in range(3):\n    a = list(map(int, input().split()))\n    A_list.append(a)\n\nN = int(input())\nnarray = np.zeros((3, 3), dtype=np.int)\n\n\nfor j in range(N):\n    b = int(input())\n\n    for n in range(3):\n        for m in range(3): \n            if A_list[n][m] == b:\n                narray[n, m] = 1\n\n\nn_list = np.count_nonzero(narray == 1, axis = 0)\nm_list = np.count_nonzero(narray == 1, axis = 1)\n\nif np.any(n_list == 3) or np.any(m_list == 3):\n    print('Yes')\n    exit()\n\nif narray[0, 0] == 1 and narray[1, 1] == 1 and narray[2, 2] == 1:\n    print('Yes')\n    exit()\n\nif narray[0, 2] == 1 and narray[1, 1] == 1 and narray[2, 0] == 1:\n    print('Yes')\n    exit()\n\nprint('No')","import numpy as np\nb_card = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nnums = [int(input()) for _ in range(N)]\n\ncard_st = np.zeros((3, 3))\n\nfor num in nums:\n    for index, card_num in enumerate(b_card):\n        if num in card_num:\n            card_st[index][card_num.index(num)] = 1\n\nif True in np.all(card_st, axis=0):\n    print('Yes')\nelif True in np.all(card_st, axis=1):\n    print('Yes')\nelif np.all(np.diag(card_st) == 1):\n    print('Yes')\nelif np.all(np.diag(np.fliplr(card_st)) == 1):\n    print('Yes')\nelse:\n    print('No')","class Bar:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n        self.left = False\n        self.center = False\n        self.right = False\n\n    def open(self, v):\n        if v == self.a:\n            self.left = True\n        elif v == self.b:\n            self.center = True\n        elif v == self.c:\n            self.right = True\n\n    def bingo(self):\n        return all([self.left, self.right, self.center])\n\n\ntop = Bar(*map(int, input().split()))\ncenter = Bar(*map(int, input().split()))\nbottom = Bar(*map(int, input().split()))\nfor x in range(int(input())):\n    value = int(input())\n    top.open(value)\n    center.open(value)\n    bottom.open(value)\n\n\ndef ok():\n    print(\"Yes\")\n    exit()\n\n\nif top.bingo() or center.bingo() or bottom.bingo():\n    ok()\n\nif top.left == center.left == bottom.left == True:\n    ok()\n\nif top.center == center.center == bottom.center == True:\n    ok()\n\nif top.right == center.right == bottom.right == True:\n    ok()\n\nif top.left == center.center == bottom.right == True:\n    ok()\n\nif top.right == center.center == bottom.left == True:\n    ok()\n\nprint('No')\n\n\n","X = [list(map(int, input().split())) for j in range(3)]\nN = int(input())\nb = []\nfor i in range(N):\n    b.append(int(input()))\n\nlis_bingo = (\n    [X[0], X[1], X[2], \n    [X[0][0], X[1][0], X[2][0]], \n    [X[0][1], X[1][1], X[2][1]], \n    [X[0][2], X[1][2], X[2][2]], \n    [X[0][0], X[1][1], X[2][2]], \n    [X[0][2], X[1][1], X[2][0]]]\n)\n\nn = 0\nwhile n <= 7:\n    ans_bool = set(lis_bingo[n]) <= set(b)\n    if ans_bool:\n        break\n    n += 1\n\nif ans_bool:\n    print('Yes')\nelse :\n    print(\"No\")\n","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB = []\nfor _ in range(n):\n    B.append(input())\n\nfor b in B:\n    for x in range(3):\n        for y in range(3) :\n            if a[x][y] == b:\n                a[x][y] = 0\n\nif A[0][0] * A[1][0] * A[2][0] == 0 or A[0][1] * A[1][1] * A[2][1] == 0 or A[0][2] * A[1][2] * A[2][2] == 0 or A[0][0] * A[0][1] * A[0][2] == 0 or A[1][0] * A[1][1] * A[1][2] == 0 or A[2][0] * A[2][1] * A[2][2] == 0 or A[0][0] * A[1][1] * A[2][2] == 0 or A[0][2] * A[1][1] * A[2][0] == 0:\n    print(\"Yes\")\nelse:\n    print(\"No\") \n","bingo = []\nfor i in range(3):\n    bingo.append(list(map(int, input().split())))\nn = int(input())\nb = [int(input()) for _ in range(n)]\n\nresult = [[False, False, False] for _ in range(3)]\n\nfor i in range(n):\n    for j in range(3):\n        if b[i] in bingo[j]:\n            result[j][bingo[j].index(b[i])] = True\n\n# \u6a2a\nfor i in result:\n    if all(i):\n        print('Yes')\n        exit()\n# \u7e26\nfor i in range(3):\n    if all([result[0][i], result[1][i], result[2][i]]):\n        print('Yes')\n        exit()\n# \u659c\u3081\nif all([result[0][0], result[1][1], result[2][2]]) or all([result[0][2], result[1][1], result[2][0]]):\n    print('Yes')\n    exit()\n\nprint('No')","a=[[0]*3 for i in range(3)]\nb=[]\nfor i in range(3):\n  x=input().split()\n  a[i][0]=x[0]\n  a[i][1]=x[1]\n  a[i][2]=x[2]\nn=int(input())\nfor i in range(n):\n  b.append(input())\nfor i in range(n):\n  for j in range(9):\n    if b[i]==a[j\/\/3][j%3]:\n      a[j\/\/3][j%3]='X'\njud=[0,0,0,0]\nz=0\nfor i in range(3):\n  for j in range(2):\n    if a[i][j]==a[i][j+1]:\n      jud[0]+=1\n    if a[j][i]==a[j+1][i]:\n      jud[1]+=1\n    if a[j][j]==a[j+1][j+1]:\n      jud[2]+=1\n    if a[j][2-j]==a[j+1][2-j-1]:\n      jud[3]+=1\n  if max(jud)>1:\n    print('Yes')\n    break\n  else:\n    z+=1\nif z==3:\n  print('No')","import numpy as np\n\na_list = list(map(int, input().split()))\na_list_2 = list(map(int, input().split()))\na_list_3 = list(map(int, input().split()))\n\na_total_list = np.array([a_list, a_list_2, a_list_3])\nbingo_array = np.zeros((3, 3))\n\nN = int(input())\n\nb_list = []\n\nfor i in range(N):\n    b = int(input())\n    if b in a_total_list:\n        bingo_array[np.where(a_total_list == b)[0][0]][np.where(a_total_list == b)[1][0]] = 1\n\nbingo_x_y = 0\nbreak_flag = False\nfor i in range(3):\n    if break_flag is True:\n        break\n    else:\n        bingo_x = 0\n        bingo_y = 0\n    for j in range(3):\n        if bingo_array[i][j] == 1:\n            bingo_x += 1\n            if bingo_x == 3:\n                break_flag = True\n                break\n        if bingo_array[j][i] == 1:\n            bingo_y += 1\n            if bingo_y == 3:\n                break_flag = True\n                break\n        if i == j:\n            if bingo_array[i][j] == 1:\n                bingo_x_y += 1\n                if bingo_x_y == 3:\n                    break_flag = True\n                    break\n\nif bingo_x >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_y >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_x_y >= 3:\n    print(\"Yes\")\n    exit()\nelif bingo_array[0][2] == 1 and bingo_array[1][1] == 1 and bingo_array[2][0] == 1:\n    print(\"Yes\")\n    exit()\nelse:\n    print(\"No\")\n    exit()","a=[input().split() for i in range(3)]\nn=int(input())\nb=[input() for i in range(n)]\nflg=0\nfor k in range(3):\n  if a[k][0] in b:\n    if a[k][1] and a[k][2] in b:\n      flg=1\n  elif a[0][k] in b:\n    if a[1][k] and a[2][k] in b:  \n      flg=1\n  elif a[0][0] and a[1][1] and a[2][2] in b:\n    flg=1\n  elif a[0][2] and a[1][1] and a[2][0] in b:\n    flg=1\nprint(['No','Yes'][flg])","bingo = [int(input()),int(input()),int(input()),int(input()),\n         int(input()),int(input()),int(input()),int(input()),int(input())]\na_list= []\nN = int(input())\nfor i in range(0,N):\n    b = int(input())\n    if b in bingo:\n        a_list.append(bingo.index(b))\nprint(a_list)\nif 0 in a_list:\n    if 1 in a_list:\n        if 2 in a_list:\n            yes = 1\n    if 3 in a_list:\n        if 6 in a_list:\n            yes = 1\n    if 4 in a_list:\n        if 8 in a_list:\n            yes = 1\nif 1 in a_list:\n    if 4 in a_list:\n        if 7 in a_list:\n            yes = 1\nif 2 in a_list:\n    if 4 in a_list:\n        if 6 in a_list:\n            yes = 1\n    if 5 in a_list:\n        if 8 in a_list:\n            yes = 1\nif 3 in a_list:\n    if 4 in a_list:\n        if 5 in a_list:\n            yes = 1\nif 6 in a_list:\n    if 7 in a_list:\n        if 8 in a_list:\n            yes = 1\nif yes == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n    \n","A = []\nfor _ in range(3):\n    A.append([int(i) for i in input().split(' ')])\nN = int(input())\na = []\nfor _ in range(N):\n    a.append(int(input()))\n\nfor num in a:\n    for i in range(3):\n        for j in range(3):\n            if num == A[i][j]:\n                A[i][j] = '*'\n\nans = 'No'\nfor i in range(3):\n    flg = 0 \n    b1 = all(A[i][j] == '*' for j in range(3))\n    b2 = all(A[j][i] == '*' for j in range(3))\n    b3 = all(A[j][j] == '*' for j in range(3))\n    b4 = all(A[2-j][j] == '*' for j in range(3))\n    if b1 or b2 or b3 or b4:\n        ans = 'Yes'\n\nprint(ans)\n        ","A1 = list(map(int,input().split()))\nA2 = list(map(int,input().split()))\nA3 = list(map(int,input().split()))\nN = int(input())\nB = [int(input()) for i in range(N)]\n\nflag = True\nfor i in range(3):\n    if (A1[0] in B) and (A1[1] in B) and (A1[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A2[0] in B) and (A2[1] in B) and (A2[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A3[0] in B) and (A3[1] in B) and (A3[2] in B):\n        print('Yes')\n        flag = False\n        break\n    elif (A1[i] in B) and (A2[i] in B) and (A3[i] in B):\n        print('Yes')\n        flag = False\n        break \n    elif (A1[0] in B) and (A2[1] in B) and (A3[2] in B):\n        print('Yes')\n        flag = False\n        break \n    elif (A1[2] in B) and (A2[1] in B) and (A3[0] in B):\n        print('Yes')\n        flag = False\n        break \nif flag == True:\n    print('No')","A = np.array([list(map(int,input().split())),list(map(int,input().split())),list(map(int,input().split()))])\nN = int(input())\nB = [input() for _  in range(N)]\nC = [1000, 1000, 1000]\nfor z in range(N):\n    for x in range(3):\n        for y in range(3):\n            if B[z] == A[x][y]:\n                A[x][y] = 1000\n                \n\nif (A[0] == C).all or (A.T[0] == C).all or (A[1] == C).all or (A[2] == C).all or (A.T[1] == C).all or (A.T[2] == C).all\n    print('Yes')\nelif A[0][1] == A[1][1] == A[2][2] or A[0][2] == A[1][1] == A[2][0]:   \n    print('Yes')\nelse:\n    print('No')","import sys\nimport math\ndef i():return int(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef i2():return map(int,sys.stdin.readline().replace(\"\\n\",\"\").split())\ndef s():return str(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef l():return list(sys.stdin.readline().replace(\"\\n\",\"\"))\ndef intl():return [int(k) for k in sys.stdin.readline().replace(\"\\n\",\"\").split()]\ndef lx():return list(map(lambda x:int(x)*-1,sys.stdin.readline().replace(\"\\n\",\"\").split()))\ndef t():return tuple(map(int,sys.stdin.readline().replace(\"\\n\",\"\").split()))\n\nif __name__ == \"__main__\":pass\na1,a2,a3 = i2()\nb1,b2,b3 = i2()\nc1,c2,c3 = i2()\nl = [a1,a2,a3,b1,b2,b3,c1,c2,c3]\nn = i()\nfor i in range(n):\n    k = int(input())\n    if k in l:\n        try:\n            l[l.index(k)] = 0\n        except IndexError:pass  \nif (l[0] == 0 and l[1] == 0 and  l[2]== 0):\n    print(\"Yes\")\nelif (l[3] == 0 and l[4] == 0 and  l[5]== 0):\n    print(\"Yes\")\nelif (l[6] == 0 and l[7] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[0] == 0 and l[3] == 0 and  l[6]== 0):\n    print(\"Yes\")\nelif (l[1] == 0 and l[4] == 0 and  l[7] == 0):\n    print(\"Yes\")\nelif (l[2] == 0 and l[5] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[0] == 0 and l[4] == 0 and  l[8] == 0):\n    print(\"Yes\")\nelif (l[2] == 0 and l[4] == 0 and l[6] == 0):\n    print(\"Yes\")\nelse:print(\"No\")","import math\na1 = list(map(int, input().split())) \na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\na = [a1,a2,a3]\n\nN = int(input())\n\nb = []\nfor i in range(N) :\n    b.append(int(input()))\n\nm = [[0,0,0],[0,0,0],[0,0,0]]\n\nfor i in range(N) :\n    for j in range(3) :\n        for k in range(3) :\n            if b[i] == a[j][k] :\n                m[j][k] = 1\nif  m[0].count(1) == 3 or \\\n    m[1].count(1) == 3 or \\\n    m[2].count(1) == 3 or \\\n    [x[0] for x in m].count(1) == 3 or \\\n    [x[1] for x in m].count(1) == 3 or \\\n    [x[2] for x in m].count(1) == 3 or \\\n    (x[0][0] == 1 and x [1][1] == 1 and x [2][2] == 2) or \\\n    (x[2][0] == 1 and x [1][1] == 1 and x [2][0] == 2) :\n    print('Yes')\nelse :\n    print('No')","# import math\n# import bisect\n# import heapq\n# from collections import deque\n# import numpy as np\n\n# n, m = map(int, input().split())\n\na = [0] * 9\ni = 0\nfor i in range(3):\n    b,c,d = map(int, input().split())\n    # print(b,c,d)\n    a[3*i],a[3*i+1],a[3*i+2] = b,c,d\n\nans = 'No'\n\nn = int(input())\n\nb = [ int(input()) for i in range(n) ]\n# print(b)\nfor i in range(n):\n    for j in range(9):\n        a[j] = -1 if b[i] == a[j] else a[j]\n\npairs = [\n    [0,1,2],[3,4,5],[6,7,8],\n    [0,3,6],[1,4,7],[2,5,8],\n    [0,4,8],[2,4,6]]\n\nfor p in pairs:\n    if a[p[0]] == -1 and a[p[1]] == -1 and a[p[2]] == -1:\n        ans = 'Yes'\n\n\nprint(ans)","A = [list(map(int,input().split())) for i in range(3)]\nN = int(input())\nB = [list(map(int,input().split())) for i in range(N)]\nfor k in range(N):\n    for i in range(3):\n        for j in range(3):\n            if B[k][0] == A[i][j]:\n                A[i][j] = 0\n\nif A[0][0] == A[0][1] == A[0][2] ==0:\n    print(\"Yes\")\nelif A[1][0] == A[1][1] == A[1][2] ==0:\n    print(\"Yes\")\nelif A[2][0] == A[2][1] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][0] == A[1][0] == A[2][0] ==0:\n    print(\"Yes\")\nelif A[0][1] == A[1][1] == A[2][1] ==0:\n    print(\"Yes\")\nelif A[0][2] == A[1][2] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][0] == A[1][1] == A[2][2] ==0:\n    print(\"Yes\")\nelif A[0][2] == A[1][1] == A[2][0] ==0:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A = []\nfor i in range(3):\n    A.append(list(input().split()))\nN = int(input())\nB = []\nfor i in range(N):\n    B.append(input())\nif A[0] <= B or A[1] <= B or A[2] <= B or {A[0][0], A[1][0], A[2][0]} <= set(B) or\\\n{A[0][1], A[1][1], A[2][1]} <= set(B) or {A[0][2], A[1][2], A[2][2]} <= set(B) \\\nor {A[0][0], A[1][1], A[2][2]} <= set(B) or {A[0][2], A[1][1], A[2][0]} <= set(B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","A = []\nfor i in range(3):\n    A.append(list(input().split()))\nN = int(input())\nB = []\nfor i in range(N):\n    B.append(input())\nif A[0] <= B or A[1] <= B or A[2] <= B or {A[0][0], A[1][0], A[2][0]} <= set(B) or\\\n{A[0][1], A[1][1], A[2][1]} <= set(B) or {A[0][2], A[1][2], A[2][2]} <= set(B) \\\nor {A[0][0], A[1][1], A[2][2]} <= set(B) or {A[0][2], A[1][1], A[2][0]} <= set(B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","A1=list(map(int, input().split()))\nA2=list(map(int, input().split()))\nA3=list(map(int, input().split()))\nA=A1+A2+A3\nN=int(input())\ns=set()\nfor _ in range(N):\n  b=int(input())\n  if b in A:\n    s|={A.index(b)}\nbingo=[{0,1,2},{0,3,6},{0,4,8},{1,4,7},{2,5,8},{2,4,6},{3,4,5},{6,7,8}]\nprint(['No','Yes'][any(s>=b for b in bingo)])","A = [list(map(int,input().split())) for i in range(3)]\nn = int(input())\nfor j in range(n):\n  b = int(input())\n  for j in range(3):\n    for k in range(3): \n    \tif b==A[j][k]:\n      \t\tA[j][k]=-1\n\nfor k in range(3):\n  if A[k][:]==[-1,-1,-1]:\n    print('Yes')\n    exit(0)\n \nfor k in range(3):\n  if sum(A[:][k])==[-1,-1,-1]:\n    print('Yes')\n    exit(0)\n \nif (A[0][0]==A[1][1]==A[2][2]==-1)or(A[2][0]==A[1][1]==A[0][2]==-1): \n    print('Yes')\n    exit(0)\n    \nprint('No')","A = [[0]*3 for _ in range(3)]\nfor i in range(3):\n    A[i] = list(map(int,input().split()))\n\nN = int(input())\nB = [0 for i in range(N)]\nfor i in range(N):\n    B[i] = int(input())\n\nBingo = [[False]*3 for _ in range(3)]\nfor k in range(9):\n    i = k \/\/ 3\n    j = k % 3\n    for b in B:\n        if A[i][j] == b:\n            Bingo[i][j] = True\n\nfor i in range(3):\n    if Bingo[i][1] and Bingo[i][2] and Bingo[i][0] == True:\n        print(\"Yes\")\n        exit()\n    if Bingo[1][i] and Bingo[2][i] and Bingo[0][i] == True:\n        print(\"Yes\")\n        exit()\n\nif Bingo[1][1] and Bingo[2][2] and Bingo[0][0] == True:\n    print(\"Yes\")\n    exit()\nif Bingo[0][2] and Bingo[1][1] and Bingo[2][0] == True:\n    print(\"Yes\")\n    exit()\n\nprint(\"No\")\n\n     \n\n\n","a1 = [int(e) for e in input().split()]\na2 = [int(e) for e in input().split()]\na3 = [int(e) for e in input().split()]\nn = int(input())\nbs = []\nfor _ in range(n):\n    bs.append(int(input()))\n\ndef is_bingo(mat,hits):\n    row_pattern = [[mat[i][j] for j in range(3)] for i in range(3)]\n    col_pattern = [[mat[j][i] for j in range(3)] for i in range(3)]\n    cross_patten= [[mat[i][i] for i in range(3)] , [mat[0][2],mat[1][1],mat[2][0]]]\n    if any([set(pattern).issubset(hits) for pattern in row_pattern+col_pattern+cross_patten]):\n        return True\n    return False\n  \nm=[a1,a2,a3]\nprint('Yes' if is_bingo(m,bs) else 'No')","a=list(map(int, input().split()))\nb=list(map(int, input().split()))\nc=list(map(int, input().split()))\nn=int(input())\nl = [list(map(int, input().split())) for _ in range(n)]\nimport numpy as np\ny=np.zeros(9).reshape(3,3)\nfor i in range(n):\n    for x in range(3):\n        if a[x]==l[i][0]:\n            y[0][x]=1\nfor i in range(n):\n    for x in range(3):\n        if b[x]==l[i][0]:\n            y[1][x]=1\nfor i in range(n):\n    for x in range(3):\n        if c[x]==l[i][0]:\n            y[2][x]=1\nif sum(y[0])==3:\n    print('Yes')\nelif sum(y[1])==3:\n    print('Yes')\nelif sum(y[2])==3:\n    print('Yes')\nelif sum(y[1])==3:\n    print('Yes')\nelif y[0][0]+y[1][0]+y[2][0]==3:\n    print('Yes')\nelif y[0][1]+y[1][1]+y[2][1]==3:\n    print('Yes')\nelif y[0][2]+y[1][2]+y[2][2]==3:\n    print('Yes')\nelif y[0][0]+y[1][1]+y[2][2]==3:\n    print('Yes')\nelif y[0][2]+y[1][1]+y[2][0]==3:\n    print('Yes')\nelse:\n    print('No')","A = []\nb = []\nfor i in range(3):\n  A.append(list(map(int, input().split())))\nN = int(input())\nfor i in range(N):\n  b.append(int(input()))\n\nfor i in range(N):\n  for j in range(3):\n    if b[i] in A[j]:\n      A[j][A[j].index(b[i])] = 0\n\nflag = 0\n\nfor i in range(3):\n  if sum(A[i]) == 0:\n    flag = 1\n\nfor i in range(3):\n  if A[0][i] + A[1][i] + A[2][i] == 0:\n    flag = 1\n\nif A[0][0] + A[1][1] + A[2][2] == 0:\n  flag = 1\n\nif A[0][2] + A[1][1] + A[0][2] == 0:\n  flag = 1\n\nif flag == 1:\n  print('Yes')\nelse:\n  print('No')","Ai_j = []\nfor i in range(3):\n    Ai_j.append(list(map(int,input().split())))\nN = int(input())\nnumber_list = []\nfor i in range(N):\n    number_list.append(int(input()))\n'''\nprint(Ai_j)\nprint(N)\nprint(number_list)\n'''\n\nfor x in number_list:\n    for i in range(3):\n        for j in range(3):\n           if  Ai_j[i][j] == x:\n               Ai_j[i][j] = '\u25cb'\n#print(Ai_j)\n\ncount = 0\n\nif Ai_j[0][0] == Ai_j[0][2] == Ai_j[0][1] == '\u25cb': count+=1\nif Ai_j[1][0] == Ai_j[1][2] == Ai_j[1][1] == '\u25cb': count+=1\nif Ai_j[2][0] == Ai_j[2][2] == Ai_j[2][1] == '\u25cb': count+=1\nif Ai_j[0][0] == Ai_j[1][0] == Ai_j[2][0] == '\u25cb': count+=1\nif Ai_j[0][1] == Ai_j[1][1] == Ai_j[2][1] == '\u25cb': count+=1\nif Ai_j[0][2] == Ai_j[1][2] == Ai_j[2][2] == '\u25cb': count+=1\nif Ai_j[0][0] == Ai_j[1][1] == Ai_j[2][2] == '\u25cb': count+=1\nif Ai_j[0][2] == Ai_j[1][1] == Ai_j[2][0] == '\u25cb': count+=1\n\nif count == 0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","import itertools\na = []\ncnt_list = []\nfor _ in range(3):\n    a += map(int, input().split())\nn = int(input())\nfor _ in range(n):\n    b = int(input())\n    for i, j in enumerate(a):\n        if b == j:\n            cnt_list.append(i)\nans = 'No'\nif len(cnt_list) > 2:\n    cnt_list = set(cnt_list)\n    for k in list(itertools.permutations(cnt_list, 3)):\n        if sum(k) % 3 == 0:\n            ans = 'Yes'\nprint(ans)","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\n\nfor i in range(n):\n  b=int(input())\n  for j in range(3):\n    for k in range(3):\n      if a[j][k]==b:\n        a[j][k]=0\n\nans=0\nfor i in range(3):\n  if a[i][0]==0 and a[i][1]==0 and a[i][2]==0:\n    ans=1\n  elif a[0][i]==0 and a[1][i]==0 and a[2][i]==0:\n    ans=1\n\nif a[1][1]==0 and a[2][2]==0 and a[0][0]==0:\n  ans=1\n\nif ans==1:\n  print('Yes')\nelse:\n  print('No')","A = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\n\nmark = []\nfor i in range(N):\n    b = int(input())\n    for j, a in enumerate(A):\n        for k, aa in enumerate(a):\n            if aa == b:\n                mark.append((j,k))\n\n\nif (((0,0) and (0,1) and (0,2)) or ((1,0) and (1,1) and (1,2)) or ((2,0) and (2,1) and (2,2))) in mark:\n    print('Yes')\nelif (( (0,0) and (1,1) and (2,2) ) or ( (0,2) and (1,1) and (2,0) ) ) in mark:\n    print(\"Yes\")\nelif (((0,0) and (1,0) and (2,0)) or ((0,1) and (1,1) and (2,1)) or ((0,2) and (1,2) and (2,2))) in mark:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\nb=[int(input()) for _ in range(n)]\nused=[[False]*3 for _ in range(3)]\nfor k in range(n):\n    for i in range(3):\n        for j in range(3):\n            if a[i][j]==b[k]:\n                used[i][j]==True\n\nfor i in range(3):\n    if used[0][i] and used[1][i] and used[2][i]:\n        print(\"Yes\")\n        exit()\n        \nfor i in range(3):\n    if used[i][0] and used[i][1] and used[i][2]:\n        print(\"Yes\")\n        exit()\n\nif used[0][0] and used[1][1] and used[2][2]:\n        print(\"Yes\")\n        exit()\n\nif used[0][2] and used[1][1] and used[2][0]:\n        print(\"Yes\")\n        exit()                \nprint(\"No\")","one = list(map(int, input().split()))\ntwo = list(map(int, input().split()))\nthree = list(map(int, input().split()))\nn = int(input())\nout = [int(input()) for x in range(n)]\n\n\ndef judge(a_list):\n    for i in a_list:\n        if i not in out:\n            return False\n\n    return True\n\n\nfor_judge = [one, two, three]\n\nfor i in range(3):\n    tmp = [one[i], two[i], three[i]]\n    for_judge.append(tmp)\n\n\nnaname1 = [one[0], two[1], three[2]]\nnaname2 = [one[2], two[1], three[0]]\n\nfor_judge.append(naname1)\nfor_judge.append(naname2)\n\nfor a_list in for_judge:\n    if judge(a_list):\n        print('Yes')\n        exit()\n\nprint('No')\n","a = [input().split() for l in range(3)]\na = [[int(item) for item in row] for row in a]\nN = int(input())\nb = [input() for i in range(n)]\nx = 1\nfor i in range(N):\n  for j in range(3):\n    for k in range(3):\n      if a[j][k] == b[i]:\n        a[j][k] = 0\nfor i in range(3):\n  if a[i][0]*a[i][1]*a[i][2] == 0 | a[0][i]*a[1][i]*a[2][i] == 0:\n    x = 0\nif a[0][0]*a[1][1]*a[2][2] == 0 | a[0][2]*a[1][1]*a[2][0] == 0:\n  x = 0\nif x:\n  print('No')\nelse:\n  print('Yes')\n  ","\nA = [list(map(int, input().split())) for i in range(3)]\nN = int(input())\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if A[j][k] == b:\n                A[j][k] = 0\nif A[0][0] == 0 and A[0][1] == 0 and A[0][2] == 0:\n    print('yes')\nelif A[1][0] == 0 and A[1][1] == 0 and A[1][2] == 0:\n    print('yes')\nelif A[2][0] == 0 and A[2][1] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][0] == 0 and A[1][0] == 0 and A[2][0] == 0:\n    print('yes')\nelif A[0][1] == 0 and A[1][1] == 0 and A[2][1] == 0:\n    print('yes')\nelif A[0][2] == 0 and A[1][2] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][0] == 0 and A[1][1] == 0 and A[2][2] == 0:\n    print('yes')\nelif A[0][2] == 0 and A[1][1] == 0 and A[2][0] == 0:\n    print('yes')\nelse:\n    print('No')","def resolve():\n    A = []\n    for i in range(3):\n        aa = map(int, input().split())\n        A.append(list(aa))\n\n    N = int(input())\n    B = []\n    for i in range(N):\n        bb = int(input())\n        B.append(bb)\n\n    ans = 'No'\n\n    for bbb in list(B):\n        for i in range(3):\n            if A[i][0] == bbb:\n                A[i][0] = 1000\n            if A[i][1] == bbb:\n                A[i][1] = 1000\n            if A[i][2] == bbb:\n                A[i][2] = 1000\n\n    for i in range(3):\n        if A[i][0] == 1000 and A[i][1] == 1000 and A[i][2] == 1000:\n            ans = 'Yes'\n\n    for i in range(3):\n        if A[0][i] == 1000 and A[1][i] == 1000 and A[2][i] == 1000:\n            ans = 'Yes'\n\n    if A[0][0] == 1000 and A[1][1] == 1000 and A[2][2] == 1000:\n        ans = 'Yes'\n    if A[0][2] == 1000 and A[1][1] == 1000 and A[2][0] == 1000:\n        ans = 'Yes'\n\n    print(ans)\n\n\nresolve()","60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34\n","a = []\nfor i in range(3):\n    a += list(map(int, input().split()))\nc = [False] * 9\nn = int(input())\nfor i in range(n):\n    b = int(input())\n    if b in a:\n        c[a.index(b)] = True\nd = [[c[0], c[1], c[2]], [c[3], c[4], c[5]], [c[6], c[7], c[8]], [c[0], c[3], c[6]], [c[1], c[4], c[7]], [c[2], c[5], c[8]], [c[0], c[4], c[8]], [c[2], c[4], c[6]]]\nif [True, True, True] in d:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A=sum([list(map(int,input().split())) for _ in range(3)],[])\nN=int(input())\nb=[int(input()) for _ in range(N)]\nf=0\nfor i in range(9):if A[i]in b:f|=1<<i\nprint('Yes'if sum(f&v==v for v in[7,23,56,84,146,273,292,448])else'No')","# ABC157b\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**6)\n    # \u518d\u5e30\u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u9650\u308aPypy\u3067\u51fa\u3059\u3053\u3068\n    bing = [list(map(int, input().split())) for _ in range(3)]\n    n = int(input())\n    b = [int(input()) for _ in range(n)]\n    for num in b:\n        for i in bing:\n            try:\n                while True:\n                    t = i.index(num)\n                    i[t] = -1\n            except:\n                continue\n    # print(bing)\n\n    naname = [((0, 0), (1, 1), (2, 2)), (2, 0), (1, 1), (0, 2)]\n    if sum(bing[0]) == -3 or sum(bing[1]) == -3 or sum(bing[2]) == -3 or bing[0][0]+bing[0][1]+bing[0][2] == -3 or bing[1][0]+bing[1][1]+bing[1][2] == -3 or bing[2][0]+bing[2][1]+bing[2][2] == -3 or bing[0][0]+bing[1][1]+bing[2][2] == -3 or bing[0][2]+bing[1][1]+bing[2][0] == -3:\n        print('Yes')\n        exit(0)\n\n    print('No')\n\n\nif __name__ == '__main__':\n    main()\n","a1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nn = int(input())\ns = list(map(int, [input() for i in range(n)]))\nl = [\n  [0, 0, 0]\n  , [0, 0, 0]\n  , [0, 0, 0]\n]\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a1[i] == s[j]:\n      l[0][i] = i+1\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a2[i] == s[j]:\n      l[1][i] = i+1\nfor i in range(0, 3):\n  for j in range(0, n):\n    if a3[i] == s[j]:\n      l[2][i] = i+1\nn = []\nfor i in l:\n  for j in i:\n    if j != 0:\n      n.append(j)\ncount = 0\nfor i in range(0, 3):\n  if l[i][0] and l[i][1] and l[i][2]:\n    count += 1\nif (l[0][0] and l[1][1] and l[2][2]) or (l[2][0] and l[1][1] and l[0][2]):\n  count += 1\nelse:\n  for i in range(1, 4):\n    if n.count(i) == 3:\n      count += 1\nprint('Yes' if count >= 1 else 'No')","A=[list(map(int,input().split())) for _ in range(3)]\nN=int(input())\nb=[int(input()) for _ in range(N)]\n\ns=[]\nt=[]\ncross_1=0\ncross_2=0\n\nans=\"No\"\n\nfor i in b:\n    for j in range(3):\n        if i in A[j]:\n            s.append(j)\n            t.append(A[j].index(i))\n            if j==A[j].index(i):\n                cross_1+=1\n            elif j==2-A[j].index(i):\n                cross_2+=1\nfor k in range(3):\n    if s.count(k)==3:\n        ans=\"Yes\"\nfor l in range(3):\n    if t.count(l)==3:\n        ans=0\nif cross_1==3 or cross_2==3:\n    ans=\"Yes\"\n\nprint(ans)\n    \n    \n","# import math\n# import bisect\n# import heapq\n# from collections import deque\n# import numpy as np\n\n# n, m = map(int, input().split())\n\na = [0] * 9\ni = 0\nfor _ in range(3):\n    b,c,d = map(int, input().split())\n    # print(b,c,d)\n    a[i],a[i+1],a[i+2] = b,c,d\n\n    i += 3\n# print(a)\nans = 'No'\n\nn = int(input())\n\nb = [ int(input()) for i in range(n) ]\n# print(b)\nfor i in range(n):\n    for j in range(9):\n        a[j] = -1 if b[i] == a[j] else a[j]\n\npairs = [\n    [0,1,2],[3,4,5],[6,7,8],\n    [0,3,6],[1,4,7],[3,5,8],\n    [0,4,8],[2,4,6]]\n\nfor p in pairs:\n    if a[p[0]] == -1 and a[p[1]] == -1 and a[p[2]] == -1:\n        ans = 'Yes'\n\n\nprint(ans)","import sys\na =[]\na.append(list(map(int,input().split())))\na.append(list(map(int,input().split())))\na.append(list(map(int,input().split())))\nn = int(input())\nb =[]\nfor i in range(n):\n    b.append(int(input()))\n#print(b)\nfor i in range(3):\n    for j in range(3):\n        if a[i][j] in b:\n            a[i][j] = 0","x=list(map(int,input().split()))\ny=list(map(int,input().split()))\nz=list(map(int,input().split()))\nn=int(input())\nX1=3\nY1=3\nZ1=3\nfor i in range(n):\n    b=list(map(int,input().split('\\n')))\n    for j in range(3):\n        if x[j]==b[i]:\n            X1 -= 1\n            if X1==0:\n                print('Yes')\n                exit()\n        elif y[j]==b[i]:\n            Y1 -= 1\n            if Y1==0:\n                print('Yes')\n                exit()\n        elif z[j]==b[i]:\n            Z1 -= 1\n            if Z1==0:\n                print('Yes')\n                exit()\nprint('No')","def solve(A, n, b):\n    for x in b:\n        for i in range(3):\n            for j in range(3):\n                if A[i][j] == x:\n                    A[i][j] = -1\n    for i in range(3):\n        ok = True\n        for j in range(3):\n            if A[i][j] != -1:\n                ok = False\n                break\n        if ok:\n            return \"Yes\"\n    for j in range(3):\n        ok = True\n        for i in range(3):\n            if A[i][j] != -1:\n                ok = False\n                break\n        if ok:\n            return \"Yes\"\n    ok = True\n    for i in range(3):\n        if A[i][i] != -1:\n            ok = False\n    if ok:\n        return \"Yes\"\n    ok = True\n    for i in range(3):\n        if A[2-i][i] != -1:\n            ok = False\n    if ok:\n        return \"Yes\"\n    return \"No\"\n\nA = [list(map(int, input().split())) for i in range(3)]\nn = int(input())\nb = [int(input()) for i in range(n)]\nprint(solve(A, n, b))","A = [list(map(int, input().split())) for _ in range(3)]\nN = int(input())\n\n\nfor _ in range(N):\n    B = int(input())\n    for i in range(3):\n      for j in range(3):\n          if A[i][j] == B:\n              A[i][j] == 0\n        \nbingo = False\nfor row in A:\n  if sum(row) == 0:\n    bingo = True\nfor col in zip(*A):\n  if sum(col) == 0:\n    bingo= True\nif sum(A[i][i] for i in range(3) )== 0:\n  bingo =True\nif sum(A[i][3 - i - 1] for i in range(3)) == 0:\n  bingo = True\n  \nprint(\"Yes\" if bingo == True else \"No\")","# \u30d3\u30f3\u30b4\u30ab\u30fc\u30c9\nbingo_card = list()\nfor i in range(3):\n    bingo_card.append(input().split(' '))\n# \u5f15\u3044\u305f\u56de\u6570\npick_count = int(input().strip())\n# \u5f15\u3044\u305f\u756a\u53f7\npicked_number = list()\nfor j in range(pick_count):\n    picked_number.append(input().strip())\n\n# \u30d3\u30f3\u30b4\u6210\u7acb\u6761\u4ef6\nbingo_line = list()\n# \u6a2a\nfor i in range(3):\n    bingo_line.append(bingo_card[i-1])\n# \u7e26\nbingo_line.append([bingo_card[0][0], bingo_card[1][0], bingo_card[2][0]])\nbingo_line.append([bingo_card[0][1], bingo_card[1][1], bingo_card[2][1]])\nbingo_line.append([bingo_card[0][2], bingo_card[1][2], bingo_card[2][2]])\n# \u659c\u3081\nbingo_line.append([bingo_card[0][0], bingo_card[1][1], bingo_card[2][2]])\nbingo_line.append([bingo_card[0][2], bingo_card[1][1], bingo_card[2][0]])\n\nestablished_line = [line for line in bingo_line if len(set(line) & set(picked_number)) == 3]\nprint('Yes' if len(established_line) > 0 else 'No')\n","# -*- coding: utf-8 -*-\n\n#############\n# Libraries #\n#############\n\nimport math\nfrom functools import lru_cache\n\n#############\n# Constants #\n#############\n\nMOD = 10**9 +7\nINF = float('inf')\n\n#############\n# Functions #\n#############\n\nkaijo_memo = []\ndef kaijo(n):\n  if(len(kaijo_memo) > n):\n    return kaijo_memo[n]\n  if(len(kaijo_memo) == 0):\n    kaijo_memo.append(1)\n  while(len(kaijo_memo) <= n):\n    kaijo_memo.append(kaijo_memo[-1] * len(kaijo_memo) % MOD)\n  return kaijo_memo[n]\n\ngyaku_kaijo_memo = []\ndef gyaku_kaijo(n):\n  if(len(gyaku_kaijo_memo) > n):\n    return gyaku_kaijo_memo[n]\n  if(len(gyaku_kaijo_memo) == 0):\n    gyaku_kaijo_memo.append(1)\n  while(len(gyaku_kaijo_memo) <= n):\n    gyaku_kaijo_memo.append(gyaku_kaijo_memo[-1] * pow(len(gyaku_kaijo_memo),MOD-2,MOD) % MOD)\n  return gyaku_kaijo_memo[n]\n\ndef nCr(n,r):\n  if(n == r):\n    return 1\n  if(n < r or r < 0):\n    return 0\n  ret = 1\n  ret = ret * kaijo(n) % MOD\n  ret = ret * gyaku_kaijo(r) % MOD\n  ret = ret * gyaku_kaijo(n-r) % MOD\n  return ret\n\ndef factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n    return arr\n\n#############\n# Main Code #\n#############\n\na,b,c = list(map(int,input().split()))\nd,e,f = list(map(int,input().split()))\ng,h,i = list(map(int,input().split()))\n\nbingo = [a,b,c,d,e,f,g,h,i]\n\n\ncheck = [0,0,0,0,0,0,0,0,0]\n\nN = int(input())\nfor i in range(N):\n  z = int(input())\n  for j in range(9):\n    if bingo[j] == z:\n      check[j] = 1\n      \nis_bingo = 0\n\nif check[0] and check[1] and check[2]:\n  is_bingo = 1\nif check[3] and check[4] and check[5]:\n  is_bingo = 1\nif check[6] and check[7] and check[8]:\n  is_bingo = 1\nif check[0] and check[3] and check[6]:\n  is_bingo = 1\nif check[1] and check[4] and check[7]:\n  is_bingo = 1\nif check[2] and check[5] and check[8]:\n  is_bingo = 1\nif check[0] and check[4] and check[8]:\n  is_bingo = 1\nif check[2] and check[4] and check[6]:\n  is_bingo = 1\n\n  \nif is_bingo:\n  print(\"Yes\")\nelse:\n  print(\"No\")","a=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\n\nfor i in range(n):\n  b=int(input())\n  for j in range(3):\n    for k in range(3):\n      if b==a[j][k]:\n        a[j][k]=0\n\nif a[0][0]==a[0][1]==a[0][2] or a[1][0]==a[1][1]==a[1][2] or a[2][0]==a[2][1]==a[2][2]\\\nor a[0][0]==a[1][0]==a[2][0] or a[0][1]==a[1][1]==a[2][1] or a[0][2]==a[1][2]==a[2][2]\\\nor a[0][0]==a[1][1]==a[2][2] or a[2][0]==a[1][1]==a[0][2]:\n  print(\"Yes\")\nelse:\n  print(\"No\")","ary = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\na1 = list(map(int, input().split()))\na2 = list(map(int, input().split()))\na3 = list(map(int, input().split()))\nn = int(input())\nwhile n > 0:\n    num = int(input())\n    if num == a1[0]:\n        ary[0][0] = 1\n    if num == a1[1]:\n        ary[0][1] = 1\n    if num == a1[2]:\n        ary[0][2] = 1\n    if num == a2[0]:\n        ary[1][0] = 1\n    if num == a2[1]:\n        ary[1][1] = 1\n    if num == a2[2]:\n        ary[1][2] = 1\n    if num == a3[0]:\n        ary[2][0] = 1\n    if num == a3[1]:\n        ary[2][1] = 1\n    if num == a3[2]:\n        ary[2][2] = 1\n    n = n - 1\nif (ary[0][0] == 1 and ary[0][1] == 1 and ary[0][2] == 1) or\\\n   (ary[1][0] == 1 and ary[1][1] == 1 and ary[1][2] == 1) or\\\n   (ary[2][0] == 1 and ary[2][1] == 1 and ary[2][2] == 1) or\\\n   (ary[0][0] == 1 and ary[1][0] == 1 and ary[2][0] == 1) or\\\n   (ary[0][1] == 1 and ary[1][1] == 1 and ary[2][1] == 1) or\\\n   (ary[0][2] == 1 and ary[1][2] == 1 and ary[2][2] == 1) or\\\n   (ary[0][0] == 1 and ary[1][1] == 1 and ary[2][2] == 1) or\\\n   (ary[0][2] == 1 and ary[1][1] == 1 and ary[2][0] == 1):\n    print('Yes')\nelse:\n    print('No')\n","A = []\nA_1 = list(map(int,input().split()))\nA_2 = list(map(int,input().split()))\nA_3 = list(map(int,input().split()))\nA.append(A_1)\nA.append(A_2)\nA.append(A_3)\nB = []\ncheck=0\nBingocountR=0\nBingocountG=0\nN = int(input())\nArrayBingo =[[0,0,0],[0,0,0],[0,0,0]]\nfor i in range(N):\n    B.append(int(input()))\nfor j in range (3):\n    for k in range (3):\n        for l in range (N):\n            if A[j][k]==B[l]:\n                ArrayBingo[j][k]=1\nfor i in range(3):\n    for j in range(3):\n        if ArrayBingo[j][i]==1:\n            BingocountR+=1\n            if BingocountR ==3:\n                check+=1\n    BingocountR = 0\nfor i in range(3):\n    for j in range(3):\n        if ArrayBingo[i][j]==1:\n            BingocountG+=1\n            if BingocountG ==3:\n                check+=1\n    BingocountG = 0\nif (ArrayBingo[0][0] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][2] == 1) or (ArrayBingo[0][2] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][0] == 1):\n    check += 1\nif check>0:\n    print('Yes')\nelse:\n    print('No')\n    ","\/\/Generated at 2020-03-01 20:59:55 UTC+8\n\/\/Created by Alphagocc\n#include<bits\/stdc++.h>\n#ifdef USE_PBDS\n#include<ext\/pb_ds\/assoc_container.hpp>\n#include<ext\/pb_ds\/priority_queue.hpp>\n#endif\n#define FORCE_INLINE __inline__ __attribute__((always_inline))\nclass IO\n{\nstatic const int bufSize=1<<18;char inBuf[bufSize],outBuf[bufSize];char*ip1=inBuf,*ip2=inBuf;int goodReadBit=0,op1=-1,op2=bufSize-1;\ntemplate <typename T>FORCE_INLINE void __RI(T&x){int ch=gc(),neg=1;x=0;for(;!(isdigit(ch)||ch=='-'||ch==EOF);ch=gc());if(ch==EOF){goodReadBit=0;return;}if(ch=='-')neg=-1,ch=gc();for(;isdigit(ch);ch=gc())x=x * 10 +(ch - 48) * neg;}\ntemplate <typename T>FORCE_INLINE void __RC(T&x){unsigned char ch;while(isspace(ch=gc()));x=ch;}\nFORCE_INLINE void __RS(std::string&x){char ch;x.clear();for(ch=gc();isspace(ch);ch=gc());if(ch==EOF){goodReadBit=0;return;}for(;!isspace(ch);ch=gc())x.push_back(ch);}\npublic:\nFORCE_INLINE int gc(){return ip1==ip2 &&(ip2 =(ip1=inBuf)+fread(inBuf,1,bufSize,stdin),ip1==ip2)? EOF: *ip1++;}\nFORCE_INLINE void R(char&x){__RC(x);}FORCE_INLINE void R(unsigned char&x){__RC(x);}FORCE_INLINE void R(std::string&x){__RS(x);}\ntemplate <typename T1,typename T2>FORCE_INLINE void R(std::pair<T1,T2>&x){R(x.first),R(x.second);}template <typename T>FORCE_INLINE void R(std::vector<T>&x){for(auto it=x.begin();it != x.end();++it)R(*it);}\ntemplate <typename T,typename...Args>FORCE_INLINE void RA(T*a,int n){for(int i=0;i < n;++i)R(a[i]);}template <typename T,typename...Args>FORCE_INLINE void R(T&x,Args&...args){R(x),R(args...);}\ntemplate <typename T,typename...Args>FORCE_INLINE void RA(T*a,int n,Args...args){for(int i=0;i < n;++i)RA(a[i],args...);}template <typename T>FORCE_INLINE void R(T&x){static_assert(std::is_integral<T>::value,\"Unsupported types\");if(std::is_integral<T>::value)__RI(x);}\nprivate:\nchar space;template <typename T>FORCE_INLINE void __WI(T x){static char buf[64];static int len=-1;if(x >= 0){do{buf[++len]=x % 10+48,x \/= 10;} while(x);} else{pc('-');do{buf[++len]=-(x%10)+48,x\/=10;}while(x);}while(len>=0){pc(buf[len]),--len;}}\npublic:\nFORCE_INLINE void pc(const char&x){if(op1==op2)flush();outBuf[++op1]=x;}\nFORCE_INLINE void flush(){fwrite(outBuf,1,op1+1,stdout),op1=-1;}FORCE_INLINE void W(const char&x){pc(x);}FORCE_INLINE void W(const char* x){while(*x!='\\0')pc(*(x++));}FORCE_INLINE void W(const std::string&x){W(x.c_str());}\ntemplate <typename T>FORCE_INLINE void W(const std::vector<T>&x){for(auto it=x.begin();it != x.end();it++)WS(*it);WL();}FORCE_INLINE void WL(){W('\\n');}\ntemplate <typename T>FORCE_INLINE void WL(const T&x){W(x),W('\\n');}FORCE_INLINE void WS(){W(' ');}\ntemplate <typename T>FORCE_INLINE void WS(const T&x){W(x),W(space);}\ntemplate <typename T>FORCE_INLINE void WA(T* a,int n){for(int i=0;i < n;i++)WS(a[i]);WL();}\ntemplate <typename T,typename...Args>FORCE_INLINE void W(const T&x,const Args&...args){W(x),W(space),W(args...);}\ntemplate <typename...Args>FORCE_INLINE void WL(const Args&...args){W(args...),W('\\n');}\ntemplate <typename T,typename...Args>FORCE_INLINE void WA(T* a,int n,Args...args){for(int i=0;i < n;i++)WA(a[i],args...);}\ntemplate <typename T>FORCE_INLINE void W(const T&x){static_assert(std::is_integral<T>::value,\"Unsupported types\");if(std::is_integral<T>::value)__WI(x);}\ntemplate <typename T>FORCE_INLINE IO&operator>>(T&x){R(x);return(*this);}\ntemplate <typename T>FORCE_INLINE IO&operator<<(const T&x){W(x);return(*this);}IO(){space=' ';}\n} io;\nnamespace Alphagocc{decltype(std::chrono::high_resolution_clock::now()) tStart;};void TimeBegin(){Alphagocc::tStart=std::chrono::high_resolution_clock::now();}long long TimeEnd(){return(std::chrono::high_resolution_clock::now() - Alphagocc::tStart).count();} \/\/ namespace Alphagocc\nusing namespace std;\n#define REP(i,x,y) for(int i=x;i < y;i++)\nconst int8_t INFC=0x3f;\nconst int16_t INFS=0x3f3f;\nconst int32_t INF=0x3f3f3f3f;\nconst int64_t INFL=0x3f3f3f3f3f3f3f3fLL;\n\nnamespace Alphagocc\n{\nint MAIN()\n{\n    int n = 3;\n    set<int> s;\n    for (int i = 0; i < n * n; i++) {\n        int x;\n        io >> x;\n        s.insert(x);\n    }\n    int q;\n    io >> q;\n    while (q--) {\n        int x;\n        io >> x;\n        if (s.count(x)) {\n            io.WL(\"YES\"), io.flush();\n            return 0;\n        }\n    }\n    io.WL(\"NO\");\n    io.flush();\n    return 0;\n}\n} \/\/ namespace Alphagocc\nint main() { return Alphagocc::MAIN(); }","A = []\n[A.extend(map(int, input().split())) for _ in range(3)]\nN = int(input())\nB = [int(input()) for _ in range(N)]\nfor b in B:\n    try:\n        i = A.index(b)\n        A[i] = 0\n    except:\n        pass\nlines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n]\nans = \"No\"\nfor line in lines:\n    a, b, c = line\n    if A[a] == 0 and A[a] == A[b] and A[a] == A[c]:\n        ans = \"Yes\"\nprint(ans)\n","a1_1, a1_2, a1_3 = map(int, input().split())\na2_1, a2_2, a2_3 = map(int, input().split())\na3_1, a3_2, a3_3 = map(int, input().split())\na_list=[a1_1, a1_2, a1_3, a2_1, a2_2, a2_3, a3_1, a3_2, a3_3]\nn = int(input())\nb=[]\nfor i in range(n):\n  b_i = int(input())\n  b.append(b_i)\n  for j, a_j in enumerate(a_list):\n    if a_j == b_i:\n      a_list[j] = -1\n    \nif ((a_list[0]==-1 and a_list[3] == -1 and a_list[6] == -1) or\n    (a_list[1]==-1 and a_list[4] == -1 and a_list[7] == -1) or\n    (a_list[2]==-1 and a_list[5] == -1 and a_list[8] == -1) or\n\t(a_list[0]==-1 and a_list[4] == -1 and a_list[8] == -1) or\n\t(a_list[2]==-1 and a_list[4] == -1 and a_list[6] == -1)):\n  print(\"YES\")\nelse:\n  print(\"NO\")","a=open(0).read().split();print('YNeos'[all(t-set(map(a.index,a[10:]))for t in({0,3,6},{0,4,8},{2,4,6},{2,5,8},{3,4,5},{6,7,8}))::2])","A = []\nfor i in range(3):\n    a = list(map(int,input().split()))\n    A.extend(a)\nn = int(input())\nB = [0]*9\nfor i in range(n):\n    b = int(input())\n    for i in range(9):\n        if A[i] == b:\n            B[i] = 1\nans = 0\nfor i in range(3):\n    if B[i*3] == B[i*3+1] == B[i*3+2] == 1:\n        ans = 1\n    if B[i] == B[i+3] == B[i+6] == 1:\n        ans = 1\n    if B[0] == B[4] == B[8] == 1:\n        ans = 1\n    if B[2] == B[4] == B[6] == 1:\n        ans = 1\nif ans == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")","# input()\n# int(input())\n# map(int, input().split())\n# list(map(int, input().split()))\n# list(map(int, list(input()))) # \u30b9\u30da\u30fc\u30b9\u304c\u306a\u3044\u6570\u5b57\u30ea\u30b9\u30c8\u3092\u8aad\u307f\u8fbc\u307f\nimport math\nimport fractions\nimport sys\nimport bisect\nimport heapq  # \u512a\u5148\u5ea6\u4ed8\u304d\u30ad\u30e5\u30fc(\u6700\u5c0f\u5024\u53d6\u308a\u51fa\u3057)\nimport collections\nfrom collections import Counter\nfrom collections import deque\nimport pprint\nimport itertools\n\nsr = lambda: input()\nir = lambda: int(sr())\nlr = lambda: list(map(int, sr().split()))\n\n\"\"\"n\u3092\u7d20\u56e0\u6570\u5206\u89e3\"\"\"\n\"\"\"2\u4ee5\u4e0a\u306e\u6574\u6570n => [[\u7d20\u56e0\u6570, \u6307\u6570], ...]\u306e2\u6b21\u5143\u30ea\u30b9\u30c8\"\"\"\n\n\ndef factorization(n):\n    arr = []\n    temp = n\n    if n == 1:\n        return arr\n\n    for i in range(2, int(-(-n ** 0.5 \/\/ 1)) + 1):\n        if temp % i == 0:\n            cnt = 0\n            while temp % i == 0:\n                cnt += 1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp != 1:\n        arr.append([temp, 1])\n\n    if arr == []:\n        arr.append([n, 1])\n\n    return arr\n\n\n# a^n\ndef power(a, n, mod):\n    x = 1\n    while n:\n        if n & 1:\n            x *= a % mod\n        n >>= 1\n        a *= a % mod\n    return x % mod\n\n\n# n*(n-1)*...*(l+1)*l\ndef kaijo(n, l, mod):\n    if n == 0:\n        return 1\n    a = n\n    tmp = n - 1\n    while (tmp >= l):\n        a = a * tmp % mod\n        tmp -= 1\n    return a\n\n# Union Find\nclass UnionFind():\n    def __init__(self, n):\n        self.n = n\n        self.parents = [-1] * n\n\n    def find(self, x):\n        if self.parents[x] < 0:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.parents[x] > self.parents[y]:\n            x, y = y, x\n\n        self.parents[x] += self.parents[y]\n        self.parents[y] = x\n\n    def size(self, x):\n        return -self.parents[self.find(x)]\n\n    def same(self, x, y):\n        return self.find(x) == self.find(y)\n\n    def members(self, x):\n        root = self.find(x)\n        return [i for i in range(self.n) if self.find(i) == root]\n\n    def roots(self):\n        return [i for i, x in enumerate(self.parents) if x < 0]\n\n    def group_count(self):\n        return len(self.roots())\n\n    def all_group_members(self):\n        return {r: self.members(r) for r in self.roots()}\n\n    def __str__(self):\n        return '\\n'.join('{}: {}'.format(r, self.members(r)) for r in self.roots())\n\n# \u7d04\u6570\u751f\u6210\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n \/\/ i:\n                divisors.append(n\/\/i)\n\n    divisors.sort()\n    return divisors\n\n\ninf = 10 ** 18\nmod = 10 ** 9 + 7\n\na_list = []\na = []\nc = [False for i in range(9)]\nfor i in range(3):\n    a_list = lr()\n    for num in a_list:\n        a.append(num)\nn = int(input())\nfor i in range(n):\n    num = ir()\n    if num in a:\n        index = a.index(num)\n        c[index] = True\n\nif (c[0] and c[3] and c[6]) or (c[1] and c[4] and c[7]) or (c[2] and c[5] and c[8]) or (c[0] and c[1] and c[2]) or (c[3] and c[4] and c[5]) or (c[6] and c[7] and c[8]) or (c[0] and c[4] and c[8]) or (c[2] and c[4] and c[6]):\n    print('Yes')\nelse:\n    print('No')","\ndate = []\ndict = {}\nflag = 0\nfor i in range(3):\n    temp = [int(j) for j in input().split()]\n    date.append(temp)\nN = int(input())\n\nfor i in date:\n    for j in i:\n        dict[j] = 0\n\nfor i in  range(N):\n    m = int(input())\n    for j in date:\n        if m in j:\n            dict[m] = 1\nindex = list(dict.values())\nli = []\nli.append(index[0:3])\nli.append(index[3:6])\nli.append(index[6:9])\nprint(li)\nif li[0][0] == 1 and li[0][1]==1 and li[0][2]==1:\n    flag = 1\nif li[1][0] == 1 and li[1][1]==1 and li[1][2]==1:\n    flag = 1\nif li[2][0] == 1 and li[2][1]==1 and li[2][2]==1:\n    flag = 1\nif li[0][0] == 1 and li[1][0]==1 and li[2][0]==1:\n    flag = 1\nif li[0][1] == 1 and li[1][1]==1 and li[2][1]==1:\n    flag = 1\nif li[0][2] == 1 and li[1][2]==1 and li[2][2]==1:\n    flag = 1\nif li[0][0] == 1 and li[1][1]==1 and li[2][2]==1:\n    flag = 1\nif li[0][2] == 1 and li[1][1]==1 and li[2][0]==1:\n    flag = 1\n\nif flag == 1:\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","a = [list(map(int, input().split())) for _ in range(3)]\nn = int(input())\nb = set([int(input()) for _ in range(n)])\n\ntate = [[(i,j) for i in range(3)] for j in range(3)]\nnaname = [[(i,i) for i in range(3)], [(i,2 - i) for i in range(3)]]\n\natari = set()\nfor i in range(3):\n    for j in range(3):\n        if a[i][j] in b:\n            atari.add((i, j))\n\nif len(atari) < 3:\n    print('No')\nelse:        \n    for i in range(3):\n        if (a[i][0] in atari and a[i][1] in atari and a[i][2] in atari) or (tate[i][0] in atari and tate[i][1] in atari and tate[i][2] in atari):\n            print('Yes')\n            exit()\n    \n    for i in range(2):\n        if naname[i][0] in atari and naname[i][1] in atari and naname[i][2] in atari:\n            print('Yes')\n            exit()\n    \n    print('No')\n    \n        \n","Array = [list(map(int,input().split())) for _ in range(3)]\nArrayBingo = [[0,0,0],[0,0,0,],[0,0,0]]\nN = int(input())\nB = []\ncheckR = 0\ncheckG = 0\ncheckN = 0\nfor i in range (N):\n    B.append(int(input()))\nfor l in range (N):\n    for j in range (3):\n        for k in range (3):\n            if Array[j][k]==B[l]:\n                ArrayBingo[j][k]=1\nfor i in range (3): \n    if (ArrayBingo[i][0] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR=4\n    if checkR !=4:\n        checkR=0\nfor i in range (3): \n    if (ArrayBingo[i][1] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR=4\nif checkR!=4    \n    checkR=0\nfor i in range (3): \n    if (ArrayBingo[i][2] == 1):\n        checkR+=1\nif checkR ==3:\n    print('Yes')\n    checkR =4\nelse:\n    checkR=0\nfor j in range (3):\n    if (ArrayBingo[0][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nif checkG !=4:\n    checkG=0\nfor j in range (3):\n    if (ArrayBingo[1][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nif checkG !=4:\n    checkG=0\nfor j in range (3):    \n    if (ArrayBingo[2][j] == 1):\n        checkG+=1\nif checkG ==3:\n    print('Yes')\n    checkG =4\nelse:\n    checkG=0\nif (ArrayBingo[0][0] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][2] == 1) or (ArrayBingo[0][2] == 1 and ArrayBingo[1][1] == 1 and ArrayBingo [2][0] == 1):\n    checkN = 1\nelse:\n    checkN = 0\nif checkR != 4 and checkG !=4 and checkN==1:\n    print('Yes')\nif checkR == 0 and checkG ==0 and checkN==0:\n    print('No')\n","from sys import stdin\nli = [list(map(int,stdin.readline().rstrip().split())) for _ in range(3)]\nlin = []\nfor i in range(3):\n    for j in range(3):\n        lin.append(li[i][j])\nn = int(stdin.readline().rstrip())\nlis = [int(stdin.readline().rstrip()) for _ in range(n)]\nliv = []\nfor i in lin:\n    if i in lis:\n        liv.append(0)\n    else:\n        liv.append(1)\nif liv[0:3] == [0,0,0] or liv[3:6] == [0,0,0] or liv[6:9] == [0,0,0]:\n    print(\"Yes\")\n    exit()\nfor i in range(3):\n    if liv[3*i] == 0 and liv[3*i+1] == 0 and liv[3*i+2] == 0:\n        print(\"Yes\")\n        exit()\nif liv[0] == 0 and liv[4] == 0 and liv[8] == 0:\n    print(\"Yes\")\n    exit()\nif liv[2] == 0 and liv[4] == 0 and liv[6] == 0:\n    print(\"Yes\")\n    exit()\nprint(\"No\")","#ABC157.B\nA1 = list(map(int,input().split()))\nA2 = list(map(int,input().split()))\nA3 = list(map(int,input().split()))\nN = int(input())\nb = [int(input())for _ in range(N)]\nif (A1[0] in b)and (A1[1]in b)and (A1[2] in b):\n    print('Yes')\nelif (A2[0]in b)and(A2[1] in b)and(A2[2]in b):\n    print('Yes')\nelif (A3[0]in b)and(A3[1]in b)and (A3[2]in b):\n    print('Yes')\nelif (A1[0]in b)and(A2[0]in b)and(A3[0]in b):\n    print('Yes')\nelif (A1[1]in b)and (A2[1]in b)and(A3[1]in b):\n    print('Yes')\nelif (A1[2] in b)and (A2[2]in b)and(A3[2]in b):\n    print('Yes')\nelif (A1[0]in b)and (A2[1]in b)and(A3[2]in b):\n    print('Yes')\nelif (A1[2]in b)and (A2[1]in b)and(A3[0]in b):\n    print('Yes')\nelse:\n    print('No')","A1 = list(map(int, input().split()))\nA2 = list(map(int, input().split()))\nA3 = list(map(int, input().split()))\nN = int(input())\n\n\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        if A1[j] == b:\n            A1[j] = 0\n        if A2[j] == b:\n            A2[j] = 0\n        if A3[j] == b:\n            A3[j] = 0\n\nf = 0\n\nif A1[0] == 0 and A1[1] == 0 and A1[2] == 0:\n    f = 1\nif A2[0] == 0 and A2[1] == 0 and A2[2] == 0:\n    f = 1\nif A3[0] == 0 and A3[1] == 0 and A3[2] == 0:\n    f = 1\nif A1[0] == 0 and A2[0] == 0 and A3[0] == 0:\n    f = 1\nif A1[1] == 0 and A2[1] == 0 and A3[1] == 0:\n    f = 1\nif A1[2] == 0 and A2[2] == 0 and A3[2] == 0:\n    f = 1\nif A1[0] == 0 and A2[1] == 0 and A3[2] == 0:\n    f = 1\nif A1[2] == 0 and A2[1] == 0 and A3[0] == 0:\n    f = 1\nif f == 1:\n    print('Yes')\nelse:\n    print('No')\n","def IsBingo(arr_9):\n    BINGO=['x','x','x']\n    C1=arr_9[0::2]\n    C2=arr_9[1::2]\n    C3=arr_9[2::2]\n    X1=[arr_9[0],arr_9[4],arr_9[8]]\n    X2=[arr_9[2],arr_9[4],arr_9[6]]\n    if arr_9[:3]==BINGO or arr_9[3:6]==BINGO or arr_9[6:]==BINGO or C1==BINGO or C2==BINGO or C3==BINGO or X1==BINGO or X2==BINGO:\n        return 'BINGO'\n\n\nA1=list(input().split())\nA2=list(input().split())\nA3=list(input().split())\nA=A1+A2+A3\nN=int(input())\nfor _ in range(N):\n    n=input()\n    if A.count(n)==1:\n        A[A.index(n)]=\"x\"\n# A1=A[:3]\n# A2=A[3:6]\n# A3=A[6:]\n# print(A1,A2,A3)\n\nif IsBingo(A)=='BINGO':\n    print('Yes')\nelse:\n    print('No')","import itertools\na = []\ncnt_list = []\nfor _ in range(3):\n    a += map(int, input().split())\nn = int(input())\nfor _ in range(n):\n    b = int(input())\n    for i, j in enumerate(a):\n        if b == j:\n            cnt_list.append(i)\nans = 'No'\nif len(cnt_list) > 2:\n    for k in list(itertools.permutations(cnt_list, 3)):\n        if sum(k) % 3 == 0:\n            ans = 'Yes'\nprint(ans)","l = list(map(int, input().split()))\nl += list(map(int, input().split()))\nl += list(map(int, input().split()))\nn = int(input())\nfor i in range(n):\n  b = int(input())\n  if b in l:\n    index = l.index(b)\n    l[index] = 0\nif l[0] == l[1] == l[2] or l[3] == l[4] == l[5] or l[6] == l[7] == l[8] or l[0] == l[3] == l[6] or l[1] == l[4] == l[7] or l[2] == l[5] == l[8] or l[0] == l[4] == l[8] or l[2] == l[4] == l[6]:\n  print(\"Yes\")\nelse:\n  print(\"No\")","List_A = [list(map(int,input().split())) for i in range(3)] # [[1,2],[3,4],[5,6]]\nN = int(input()) # \u6570\u5b57\u3092\u5909\u6570\u306b\u683c\u7d0d\nList_B = [int(input()) for i in range(N)] # \u8907\u6570\u306e\u6570\u5b57\u3092\u30ea\u30b9\u30c8\u306b\u683c\u7d0d # [1,2,3]\n\nList_C = [[0,0,0] for i in range(3)]\n\nfor i in range(N):\n    for j in range(3):\n        for k in range(3):\n            if List_B[i] == List_A[j][k]:\n                List_C[j][k] = 1\n                \nresult = 'No'\n\nfor i in range(3):\n    if List_C[i][0] * List_C[i][1] * List_C[i][2] == 1:\n        result = 'Yes'\n    if List_C[0][i] * List_C[1][i] * List_C[2][i] == 1:\n        result = 'Yes'\n    if List_C[0][0] * List_C[1][1] * List_C[2][2] == 1:\n        result = 'Yes'\n    if List_C[0][2] * List_C[1][1] * List_C[2][0] == 1:\n        result = 'Yes'\n\nprint(result)","A = [[int(i) for i in input().split()] for _ in range(3)]\nB = [[False, False, False], [False, False, False], [False, False, False]]\nN = int(input())\nfor i in range(N):\n    b = int(input())\n    for j in range(3):\n        for k in range(3):\n            if A[j][k]==b:\n                B[j][k]=True\nfor r in B:\n    if all(r):\n        print(\"Yes\")\n        quit()\n\nfor c in zip(*B):\n    if all(c):\n        print(\"Yes\")\n        quit()\n# print(B)\nif (B[0][0] and B[1][1] and B[2][2]) or (B[0][2] and B[1][1] and B[2][0]):\n    print(\"Yes\")\n    quit()\n\nprint(\"No\")","a1 = list(map(int,input().split()))\na2 = list(map(int,input().split()))\na3 = list(map(int,input().split()))\nrow = int(input())\ndetame = [int(input()) for i in range(row)]\nbingo = 0\nif (a1[0]) in detame and (a1[1]) in detame and (a1[2]) in detame:\n    bingo=bingo+1\nelif (a2[0]) in detame and (a2[1]) in detame and (a2[2]) in detame:\n    bingo=bingo+1\nelif (a3[0]) in detame and (a3[1]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[0]) in detame and (a2[0]) in detame and (a3[0]) in detame:\n    bingo=bingo+1\nelif (a1[1]) in detame and (a2[1]) in detame and (a3[1]) in detame:\n    bingo=bingo+1\nelif (a1[2]) in detame and (a2[2]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[0]) in detame and (a2[1]) in detame and (a3[2]) in detame:\n    bingo=bingo+1\nelif (a1[2]) in detame and (a2[1]) in detame and (a3[0]) in detame:\n    bingo=bingo+1\nif bingo==0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A = []\nfor i in range(3):\n    a1,a2,a3 = list(map(int,input().split()))\n    Ai = [a1,a2,a3]\n    A.extend(Ai)\nn = int(input())\nana = []\nfor i in range(n):\n    b = int(input())\n    if b in A:\n        idx = A.index(b)\n        ana.append(idx)\natari = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,7]]\njudje = False\nfor i in range(len(atari)):\n    if (atari[i][0] in ana and atari[i][1] in ana)  and atari[i][1] in ana:\n        judje = True\n        break\nif judje == True:    \n    print(\"Yes\")\nelse:\n    print(\"No\")","row1 = list(map(int,input().split()))\nrow2 = list(map(int,input().split()))\nrow3 = list(map(int,input().split()))\n\nn = int(input())\nnums = []\nans = \"No\"\n\nfor i in range(0, n):\n  nums.append(int(input()))\n  \nfor i in range(0,3):\n  if row1[i] in nums: row1[i] == \"O\"\n  if row2[i] in nums: row2[i] == \"O\"\n  if row3[i] in nums: row3[i] == \"O\"\n    \n#Columns\nfor i in range(0,3):\n  if row1[i] == row2[i] == row3[i]: ans = \"Yes\"\n    \n#Rows\nif row1 == [\"O\",\"O\",\"O\"] or row2 == [\"O\",\"O\",\"O\"] or row3 == [\"O\",\"O\",\"O\"]: ans = \"Yes\"\n  \n#Diagonals\nif row1[0] == row2[1] == row3[2] or row1[2] == row2[1] == row3[0]: ans = \"Yes\"\n  \nprint(ans)","A=[list(map(int,input().split())) for _ in range(3)]\nn=int(input())\nB=[int(input()) for _ in range(n)]\n\nbingo=[[0]*3 for _ in range(3)]\nfor i in range(n):\n  for ai in range(3):\n    for aj in range(3):\n      if A[ai][aj]==B[i]:\n        bingo[ai][aj]=1\nflag=False\nif bingo[0][0]==bingo[0][1]==bingo[0][2]==1: flag=True\nif bingo[1][0]==bingo[1][1]==bingo[1][2]==1: flag=True\nif bingo[2][0]==bingo[2][1]==bingo[2][2]==1: flag=True\n  \nif bingo[0][0]==bingo[1][0]==bingo[2][0]==1: flag=True\nif bingo[0][1]==bingo[1][1]==bingo[2][1]==1: flag=True\nif bingo[0][2]==bingo[1][2]==bingo[2][2]==1: flag=True\n  \nif bingo[0][0]==bingo[1][1]==bingo[2][2]==1: flag=True\nif bingo[0][2]==bingo[1][1]==bingo[2][0]==1: flag=True\nif flag:\n  print('Yes')\nelse:\n  print('No')","A=[list(map(int,input().split())) for i in range(3)]\nn=int(input())\n\nfor i in range(n):\n  o=int(input())\n  for x in range(3):\n    for y in range(3):\n      if o == A[x][y]:\n        A[x][y]=-1\nfor x in range(3):\n  if A[x][0]==-1:\n    f=True\n    for y in range(3):\n      if A[x][y]!=-1:\n        f=False\n        if f:\n          print('Yes')\n          exit()\nfor y in range(3):\n  if A[0][y] == -1:\n    f=True\n    for x in range(3):\n      if A[y][x]!=-1:\n        f=False\n        if f:\n          print('Yes')\n          exit()\nf=True\nfor i in range(3):\n  if A[i][i]!=-1:\n    f=False\nif f:\n  print('Yes')\n  exit()\nf=True\nfor i in range(1,3):\n  if A[-i][-i]!=-1:\n    f=False\nif f:\n  print('Yes')\n  exit()\n\nprint('No')","a = [list(map(int, input().split())) for i in range(3)]\nn = int(input())\n\nb = set(int(input()) for i in range(n))\n\ndef check():\n    for i in range(3):\n        if all(a[i][j] in b for j in range(3)):\n            return True\n        if all(a[j][i] in b for j in range(3)):\n            return True\n    return all(a[i][i] in b for i in range(3)) or all(a[2-i][i] in b for i in range(3))\n\nprint('Yes' if check() else 'No')","a = [list(map(int, input().split())) for _ in range(3)]\nn = int(input())\n\nfor i in range(n):\n    b = int(input())\n    for r in range(3):\n        for c in range(3):\n            if a[r][c] == b:\n                a[r][c] = 0\n\nis_bingo = False\nfor i in range(3):\n    if sum([a[i][j] for j in range(3)]) == 0:\n        is_bingo = True\n        break\n    if sum([a[j][i] for j in range(3)]) == 0:\n        is_bingo = True\n        break\n\nif sum([a[j][j] for j in range(3)]) == 0:\n    is_bingo = True\nif sum([a[j][2 - j] for j in range(3)]) == 0:\n    is_bingo = True\n\nans = 'Yes' if is_bingo else 'No'\nprint(ans)\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> mountains ranging from east to west, and an ocean to the west.<\/p>\n<p>At the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.<\/p>\n<p>The height of the <var>i<\/var>-th mountain from the west is <var>H_i<\/var>.<\/p>\n<p>You can certainly see the ocean from the inn at the top of the westmost mountain.<\/p>\n<p>For the inn at the top of the <var>i<\/var>-th mountain from the west <var>(i = 2, 3, ..., N)<\/var>, you can see the ocean if and only if <var>H_1 \\leq H_i<\/var>, <var>H_2 \\leq H_i<\/var>, <var>...<\/var>, and <var>H_{i-1} \\leq H_i<\/var>.<\/p>\n<p>From how many of these <var>N<\/var> inns can you see the ocean?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq N \\leq 20<\/var><\/li>\n<li><var>1 \\leq H_i \\leq 100<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>H_1<\/var> <var>H_2<\/var> <var>...<\/var> <var>H_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of inns from which you can see the ocean.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>4\n6 5 6 8\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>3\n<\/pre>\n<p>You can see the ocean from the first, third and fourth inns from the west.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>5\n4 5 3 5 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>3\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>5\n9 5 6 8 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>1\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementThere are N mountains ranging from east to west, and an ocean to the west.\nAt the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.\nThe height of the i-th mountain from the west is H_i.\nYou can certainly see the ocean from the inn at the top of the westmost mountain.\nFor the inn at the top of the i-th mountain from the west (i = 2, 3, ..., N), you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i, ..., and H_{i-1} \\leq H_i.\nFrom how many of these N inns can you see the ocean?\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq H_i \\leq 100\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\nH_1 H_2 ... H_N\n\n\n\n\n\nOutputPrint the number of inns from which you can see the ocean.\n\n\n\n\n\n\nSample Input 14\n6 5 6 8\n\n\n\n\n\nSample Output 13\n\nYou can see the ocean from the first, third and fourth inns from the west.\n\n\n\n\n\nSample Input 25\n4 5 3 5 4\n\n\n\n\n\nSample Output 23\n\n\n\n\n\n\nSample Input 35\n9 5 6 8 4\n\n\n\n\n\nSample Output 31\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> mountains ranging from east to west, and an ocean to the west.<\/p>\n<p>At the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.<\/p>\n<p>The height of the <var>i<\/var>-th mountain from the west is <var>H_i<\/var>.<\/p>\n<p>You can certainly see the ocean from the inn at the top of the westmost mountain.<\/p>\n<p>For the inn at the top of the <var>i<\/var>-th mountain from the west <var>(i = 2, 3, ..., N)<\/var>, you can see the ocean if and only if <var>H_1 \\leq H_i<\/var>, <var>H_2 \\leq H_i<\/var>, <var>...<\/var>, and <var>H_{i-1} \\leq H_i<\/var>.<\/p>\n<p>From how many of these <var>N<\/var> inns can you see the ocean?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq N \\leq 20<\/var><\/li>\n<li><var>1 \\leq H_i \\leq 100<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>H_1<\/var> <var>H_2<\/var> <var>...<\/var> <var>H_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of inns from which you can see the ocean.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>4\n6 5 6 8\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>3\n<\/pre>\n<p>You can see the ocean from the first, third and fourth inns from the west.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>5\n4 5 3 5 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>3\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>5\n9 5 6 8 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>1\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementThere are N mountains ranging from east to west, and an ocean to the west.\nAt the top of each mountain, there is an inn. You have decided to choose where to stay from these inns.\nThe height of the i-th mountain from the west is H_i.\nYou can certainly see the ocean from the inn at the top of the westmost mountain.\nFor the inn at the top of the i-th mountain from the west (i = 2, 3, ..., N), you can see the ocean if and only if H_1 \\leq H_i, H_2 \\leq H_i, ..., and H_{i-1} \\leq H_i.\nFrom how many of these N inns can you see the ocean?\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq N \\leq 20\n1 \\leq H_i \\leq 100\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\nH_1 H_2 ... H_N\n\n\n\n\n\nOutputPrint the number of inns from which you can see the ocean.\n\n\n\n\n\n\nSample Input 14\n6 5 6 8\n\n\n\n\n\nSample Output 13\n\nYou can see the ocean from the first, third and fourth inns from the west.\n\n\n\n\n\nSample Input 25\n4 5 3 5 4\n\n\n\n\n\nSample Output 23\n\n\n\n\n\n\nSample Input 35\n9 5 6 8 4\n\n\n\n\n\nSample Output 31\n\n\n","solve_rate":0.7462149501,"codenet_problem_id":"p03072","input_testcases":{"70":"5\n4 4 3 3 2","1":"5\n9 0 6 8 4","15":"5\n9 1 4 8 4","98":"5\n1 0 -1 9 2","64":"5\n4 4 3 2 4","62":"5\n0 4 2 2 2","11":"4\n12 5 11 8","81":"4\n34 1 -2 3","44":"5\n0 8 1 4 1","63":"4\n20 0 0 4","77":"5\n0 1 1 7 2","9":"5\n9 -1 4 8 4","69":"4\n18 0 -1 4","83":"5\n0 2 0 7 2","35":"5\n2 5 3 4 1","78":"4\n34 0 -2 3","82":"5\n3 4 4 0 0","8":"4\n6 5 11 8","3":"5\n2 3 3 4 8","0":"4\n6 5 5 8","68":"5\n0 3 1 2 2","32":"5\n2 5 3 4 3","13":"5\n1 5 3 2 8","47":"5\n0 8 2 4 1","6":"5\n9 -1 6 8 4","55":"5\n4 2 8 2 4","36":"4\n9 2 0 23","56":"5\n0 8 2 6 2","59":"5\n0 4 2 6 2","42":"4\n18 2 0 3","17":"4\n11 5 0 8","92":"5\n1 0 -1 7 2","94":"5\n3 3 6 2 0","79":"5\n4 4 4 0 0","24":"5\n9 2 4 0 4","73":"5\n4 4 3 0 2","45":"4\n18 2 -1 3","71":"5\n0 3 1 4 2","87":"4\n48 1 -1 3","34":"5\n9 4 4 1 4","39":"4\n18 2 0 23","46":"5\n4 4 6 2 4","86":"5\n0 0 0 7 2","20":"4\n11 2 0 8","72":"4\n34 0 -1 4","22":"5\n2 5 3 4 8","89":"5\n1 0 0 7 2","40":"5\n9 4 6 2 4","28":"5\n9 4 4 0 6","43":"5\n5 4 6 2 4","80":"5\n0 1 0 7 2","7":"5\n4 5 3 2 4","97":"5\n0 3 6 2 0","90":"4\n48 0 -1 3","58":"5\n4 4 8 2 4","26":"5\n9 4 4 0 4","4":"5\n2 3 3 4 2","2":"4\n6 5 8 8","93":"4\n48 -1 -1 3","54":"4\n24 0 0 3","103":"5\n9 5 6 8 4","74":"5\n0 1 1 4 2","57":"4\n21 0 0 3","5":"5\n4 5 3 1 4","14":"4\n11 5 11 8","75":"4\n34 0 -1 3","19":"5\n1 5 3 4 8","61":"5\n4 4 10 2 4","60":"4\n20 0 0 3","96":"4\n76 -1 -1 3","67":"5\n4 4 3 3 4","33":"4\n9 2 0 18","76":"5\n4 4 3 0 0","85":"5\n3 4 4 1 0","37":"5\n9 4 4 2 4","91":"5\n3 3 6 1 0","12":"5\n9 0 4 8 4","100":"4\n6 5 6 8","27":"4\n9 2 0 9","18":"5\n9 2 4 8 4","102":"5\n4 5 3 5 4","25":"4\n9 2 0 8","101":"4\n6 5 6 8","10":"5\n1 5 3 2 4","95":"5\n1 1 -1 7 2","66":"4\n18 0 0 4","88":"5\n3 4 6 1 0","49":"5\n4 8 6 2 4","30":"4\n9 2 0 15","31":"5\n9 4 4 1 6","29":"5\n2 5 3 4 2","52":"5\n4 2 6 2 4","48":"4\n18 0 -1 3","51":"4\n18 0 0 3","50":"5\n0 8 2 6 1","38":"5\n0 5 3 4 1","84":"4\n48 1 -2 3","65":"5\n0 4 1 2 2","23":"4\n6 2 0 8","16":"5\n1 5 3 2 5","21":"5\n9 2 4 2 4","53":"5\n0 8 1 6 1","41":"5\n0 5 1 4 1","99":"4\n94 -1 -1 3"},"output_testcases":{"70":"2\n","1":"1\n","15":"1\n","98":"2\n","64":"3\n","62":"2\n","11":"1\n","81":"1\n","44":"2\n","63":"1\n","77":"4\n","9":"1\n","69":"1\n","83":"3\n","35":"2\n","78":"1\n","82":"3\n","8":"2\n","3":"5\n","0":"2\n","68":"2\n","32":"2\n","13":"3\n","47":"2\n","6":"1\n","55":"2\n","36":"2\n","56":"2\n","59":"3\n","42":"1\n","17":"1\n","92":"2\n","94":"3\n","79":"3\n","24":"1\n","73":"2\n","45":"1\n","71":"3\n","87":"1\n","34":"1\n","39":"2\n","46":"3\n","86":"4\n","20":"1\n","72":"1\n","22":"3\n","89":"2\n","40":"1\n","28":"1\n","43":"2\n","80":"3\n","7":"2\n","97":"3\n","90":"1\n","58":"3\n","26":"1\n","4":"4\n","2":"3\n","93":"1\n","54":"1\n","103":"1\n","74":"4\n","57":"1\n","5":"2\n","14":"2\n","75":"1\n","19":"3\n","61":"3\n","60":"1\n","96":"1\n","67":"3\n","33":"2\n","76":"2\n","85":"3\n","37":"1\n","91":"3\n","12":"1\n","100":"3\n","27":"2\n","18":"1\n","102":"3\n","25":"1\n","101":"3\n","10":"2\n","95":"3\n","66":"1\n","88":"3\n","49":"2\n","30":"2\n","31":"1\n","29":"2\n","52":"2\n","48":"1\n","51":"1\n","50":"2\n","38":"2\n","84":"1\n","65":"2\n","23":"2\n","16":"3\n","21":"1\n","53":"2\n","41":"2\n","99":"1\n"},"n_missing":0,"programs":["n = int(input())\nH = [int(x) for x in input().split()]\nm = -1\ncc = 0\nfor h in H:\n  cc += (h >= m)\n  m = max(h, m)\nprint(cc)","N = int( input())\nH = list( map( int, input().split()))\nh = H[0]\nnow = 0\nfor i in range(N):\n    if h <= H[i]:\n        now += 1\n        h = H[i]\nprint(now)","# encoding:utf-8\nimport copy\nimport numpy as np\nimport random\nimport bisect #bisect_left\u3000\u3053\u308c\u3067\u4e8c\u90e8\u63a2\u7d22\u306e\u5927\u5c0f\u691c\u7d22\u304c\u884c\u3048\u308b\nimport math\n\n\nN = int(input())\nH = [int(i) for i in input().split()]\n\n\nmax_h = [-1 for i in range(N)]\nmax_h[0] = H[0]\nfor i in range(1,N):\n    max_h[i] = max(max_h[i-1],H[i])\n    \nans = 0\nfor i in range(N):\n    if H[i] >= max_h[i]:\n        ans += 1\nprint(ans)\n\n\"\"\"\nans = 0\nfor i in range(N):\n    base = H[i]\n    check = True\n    for j in range(N):\n        if i<=j:\n            pass\n        else:\n            if H[i]>=H[j]:\n                pass\n            else:\n                check = False\n                break\n    if check:\n        ans += 1\nprint(ans)\n\"\"\"\n","N = int(input())\nH = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    flg = True\n    for j in range(i):\n        if H[i] < H[j]:\n            flg = False\n            break\n    if flg:\n        count += 1\nprint(count)","n=int(input())\nh=list(map(int,input().split()))\ncnt=1\nmaxh=h[0]\nfor i in range(1,n):\n\tif maxh<=h[i]:\n\t\tmaxh=h[i]\n\t\tcnt+=1\nprint(cnt)","n=int(input())\nb=c=0\nfor h in map(int,input().split()):\n  if b<=h:\n    b=h\n    c+=1\nprint(c)","n=int(input())\nh_arr=[int(s) for s in input().split(\" \")]\n\nhmax=0\ncount = 0\nfor h in h_arr:\n    if h >= hmax:\n        count += 1\n        hmax = h\nprint (count)","hpi = input()\ncount = 1\nk = list(map(int, input().split(\" \")))\nfor c in range(int(hpi) - 1):\n  jo = \"yes\"\n  n = k[:c + 2]\n  for co in range(len(n) - 1):\n    if n[co] > k[c + 1]:\n      jo = \"no\"\n    else:\n      pass\n  if jo == \"yes\":\n    count += 1\nprint(count)\n","\nn = int(input())\nh = list(map(int,input().split()))\ncount = 1\n\nlead = h[0]\nfor a in h[1:]:\n    if lead <= a:\n        lead = a\n        count += 1\nprint(count)\n\n\n","N = int(input())\nH = list(map(int, input().split()))\n\nM = H[0]\nans = 0\nfor h in H:\n    if h < M:\n        continue\n    ans += 1\n    M = h\n\nprint(ans)\n","import sys\ninput = sys.stdin.readline\n\nN = int(input())\nH = list(map(int,input().split()))\nhigh = 0\ncount = 0\nfor i in range(N):\n    if H[i] >= high:\n        count += 1\n        high = H[i]\nprint(count)\n","a = input().split()\nN = list(map(int,input().split()))\nA = int(a[0])\n\ncounter = 1\n\nfor i in range(2,A+1):\n  N_new = N[0:i]\n  N_new_len = len(N_new)\n  if max(N_new) == N_new[int(N_new_len)-1]:\n    counter += 1\nprint(counter)","N = int(input())\nH = list(map(int, input().split()))\n\n\nfor i in range(N-1):\n  if H[i] > H[i+1]:\n    print(i+1)\n  ","n = int(input())\nh_arr = list(map(int, input().split()))\n\nans = 0\nmax_h = h_arr[0]\nfor i in h_arr:\n    if i >= max_h:\n        max_h = i\n        ans += 1\nprint(ans)","N  = input()\nHs = list(map(int,input().split(\" \")))\nlimit = len(Hs)\nans = 0\nfor i in range(limit):\n    h = Hs[i]\n    flag = True\n    for another in Hs[:i]:\n        if h < another:\n            flag = False\n    if flag:\n        ans += 1\nprint(ans)","n=int(input())\nh=list(map(int,input().split()))\nans=1\nfor i in range(1,n):\n  if h[i-1]<=h[i]:\n    ans+=1\nprint(ans)\n  ","N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    flag = 0\n    for j in range(i):\n        if (H[j] <= H[i]):\n            flag += 1\n    if (flag == i):\n        ans += 1\nprint(ans)\n","n = int(input())\nhs = list(map(int, input().split()))\n\nmaxs = hs[0]\ncount = 1\nfor h in hs[1:]:\n  if h >= maxs:\n    maxs = h\n    count += 1\n\nprint(count)","N = int(input())\nH = list(map(int,input().split()))\n\nans = 1\nmx = H[0]\nfor i in range(1,N):\n    if H[i] >= mx:\n        ans += 1\n        mx = H[i]\n    else:\n        continue\nprint(ans)","N = int(input())\nH = [int(i) for i in input().split(\" \")]\nans = 1\nfor i in range(N -1):\n  if H[i + 1] >= max(H[:i+1]):\n    ans += 1\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nans = 1\nm = h[0]\nfor i in range(1, n):\n    m = max(h[i-1], m)\n    if h[i] >= m:\n        ans += 1\n\nprint(ans)\n","N = int(input())\nH = [int(n) for n in input().split()]\nans = 1\nt = H[0]\nfor h in H[1:]:\n  if t <= h:\n    ans += 1\n  else:\n    break\nprint(ans)\n","N = input().split()\nprint(N)\nh = 1\nfor i in range(1,len(N)):\n    for j in range(i):\n        if (N[i] < N[j]):\n            break\n        if j == i-1:\n            h += 1\nprint(h)","N = int(input())\nH = [int(x) for x in input().split()]\nans = 0\nheight = 0\nfor i in range(N):\n    if height <= H[i]:\n        ans += 1\n        height = H[i]\nprint(ans)\n","n = int(input())\nhs = list(map(int, input().split()))\n\ncnt = 1\n\nfor i in range(1, n):\n    if max(hs[:i]) <= hs[i]:\n        cnt += 1\n\nprint(cnt)\n","N = int(input())\nH = list(map(int, input().split()))\nans = 1\nfor i in range(1,N):\n  if H[i]>=max(H[:i]):\n    ans += 1\nprint(ans)\n","n = int(input())\nH = list(map(int,input().split()))\n\ncount = 1\nfor i in range(1,len(H)):\n    max_h = max(H[0:i+1])\n    if max_h == H[i]:\n        count += 1\n\nprint(count)","n=int(input())\nh=list(map(int,input().split()))\nprint(sum(max(h[:i])<=h[i]for i in range(n)))","N = int(input())\nlist = list(map(int,input().split()))\n\ncont = 0\nfor i in range(0,N):\n    c = 0\n    for j in range(0, i):   \n        if list[j] > list[i]:\n            c = 1\n    if c == 0:\n        cont += 1\n\nprint(cont)","# coding: utf-8\n\nnum = int(input())\nstr = input().split()\ntable = [int(i) for i in str]\ncount = 0\npointed = table[0]\nfor i in range(1, num):\n    if table[0] <= table[i]:\n        count += 1\nprint(count)\n","N = int(input())\nH = list(map(int, input().split()))\nans = 0\nmax = H[0]\nfor i in range(N-1):\n  if H[i+1] >= max:\n    ans += 1\n    max = H[i+1]\nprint(ans+1)","n = int(input())\nh = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, n):\n    if max(h[0:i]) <= h[i]:\n        ans += 1\nprint(ans)","N = int(input())\nH = list(map(int,input().split()))\n\nNH = 1\nfor i in range(N-1):\n    if H[i+1]=>max(H[0:i+1]):\n        NH = NH + 1\n    else:\n        NH = NH\n\nprint(NH)","a = input()\nb = list(map(int, input().split(' ')))\nres = 0\nhikaku_target = 0\n\nfor hei in b:\n    if hei >= hikaku_target:\n        res = res + 1\n    hikaku_target = max(hikaku_target, hei)\nprint(res)\n","N = int(input())\nH = list(map(int, input().split()))\n\nans = 0\nmin_h = 0\n\nfor i in range(N):\n  if H[i] >= min_h:\n    min_h = H[i]\n    ans += 1\n    \nprint(ans)","n = int(input())\nh = [int(i) for i in input().split()]\n\ncount = 0\n\nfor i in range(n):\n\tover = False\n\tfor j in range(i):\n\t\tif h[j] > h[i]:\n\t\t\tover = True\n\n\tif not over:\n\t\tcount += 1\n\nprint(count)","n = int(input())\nh = list( map(int,input().split()) )\n\nx = h[0]\nans = 1\nfor i in range(1,n):\n  if h[i] >= x:\n    ans += 1\n    x = h[i]\nprint(ans)","#!\/usr\/bin\/env python\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.disable(logging.CRITICAL)\n\ndef main():\n    N = int(input())\n    H = list(map(int, input().split()))\n    \n    ans = 1\n    for i in range(1, N):\n        flag = 0\n        for j in range(i):\n            if H[i] < H[j]:\n                flag += 1\n            else:\n                continue\n        logging.debug('flag: {}'.format(flag))\n        if flag == 0:\n            ans += 1\n\n    return ans\n\nif __name__ == '__main__':\n    print(main())\n\n","n = int(input())\nh = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n  ok = True\n  for j in range(i):\n    if h[j]<=h[i]:\n      continue\n    else:\n      ok = False\n      break\n  if(ok):\n    ans+=1\nprint(ans)\n  ","N = int(input())\nheight = []\ncount = 0\nfor i in range(N):\n  x = int(input())\n  height.append(x)\n  if height[i] == max(height):\n    count += 1\n\nprint(count)","n = int(input())\nh = list(map(int,input().split()))\nans = 1\nMax = h[0]\nfor i in range(1,n):\n    if h[i] >= Max:\n        ans += 1\n        Max = h[i]\nprint(ans)\n","N = int(input())\nH = []\nfor i in map(int,input().split()):\n  H.append(i)\n\na = 0\nans = 0\n\nfor i in H:\n  if a <= i:\n    a = i\n    ans += 1\nprint(ans)","n = int(input())\n\nhight = list(map(int, input().split()))\nans = 0\n\nkizyun = hight[0]\n\nfor i in range(n):\n    if kizyun > hight[i]:\n        pass\n    else:\n        ans += 1\n        kizyun = hight[i]\n\nprint(ans)\n","N = int(input())\nHList = list(map(int,input().split()))\ncount = 1\nmax1 = HList[0]\nfor i in range(1,N):\n    if max1 <= HList[i]:\n        count += 1\n    if max1 < HList[i]:\n        max1 = HList[i]\nprint(count)\n","N = [int(s) for s in input().split(\" \")][0]\nHs = [int(s) for s in input().split(\" \")]\nprint(len([0 for i in range(1, N) if all([Hs[i] >= Hs[j] for j in range(i)])]) + 1)","N = int(input())\nlst_H = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, N):\n    if lst_H[i] == max(lst_H[:i+1]):\n        ans += 1\nprint(ans)\n","N=int(input())\nH=list(map(int,input().split()))\ni=0\ncounter=0\nsaidai=0\nwhile i<N:\n    if saidai<=H[i]:\n        saidai=H[i]\n        counter=counter+1\n    i=i+1\nprint(counter)\n","n = int(input())\nhs = input()\nh = [int(j) for j in hs.split(\" \")]\ncount = 0\nflg = 0\nfor i in range(n):\n    for j in range(0, i):\n        if h[i] < h[j]:\n            flg = 1\n            break\n    if flg == 0:\n        count = count + 1\n    flg = 0\n\nprint(count)\n","N=int(input())\nH =[int(j) for j in input().split()]\nmin_ =H[0]\ncnt=0\nfor i in H:\n    if min_<=i:\n        min_=i\n        cnt+=1\n        \nprint(cnt)","import math\n\n\ndef main():\n    n = int(input())\n    # a, b = map(int, input().split())\n    h = list(map(int, input().split()))\n    # s = input()\n    # h = [int(input()) for _ in rane(n)]\n\n    count = 1\n    maxi = h[0]\n    for i in range(1, n):\n        if h[i] >= h[i-1] and h[i] >= maxi:\n            count += 1\n            maxi = h[i]\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n","N = int(input())\nmountains = list(map(int, input().split()))\n\nhighest = mountains[0]\n\ncnt = 0\n\nfor mt in mountains:\n    if mt >= highest:\n        cnt += 1\n        highest = mt\n        \nprint(cnt)","N= input()\nhighs = input().split()\ncount = 1\nfor i in range(1, len(highs)):\n    if highs[i] >= max(highs[0:i]):\n        count += 1\nprint(count\\n)\n","n = int(input())\nh = list(map(int, input().split()))\n\nc = 0\nfor i in range(len(h)):\n  if max(h[:i+1]) == h[i]:\n    c += 1\nprint(c)","n = int(input())\nh = list(map(int, input().split()))\ncnt = 1\nfor i in range(1,n):\n    for j in range(0,i):\n        if h[i] < h[j]:\n            break\n        if j == i-1:\n            cnt += 1\nprint(cnt)","N = int(input())\nH = list(map(int,input().split()))\n\na = 1\nb = list()\nfor i in range(N+1):\n    if H[i] - H[i-1] > 0:\n        a += 1\n    else:\n        break","n = input()\nh_list = map(int, input().split())\na = 0\nb = 0\nfor h in h_list:\n  if b <= h:\n    b = h\n    a += 1\nprint(a)\n","n = int(input())\nh = list(map(int, input().split()))\n\ncnt = 0\nmaxh = h[0]\nfor i in range(n):\n\tif h[i] >= maxh:\n\t\tcnt += 1\n\t\tmaxh = h[i]\nprint(cnt)","N = int(input())\nH = list(int(i) for i in input().split())\ncount = 0\nhigh = 0\nfor i in range(N):\n  if H[i] >= high:\n    count += 1\n    high = max(high, H[i]) \n  else:\n    high = max(high, H[i])\nprint(count)","N = input()\nN = int(N)\nstr = input().split()\nH = []\ni = 0\nj = 0\nfor i in range(N):\n  H.append( int(str[i]) )\nflag\nans = 0\nfor i in range(N):\n  for j in range(i):\n    if H [i] < H[j]:\n      flag = 1\n    else:\n      flag = 0\n  if flag == 0:\n    ans = ans+1\n\nprint(ans)","n = int(input())\ns = list(map(int,input().split()))\nans = 1\nmax = s[0]\nfor i in range(1,n):\n  if s[i] >= s[i-1] and max <= s[i]:\n    ans+=1\n    if s[i] >= max:\n      max = s[i]\nprint(ans)   ","n=int(input())\na=list(map(int,input().split()))\nM=0\ncnt=0\nfor i in range(n):\n    if M<=a[i]:\n        cnt+=1\n        M=a[i]\nprint(cnt)","N = int(input())\nH = [int(i) for i in input().split()]\nmax_left = [0 for i in range(N)]\nfor i in range(1,N):\n  max_left[i] = max(max_left[i-1], H[i-1])\nres = 0\nfor i in range(N):\n  if H[i] >= max_left[i]:\n    res += 1\nprint (res)","n = int(input())\na = list(map(int, input().split()))\nm = a[0]\ncnt = 0\nfor i in range(n):\n    m = max(m, a[i])\n    if m <= a[i]:\n        cnt += 1\nprint(cnt)","n = int(input())\nh = list(map(int, input().split()))\nm = 1\nh_max = h[0]\n\nfor i in range(1, n):\n    if(h[i] >= h_max):\n        m += 1\n        h_max = h[i]\nprint(m)","N = int(input())\nH = list(map(int, input().split()))\nm = 0\ncout = 0\nfor i in range(N):\n    if m <= H[i]:\n        cout += 1\n    m = max(m, H[i])\nprint(cout)\n","# coding: utf-8\n# Your code here!\nn=int(input())\nh = list(map(int, input().split()))\n\nans=1\n\nfor i in range(1,len(h)):\n  if len(list(filter(lambda x: x <= h[i], h[:i])))==i:\n      ans=ans+1\nprint(ans)\n\n","n = int(input())\nh = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n    if max(h[0:i+1])<=h[i]:\n        c = c+1\nprint(c)","n = int(input())\nh = input().split()\nH = []\ni = 0\nwhile(i < n):\n    H.append(int(h[i]))\n    i+=1\n#print(H)\n\ni = 0\nhigh = 0\nnum = 0\nwhile(i < n):\n    if(H[i] >= high):\n        num += 1\n    if(high < H[i]):\n        high = H[i]\n    i += 1\n\nprint(num)","N = int(input())\nH = map(int, input().split())\n\ntmp_high = 0\nans = 0\nfor h in H:\n    if h >= tmp_high:\n        ans += 1\n    tmp_high = max(h,tmp_high)\nprint(ans)","n=int(input())\nH=list(map(int,input().split()))\nans=0\nhgt=0\nfor i in range(n):\n    if H[i]>=hgt:\n        ans+=1\n    hgt=max(hgt,H[i])\nprint(ans)\n","n = int(input())\n\nL = list(map(int,input().split()))\n\nmountain = int(1)\nfor i in range(1, n):\n    for j in range(i):\n        if int(L[j]) > int(L[i]):\n            break\n        if int(L[j]) <= int(L[i]) and j == i-1:\n            mountain += 1\n            break\n        if int(L[j]) <= int(L[i]):\n            continue\n\nprint(mountain)\n","\n\nn = raw_input()                                    \n\nar = []                                            \nh = raw_input().split()                            \n\ncnt = 0                                            \nm = 0\nfor i in h:\n    if (i >= max(m, i)):                           \n        cnt += 1                                   \n        m = i\n\nprint cnt","N,*H = map(int, open(0).read().split())\n#print(N,H)\nL = 0\nfor i in range(N):\n    if i == 0:\n        L+=1\n    elif H[i-1] <= H[i]:\n        L+=1\nprint(L)\n","a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = []\nfor i in range(len(b)):\n    c = False\n    for j in range(i):\n        if b[i] < b[j]:\n            c = True\n    if c == False:\n        d.append(i+1)\n\nprint(len(d))\n\n","n = int(input())\nh = list(map(int, input().split()))\n\nmax = h[0]\ncount = 0\nfor i in h:\n    if max <= i:\n        count += 1\n        max = i\n    else:\n        continue\nprint(count)","n = int(input())\nh_list = [int(x) for x in input().split()]\n\nans = 0\nh_max = 0\nfor h in h_list:\n    if h < h_max:\n        continue\n    ans += 1\n    h_max = h\nprint(ans)","N = int(input())\nH = list(map(int, input().split()))\nans = 1\nfor i in range(1, N-1):\n  isOK = True\n  for j in range(i):\n    if H[j] > H[i]: isOK = False\n  if isOK: ans+=1\nprint(ans)","n = int(input())\nh = list(map(int,input().split()))\nans=1\ntp=h[0]\nfor j in range(1,n):\n    if(h[j]>=tp):\n        tp=h[j]\n        ans+=1\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\nout = 0\nfor i in range(len(a)):\n  flg = 1\n  if i > 0 :\n    for j in range(i):\n      if not (a[j] <= a[i]):\n        flg = 0\n  if flg == 1:\n    out += 1\nprint(out)","input() #n\nans = hmax = 0\n \nfor h in map(int, input().split()):\n  if hmax <= h:\n    hmax = h\n    ans += 1\nprint(ans)","N = int(input())\nH = list(map(int,input().split()))\nmaxH = 0\nn = 1\n\nfor i, h in enumerate(H):\n  if i == 0:\n  \tmaxH = h\n  else:\n    if h >= maxH:\n    \tn += 1\n    \tmaxH = h\n    \nprint(n)","def B(lst,r=[],c=1):\n    if len(lst) == c:\n        return r\n    if len([i for i in lst[0:c] if lst[c] >= i]) == c:\n        return B(lst,r + [lst[c]],c+1)\n    else:\n        return B(lst,r,c+1)\n\ni = int(input())\nlst = list(map(int,input().split(\" \")))\nprint(len(B(lst))+1)","N = int(input())\nl = list(map(int,input().split()))\ncount = 1\nmax = l[0]\nfor i in range(l):\n  if max <= l[i]:\n   \tcount += 1\n    max = l[i]\n\nprint(count)","N = int(input())\nH = list(map(int, input().split()))\nm = 0\nc = 0\nfor i in range(N):\n  if H[i] >= m:\n    c += 1\n    m = H[i]\nprint(c)\n","n = int(input())\nh = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    if h[i] == max(h[:i+1]):\n        ans += 1\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nsum=1\nfor i in range(1, n):\n        flag = True\n        for j in range(0, i):\n                if(h[j] > h[i]):\n                        flag = False\n        if(flag):\n                sum+=1\nprint(sum)","N=int(input())\nH=list(map(int,input().split()))\n#N=5\n#H=[10,7,37,69,5]\nMax=0\ncount=0\nfor i in range(N):\n    if H[i]>=Max:\n        Max=H[i]\n        count+=1\nprint(count)\n","n=int(input())\nh=list(map(int,input().split()))\ncnt=1\nfor i in range(1,n):\n    if max(h[0],h[1],h[i-1],h[i])==h[i]:\n        cnt+=1\nprint(cnt)","n = input()\ns = [int(i) for i in input().split()]\ncnt = 1\ntmp = s[0]\nfor i in range(1, len(s)):\n  if s[i] >= tmp:\n    cnt += 1\n    tmp = s[i]\nprint(cnt)\n    ","n = int(input())\nh = list(map(int, input().split()))\ncnt = 0\nhighest = 0\nfor i in h:\n    if i >= highest:\n        highest = i\n        cnt += 1\nprint(cnt)","N=int(input())\nH=map(int,input().split())\nans,maxh=0,0\nfor h in H:\n  if maxh<=h:\n    ans+=1\n    maxh=h\nprint(ans)","print((lambda n,a:[all([a[j]<=a[i] for j in range(i)]) for i in range(n)].count(True))(int(input()),list(map(int,input().split()))))","n=int(input())\nh=list(map(int,input().split()))\nans=1\nm=h[0]\nfor i in range(1,n):\n  if h[i]>m:\n    ans+=1\n    m=h[i]\nprint(ans)\n  ","import sys\n \nstdin = sys.stdin\n\nmod = 1000000007\ninf = 1 << 60\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()\nnas = lambda: stdin.readline().split()\n\nn = ni()\na = na()\n\nm = 0\nans = 0\nfor i in range(n):\n    m = max(m, a[i])\n    if a[i] >= m:\n        ans += 1\n\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nmax_ = 0\ncnt = 0\n\nfor i in range(n):\n    if h[i] >= max_:\n        cnt += 1\n        max_ = h[i]\n\nprint(cnt)","N = int(input())\nH = list(map(int,input().split()))\n\ncount=0\nfor i in range(N):\n    if max(H[0:i+1]) == H[i]:\n        count+=1\n\nprint(count)","def main():\n    N = int(input())\n    H = [int(n) for n in input().split()]\n\n    counter = 0\n    canView = False\n    for i, h in enumerate(H):\n        for j in range(i):\n            if H[j] > h:\n                canView = True\n        if canView:\n            counter += 1\n\n    print(counter)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\nh_list = [int(i) for i in input().split()]\ncount = sum(max(j) == j[-1] for i in range(1, n+1) for j in [h_list[0:i]])\nprint(count)","N = int(input())\nH = list(map(int,input().split()))\ncount = 0\nhighest = 0\nfor h in H:\n    if h >= highest:\n        highest = h\n        count +=1\n\nprint(count)","n = int(input())\nhs = list(map(int,input().split()))\nans = 0\nm = 0\nfor h in hs:\n  if m <= h:\n    ans += 1\n  m = max(m, h)\n\nprint(ans)"],"raw_generations":["n = int(input())\nH = [int(x) for x in input().split()]\nm = -1\ncc = 0\nfor h in H:\n  cc += (h >= m)\n  m = max(h, m)\nprint(cc)","N = int( input())\nH = list( map( int, input().split()))\nh = H[0]\nnow = 0\nfor i in range(N):\n    if h <= H[i]:\n        now += 1\n        h = H[i]\nprint(now)","# encoding:utf-8\nimport copy\nimport numpy as np\nimport random\nimport bisect #bisect_left\u3000\u3053\u308c\u3067\u4e8c\u90e8\u63a2\u7d22\u306e\u5927\u5c0f\u691c\u7d22\u304c\u884c\u3048\u308b\nimport math\n\n\nN = int(input())\nH = [int(i) for i in input().split()]\n\n\nmax_h = [-1 for i in range(N)]\nmax_h[0] = H[0]\nfor i in range(1,N):\n    max_h[i] = max(max_h[i-1],H[i])\n    \nans = 0\nfor i in range(N):\n    if H[i] >= max_h[i]:\n        ans += 1\nprint(ans)\n\n\"\"\"\nans = 0\nfor i in range(N):\n    base = H[i]\n    check = True\n    for j in range(N):\n        if i<=j:\n            pass\n        else:\n            if H[i]>=H[j]:\n                pass\n            else:\n                check = False\n                break\n    if check:\n        ans += 1\nprint(ans)\n\"\"\"\n","N = int(input())\nH = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    flg = True\n    for j in range(i):\n        if H[i] < H[j]:\n            flg = False\n            break\n    if flg:\n        count += 1\nprint(count)","n=int(input())\nh=list(map(int,input().split()))\ncnt=1\nmaxh=h[0]\nfor i in range(1,n):\n\tif maxh<=h[i]:\n\t\tmaxh=h[i]\n\t\tcnt+=1\nprint(cnt)","n=int(input())\nb=c=0\nfor h in map(int,input().split()):\n  if b<=h:\n    b=h\n    c+=1\nprint(c)","n=int(input())\nh_arr=[int(s) for s in input().split(\" \")]\n\nhmax=0\ncount = 0\nfor h in h_arr:\n    if h >= hmax:\n        count += 1\n        hmax = h\nprint (count)","hpi = input()\ncount = 1\nk = list(map(int, input().split(\" \")))\nfor c in range(int(hpi) - 1):\n  jo = \"yes\"\n  n = k[:c + 2]\n  for co in range(len(n) - 1):\n    if n[co] > k[c + 1]:\n      jo = \"no\"\n    else:\n      pass\n  if jo == \"yes\":\n    count += 1\nprint(count)\n","\nn = int(input())\nh = list(map(int,input().split()))\ncount = 1\n\nlead = h[0]\nfor a in h[1:]:\n    if lead <= a:\n        lead = a\n        count += 1\nprint(count)\n\n\n","N = int(input())\nH = list(map(int, input().split()))\n\nM = H[0]\nans = 0\nfor h in H:\n    if h < M:\n        continue\n    ans += 1\n    M = h\n\nprint(ans)\n","import sys\ninput = sys.stdin.readline\n\nN = int(input())\nH = list(map(int,input().split()))\nhigh = 0\ncount = 0\nfor i in range(N):\n    if H[i] >= high:\n        count += 1\n        high = H[i]\nprint(count)\n","a = input().split()\nN = list(map(int,input().split()))\nA = int(a[0])\n\ncounter = 1\n\nfor i in range(2,A+1):\n  N_new = N[0:i]\n  N_new_len = len(N_new)\n  if max(N_new) == N_new[int(N_new_len)-1]:\n    counter += 1\nprint(counter)","N = int(input())\nH = list(map(int, input().split()))\n\n\nfor i in range(N-1):\n  if H[i] > H[i+1]:\n    print(i+1)\n  ","n = int(input())\nh_arr = list(map(int, input().split()))\n\nans = 0\nmax_h = h_arr[0]\nfor i in h_arr:\n    if i >= max_h:\n        max_h = i\n        ans += 1\nprint(ans)","N  = input()\nHs = list(map(int,input().split(\" \")))\nlimit = len(Hs)\nans = 0\nfor i in range(limit):\n    h = Hs[i]\n    flag = True\n    for another in Hs[:i]:\n        if h < another:\n            flag = False\n    if flag:\n        ans += 1\nprint(ans)","n=int(input())\nh=list(map(int,input().split()))\nans=1\nfor i in range(1,n):\n  if h[i-1]<=h[i]:\n    ans+=1\nprint(ans)\n  ","N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    flag = 0\n    for j in range(i):\n        if (H[j] <= H[i]):\n            flag += 1\n    if (flag == i):\n        ans += 1\nprint(ans)\n","n = int(input())\nhs = list(map(int, input().split()))\n\nmaxs = hs[0]\ncount = 1\nfor h in hs[1:]:\n  if h >= maxs:\n    maxs = h\n    count += 1\n\nprint(count)","N = int(input())\nH = list(map(int,input().split()))\n\nans = 1\nmx = H[0]\nfor i in range(1,N):\n    if H[i] >= mx:\n        ans += 1\n        mx = H[i]\n    else:\n        continue\nprint(ans)","N = int(input())\nH = [int(i) for i in input().split(\" \")]\nans = 1\nfor i in range(N -1):\n  if H[i + 1] >= max(H[:i+1]):\n    ans += 1\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nans = 1\nm = h[0]\nfor i in range(1, n):\n    m = max(h[i-1], m)\n    if h[i] >= m:\n        ans += 1\n\nprint(ans)\n","N = int(input())\nH = [int(n) for n in input().split()]\nans = 1\nt = H[0]\nfor h in H[1:]:\n  if t <= h:\n    ans += 1\n  else:\n    break\nprint(ans)\n","N = input().split()\nprint(N)\nh = 1\nfor i in range(1,len(N)):\n    for j in range(i):\n        if (N[i] < N[j]):\n            break\n        if j == i-1:\n            h += 1\nprint(h)","N = int(input())\nH = [int(x) for x in input().split()]\nans = 0\nheight = 0\nfor i in range(N):\n    if height <= H[i]:\n        ans += 1\n        height = H[i]\nprint(ans)\n","n = int(input())\nhs = list(map(int, input().split()))\n\ncnt = 1\n\nfor i in range(1, n):\n    if max(hs[:i]) <= hs[i]:\n        cnt += 1\n\nprint(cnt)\n","N = int(input())\nH = list(map(int, input().split()))\nans = 1\nfor i in range(1,N):\n  if H[i]>=max(H[:i]):\n    ans += 1\nprint(ans)\n","n = int(input())\nH = list(map(int,input().split()))\n\ncount = 1\nfor i in range(1,len(H)):\n    max_h = max(H[0:i+1])\n    if max_h == H[i]:\n        count += 1\n\nprint(count)","n=int(input())\nh=list(map(int,input().split()))\nprint(sum(max(h[:i])<=h[i]for i in range(n)))","N = int(input())\nlist = list(map(int,input().split()))\n\ncont = 0\nfor i in range(0,N):\n    c = 0\n    for j in range(0, i):   \n        if list[j] > list[i]:\n            c = 1\n    if c == 0:\n        cont += 1\n\nprint(cont)","# coding: utf-8\n\nnum = int(input())\nstr = input().split()\ntable = [int(i) for i in str]\ncount = 0\npointed = table[0]\nfor i in range(1, num):\n    if table[0] <= table[i]:\n        count += 1\nprint(count)\n","N = int(input())\nH = list(map(int, input().split()))\nans = 0\nmax = H[0]\nfor i in range(N-1):\n  if H[i+1] >= max:\n    ans += 1\n    max = H[i+1]\nprint(ans+1)","n = int(input())\nh = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, n):\n    if max(h[0:i]) <= h[i]:\n        ans += 1\nprint(ans)","N = int(input())\nH = list(map(int,input().split()))\n\nNH = 1\nfor i in range(N-1):\n    if H[i+1]=>max(H[0:i+1]):\n        NH = NH + 1\n    else:\n        NH = NH\n\nprint(NH)","a = input()\nb = list(map(int, input().split(' ')))\nres = 0\nhikaku_target = 0\n\nfor hei in b:\n    if hei >= hikaku_target:\n        res = res + 1\n    hikaku_target = max(hikaku_target, hei)\nprint(res)\n","N = int(input())\nH = list(map(int, input().split()))\n\nans = 0\nmin_h = 0\n\nfor i in range(N):\n  if H[i] >= min_h:\n    min_h = H[i]\n    ans += 1\n    \nprint(ans)","n = int(input())\nh = [int(i) for i in input().split()]\n\ncount = 0\n\nfor i in range(n):\n\tover = False\n\tfor j in range(i):\n\t\tif h[j] > h[i]:\n\t\t\tover = True\n\n\tif not over:\n\t\tcount += 1\n\nprint(count)","n = int(input())\nh = list( map(int,input().split()) )\n\nx = h[0]\nans = 1\nfor i in range(1,n):\n  if h[i] >= x:\n    ans += 1\n    x = h[i]\nprint(ans)","#!\/usr\/bin\/env python\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.disable(logging.CRITICAL)\n\ndef main():\n    N = int(input())\n    H = list(map(int, input().split()))\n    \n    ans = 1\n    for i in range(1, N):\n        flag = 0\n        for j in range(i):\n            if H[i] < H[j]:\n                flag += 1\n            else:\n                continue\n        logging.debug('flag: {}'.format(flag))\n        if flag == 0:\n            ans += 1\n\n    return ans\n\nif __name__ == '__main__':\n    print(main())\n\n","n = int(input())\nh = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n  ok = True\n  for j in range(i):\n    if h[j]<=h[i]:\n      continue\n    else:\n      ok = False\n      break\n  if(ok):\n    ans+=1\nprint(ans)\n  ","N = int(input())\nheight = []\ncount = 0\nfor i in range(N):\n  x = int(input())\n  height.append(x)\n  if height[i] == max(height):\n    count += 1\n\nprint(count)","n = int(input())\nh = list(map(int,input().split()))\nans = 1\nMax = h[0]\nfor i in range(1,n):\n    if h[i] >= Max:\n        ans += 1\n        Max = h[i]\nprint(ans)\n","N = int(input())\nH = []\nfor i in map(int,input().split()):\n  H.append(i)\n\na = 0\nans = 0\n\nfor i in H:\n  if a <= i:\n    a = i\n    ans += 1\nprint(ans)","n = int(input())\n\nhight = list(map(int, input().split()))\nans = 0\n\nkizyun = hight[0]\n\nfor i in range(n):\n    if kizyun > hight[i]:\n        pass\n    else:\n        ans += 1\n        kizyun = hight[i]\n\nprint(ans)\n","N = int(input())\nHList = list(map(int,input().split()))\ncount = 1\nmax1 = HList[0]\nfor i in range(1,N):\n    if max1 <= HList[i]:\n        count += 1\n    if max1 < HList[i]:\n        max1 = HList[i]\nprint(count)\n","N = [int(s) for s in input().split(\" \")][0]\nHs = [int(s) for s in input().split(\" \")]\nprint(len([0 for i in range(1, N) if all([Hs[i] >= Hs[j] for j in range(i)])]) + 1)","N = int(input())\nlst_H = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, N):\n    if lst_H[i] == max(lst_H[:i+1]):\n        ans += 1\nprint(ans)\n","N=int(input())\nH=list(map(int,input().split()))\ni=0\ncounter=0\nsaidai=0\nwhile i<N:\n    if saidai<=H[i]:\n        saidai=H[i]\n        counter=counter+1\n    i=i+1\nprint(counter)\n","n = int(input())\nhs = input()\nh = [int(j) for j in hs.split(\" \")]\ncount = 0\nflg = 0\nfor i in range(n):\n    for j in range(0, i):\n        if h[i] < h[j]:\n            flg = 1\n            break\n    if flg == 0:\n        count = count + 1\n    flg = 0\n\nprint(count)\n","N=int(input())\nH =[int(j) for j in input().split()]\nmin_ =H[0]\ncnt=0\nfor i in H:\n    if min_<=i:\n        min_=i\n        cnt+=1\n        \nprint(cnt)","import math\n\n\ndef main():\n    n = int(input())\n    # a, b = map(int, input().split())\n    h = list(map(int, input().split()))\n    # s = input()\n    # h = [int(input()) for _ in rane(n)]\n\n    count = 1\n    maxi = h[0]\n    for i in range(1, n):\n        if h[i] >= h[i-1] and h[i] >= maxi:\n            count += 1\n            maxi = h[i]\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n","N = int(input())\nmountains = list(map(int, input().split()))\n\nhighest = mountains[0]\n\ncnt = 0\n\nfor mt in mountains:\n    if mt >= highest:\n        cnt += 1\n        highest = mt\n        \nprint(cnt)","N= input()\nhighs = input().split()\ncount = 1\nfor i in range(1, len(highs)):\n    if highs[i] >= max(highs[0:i]):\n        count += 1\nprint(count\\n)\n","n = int(input())\nh = list(map(int, input().split()))\n\nc = 0\nfor i in range(len(h)):\n  if max(h[:i+1]) == h[i]:\n    c += 1\nprint(c)","n = int(input())\nh = list(map(int, input().split()))\ncnt = 1\nfor i in range(1,n):\n    for j in range(0,i):\n        if h[i] < h[j]:\n            break\n        if j == i-1:\n            cnt += 1\nprint(cnt)","N = int(input())\nH = list(map(int,input().split()))\n\na = 1\nb = list()\nfor i in range(N+1):\n    if H[i] - H[i-1] > 0:\n        a += 1\n    else:\n        break","n = input()\nh_list = map(int, input().split())\na = 0\nb = 0\nfor h in h_list:\n  if b <= h:\n    b = h\n    a += 1\nprint(a)\n","n = int(input())\nh = list(map(int, input().split()))\n\ncnt = 0\nmaxh = h[0]\nfor i in range(n):\n\tif h[i] >= maxh:\n\t\tcnt += 1\n\t\tmaxh = h[i]\nprint(cnt)","N = int(input())\nH = list(int(i) for i in input().split())\ncount = 0\nhigh = 0\nfor i in range(N):\n  if H[i] >= high:\n    count += 1\n    high = max(high, H[i]) \n  else:\n    high = max(high, H[i])\nprint(count)","N = input()\nN = int(N)\nstr = input().split()\nH = []\ni = 0\nj = 0\nfor i in range(N):\n  H.append( int(str[i]) )\nflag\nans = 0\nfor i in range(N):\n  for j in range(i):\n    if H [i] < H[j]:\n      flag = 1\n    else:\n      flag = 0\n  if flag == 0:\n    ans = ans+1\n\nprint(ans)","n = int(input())\ns = list(map(int,input().split()))\nans = 1\nmax = s[0]\nfor i in range(1,n):\n  if s[i] >= s[i-1] and max <= s[i]:\n    ans+=1\n    if s[i] >= max:\n      max = s[i]\nprint(ans)   ","n=int(input())\na=list(map(int,input().split()))\nM=0\ncnt=0\nfor i in range(n):\n    if M<=a[i]:\n        cnt+=1\n        M=a[i]\nprint(cnt)","N = int(input())\nH = [int(i) for i in input().split()]\nmax_left = [0 for i in range(N)]\nfor i in range(1,N):\n  max_left[i] = max(max_left[i-1], H[i-1])\nres = 0\nfor i in range(N):\n  if H[i] >= max_left[i]:\n    res += 1\nprint (res)","n = int(input())\na = list(map(int, input().split()))\nm = a[0]\ncnt = 0\nfor i in range(n):\n    m = max(m, a[i])\n    if m <= a[i]:\n        cnt += 1\nprint(cnt)","n = int(input())\nh = list(map(int, input().split()))\nm = 1\nh_max = h[0]\n\nfor i in range(1, n):\n    if(h[i] >= h_max):\n        m += 1\n        h_max = h[i]\nprint(m)","N = int(input())\nH = list(map(int, input().split()))\nm = 0\ncout = 0\nfor i in range(N):\n    if m <= H[i]:\n        cout += 1\n    m = max(m, H[i])\nprint(cout)\n","# coding: utf-8\n# Your code here!\nn=int(input())\nh = list(map(int, input().split()))\n\nans=1\n\nfor i in range(1,len(h)):\n  if len(list(filter(lambda x: x <= h[i], h[:i])))==i:\n      ans=ans+1\nprint(ans)\n\n","n = int(input())\nh = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n    if max(h[0:i+1])<=h[i]:\n        c = c+1\nprint(c)","n = int(input())\nh = input().split()\nH = []\ni = 0\nwhile(i < n):\n    H.append(int(h[i]))\n    i+=1\n#print(H)\n\ni = 0\nhigh = 0\nnum = 0\nwhile(i < n):\n    if(H[i] >= high):\n        num += 1\n    if(high < H[i]):\n        high = H[i]\n    i += 1\n\nprint(num)","N = int(input())\nH = map(int, input().split())\n\ntmp_high = 0\nans = 0\nfor h in H:\n    if h >= tmp_high:\n        ans += 1\n    tmp_high = max(h,tmp_high)\nprint(ans)","n=int(input())\nH=list(map(int,input().split()))\nans=0\nhgt=0\nfor i in range(n):\n    if H[i]>=hgt:\n        ans+=1\n    hgt=max(hgt,H[i])\nprint(ans)\n","n = int(input())\n\nL = list(map(int,input().split()))\n\nmountain = int(1)\nfor i in range(1, n):\n    for j in range(i):\n        if int(L[j]) > int(L[i]):\n            break\n        if int(L[j]) <= int(L[i]) and j == i-1:\n            mountain += 1\n            break\n        if int(L[j]) <= int(L[i]):\n            continue\n\nprint(mountain)\n","\n\nn = raw_input()                                    \n\nar = []                                            \nh = raw_input().split()                            \n\ncnt = 0                                            \nm = 0\nfor i in h:\n    if (i >= max(m, i)):                           \n        cnt += 1                                   \n        m = i\n\nprint cnt","N,*H = map(int, open(0).read().split())\n#print(N,H)\nL = 0\nfor i in range(N):\n    if i == 0:\n        L+=1\n    elif H[i-1] <= H[i]:\n        L+=1\nprint(L)\n","a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = []\nfor i in range(len(b)):\n    c = False\n    for j in range(i):\n        if b[i] < b[j]:\n            c = True\n    if c == False:\n        d.append(i+1)\n\nprint(len(d))\n\n","n = int(input())\nh = list(map(int, input().split()))\n\nmax = h[0]\ncount = 0\nfor i in h:\n    if max <= i:\n        count += 1\n        max = i\n    else:\n        continue\nprint(count)","n = int(input())\nh_list = [int(x) for x in input().split()]\n\nans = 0\nh_max = 0\nfor h in h_list:\n    if h < h_max:\n        continue\n    ans += 1\n    h_max = h\nprint(ans)","N = int(input())\nH = list(map(int, input().split()))\nans = 1\nfor i in range(1, N-1):\n  isOK = True\n  for j in range(i):\n    if H[j] > H[i]: isOK = False\n  if isOK: ans+=1\nprint(ans)","n = int(input())\nh = list(map(int,input().split()))\nans=1\ntp=h[0]\nfor j in range(1,n):\n    if(h[j]>=tp):\n        tp=h[j]\n        ans+=1\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\nout = 0\nfor i in range(len(a)):\n  flg = 1\n  if i > 0 :\n    for j in range(i):\n      if not (a[j] <= a[i]):\n        flg = 0\n  if flg == 1:\n    out += 1\nprint(out)","input() #n\nans = hmax = 0\n \nfor h in map(int, input().split()):\n  if hmax <= h:\n    hmax = h\n    ans += 1\nprint(ans)","N = int(input())\nH = list(map(int,input().split()))\nmaxH = 0\nn = 1\n\nfor i, h in enumerate(H):\n  if i == 0:\n  \tmaxH = h\n  else:\n    if h >= maxH:\n    \tn += 1\n    \tmaxH = h\n    \nprint(n)","def B(lst,r=[],c=1):\n    if len(lst) == c:\n        return r\n    if len([i for i in lst[0:c] if lst[c] >= i]) == c:\n        return B(lst,r + [lst[c]],c+1)\n    else:\n        return B(lst,r,c+1)\n\ni = int(input())\nlst = list(map(int,input().split(\" \")))\nprint(len(B(lst))+1)","N = int(input())\nl = list(map(int,input().split()))\ncount = 1\nmax = l[0]\nfor i in range(l):\n  if max <= l[i]:\n   \tcount += 1\n    max = l[i]\n\nprint(count)","N = int(input())\nH = list(map(int, input().split()))\nm = 0\nc = 0\nfor i in range(N):\n  if H[i] >= m:\n    c += 1\n    m = H[i]\nprint(c)\n","n = int(input())\nh = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    if h[i] == max(h[:i+1]):\n        ans += 1\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nsum=1\nfor i in range(1, n):\n        flag = True\n        for j in range(0, i):\n                if(h[j] > h[i]):\n                        flag = False\n        if(flag):\n                sum+=1\nprint(sum)","N=int(input())\nH=list(map(int,input().split()))\n#N=5\n#H=[10,7,37,69,5]\nMax=0\ncount=0\nfor i in range(N):\n    if H[i]>=Max:\n        Max=H[i]\n        count+=1\nprint(count)\n","n=int(input())\nh=list(map(int,input().split()))\ncnt=1\nfor i in range(1,n):\n    if max(h[0],h[1],h[i-1],h[i])==h[i]:\n        cnt+=1\nprint(cnt)","n = input()\ns = [int(i) for i in input().split()]\ncnt = 1\ntmp = s[0]\nfor i in range(1, len(s)):\n  if s[i] >= tmp:\n    cnt += 1\n    tmp = s[i]\nprint(cnt)\n    ","n = int(input())\nh = list(map(int, input().split()))\ncnt = 0\nhighest = 0\nfor i in h:\n    if i >= highest:\n        highest = i\n        cnt += 1\nprint(cnt)","N=int(input())\nH=map(int,input().split())\nans,maxh=0,0\nfor h in H:\n  if maxh<=h:\n    ans+=1\n    maxh=h\nprint(ans)","print((lambda n,a:[all([a[j]<=a[i] for j in range(i)]) for i in range(n)].count(True))(int(input()),list(map(int,input().split()))))","n=int(input())\nh=list(map(int,input().split()))\nans=1\nm=h[0]\nfor i in range(1,n):\n  if h[i]>m:\n    ans+=1\n    m=h[i]\nprint(ans)\n  ","import sys\n \nstdin = sys.stdin\n\nmod = 1000000007\ninf = 1 << 60\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()\nnas = lambda: stdin.readline().split()\n\nn = ni()\na = na()\n\nm = 0\nans = 0\nfor i in range(n):\n    m = max(m, a[i])\n    if a[i] >= m:\n        ans += 1\n\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nmax_ = 0\ncnt = 0\n\nfor i in range(n):\n    if h[i] >= max_:\n        cnt += 1\n        max_ = h[i]\n\nprint(cnt)","N = int(input())\nH = list(map(int,input().split()))\n\ncount=0\nfor i in range(N):\n    if max(H[0:i+1]) == H[i]:\n        count+=1\n\nprint(count)","def main():\n    N = int(input())\n    H = [int(n) for n in input().split()]\n\n    counter = 0\n    canView = False\n    for i, h in enumerate(H):\n        for j in range(i):\n            if H[j] > h:\n                canView = True\n        if canView:\n            counter += 1\n\n    print(counter)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\nh_list = [int(i) for i in input().split()]\ncount = sum(max(j) == j[-1] for i in range(1, n+1) for j in [h_list[0:i]])\nprint(count)","N = int(input())\nH = list(map(int,input().split()))\ncount = 0\nhighest = 0\nfor h in H:\n    if h >= highest:\n        highest = h\n        count +=1\n\nprint(count)","n = int(input())\nhs = list(map(int,input().split()))\nans = 0\nm = 0\nfor h in hs:\n  if m <= h:\n    ans += 1\n  m = max(m, h)\n\nprint(ans)"],"formatted_programs":["n = int(input())\nH = [int(x) for x in input().split()]\nm = -1\ncc = 0\nfor h in H:\n  cc += (h >= m)\n  m = max(h, m)\nprint(cc)","N = int( input())\nH = list( map( int, input().split()))\nh = H[0]\nnow = 0\nfor i in range(N):\n    if h <= H[i]:\n        now += 1\n        h = H[i]\nprint(now)","# encoding:utf-8\nimport copy\nimport numpy as np\nimport random\nimport bisect #bisect_left\u3000\u3053\u308c\u3067\u4e8c\u90e8\u63a2\u7d22\u306e\u5927\u5c0f\u691c\u7d22\u304c\u884c\u3048\u308b\nimport math\n\n\nN = int(input())\nH = [int(i) for i in input().split()]\n\n\nmax_h = [-1 for i in range(N)]\nmax_h[0] = H[0]\nfor i in range(1,N):\n    max_h[i] = max(max_h[i-1],H[i])\n    \nans = 0\nfor i in range(N):\n    if H[i] >= max_h[i]:\n        ans += 1\nprint(ans)\n\n\"\"\"\nans = 0\nfor i in range(N):\n    base = H[i]\n    check = True\n    for j in range(N):\n        if i<=j:\n            pass\n        else:\n            if H[i]>=H[j]:\n                pass\n            else:\n                check = False\n                break\n    if check:\n        ans += 1\nprint(ans)\n\"\"\"\n","N = int(input())\nH = list(map(int, input().split()))\n\ncount = 0\nfor i in range(N):\n    flg = True\n    for j in range(i):\n        if H[i] < H[j]:\n            flg = False\n            break\n    if flg:\n        count += 1\nprint(count)","n=int(input())\nh=list(map(int,input().split()))\ncnt=1\nmaxh=h[0]\nfor i in range(1,n):\n\tif maxh<=h[i]:\n\t\tmaxh=h[i]\n\t\tcnt+=1\nprint(cnt)","n=int(input())\nb=c=0\nfor h in map(int,input().split()):\n  if b<=h:\n    b=h\n    c+=1\nprint(c)","n=int(input())\nh_arr=[int(s) for s in input().split(\" \")]\n\nhmax=0\ncount = 0\nfor h in h_arr:\n    if h >= hmax:\n        count += 1\n        hmax = h\nprint (count)","hpi = input()\ncount = 1\nk = list(map(int, input().split(\" \")))\nfor c in range(int(hpi) - 1):\n  jo = \"yes\"\n  n = k[:c + 2]\n  for co in range(len(n) - 1):\n    if n[co] > k[c + 1]:\n      jo = \"no\"\n    else:\n      pass\n  if jo == \"yes\":\n    count += 1\nprint(count)\n","\nn = int(input())\nh = list(map(int,input().split()))\ncount = 1\n\nlead = h[0]\nfor a in h[1:]:\n    if lead <= a:\n        lead = a\n        count += 1\nprint(count)\n\n\n","N = int(input())\nH = list(map(int, input().split()))\n\nM = H[0]\nans = 0\nfor h in H:\n    if h < M:\n        continue\n    ans += 1\n    M = h\n\nprint(ans)\n","import sys\ninput = sys.stdin.readline\n\nN = int(input())\nH = list(map(int,input().split()))\nhigh = 0\ncount = 0\nfor i in range(N):\n    if H[i] >= high:\n        count += 1\n        high = H[i]\nprint(count)\n","a = input().split()\nN = list(map(int,input().split()))\nA = int(a[0])\n\ncounter = 1\n\nfor i in range(2,A+1):\n  N_new = N[0:i]\n  N_new_len = len(N_new)\n  if max(N_new) == N_new[int(N_new_len)-1]:\n    counter += 1\nprint(counter)","N = int(input())\nH = list(map(int, input().split()))\n\n\nfor i in range(N-1):\n  if H[i] > H[i+1]:\n    print(i+1)\n  ","n = int(input())\nh_arr = list(map(int, input().split()))\n\nans = 0\nmax_h = h_arr[0]\nfor i in h_arr:\n    if i >= max_h:\n        max_h = i\n        ans += 1\nprint(ans)","N  = input()\nHs = list(map(int,input().split(\" \")))\nlimit = len(Hs)\nans = 0\nfor i in range(limit):\n    h = Hs[i]\n    flag = True\n    for another in Hs[:i]:\n        if h < another:\n            flag = False\n    if flag:\n        ans += 1\nprint(ans)","n=int(input())\nh=list(map(int,input().split()))\nans=1\nfor i in range(1,n):\n  if h[i-1]<=h[i]:\n    ans+=1\nprint(ans)\n  ","N = int(input())\nH = list(map(int, input().split()))\nans = 0\nfor i in range(N):\n    flag = 0\n    for j in range(i):\n        if (H[j] <= H[i]):\n            flag += 1\n    if (flag == i):\n        ans += 1\nprint(ans)\n","n = int(input())\nhs = list(map(int, input().split()))\n\nmaxs = hs[0]\ncount = 1\nfor h in hs[1:]:\n  if h >= maxs:\n    maxs = h\n    count += 1\n\nprint(count)","N = int(input())\nH = list(map(int,input().split()))\n\nans = 1\nmx = H[0]\nfor i in range(1,N):\n    if H[i] >= mx:\n        ans += 1\n        mx = H[i]\n    else:\n        continue\nprint(ans)","N = int(input())\nH = [int(i) for i in input().split(\" \")]\nans = 1\nfor i in range(N -1):\n  if H[i + 1] >= max(H[:i+1]):\n    ans += 1\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nans = 1\nm = h[0]\nfor i in range(1, n):\n    m = max(h[i-1], m)\n    if h[i] >= m:\n        ans += 1\n\nprint(ans)\n","N = int(input())\nH = [int(n) for n in input().split()]\nans = 1\nt = H[0]\nfor h in H[1:]:\n  if t <= h:\n    ans += 1\n  else:\n    break\nprint(ans)\n","N = input().split()\nprint(N)\nh = 1\nfor i in range(1,len(N)):\n    for j in range(i):\n        if (N[i] < N[j]):\n            break\n        if j == i-1:\n            h += 1\nprint(h)","N = int(input())\nH = [int(x) for x in input().split()]\nans = 0\nheight = 0\nfor i in range(N):\n    if height <= H[i]:\n        ans += 1\n        height = H[i]\nprint(ans)\n","n = int(input())\nhs = list(map(int, input().split()))\n\ncnt = 1\n\nfor i in range(1, n):\n    if max(hs[:i]) <= hs[i]:\n        cnt += 1\n\nprint(cnt)\n","N = int(input())\nH = list(map(int, input().split()))\nans = 1\nfor i in range(1,N):\n  if H[i]>=max(H[:i]):\n    ans += 1\nprint(ans)\n","n = int(input())\nH = list(map(int,input().split()))\n\ncount = 1\nfor i in range(1,len(H)):\n    max_h = max(H[0:i+1])\n    if max_h == H[i]:\n        count += 1\n\nprint(count)","n=int(input())\nh=list(map(int,input().split()))\nprint(sum(max(h[:i])<=h[i]for i in range(n)))","N = int(input())\nlist = list(map(int,input().split()))\n\ncont = 0\nfor i in range(0,N):\n    c = 0\n    for j in range(0, i):   \n        if list[j] > list[i]:\n            c = 1\n    if c == 0:\n        cont += 1\n\nprint(cont)","# coding: utf-8\n\nnum = int(input())\nstr = input().split()\ntable = [int(i) for i in str]\ncount = 0\npointed = table[0]\nfor i in range(1, num):\n    if table[0] <= table[i]:\n        count += 1\nprint(count)\n","N = int(input())\nH = list(map(int, input().split()))\nans = 0\nmax = H[0]\nfor i in range(N-1):\n  if H[i+1] >= max:\n    ans += 1\n    max = H[i+1]\nprint(ans+1)","n = int(input())\nh = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, n):\n    if max(h[0:i]) <= h[i]:\n        ans += 1\nprint(ans)","N = int(input())\nH = list(map(int,input().split()))\n\nNH = 1\nfor i in range(N-1):\n    if H[i+1]=>max(H[0:i+1]):\n        NH = NH + 1\n    else:\n        NH = NH\n\nprint(NH)","a = input()\nb = list(map(int, input().split(' ')))\nres = 0\nhikaku_target = 0\n\nfor hei in b:\n    if hei >= hikaku_target:\n        res = res + 1\n    hikaku_target = max(hikaku_target, hei)\nprint(res)\n","N = int(input())\nH = list(map(int, input().split()))\n\nans = 0\nmin_h = 0\n\nfor i in range(N):\n  if H[i] >= min_h:\n    min_h = H[i]\n    ans += 1\n    \nprint(ans)","n = int(input())\nh = [int(i) for i in input().split()]\n\ncount = 0\n\nfor i in range(n):\n\tover = False\n\tfor j in range(i):\n\t\tif h[j] > h[i]:\n\t\t\tover = True\n\n\tif not over:\n\t\tcount += 1\n\nprint(count)","n = int(input())\nh = list( map(int,input().split()) )\n\nx = h[0]\nans = 1\nfor i in range(1,n):\n  if h[i] >= x:\n    ans += 1\n    x = h[i]\nprint(ans)","#!\/usr\/bin\/env python\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.disable(logging.CRITICAL)\n\ndef main():\n    N = int(input())\n    H = list(map(int, input().split()))\n    \n    ans = 1\n    for i in range(1, N):\n        flag = 0\n        for j in range(i):\n            if H[i] < H[j]:\n                flag += 1\n            else:\n                continue\n        logging.debug('flag: {}'.format(flag))\n        if flag == 0:\n            ans += 1\n\n    return ans\n\nif __name__ == '__main__':\n    print(main())\n\n","n = int(input())\nh = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n  ok = True\n  for j in range(i):\n    if h[j]<=h[i]:\n      continue\n    else:\n      ok = False\n      break\n  if(ok):\n    ans+=1\nprint(ans)\n  ","N = int(input())\nheight = []\ncount = 0\nfor i in range(N):\n  x = int(input())\n  height.append(x)\n  if height[i] == max(height):\n    count += 1\n\nprint(count)","n = int(input())\nh = list(map(int,input().split()))\nans = 1\nMax = h[0]\nfor i in range(1,n):\n    if h[i] >= Max:\n        ans += 1\n        Max = h[i]\nprint(ans)\n","N = int(input())\nH = []\nfor i in map(int,input().split()):\n  H.append(i)\n\na = 0\nans = 0\n\nfor i in H:\n  if a <= i:\n    a = i\n    ans += 1\nprint(ans)","n = int(input())\n\nhight = list(map(int, input().split()))\nans = 0\n\nkizyun = hight[0]\n\nfor i in range(n):\n    if kizyun > hight[i]:\n        pass\n    else:\n        ans += 1\n        kizyun = hight[i]\n\nprint(ans)\n","N = int(input())\nHList = list(map(int,input().split()))\ncount = 1\nmax1 = HList[0]\nfor i in range(1,N):\n    if max1 <= HList[i]:\n        count += 1\n    if max1 < HList[i]:\n        max1 = HList[i]\nprint(count)\n","N = [int(s) for s in input().split(\" \")][0]\nHs = [int(s) for s in input().split(\" \")]\nprint(len([0 for i in range(1, N) if all([Hs[i] >= Hs[j] for j in range(i)])]) + 1)","N = int(input())\nlst_H = list(map(int, input().split()))\n\nans = 1\nfor i in range(1, N):\n    if lst_H[i] == max(lst_H[:i+1]):\n        ans += 1\nprint(ans)\n","N=int(input())\nH=list(map(int,input().split()))\ni=0\ncounter=0\nsaidai=0\nwhile i<N:\n    if saidai<=H[i]:\n        saidai=H[i]\n        counter=counter+1\n    i=i+1\nprint(counter)\n","n = int(input())\nhs = input()\nh = [int(j) for j in hs.split(\" \")]\ncount = 0\nflg = 0\nfor i in range(n):\n    for j in range(0, i):\n        if h[i] < h[j]:\n            flg = 1\n            break\n    if flg == 0:\n        count = count + 1\n    flg = 0\n\nprint(count)\n","N=int(input())\nH =[int(j) for j in input().split()]\nmin_ =H[0]\ncnt=0\nfor i in H:\n    if min_<=i:\n        min_=i\n        cnt+=1\n        \nprint(cnt)","import math\n\n\ndef main():\n    n = int(input())\n    # a, b = map(int, input().split())\n    h = list(map(int, input().split()))\n    # s = input()\n    # h = [int(input()) for _ in rane(n)]\n\n    count = 1\n    maxi = h[0]\n    for i in range(1, n):\n        if h[i] >= h[i-1] and h[i] >= maxi:\n            count += 1\n            maxi = h[i]\n    print(count)\n\n\nif __name__ == '__main__':\n    main()\n","N = int(input())\nmountains = list(map(int, input().split()))\n\nhighest = mountains[0]\n\ncnt = 0\n\nfor mt in mountains:\n    if mt >= highest:\n        cnt += 1\n        highest = mt\n        \nprint(cnt)","N= input()\nhighs = input().split()\ncount = 1\nfor i in range(1, len(highs)):\n    if highs[i] >= max(highs[0:i]):\n        count += 1\nprint(count\\n)\n","n = int(input())\nh = list(map(int, input().split()))\n\nc = 0\nfor i in range(len(h)):\n  if max(h[:i+1]) == h[i]:\n    c += 1\nprint(c)","n = int(input())\nh = list(map(int, input().split()))\ncnt = 1\nfor i in range(1,n):\n    for j in range(0,i):\n        if h[i] < h[j]:\n            break\n        if j == i-1:\n            cnt += 1\nprint(cnt)","N = int(input())\nH = list(map(int,input().split()))\n\na = 1\nb = list()\nfor i in range(N+1):\n    if H[i] - H[i-1] > 0:\n        a += 1\n    else:\n        break","n = input()\nh_list = map(int, input().split())\na = 0\nb = 0\nfor h in h_list:\n  if b <= h:\n    b = h\n    a += 1\nprint(a)\n","n = int(input())\nh = list(map(int, input().split()))\n\ncnt = 0\nmaxh = h[0]\nfor i in range(n):\n\tif h[i] >= maxh:\n\t\tcnt += 1\n\t\tmaxh = h[i]\nprint(cnt)","N = int(input())\nH = list(int(i) for i in input().split())\ncount = 0\nhigh = 0\nfor i in range(N):\n  if H[i] >= high:\n    count += 1\n    high = max(high, H[i]) \n  else:\n    high = max(high, H[i])\nprint(count)","N = input()\nN = int(N)\nstr = input().split()\nH = []\ni = 0\nj = 0\nfor i in range(N):\n  H.append( int(str[i]) )\nflag\nans = 0\nfor i in range(N):\n  for j in range(i):\n    if H [i] < H[j]:\n      flag = 1\n    else:\n      flag = 0\n  if flag == 0:\n    ans = ans+1\n\nprint(ans)","n = int(input())\ns = list(map(int,input().split()))\nans = 1\nmax = s[0]\nfor i in range(1,n):\n  if s[i] >= s[i-1] and max <= s[i]:\n    ans+=1\n    if s[i] >= max:\n      max = s[i]\nprint(ans)   ","n=int(input())\na=list(map(int,input().split()))\nM=0\ncnt=0\nfor i in range(n):\n    if M<=a[i]:\n        cnt+=1\n        M=a[i]\nprint(cnt)","N = int(input())\nH = [int(i) for i in input().split()]\nmax_left = [0 for i in range(N)]\nfor i in range(1,N):\n  max_left[i] = max(max_left[i-1], H[i-1])\nres = 0\nfor i in range(N):\n  if H[i] >= max_left[i]:\n    res += 1\nprint (res)","n = int(input())\na = list(map(int, input().split()))\nm = a[0]\ncnt = 0\nfor i in range(n):\n    m = max(m, a[i])\n    if m <= a[i]:\n        cnt += 1\nprint(cnt)","n = int(input())\nh = list(map(int, input().split()))\nm = 1\nh_max = h[0]\n\nfor i in range(1, n):\n    if(h[i] >= h_max):\n        m += 1\n        h_max = h[i]\nprint(m)","N = int(input())\nH = list(map(int, input().split()))\nm = 0\ncout = 0\nfor i in range(N):\n    if m <= H[i]:\n        cout += 1\n    m = max(m, H[i])\nprint(cout)\n","# coding: utf-8\n# Your code here!\nn=int(input())\nh = list(map(int, input().split()))\n\nans=1\n\nfor i in range(1,len(h)):\n  if len(list(filter(lambda x: x <= h[i], h[:i])))==i:\n      ans=ans+1\nprint(ans)\n\n","n = int(input())\nh = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n    if max(h[0:i+1])<=h[i]:\n        c = c+1\nprint(c)","n = int(input())\nh = input().split()\nH = []\ni = 0\nwhile(i < n):\n    H.append(int(h[i]))\n    i+=1\n#print(H)\n\ni = 0\nhigh = 0\nnum = 0\nwhile(i < n):\n    if(H[i] >= high):\n        num += 1\n    if(high < H[i]):\n        high = H[i]\n    i += 1\n\nprint(num)","N = int(input())\nH = map(int, input().split())\n\ntmp_high = 0\nans = 0\nfor h in H:\n    if h >= tmp_high:\n        ans += 1\n    tmp_high = max(h,tmp_high)\nprint(ans)","n=int(input())\nH=list(map(int,input().split()))\nans=0\nhgt=0\nfor i in range(n):\n    if H[i]>=hgt:\n        ans+=1\n    hgt=max(hgt,H[i])\nprint(ans)\n","n = int(input())\n\nL = list(map(int,input().split()))\n\nmountain = int(1)\nfor i in range(1, n):\n    for j in range(i):\n        if int(L[j]) > int(L[i]):\n            break\n        if int(L[j]) <= int(L[i]) and j == i-1:\n            mountain += 1\n            break\n        if int(L[j]) <= int(L[i]):\n            continue\n\nprint(mountain)\n","\n\nn = raw_input()                                    \n\nar = []                                            \nh = raw_input().split()                            \n\ncnt = 0                                            \nm = 0\nfor i in h:\n    if (i >= max(m, i)):                           \n        cnt += 1                                   \n        m = i\n\nprint cnt","N,*H = map(int, open(0).read().split())\n#print(N,H)\nL = 0\nfor i in range(N):\n    if i == 0:\n        L+=1\n    elif H[i-1] <= H[i]:\n        L+=1\nprint(L)\n","a = list(map(int, input().split()))\nb = list(map(int, input().split()))\nd = []\nfor i in range(len(b)):\n    c = False\n    for j in range(i):\n        if b[i] < b[j]:\n            c = True\n    if c == False:\n        d.append(i+1)\n\nprint(len(d))\n\n","n = int(input())\nh = list(map(int, input().split()))\n\nmax = h[0]\ncount = 0\nfor i in h:\n    if max <= i:\n        count += 1\n        max = i\n    else:\n        continue\nprint(count)","n = int(input())\nh_list = [int(x) for x in input().split()]\n\nans = 0\nh_max = 0\nfor h in h_list:\n    if h < h_max:\n        continue\n    ans += 1\n    h_max = h\nprint(ans)","N = int(input())\nH = list(map(int, input().split()))\nans = 1\nfor i in range(1, N-1):\n  isOK = True\n  for j in range(i):\n    if H[j] > H[i]: isOK = False\n  if isOK: ans+=1\nprint(ans)","n = int(input())\nh = list(map(int,input().split()))\nans=1\ntp=h[0]\nfor j in range(1,n):\n    if(h[j]>=tp):\n        tp=h[j]\n        ans+=1\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\nout = 0\nfor i in range(len(a)):\n  flg = 1\n  if i > 0 :\n    for j in range(i):\n      if not (a[j] <= a[i]):\n        flg = 0\n  if flg == 1:\n    out += 1\nprint(out)","input() #n\nans = hmax = 0\n \nfor h in map(int, input().split()):\n  if hmax <= h:\n    hmax = h\n    ans += 1\nprint(ans)","N = int(input())\nH = list(map(int,input().split()))\nmaxH = 0\nn = 1\n\nfor i, h in enumerate(H):\n  if i == 0:\n  \tmaxH = h\n  else:\n    if h >= maxH:\n    \tn += 1\n    \tmaxH = h\n    \nprint(n)","def B(lst,r=[],c=1):\n    if len(lst) == c:\n        return r\n    if len([i for i in lst[0:c] if lst[c] >= i]) == c:\n        return B(lst,r + [lst[c]],c+1)\n    else:\n        return B(lst,r,c+1)\n\ni = int(input())\nlst = list(map(int,input().split(\" \")))\nprint(len(B(lst))+1)","N = int(input())\nl = list(map(int,input().split()))\ncount = 1\nmax = l[0]\nfor i in range(l):\n  if max <= l[i]:\n   \tcount += 1\n    max = l[i]\n\nprint(count)","N = int(input())\nH = list(map(int, input().split()))\nm = 0\nc = 0\nfor i in range(N):\n  if H[i] >= m:\n    c += 1\n    m = H[i]\nprint(c)\n","n = int(input())\nh = list(map(int,input().split()))\nans = 0\nfor i in range(n):\n    if h[i] == max(h[:i+1]):\n        ans += 1\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nsum=1\nfor i in range(1, n):\n        flag = True\n        for j in range(0, i):\n                if(h[j] > h[i]):\n                        flag = False\n        if(flag):\n                sum+=1\nprint(sum)","N=int(input())\nH=list(map(int,input().split()))\n#N=5\n#H=[10,7,37,69,5]\nMax=0\ncount=0\nfor i in range(N):\n    if H[i]>=Max:\n        Max=H[i]\n        count+=1\nprint(count)\n","n=int(input())\nh=list(map(int,input().split()))\ncnt=1\nfor i in range(1,n):\n    if max(h[0],h[1],h[i-1],h[i])==h[i]:\n        cnt+=1\nprint(cnt)","n = input()\ns = [int(i) for i in input().split()]\ncnt = 1\ntmp = s[0]\nfor i in range(1, len(s)):\n  if s[i] >= tmp:\n    cnt += 1\n    tmp = s[i]\nprint(cnt)\n    ","n = int(input())\nh = list(map(int, input().split()))\ncnt = 0\nhighest = 0\nfor i in h:\n    if i >= highest:\n        highest = i\n        cnt += 1\nprint(cnt)","N=int(input())\nH=map(int,input().split())\nans,maxh=0,0\nfor h in H:\n  if maxh<=h:\n    ans+=1\n    maxh=h\nprint(ans)","print((lambda n,a:[all([a[j]<=a[i] for j in range(i)]) for i in range(n)].count(True))(int(input()),list(map(int,input().split()))))","n=int(input())\nh=list(map(int,input().split()))\nans=1\nm=h[0]\nfor i in range(1,n):\n  if h[i]>m:\n    ans+=1\n    m=h[i]\nprint(ans)\n  ","import sys\n \nstdin = sys.stdin\n\nmod = 1000000007\ninf = 1 << 60\n \nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nns = lambda: stdin.readline().rstrip()\nnas = lambda: stdin.readline().split()\n\nn = ni()\na = na()\n\nm = 0\nans = 0\nfor i in range(n):\n    m = max(m, a[i])\n    if a[i] >= m:\n        ans += 1\n\nprint(ans)","n = int(input())\nh = list(map(int, input().split()))\n\nmax_ = 0\ncnt = 0\n\nfor i in range(n):\n    if h[i] >= max_:\n        cnt += 1\n        max_ = h[i]\n\nprint(cnt)","N = int(input())\nH = list(map(int,input().split()))\n\ncount=0\nfor i in range(N):\n    if max(H[0:i+1]) == H[i]:\n        count+=1\n\nprint(count)","def main():\n    N = int(input())\n    H = [int(n) for n in input().split()]\n\n    counter = 0\n    canView = False\n    for i, h in enumerate(H):\n        for j in range(i):\n            if H[j] > h:\n                canView = True\n        if canView:\n            counter += 1\n\n    print(counter)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\nh_list = [int(i) for i in input().split()]\ncount = sum(max(j) == j[-1] for i in range(1, n+1) for j in [h_list[0:i]])\nprint(count)","N = int(input())\nH = list(map(int,input().split()))\ncount = 0\nhighest = 0\nfor h in H:\n    if h >= highest:\n        highest = h\n        count +=1\n\nprint(count)","n = int(input())\nhs = list(map(int,input().split()))\nans = 0\nm = 0\nfor h in hs:\n  if m <= h:\n    ans += 1\n  m = max(m, h)\n\nprint(ans)"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> positive integers written on a blackboard: <var>A_1, ..., A_N<\/var>.<\/p>\n<p>Snuke can perform the following operation when all integers on the blackboard are even:<\/p>\n<ul>\n<li>Replace each integer <var>X<\/var> on the blackboard by <var>X<\/var> divided by <var>2<\/var>.<\/li>\n<\/ul>\n<p>Find the maximum possible number of operations that Snuke can perform.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 200<\/var><\/li>\n<li><var>1 \\leq A_i \\leq 10^9<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>A_1<\/var> <var>A_2<\/var> ... <var>A_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the maximum possible number of operations that Snuke can perform.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3\n8 12 40\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<p>Initially, <var>[8, 12, 40]<\/var> are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.<\/p>\n<p>After the operation is performed once, <var>[4, 6, 20]<\/var> are written on the blackboard.\nSince all those integers are again even, he can perform the operation.<\/p>\n<p>After the operation is performed twice, <var>[2, 3, 10]<\/var> are written on the blackboard.\nNow, there is an odd number <var>3<\/var> on the blackboard, so he cannot perform the operation any more.<\/p>\n<p>Thus, Snuke can perform the operation at most twice.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>4\n5 6 8 10\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>0\n<\/pre>\n<p>Since there is an odd number <var>5<\/var> on the blackboard already in the beginning, Snuke cannot perform the operation at all.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>6\n382253568 723152896 37802240 379425024 404894720 471526144\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>8\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.\n\n\n\n\nConstraints\n1 \\leq N \\leq 200\n1 \\leq A_i \\leq 10^9\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n\n\n\n\nOutputPrint the maximum possible number of operations that Snuke can perform.\n\n\n\n\n\n\nSample Input 13\n8 12 40\n\n\n\n\n\nSample Output 12\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n\n\n\n\n\nSample Input 24\n5 6 8 10\n\n\n\n\n\nSample Output 20\n\nSince there is an odd number 5 on the blackboard already in the beginning, Snuke cannot perform the operation at all.\n\n\n\n\n\nSample Input 36\n382253568 723152896 37802240 379425024 404894720 471526144\n\n\n\n\n\nSample Output 38\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> positive integers written on a blackboard: <var>A_1, ..., A_N<\/var>.<\/p>\n<p>Snuke can perform the following operation when all integers on the blackboard are even:<\/p>\n<ul>\n<li>Replace each integer <var>X<\/var> on the blackboard by <var>X<\/var> divided by <var>2<\/var>.<\/li>\n<\/ul>\n<p>Find the maximum possible number of operations that Snuke can perform.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 200<\/var><\/li>\n<li><var>1 \\leq A_i \\leq 10^9<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>A_1<\/var> <var>A_2<\/var> ... <var>A_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the maximum possible number of operations that Snuke can perform.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3\n8 12 40\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<p>Initially, <var>[8, 12, 40]<\/var> are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.<\/p>\n<p>After the operation is performed once, <var>[4, 6, 20]<\/var> are written on the blackboard.\nSince all those integers are again even, he can perform the operation.<\/p>\n<p>After the operation is performed twice, <var>[2, 3, 10]<\/var> are written on the blackboard.\nNow, there is an odd number <var>3<\/var> on the blackboard, so he cannot perform the operation any more.<\/p>\n<p>Thus, Snuke can perform the operation at most twice.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>4\n5 6 8 10\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>0\n<\/pre>\n<p>Since there is an odd number <var>5<\/var> on the blackboard already in the beginning, Snuke cannot perform the operation at all.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>6\n382253568 723152896 37802240 379425024 404894720 471526144\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>8\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementThere are N positive integers written on a blackboard: A_1, ..., A_N.\nSnuke can perform the following operation when all integers on the blackboard are even:\n\nReplace each integer X on the blackboard by X divided by 2.\n\nFind the maximum possible number of operations that Snuke can perform.\n\n\n\n\nConstraints\n1 \\leq N \\leq 200\n1 \\leq A_i \\leq 10^9\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\nA_1 A_2 ... A_N\n\n\n\n\n\nOutputPrint the maximum possible number of operations that Snuke can perform.\n\n\n\n\n\n\nSample Input 13\n8 12 40\n\n\n\n\n\nSample Output 12\n\nInitially, [8, 12, 40] are written on the blackboard.\nSince all those integers are even, Snuke can perform the operation.\nAfter the operation is performed once, [4, 6, 20] are written on the blackboard.\nSince all those integers are again even, he can perform the operation.\nAfter the operation is performed twice, [2, 3, 10] are written on the blackboard.\nNow, there is an odd number 3 on the blackboard, so he cannot perform the operation any more.\nThus, Snuke can perform the operation at most twice.\n\n\n\n\n\nSample Input 24\n5 6 8 10\n\n\n\n\n\nSample Output 20\n\nSince there is an odd number 5 on the blackboard already in the beginning, Snuke cannot perform the operation at all.\n\n\n\n\n\nSample Input 36\n382253568 723152896 37802240 379425024 404894720 471526144\n\n\n\n\n\nSample Output 38\n\n\n","solve_rate":0.6498111426,"codenet_problem_id":"p03494","input_testcases":{"25":"6\n586050932 1154626501 31409214 41028353 52438452 471526144","88":"3\n1 36 65","70":"6\n71148002 1320359906 59907007 21985869 236966 233525638","40":"6\n586050932 1892549229 30334838 27068201 10685560 243833698","39":"3\n7 13 25","34":"6\n586050932 1154626501 31409214 27068201 10685560 243833698","19":"6\n586050932 1154626501 31409214 41028353 590201381 471526144","63":"3\n9 13 16","94":"6\n71148002 1800176736 117468765 5864889 179710 1171612875","28":"6\n586050932 1154626501 31409214 27068201 52438452 471526144","69":"3\n9 36 16","67":"6\n71148002 1320359906 59907007 21985869 236966 136055793","59":"4\n9 6 43 16","35":"4\n27 6 15 9","22":"6\n586050932 1154626501 31409214 41028353 46444612 471526144","0":"6\n382253568 723152896 37802240 379425024 590201381 471526144","2":"3\n16 36 16","20":"4\n10 6 11 15","83":"6\n71148002 1055849701 81412222 34292530 236966 734273188","54":"3\n7 13 12","24":"3\n4 11 31","76":"4\n10 5 43 27","33":"3\n7 7 52","79":"4\n10 4 43 27","5":"4\n5 6 22 10","50":"4\n12 3 26 9","96":"6\n71148002 1800176736 57659801 5864889 174453 1171612875","38":"4\n27 6 17 9","103":"4\n5 6 8 10","29":"4\n14 6 15 19","89":"6\n71148002 1800176736 81412222 7499695 179710 734273188","64":"6\n71148002 1320359906 59907007 27068201 236966 136055793","101":"3\n8 12 40","75":"6\n71148002 1320359906 81412222 21985869 236966 400136429","57":"3\n7 13 22","66":"3\n9 25 16","36":"3\n7 7 25","23":"4\n10 6 11 19","56":"4\n9 6 43 9","16":"6\n586050932 1154626501 31409214 379425024 590201381 471526144","73":"4\n10 5 43 30","43":"6\n586050932 1892549229 30334838 27068201 19465326 243833698","86":"3\n1 36 58","10":"6\n348324507 1154626501 32183854 379425024 590201381 471526144","4":"6\n382253568 723152896 32183854 379425024 590201381 471526144","81":"6\n71148002 1055849701 81412222 21985869 236966 734273188","102":"3\n8 12 40","55":"6\n105530884 1892549229 59907007 27068201 236966 442481745","87":"6\n71148002 1800176736 81412222 7499695 236966 734273188","100":"6\n382253568 723152896 37802240 379425024 404894720 471526144","71":"4\n10 5 43 24","12":"3\n13 12 31","32":"4\n27 6 15 19","17":"4\n10 6 7 15","80":"3\n1 36 21","84":"3\n1 36 66","65":"4\n13 6 43 24","46":"6\n586050932 1892549229 59907007 27068201 19465326 243833698","62":"4\n13 6 43 16","30":"3\n4 7 52","74":"3\n13 36 16","99":"6\n71148002 1800176736 24185535 5864889 179543 1171612875","42":"3\n2 13 25","68":"4\n10 6 43 24","53":"4\n9 6 26 9","78":"6\n71148002 1055849701 81412222 21985869 236966 400136429","92":"3\n2 36 114","52":"6\n105530884 1892549229 59907007 27068201 236966 243833698","97":"6\n71148002 1800176736 26596048 5864889 174453 1171612875","85":"6\n71148002 1055849701 81412222 7499695 236966 734273188","21":"3\n4 23 31","27":"3\n4 7 31","82":"3\n1 36 38","60":"3\n7 13 16","8":"4\n5 6 24 10","7":"6\n348324507 723152896 32183854 379425024 590201381 471526144","48":"3\n7 13 5","49":"6\n586050932 1892549229 59907007 27068201 236966 243833698","37":"6\n586050932 1154626501 30334838 27068201 10685560 243833698","45":"3\n4 13 25","13":"6\n586050932 1154626501 32183854 379425024 590201381 471526144","61":"6\n105530884 1320359906 59907007 27068201 236966 136055793","11":"4\n10 6 24 10","3":"4\n5 6 13 10","1":"3\n10 12 40","72":"6\n71148002 1320359906 59907007 21985869 236966 400136429","77":"3\n1 36 16","98":"6\n71148002 1800176736 24185535 5864889 174453 1171612875","41":"4\n12 6 17 9","95":"6\n71148002 1800176736 117468765 5864889 174453 1171612875","91":"6\n71148002 1800176736 117468765 7499695 179710 734273188","93":"6\n71148002 1800176736 117468765 5864889 179710 734273188","58":"6\n105530884 1892549229 59907007 27068201 236966 136055793","31":"6\n586050932 1154626501 31409214 27068201 52438452 243833698","51":"3\n7 13 8","26":"4\n14 6 11 19"},"output_testcases":{"25":"0\n","88":"0\n","70":"0\n","40":"0\n","39":"0\n","34":"0\n","19":"0\n","63":"0\n","94":"0\n","28":"0\n","69":"0\n","67":"0\n","59":"0\n","35":"0\n","22":"0\n","0":"0\n","2":"2\n","20":"0\n","83":"0\n","54":"0\n","24":"0\n","76":"0\n","33":"0\n","79":"0\n","5":"0\n","50":"0\n","96":"0\n","38":"0\n","103":"0\n","29":"0\n","89":"0\n","64":"0\n","101":"2\n","75":"0\n","57":"0\n","66":"0\n","36":"0\n","23":"0\n","56":"0\n","16":"0\n","73":"0\n","43":"0\n","86":"0\n","10":"0\n","4":"0\n","81":"0\n","102":"2\n","55":"0\n","87":"0\n","100":"8\n","71":"0\n","12":"0\n","32":"0\n","17":"0\n","80":"0\n","84":"0\n","65":"0\n","46":"0\n","62":"0\n","30":"0\n","74":"0\n","99":"0\n","42":"0\n","68":"0\n","53":"0\n","78":"0\n","92":"1\n","52":"0\n","97":"0\n","85":"0\n","21":"0\n","27":"0\n","82":"0\n","60":"0\n","8":"0\n","7":"0\n","48":"0\n","49":"0\n","37":"0\n","45":"0\n","13":"0\n","61":"0\n","11":"1\n","3":"0\n","1":"1\n","72":"0\n","77":"0\n","98":"0\n","41":"0\n","95":"0\n","91":"0\n","93":"0\n","58":"0\n","31":"0\n","51":"0\n","26":"0\n"},"n_missing":8,"programs":["n=input()\nl=list(map(int, input().split()))\n\ncount=0\n\nwhile all(i\/2==0 for i in l):\n  l=[i\/2 for i in l]\n  count+=1\n  \nprint(count)","n = int(input())\nmax_cnt = 0\nnum_list = [] \nfor i in range(n):\n  num_list.append(int(input()))\nfor num in num_list:\n  num_cnt = 0\n  while True:\n    if num % 2 == 1:\n      if num_cnt > max_cnt: max_cnt = num_cnt\n      break\n    else:\n      num = num \/ 2\n      num_cnt += 1\nprint(max_cnt)\n ","# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nsize = int(input())\nnums = [int(s) for s in input().split()]\n\ncount = 0\nchecked = False\n\nwhile True:\n  for i in range(size):\n    t = nums[i]\n    if t % 2 == 1:\n      checked = True\n      break;\n    nums[i] = t\/2\n  if checked:\n    break\n  count = count + 1\n\nprint(count)\n","N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\n\ndivide_two_num = []\nfor i in A:\n    n = 0\n    while i > 1:\n        if i % 2 == 0:\n            i \/\/= 2\n            n += 1\n        else:\n            break\n    divide_two_num += [n]\n\nprint(min(divide_two_num))","N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True: \n    odd_flag = False\n    for i in range(N):\n        if A[i] % 2 == 1:\n            odd_flag = True\n    if odd_flag:\n        break\n    for i in range(N):\n        A[i] = A[i] \/\/ 2\n    cnt += 1\n\nprint(cnt)","n=eval([*open(0)][1].replace(*' |'))\nprint(len(bin(n&-n))-3)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(512):\n    for j in range(n):\n        if a[j] % 2 != 0:\n            break\n    else:\n        ans += 1\n    a = list(map(lambda x: x \/ 2, a))\nprint(ans)\n","import re;\nimport sys;\nimport math;\nfrom functools import reduce;\nsys.stdin.readline()\na=reduce(math.gcd,map(int, sys.stdin.readline()[:-1].split()))\nm=re.search(r'.*?1?(0+)$','{0:b}0'.format(a))\nprint(len(m[1])-1)\n","input()\nnums = input().split()\nresult = 18\nfor num in nums:\n  num = int(num)\n  div_times = 0\n  while (num & 1) == 0:\n    num = num >> 1\n    div_times += 1\n  if div_times < result:\n    result = div_times\nprint(result)","N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True:\n    for i in range(len(A)):\n        if A[i] % 2 != 0:\n            break #for\u304b\u3089\u629c\u3051\u308b\n    else:\n        A = [a\/2 for a in A]\n        cnt += 1\n        continue\n    break #while\u304b\u3089\u629c\u3051\u308b\n\nprint(cnt)","N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\nans = []\nfor i in range(N):\n    while A[i]%2==0:\n        A[i] \/=2\n        cnt += 1\n    ans.append(int(cnt))\n    cnt = 0\n        \nprint(min(ans))","def count_factor2(num):\n    count = 0\n    while True:\n        if num % 2 == 0:\n            count += 1\n            num \/\/= 2\n        else:\n            return count\n\nn = input()\nnums = [int(i) for i in input().split()]\n\nprint(min([count_factor2(num) for num in nums]))\n","num = int(input())\nx = input().split()\ncount = 0\nTF = True\nwhile TF: \n    count += 1\n    for i in range(0,num):\n        number = int(x[i])\n        if(number%2==0):\n            number = number\/2\n            x[i] =  number\n            TF = True\n        else:\n            TF =False\nprint(count)\n","def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    c = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 1:\n                return c\n            else:\n                A[i] = A[i] \/\/ 2\n        c += 1\n    print(c)\n\nmain()","N = int(input())\nA = list(map(int,input().split()))\na = A\ndef calc(n):\n  if(n%2 == 0):\n    return int(n\/2)\n  else:\n    return False\n\ncnt = 0\nwhile all(a) == True:\n  a = list(map(calc, a))\n  cnt += 1\nprint(cnt-1)","n = int(input())\na = list(map(int, input().split()))\n\ndef count(x):\n    cnt = 0\n    while x%2==0:\n        x\/\/=2\n        cnt += 1\n    return cnt\n\nans = 10**9\nfor i in a:\n    ans = min(ans, count(i))\nprint(ans)","# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Nov 11 15:09:04 2018\nABC081\n@author: maezawa\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nj = 0\nok = True\nwhile ok:\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i]\/\/2\n        else:\n            ok = False\n            break\n    if ok:\n        j += 1\n\nprint(j)\n        ","n=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in l:\n  t=0\n  while(i%2==0):\n    i=i\/\/2\n    t+=1\n  ans=min(ans,t)\nprint(ans)","# coding: utf-8\nN = int(input())\nA = [int(n) for n in input().split(\" \")]\ncnt = 0\nisKeep = True\nwhile(isKeep):\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            A[i] = A[i]\/2\n        else:\n            isKeep = False\n    if isKeep:\n        cnt = cnt + 1\nprint(cnt)","import sys\nsys.setrecursionlimit(10**8)\n\ndef sort(a):\n\ta.sort()\n\ndef rev(a):\n\ta.reverse()\n\ndef sd():\n\treturn int(input())\n\ndef _sd():\n\treturn map(int,input().split())\n\n\ndef ss():\n\treturn input()\n\ndef sf():\n\treturn float(input())\n\ndef dfs():\n\t\t# write dfs code here. And delete pass.\n\t\tpass\n\ndef bfs():\n\t\t# write bfs code here. And delete pass.\n\t\tpass\n \ndef main():\n\tf=bool(False)\n\tans = int(0)\n\tN=sd()\n\tA=list(map(int,input().split()))\n\twhile(1):\n\t\tfor i in range(N):\n\t\t\tif A[i]%2:\n\t\t\t\tf=True\n\t\t\telse : \n\t\t\t\tA[i]\/=2\n\t\tif(not f):\n\t\t\tans+=1\n\t\telse:\n\t\t\tbreak\n\tprint(ans)\n\nmain()","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nflag = False\nfor i in range(10000):\n    for j in range(n):\n        if a[j] % 2 != 0:\n            flag = True\n        a[j] \/= 2\n    if flag:\n        break\n    cnt += 1\nprint(cnt)","n = int(input())\nA = list(map(int, input().split()))\n\nanswer = 0\nflg = 0\nwhile 1:\n\tfor i in range(len(A)):\n\t\tif A[i] % 2 == 0:\n\t\t\tA[i] = A[i]\/\/2\n\t\telse:\n\t\t\tflg = 1\n\t\t\tbreak\n\tif flg == 1:\n\t\tbreak\n\telse:\n\t\tanswer+=1\nprint(answer)\n","N = int(input())\nA = list(map(int, input().split()))    \n\ncount, end =0,0\nwhile end==0:\n    A= list(map(lambda x: x\/2, A))\n    for i in range(N):\n        if A[i]% 2 == 1:\n            end=1\n    count +=1\nprint(count)\n","n=input()\n\na=list(map(bin(int),input(),split()))\n\nb=map(rfind('1')-1,a)\n\nprint(min(b))","# coding-utf8 #\n\nn = int(input())\n\nli = list(map(int, input().split()))\n\ncount = 0\nresult = 0\nflag = True\n\nwhile flag:\n  for index, num in enumerate(li):\n    if num % 2 == 0:\n      count += 1\n      li[index] = num \/ 2\n\n  if count == n:\n    count = 0\n    result += 1\n  else:\n    flag = False\n\nprint(result)","import sys\ndef input(): return sys.stdin.readline().strip()\nn=input()\naa=list(map(int,input().split()))\nc=0\nwhile True:\n    if all(a&1==0 for a in aa):\n        aa = list(map(lambda a: a>>1, aa))\n        c+=1\n    else:\n        break\nprint(c)","\ndef count(x):\n    c = 0\n    while True:\n        if x == 1 or x == 0:\n            return c\n        x, v = divmod(x, 2)\n        if v == 0:\n            c += 1\n        else:\n            return c\n\ndef main():\n    n = [int(x.strip()) for x in input().split()]\n    a = [int(x.strip()) for x in input().split()]\n\n    m = 10 ** 9\n    for x in a:\n        c = count(x)\n        m = min(m, c)\n\n    print(m)\n    \n\nif __name__ == '__main__':\n    main()\n","N = int(input())\nA = list(map(int, input().split()))\n\nf = True\ncnt = 0\nwhile(f):\n\tfor i in range(N):\n\t\tif A[i]%2 == 0:\n\t\t\tA[i] = A[i]\/\/2\n\t\telse:\n\t\t\tf = False\n\t\t\tbreak\n\tif f:\n\t\tcnt += 1\n\nprint(cnt)\n\t\t\t","N = int(input())\nx = list(map(int, input().split()))\nmn_lst = []\nfor i in x:\n    cnt = 0\n    while i % 2 == 0:\n        cnt += 1\n        i >>= 1\n    mn_lst.append(cnt)\n    \nprint(min(mn_lst))","n=int(input())\ndat = list(map(int, input().split()))\ndan = []\nfor e in dat:\n    e = str(bin(e))\n    e=e[2:]\n       \n\n                \n\n         \n           \n\n\n","N = int(input())\nA = list(map(int,input().split()))\namari = 0\nans = 0\nwhile True:\n    for i in A:\n        amari += i%2\n    if amari != 0:\n        break\n    elif amari == 0:\n        for j in range(len(A)):\n            A[j] = A[j]\/2\n        ans += 1\nprint(ans)   ","def divide_count(n):\n    cnt = 0\n    while n % 2 == 0:\n        n \/= 2\n        cnt += 1\n    return cnt\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min(map(divide_count, a)))\n","N = int(input())\nA = list(map(int,input().split()))\n\ncount = 0\nsw = 1\n\nwhile sw==1:\n\tsw = 0\n\ttmp = 0\n\tfor i in range(N):\n\t\ttmp = tmp + A[i]%2\n\tif tmp == 0:\n\t\tA = list(map(lambda x:x\/2,A))\n\t\tcount = count + 1\n\t\tsw = 1\n\telse:\n\t\tbreak\n\nprint(count)\n","n = int(input())\nl=list(map(int ,input().split(\" \")))\ncount=0\nwhile True:\n    for i in range(n):\n        if l[i]%2==0:\n            l[i]=l[i]\/\/2\n        else:\n            print(count)\n            exit()\n    count+=1    ","N=int(input())\nA=list(map(int,input().split()))\ncount=0\nwhile all(a%2==0 for a in A):\n    A=[a\/2 for a in A]\n    count+=1\nprint(count)","n=int(input())\na=list(map(int,input().split()))\n\nfor A in a:\n    cnt=0\n    while A % 2==0:\n        A=A\/\/2\n        cnt=cnt+1\n\nprint(cnt)\n","c=0;_,*l=map(int,open(0).read().split())\nwhile all(map(lambda i:i&1==0,l)):l=list(map(lambda i:i>>1,l));c+=1\nprint(c)","N = int(input())\nA = list(map(int,input().split()))\nj = True\ncount = 0\nwhile j :\n     for i in range(N):\n             if A[i] % 2 == 0 or A[i] == 0:\n                     A[i] =\/ 2\n             else:\n                     j = False\n     if j == True:             \n     \tcount += 1\nprint(count)","n = int(input())\nA = list(map(int, input().split()))\ncount = 0\nwhile True:\n    for i in range(n):\n        if (A[i] % 2 == 1) or (A[i] == 0):\n            break\n        elif:\n            A[j] = A[j] \/\/ 2\n            s += 1\n            continue\n    \n    break\nprint(count)\n","import numpy as np\n# \u8907\u6570\u500b\u683c\u7d0d\n# A B = map(int, input().split())\n# \u884c\u5217\u5316\n# A = np.array(A)\n# A=A.reshape(1,-1)\n# A=A.T\n\nN = int(input())\nA = list(map(int, input().split()))\nA = np.array(A)\nA=A.reshape(1,-1)\nvector0=A*0\ncount=0\ni=0\nflg=False\n\nfor i in range(N):\n    B=A%2\n    C=((A%2 == vector0).all())\n    if C == False:\n        break\n    count=count+1\n    A=A\/2\n\nprint(count)","n = int(input())\nlst = list(map(int, input().split()))\nans = 0\nfor x in lst:\n  c = 0\n  while x % 2 == 0:\n    x \/\/= 2\n    c += 1\n  if ans < c:\n    ans = c\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(30):\n    c=i\n    for j in range(n):\n        if a[j]%2==0:\n            a[j]\/\/=2\n        else:\n            l.append(c)\n            break\nprint(l[0])","int(input())\nA = list(map(int, input().split()))\n\ncount = 0\n\nwhile all(a%2==0 for a in A):\n  A = [a\/2 for a in A]\n  count+=1\n  \nprint(count)","n=int(input())\na=list(map(int,input().split()))\n\ni=0\nwhile sum(a)%2==0:\n    end=False\n\n    for x in a:\n        if x%2!=0:\n            end=True\n            break\n\n    if end: \n        break\n        \n    a=list(map(lambda x: x\/2, a))\n    i+=1\n\nprint(i)","n = int(input())\nns = list(map(int, input().split()))\ncnt = 0\nwhile all(i % 2 == 0 for i in ns):\n    cnt += 1\n    ns = [i \/\/ 2 for i in ns]\nprint(cnt)","import math\nN = int(input())\nA = list(map(int, input().split()))\nans = float('inf')\nfor a in A:\n  ans = min(ans, len(bin(a)) - bin(a).rfind('1') - 1)\nprint(ans)","_ = input()\na = map(int, input().split())\ncnt = 0\n \nwhile(1):\n  flg = 0\n  for i in a:\n    if(i%2 == 1):\n      flg = 1\n      break\n      \n  if(flg == 0):\n    a = map(lambda x:x\/2, a)\n    cnt += 1\n  else:\n    break\n \nprint(cnt)","N = input()\nB = False\nkaisu = 0\narray = map(int,input().split())\n\ndef calc(n):\n  retuen n\/2\n  \n  \nwhile !B:\n\tfor i in range(N):\n  \t\tif array[i]\/2 == 1:\n    \t\tB = True\n  \tif B == False:\n    \tarray = map(calc, array)\n    \tkaisu += 1\n  \telse:\n    \tbreak\n        \nprint(kaisu)\n    \n\n    ","N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\n \nwhile True:\n    for i in range(len(A)):\n        if A[i]%2 != 0:\n            break\n        elif A[i]%2 == 0:\n            A[i] \/= 2\n    else:\n        cnt += 1\n        continue\n    break\n    \nprint(cnt)","N = int(input())\nnumbers = list(map(int,input().split()))\n\ncount=0\nwhile True:\n  for number in numbers:\n    if number%2 != 0:\n      print(int(count))\n      quit()\n      \n  numbers = list(map(lambda number:number\/2,numbers))\n  count += 1\n\nprint(int(count))","N = int(input())\nA = [int(a) for a in input().split()]\n\nflag = False\nans = 0\n\nwhile flag == False :\n\tfor i in range(len(A)):\n\t\tif A[i] % 2 == 0 :\n\t\t\tA[i] = A[i] \/\/ 2\n\t\telse :\n\t\t\tflag = True\n\t\t\tbreak\n\tif flag == False :\n\t\tans += 1\n\nprint(ans)\n","N = input()\na = list(map(int, input().split()))\n     \nanswer = 0\nflg = True\nwhile flg:\n    \n    for i, m in enumerate(a):\n        if m%2 == 1:\n            flg = False\n            break\n        a[i] = m\/2\n    if flg:\n        answer += 1\n\nprint(answer)\n","n = int(input())\na = list(map(int, input().split()))\ncount = 0\nodd = 0\nwhile odd == 0:\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] = a[i] \/\/ 2\n        else:\n            odd += 1\n    count+=1\n\nprint(count-1)   ","s = int,input()\ni = list(map(int,input().split()))\nerr = 0\ntotal = 0\n\nwhile err == 0:\n    count = 0\n    for nom in i:\n        if nom % 2 == 1:\n            err = 1\n            count += 1\n        else:\n            i[count] = nom \/ 2\n            count += 1\n    if err == 0:\n        total += 1\n\nprint(total)","n=input()\na=map(list(int,input().split()))\n\ncount==0\nall=[]\n\nfor i in range(n):\n  if a[i]%2 ==0:\n    while true:\n      if a[i]%2==0:\n        count+=1\n      else:\n        break\n    all.append(count)\n    \nprint(max(count))\n    ","N = int(input())\nA = list(map(int, input().split()))\nans = 100000\n\nfor i in A:\n    temp = format(i, 'b')\n    ans = min(ans, len(temp) - temp.rfind('1') - 1)\n\nprint(ans)","n = int(input())\nA = [0]*n\nL = list(map(int,input().split()))\nfor i in range(n):\n  cnt = 0\n  while L[i] % 2 == 0:\n    L[i] = L[i]\/2\n    cnt += 1\n  A[i] = cnt\nprint(min(A))","import numpy as np\n\nline_len = int(input())\nnum_list = []\nnum_list = input().rstrip().split(' ')\nnp_num_list = np.array(num_list).astype(int)\ndiv = [2]*line_len\nnp_div = np.array(div)\ncounter = 0\nflag = False\nwhile True:\n    for i in range(line_len):\n        if np_num_list[i]%2 != 0:\n            flag = True\n    if flag:\n        print(counter)\n        break\n    np_num_list =  np_num_list\/np_div\n    counter = counter + 1","N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nflag = False\nwhile True:\n  for n in range(N):\n    if A[n] % 2 == 0: A[n] = A[n] \/\/ 2\n    else:\n      flag = True\n      break\n  count += 1\n  if flag: break  \n\nprint(count)","N = int(input())\na = input().split(' ')\nb = 0\nfor i in a:\n    b += int(i)\n\nif b%2 == 0:\n    print(min(int(i) for i in a)\/\/2)\nelse:\n    print(0)","N=input()\nA=list(map(int,input().split()))\nans=float('inf')\nfor i in A:\n      ans=min(ans,len(bin(i))-bin(i).rfind('1')-1)\nprint(ans)\n","n = int(input())\nA = []\nA = list(map(int, input().split()))\nres = 0\n\nwhile(True):\n    flg_odd = 0\n    for i in range(n):\n        print(A[i])\n        if ( A[i] % 2 != 0):\n            flg_odd = 1\n    if ( flg_odd == 1):\n        break\n    for i in range(n):\n        A[i] = A[i]\/2\n    res += 1\nprint(res)\n","count = input()\nnumbers = (int(num) for num in input().split())\n\ncounter = 0\nwhile True:\n  tmp = 0\n  for item in numbers:\n    tmp += item % 2\n  if tmp > 0:\n    break\n  counter ++\n  numbers = [item \/ 2 for item in numbers]\nprint(counter)","def check(a,cnt)\n  b = [int(x)%2 for x in a]\n  if 1 in b:\n    return 0,cnt\n  else :\n    cnt +=1\n    b = [int(x)\/2 for x in a]\n    return 1,cnt\n\nN = input()\na = input().split()\ncnt = 0\nwhile(1):\n  m,cnt = check(a,cnt)\n  if m == 0:\n    print(cnt)\n  else :\n    continue","a=int(input())\nb=[]\ncount=0\nfor i in len(b):\n  if i%a!==0:\n    break\n  else:\n    i=i\/\/a\n    count+=1\nprint(count\/\/len(b))\n    \n    \n    ","N = input()\nA = list(map(int, input().split()))\ncount = 0\nwhile all(i % 2 == 0 for i in A):\n    A = [i\/2 for i in A]\n    count += 1\nprint(count)","input()\nstrs = input().split(' ')\nnums = [int(i) for i in strs]\n\nct = 0\nb_flag = False\nwhile(1):\n  for i, num in enumerate(nums):\n    if num % 2 == 0:\n      nums[i] = num\/2\n      continue\n    else:\n      b_flag = True\n      break\n  if b_flag:\n    break\n  ct += 1\nprint(ct)","N = int(input())\n\nnums = list(map(int,input().split()))\n\ni = 0\n\nwhile 1 != 0:\n    new = [(num\/2) for num in nums if (num%2) == 0]\n\n    if len(new) != N:\n        print(i)\n        exit()\n    else:\n        i += 1\n        nums = new\n","n = int(input())\na = list(map(int, input().split()))\nx = 'Y'\nnum = -1\nwhile x == 'Y':\n    l = []\n    num += 1\n    for i in a:\n        if i%2 == 0:\n            l.append(i\/\/2)\n        else:\n            x = 'N'\n            break\n    a = l\nprint(num)","N = int(input())\nA = list(map(int, input().split()))\nct = 0\nflag = 0\nwhile flag == 0:\n    for i in range(N):\n        if A[i] % 2 != 0:\n            flag = 1\n            break\n        else:\n            A[i] \/= 2\n    if flag == 1:\n        break\n    ct += 1\nprint(ct)","l = list(input().split(\" \"))\n\nloop_count = 0\ncount = 0\nmin_count = 0\n\nfor n in l:\n    loop_count = loop_count + 1\n    while int(n) % 2 == 0:\n        n = int(n)\/2\n        count = count + 1\n    if loop_count == 1:\n        min_count = count\n    elif min_count > count:\n        min_count = count\n    count = 0\n\nprint(min_count)","import itertools\nimport numpy as np\nimport sys\nMAX_INT = int(10e10)\nMIN_INT = -MAX_INT\nmod = 1000000007\ndef IL(): return list(map(int,input().split()))\ndef SL(): return input().split()\ndef I(): return int(sys.stdin.readline())\ndef S(): return input()\n\nN = I()\nA = np.array(IL())\n\ncnt = 0\nfor i in range(40):\n    if 1 in (A%2):\n        print(cnt)\n        exit()\n    else:\n        A \/\/= 2\n        cnt += 1","n = int(input())\nint_list = list(map(int,(input().split())))\ncount = 0\nfor i in range(30):\n    for i in range(len(int_list)):\n        \n        if int_list[i] % 2 == 0 :\n            int_list[i] = int_list[i]\/2\n        else:\n            int_list = []\n            break      \n    if len(int_list) == n :\n        count += 1\n    else: \n        break\nprint(count)\n","n = int(input())\na = [map(int, input().split())]\nl = [0 for i in range(n)]\nfor i in range(len(a)):\n    while a[i] % 2 == 0:\n        a[i] \/= 2\n        l[i] += 1\nprint(min(l))","n=int(input())\na=list(map(int,input().split()))\ncount=0\nwhile(1):\n  for i in range(n):\n    if a[i]%2==1:\n      break\n    else:\n      a[i]=a[i]\/\/2\n      count+=1\n  else:\n    break\nprint(count)","N=int(input())\na=list(map(int,input().split()))\nans=0\ngo=True\nwhile go:\n    for i in range(N):\n        if a[i]%2==0:\n            a[i]=a[i]\/2\n        else:\n            go=False\n            break\n    if go==False:\n        break\n    ans+=1\nprint(ans)","import numpy as np\ninput()\nx=np.array(input().split(),dtype=np.int32)\nans=0\nwhile (x%2==0).all():\n  x\/\/2\n  ans +=1\nprint(ans)","def check_even(a_list):\n    flag = True\n    for i, a in enumerate(a_list):\n        if a%2 == 1:\n            flag = False\n            break\n        a_list[i] = a\/\/2\n    return a_list, flag\n\n\ndef main():\n    n = int(input())\n    a_list = [int(a) for a in input().split()]\n\n    cnt = 0\n    while True:\n        a_list, flag = check_even(a_list)\n        if not flag:\n            break\n        cnt += 1\n\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()","n=int(input())\na=list(map(int,input().split()))\n \ncount=0\nans=a[0]\nfor i in range(n):\n  count=0\n  while(a[i]%2==0):\n    a[i]=a[i]\/\/2\n    count+=1\n  print(count)\n  ans=min(ans,count)\n  \nprint(ans)","import math\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nmax_even = 0\nfor x in arr:\n   if x % 2 == 0 and x > max_even:\n      max_even = x \n\nprint(math.log2(max_even))\n","input()\nA = list(map(int, input().split))\ncount = 0\n\nwhile all(a % 2 == 0 for a in A):\n    A = [a\/2 for a in A]\n    count += 1\nprint(count)","s = int(input())\ny = list(map(int, input().split()))\nx = 0\n \nwhile all(a%2==0 for a in y):\n    y = [a\/2 for a in y]\n    x += 1\n \nprint(x)","N = int(input())\nA = range(N)\nfor i in range(N):\n  A[i] = int(input())\n  \n\nA2nums = [0] * N\nfor i in range(N):\n  while True:\n    A[i] \/= 2\n    if A[i] % 2 == 0:\n      A2num[i] += 1\n    else: \n      break    \n\nprint(min(A2num))","N=int(input())\nA=[int(x) for x in input().split()]\n\nn=0\nt=0\nwhile 1:\n    #\u3059\u3079\u3066\u5076\u6570\u304b\u30c1\u30a7\u30c3\u30af\n    for i in range(N):\n        if A[i]%2 !=0:\n            t=1\n    \n    if t==1:break\n\n    for i in range(N):\n        A[i]=A[i]\/2\n    n+=1\nprint(n)\n","N=int(input())\nabcetc=input()\nabli=abcetc.split()\nabli=[int(s) for s in abli]\nctr=0\nwhile all(i%2==0 for i in abli):\n    for i in range(0,N):\n        abli[i]=abli[i]\/2\n    ctr+=1\nprint(ctr)","n = int(input())\na=list(map(int, input().split()))\ncount = 0\n\nwhile True:\n\tfor i in range(n):\n\t\tif a[i]%2 == 0 :\n\t\t\ta[i] = a[i]\/2\n\t\t\tif i == (n-1):\n\t\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\tbreak\n\nprint(count)","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nisExit = 0\nwhile isExit != 1:\n    for i in range(N):\n        if A[i] % 2 == 1:\n            isExit = 1\n        A[i] \/\/= 2\n    if isExit == 0:\n        ans += 1 \n\nprint(ans)\n","N = int(input())\nA = list(map(int, input().split()))\ndef isOdd(n):\n    return n % 2 == 1\ndef div2(n):\n    return n \/\/ 2\n\nres = 0\nwhile True:\n    if sum(map(isOdd, A)) > 0 or sum(A) == 0:\n        print(res)\n        exit()\n    else:\n        res += 1\n        A = list(map(div2, A))\n\n","n = int(input())\na = [int(i) for i in input().split()]\nans = 10**10\nfor i in range(n):\n\tcounter = 0\n\twhile a[i] % 2 == 0:\n\t\ta[i] \/= 2\n\t\tcounter += 1\n\tif counter <= ans:\n\t\tans = counter\nprint(ans)","n = input()\nls = list(map(int, input().split()))\n\ncnt = ''\nfor idx in range(0,len(ls)):\n    buf = 0\n    while ls[idx] % 2 ==0:\n        ls[idx] \/= 2\n        buf += 1\n    if cnt == '' or  buf < cnt:\n        cnt = buf\nprint(cnt)\n","n = int(input())\na = list(map(int, input().split()))\nans = 0\nwhile True:\n    exist_odd = False\n    for d in a:\n        if d&1 == 1:\n            exist_odd = True\n    if exist_odd:\n        break\n    for i in range(n):\n        a[i] \/\/= 2\n    ans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\nd = 0\nwhile all(b % 2 == 0 for b in a):\n    d += 1\n    a = list(c \/ 2 for c in a)\nprint(d)","import numpy as np\nN = int(input())\na  = [int(i) for i in input().split()]\nb = np.zeros_like(a)\nt = 0\nwhile [i % 2 for i in a] == b:\n  a = [i \/ 2 for i in a]\n  t = t + 1\nprint(t)\n","N = int(input())\nA = list(map(int, input().split()))\ncau = 0\nflag = \"go\"\nwhile flag == \"go\":\n    for i in range(N):\n        if(A[i] % 2 == 1):\n            flag = \"stop\"\n            break        \n    if(flag = \"go\"):\n        for i in range(N):\n            A[i] = A[i]\/2\n        cau += 1\nprint(cau)","n=int(input())\na=list(map(int,input().split()))\na=eval(\"+\".join(str(a)))\nl=0\nwhile a%2==0:\n  l+=1\nprint(l)","n = int(input())\na = list(map(int,input().split()))\n\nans = 0\nmin = 1000000\n\nfor i in range(n):\n\twhile (a[i]>>1 != 0) and (a[i]%2 == 0):\n\t\ta[i]=a[i]>>1\n\t\tans+=1\n\tif ans<min:\n\t\tmin = ans\n\tans = 0\nprint(min)\n","l = list(map(int, input().split()))\nv = np.array(l)\ncount = 0\nwhile np.sum(v % 2) == 0:\n    count += 1\n    v = v \/ 2\nprint(count)","import math\nn = input()\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint(round(ans))","import sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    t = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 0:\n                A[i] = A[i]\/2\n            else:\n                print(t)\n                sys.exit\n        t += 1\n\nmain()","n = int(input())\na = list(map(int,input().split()))\n\nminno = 10 ** 9\n\nfor x in a:\n    cheknow = 0\n    while x % 2 == 0:\n        x = x \/ 2\n        cheknow += 1\n    if cheknow < minno:\n        minno = cheknow\nprint(minno)"],"raw_generations":["n=input()\nl=list(map(int, input().split()))\n\ncount=0\n\nwhile all(i\/2==0 for i in l):\n  l=[i\/2 for i in l]\n  count+=1\n  \nprint(count)","n = int(input())\nmax_cnt = 0\nnum_list = [] \nfor i in range(n):\n  num_list.append(int(input()))\nfor num in num_list:\n  num_cnt = 0\n  while True:\n    if num % 2 == 1:\n      if num_cnt > max_cnt: max_cnt = num_cnt\n      break\n    else:\n      num = num \/ 2\n      num_cnt += 1\nprint(max_cnt)\n ","# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nsize = int(input())\nnums = [int(s) for s in input().split()]\n\ncount = 0\nchecked = False\n\nwhile True:\n  for i in range(size):\n    t = nums[i]\n    if t % 2 == 1:\n      checked = True\n      break;\n    nums[i] = t\/2\n  if checked:\n    break\n  count = count + 1\n\nprint(count)\n","N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\n\ndivide_two_num = []\nfor i in A:\n    n = 0\n    while i > 1:\n        if i % 2 == 0:\n            i \/\/= 2\n            n += 1\n        else:\n            break\n    divide_two_num += [n]\n\nprint(min(divide_two_num))","N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True: \n    odd_flag = False\n    for i in range(N):\n        if A[i] % 2 == 1:\n            odd_flag = True\n    if odd_flag:\n        break\n    for i in range(N):\n        A[i] = A[i] \/\/ 2\n    cnt += 1\n\nprint(cnt)","n=eval([*open(0)][1].replace(*' |'))\nprint(len(bin(n&-n))-3)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(512):\n    for j in range(n):\n        if a[j] % 2 != 0:\n            break\n    else:\n        ans += 1\n    a = list(map(lambda x: x \/ 2, a))\nprint(ans)\n","import re;\nimport sys;\nimport math;\nfrom functools import reduce;\nsys.stdin.readline()\na=reduce(math.gcd,map(int, sys.stdin.readline()[:-1].split()))\nm=re.search(r'.*?1?(0+)$','{0:b}0'.format(a))\nprint(len(m[1])-1)\n","input()\nnums = input().split()\nresult = 18\nfor num in nums:\n  num = int(num)\n  div_times = 0\n  while (num & 1) == 0:\n    num = num >> 1\n    div_times += 1\n  if div_times < result:\n    result = div_times\nprint(result)","N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True:\n    for i in range(len(A)):\n        if A[i] % 2 != 0:\n            break #for\u304b\u3089\u629c\u3051\u308b\n    else:\n        A = [a\/2 for a in A]\n        cnt += 1\n        continue\n    break #while\u304b\u3089\u629c\u3051\u308b\n\nprint(cnt)","N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\nans = []\nfor i in range(N):\n    while A[i]%2==0:\n        A[i] \/=2\n        cnt += 1\n    ans.append(int(cnt))\n    cnt = 0\n        \nprint(min(ans))","def count_factor2(num):\n    count = 0\n    while True:\n        if num % 2 == 0:\n            count += 1\n            num \/\/= 2\n        else:\n            return count\n\nn = input()\nnums = [int(i) for i in input().split()]\n\nprint(min([count_factor2(num) for num in nums]))\n","num = int(input())\nx = input().split()\ncount = 0\nTF = True\nwhile TF: \n    count += 1\n    for i in range(0,num):\n        number = int(x[i])\n        if(number%2==0):\n            number = number\/2\n            x[i] =  number\n            TF = True\n        else:\n            TF =False\nprint(count)\n","def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    c = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 1:\n                return c\n            else:\n                A[i] = A[i] \/\/ 2\n        c += 1\n    print(c)\n\nmain()","N = int(input())\nA = list(map(int,input().split()))\na = A\ndef calc(n):\n  if(n%2 == 0):\n    return int(n\/2)\n  else:\n    return False\n\ncnt = 0\nwhile all(a) == True:\n  a = list(map(calc, a))\n  cnt += 1\nprint(cnt-1)","n = int(input())\na = list(map(int, input().split()))\n\ndef count(x):\n    cnt = 0\n    while x%2==0:\n        x\/\/=2\n        cnt += 1\n    return cnt\n\nans = 10**9\nfor i in a:\n    ans = min(ans, count(i))\nprint(ans)","# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Nov 11 15:09:04 2018\nABC081\n@author: maezawa\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nj = 0\nok = True\nwhile ok:\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i]\/\/2\n        else:\n            ok = False\n            break\n    if ok:\n        j += 1\n\nprint(j)\n        ","n=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in l:\n  t=0\n  while(i%2==0):\n    i=i\/\/2\n    t+=1\n  ans=min(ans,t)\nprint(ans)","# coding: utf-8\nN = int(input())\nA = [int(n) for n in input().split(\" \")]\ncnt = 0\nisKeep = True\nwhile(isKeep):\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            A[i] = A[i]\/2\n        else:\n            isKeep = False\n    if isKeep:\n        cnt = cnt + 1\nprint(cnt)","import sys\nsys.setrecursionlimit(10**8)\n\ndef sort(a):\n\ta.sort()\n\ndef rev(a):\n\ta.reverse()\n\ndef sd():\n\treturn int(input())\n\ndef _sd():\n\treturn map(int,input().split())\n\n\ndef ss():\n\treturn input()\n\ndef sf():\n\treturn float(input())\n\ndef dfs():\n\t\t# write dfs code here. And delete pass.\n\t\tpass\n\ndef bfs():\n\t\t# write bfs code here. And delete pass.\n\t\tpass\n \ndef main():\n\tf=bool(False)\n\tans = int(0)\n\tN=sd()\n\tA=list(map(int,input().split()))\n\twhile(1):\n\t\tfor i in range(N):\n\t\t\tif A[i]%2:\n\t\t\t\tf=True\n\t\t\telse : \n\t\t\t\tA[i]\/=2\n\t\tif(not f):\n\t\t\tans+=1\n\t\telse:\n\t\t\tbreak\n\tprint(ans)\n\nmain()","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nflag = False\nfor i in range(10000):\n    for j in range(n):\n        if a[j] % 2 != 0:\n            flag = True\n        a[j] \/= 2\n    if flag:\n        break\n    cnt += 1\nprint(cnt)","n = int(input())\nA = list(map(int, input().split()))\n\nanswer = 0\nflg = 0\nwhile 1:\n\tfor i in range(len(A)):\n\t\tif A[i] % 2 == 0:\n\t\t\tA[i] = A[i]\/\/2\n\t\telse:\n\t\t\tflg = 1\n\t\t\tbreak\n\tif flg == 1:\n\t\tbreak\n\telse:\n\t\tanswer+=1\nprint(answer)\n","N = int(input())\nA = list(map(int, input().split()))    \n\ncount, end =0,0\nwhile end==0:\n    A= list(map(lambda x: x\/2, A))\n    for i in range(N):\n        if A[i]% 2 == 1:\n            end=1\n    count +=1\nprint(count)\n","n=input()\n\na=list(map(bin(int),input(),split()))\n\nb=map(rfind('1')-1,a)\n\nprint(min(b))","# coding-utf8 #\n\nn = int(input())\n\nli = list(map(int, input().split()))\n\ncount = 0\nresult = 0\nflag = True\n\nwhile flag:\n  for index, num in enumerate(li):\n    if num % 2 == 0:\n      count += 1\n      li[index] = num \/ 2\n\n  if count == n:\n    count = 0\n    result += 1\n  else:\n    flag = False\n\nprint(result)","import sys\ndef input(): return sys.stdin.readline().strip()\nn=input()\naa=list(map(int,input().split()))\nc=0\nwhile True:\n    if all(a&1==0 for a in aa):\n        aa = list(map(lambda a: a>>1, aa))\n        c+=1\n    else:\n        break\nprint(c)","\ndef count(x):\n    c = 0\n    while True:\n        if x == 1 or x == 0:\n            return c\n        x, v = divmod(x, 2)\n        if v == 0:\n            c += 1\n        else:\n            return c\n\ndef main():\n    n = [int(x.strip()) for x in input().split()]\n    a = [int(x.strip()) for x in input().split()]\n\n    m = 10 ** 9\n    for x in a:\n        c = count(x)\n        m = min(m, c)\n\n    print(m)\n    \n\nif __name__ == '__main__':\n    main()\n","N = int(input())\nA = list(map(int, input().split()))\n\nf = True\ncnt = 0\nwhile(f):\n\tfor i in range(N):\n\t\tif A[i]%2 == 0:\n\t\t\tA[i] = A[i]\/\/2\n\t\telse:\n\t\t\tf = False\n\t\t\tbreak\n\tif f:\n\t\tcnt += 1\n\nprint(cnt)\n\t\t\t","N = int(input())\nx = list(map(int, input().split()))\nmn_lst = []\nfor i in x:\n    cnt = 0\n    while i % 2 == 0:\n        cnt += 1\n        i >>= 1\n    mn_lst.append(cnt)\n    \nprint(min(mn_lst))","n=int(input())\ndat = list(map(int, input().split()))\ndan = []\nfor e in dat:\n    e = str(bin(e))\n    e=e[2:]\n       \n\n                \n\n         \n           \n\n\n","N = int(input())\nA = list(map(int,input().split()))\namari = 0\nans = 0\nwhile True:\n    for i in A:\n        amari += i%2\n    if amari != 0:\n        break\n    elif amari == 0:\n        for j in range(len(A)):\n            A[j] = A[j]\/2\n        ans += 1\nprint(ans)   ","def divide_count(n):\n    cnt = 0\n    while n % 2 == 0:\n        n \/= 2\n        cnt += 1\n    return cnt\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min(map(divide_count, a)))\n","N = int(input())\nA = list(map(int,input().split()))\n\ncount = 0\nsw = 1\n\nwhile sw==1:\n\tsw = 0\n\ttmp = 0\n\tfor i in range(N):\n\t\ttmp = tmp + A[i]%2\n\tif tmp == 0:\n\t\tA = list(map(lambda x:x\/2,A))\n\t\tcount = count + 1\n\t\tsw = 1\n\telse:\n\t\tbreak\n\nprint(count)\n","n = int(input())\nl=list(map(int ,input().split(\" \")))\ncount=0\nwhile True:\n    for i in range(n):\n        if l[i]%2==0:\n            l[i]=l[i]\/\/2\n        else:\n            print(count)\n            exit()\n    count+=1    ","N=int(input())\nA=list(map(int,input().split()))\ncount=0\nwhile all(a%2==0 for a in A):\n    A=[a\/2 for a in A]\n    count+=1\nprint(count)","n=int(input())\na=list(map(int,input().split()))\n\nfor A in a:\n    cnt=0\n    while A % 2==0:\n        A=A\/\/2\n        cnt=cnt+1\n\nprint(cnt)\n","c=0;_,*l=map(int,open(0).read().split())\nwhile all(map(lambda i:i&1==0,l)):l=list(map(lambda i:i>>1,l));c+=1\nprint(c)","N = int(input())\nA = list(map(int,input().split()))\nj = True\ncount = 0\nwhile j :\n     for i in range(N):\n             if A[i] % 2 == 0 or A[i] == 0:\n                     A[i] =\/ 2\n             else:\n                     j = False\n     if j == True:             \n     \tcount += 1\nprint(count)","n = int(input())\nA = list(map(int, input().split()))\ncount = 0\nwhile True:\n    for i in range(n):\n        if (A[i] % 2 == 1) or (A[i] == 0):\n            break\n        elif:\n            A[j] = A[j] \/\/ 2\n            s += 1\n            continue\n    \n    break\nprint(count)\n","import numpy as np\n# \u8907\u6570\u500b\u683c\u7d0d\n# A B = map(int, input().split())\n# \u884c\u5217\u5316\n# A = np.array(A)\n# A=A.reshape(1,-1)\n# A=A.T\n\nN = int(input())\nA = list(map(int, input().split()))\nA = np.array(A)\nA=A.reshape(1,-1)\nvector0=A*0\ncount=0\ni=0\nflg=False\n\nfor i in range(N):\n    B=A%2\n    C=((A%2 == vector0).all())\n    if C == False:\n        break\n    count=count+1\n    A=A\/2\n\nprint(count)","n = int(input())\nlst = list(map(int, input().split()))\nans = 0\nfor x in lst:\n  c = 0\n  while x % 2 == 0:\n    x \/\/= 2\n    c += 1\n  if ans < c:\n    ans = c\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(30):\n    c=i\n    for j in range(n):\n        if a[j]%2==0:\n            a[j]\/\/=2\n        else:\n            l.append(c)\n            break\nprint(l[0])","int(input())\nA = list(map(int, input().split()))\n\ncount = 0\n\nwhile all(a%2==0 for a in A):\n  A = [a\/2 for a in A]\n  count+=1\n  \nprint(count)","n=int(input())\na=list(map(int,input().split()))\n\ni=0\nwhile sum(a)%2==0:\n    end=False\n\n    for x in a:\n        if x%2!=0:\n            end=True\n            break\n\n    if end: \n        break\n        \n    a=list(map(lambda x: x\/2, a))\n    i+=1\n\nprint(i)","n = int(input())\nns = list(map(int, input().split()))\ncnt = 0\nwhile all(i % 2 == 0 for i in ns):\n    cnt += 1\n    ns = [i \/\/ 2 for i in ns]\nprint(cnt)","import math\nN = int(input())\nA = list(map(int, input().split()))\nans = float('inf')\nfor a in A:\n  ans = min(ans, len(bin(a)) - bin(a).rfind('1') - 1)\nprint(ans)","_ = input()\na = map(int, input().split())\ncnt = 0\n \nwhile(1):\n  flg = 0\n  for i in a:\n    if(i%2 == 1):\n      flg = 1\n      break\n      \n  if(flg == 0):\n    a = map(lambda x:x\/2, a)\n    cnt += 1\n  else:\n    break\n \nprint(cnt)","N = input()\nB = False\nkaisu = 0\narray = map(int,input().split())\n\ndef calc(n):\n  retuen n\/2\n  \n  \nwhile !B:\n\tfor i in range(N):\n  \t\tif array[i]\/2 == 1:\n    \t\tB = True\n  \tif B == False:\n    \tarray = map(calc, array)\n    \tkaisu += 1\n  \telse:\n    \tbreak\n        \nprint(kaisu)\n    \n\n    ","N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\n \nwhile True:\n    for i in range(len(A)):\n        if A[i]%2 != 0:\n            break\n        elif A[i]%2 == 0:\n            A[i] \/= 2\n    else:\n        cnt += 1\n        continue\n    break\n    \nprint(cnt)","N = int(input())\nnumbers = list(map(int,input().split()))\n\ncount=0\nwhile True:\n  for number in numbers:\n    if number%2 != 0:\n      print(int(count))\n      quit()\n      \n  numbers = list(map(lambda number:number\/2,numbers))\n  count += 1\n\nprint(int(count))","N = int(input())\nA = [int(a) for a in input().split()]\n\nflag = False\nans = 0\n\nwhile flag == False :\n\tfor i in range(len(A)):\n\t\tif A[i] % 2 == 0 :\n\t\t\tA[i] = A[i] \/\/ 2\n\t\telse :\n\t\t\tflag = True\n\t\t\tbreak\n\tif flag == False :\n\t\tans += 1\n\nprint(ans)\n","N = input()\na = list(map(int, input().split()))\n     \nanswer = 0\nflg = True\nwhile flg:\n    \n    for i, m in enumerate(a):\n        if m%2 == 1:\n            flg = False\n            break\n        a[i] = m\/2\n    if flg:\n        answer += 1\n\nprint(answer)\n","n = int(input())\na = list(map(int, input().split()))\ncount = 0\nodd = 0\nwhile odd == 0:\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] = a[i] \/\/ 2\n        else:\n            odd += 1\n    count+=1\n\nprint(count-1)   ","s = int,input()\ni = list(map(int,input().split()))\nerr = 0\ntotal = 0\n\nwhile err == 0:\n    count = 0\n    for nom in i:\n        if nom % 2 == 1:\n            err = 1\n            count += 1\n        else:\n            i[count] = nom \/ 2\n            count += 1\n    if err == 0:\n        total += 1\n\nprint(total)","n=input()\na=map(list(int,input().split()))\n\ncount==0\nall=[]\n\nfor i in range(n):\n  if a[i]%2 ==0:\n    while true:\n      if a[i]%2==0:\n        count+=1\n      else:\n        break\n    all.append(count)\n    \nprint(max(count))\n    ","N = int(input())\nA = list(map(int, input().split()))\nans = 100000\n\nfor i in A:\n    temp = format(i, 'b')\n    ans = min(ans, len(temp) - temp.rfind('1') - 1)\n\nprint(ans)","n = int(input())\nA = [0]*n\nL = list(map(int,input().split()))\nfor i in range(n):\n  cnt = 0\n  while L[i] % 2 == 0:\n    L[i] = L[i]\/2\n    cnt += 1\n  A[i] = cnt\nprint(min(A))","import numpy as np\n\nline_len = int(input())\nnum_list = []\nnum_list = input().rstrip().split(' ')\nnp_num_list = np.array(num_list).astype(int)\ndiv = [2]*line_len\nnp_div = np.array(div)\ncounter = 0\nflag = False\nwhile True:\n    for i in range(line_len):\n        if np_num_list[i]%2 != 0:\n            flag = True\n    if flag:\n        print(counter)\n        break\n    np_num_list =  np_num_list\/np_div\n    counter = counter + 1","N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nflag = False\nwhile True:\n  for n in range(N):\n    if A[n] % 2 == 0: A[n] = A[n] \/\/ 2\n    else:\n      flag = True\n      break\n  count += 1\n  if flag: break  \n\nprint(count)","N = int(input())\na = input().split(' ')\nb = 0\nfor i in a:\n    b += int(i)\n\nif b%2 == 0:\n    print(min(int(i) for i in a)\/\/2)\nelse:\n    print(0)","N=input()\nA=list(map(int,input().split()))\nans=float('inf')\nfor i in A:\n      ans=min(ans,len(bin(i))-bin(i).rfind('1')-1)\nprint(ans)\n","n = int(input())\nA = []\nA = list(map(int, input().split()))\nres = 0\n\nwhile(True):\n    flg_odd = 0\n    for i in range(n):\n        print(A[i])\n        if ( A[i] % 2 != 0):\n            flg_odd = 1\n    if ( flg_odd == 1):\n        break\n    for i in range(n):\n        A[i] = A[i]\/2\n    res += 1\nprint(res)\n","count = input()\nnumbers = (int(num) for num in input().split())\n\ncounter = 0\nwhile True:\n  tmp = 0\n  for item in numbers:\n    tmp += item % 2\n  if tmp > 0:\n    break\n  counter ++\n  numbers = [item \/ 2 for item in numbers]\nprint(counter)","def check(a,cnt)\n  b = [int(x)%2 for x in a]\n  if 1 in b:\n    return 0,cnt\n  else :\n    cnt +=1\n    b = [int(x)\/2 for x in a]\n    return 1,cnt\n\nN = input()\na = input().split()\ncnt = 0\nwhile(1):\n  m,cnt = check(a,cnt)\n  if m == 0:\n    print(cnt)\n  else :\n    continue","a=int(input())\nb=[]\ncount=0\nfor i in len(b):\n  if i%a!==0:\n    break\n  else:\n    i=i\/\/a\n    count+=1\nprint(count\/\/len(b))\n    \n    \n    ","N = input()\nA = list(map(int, input().split()))\ncount = 0\nwhile all(i % 2 == 0 for i in A):\n    A = [i\/2 for i in A]\n    count += 1\nprint(count)","input()\nstrs = input().split(' ')\nnums = [int(i) for i in strs]\n\nct = 0\nb_flag = False\nwhile(1):\n  for i, num in enumerate(nums):\n    if num % 2 == 0:\n      nums[i] = num\/2\n      continue\n    else:\n      b_flag = True\n      break\n  if b_flag:\n    break\n  ct += 1\nprint(ct)","N = int(input())\n\nnums = list(map(int,input().split()))\n\ni = 0\n\nwhile 1 != 0:\n    new = [(num\/2) for num in nums if (num%2) == 0]\n\n    if len(new) != N:\n        print(i)\n        exit()\n    else:\n        i += 1\n        nums = new\n","n = int(input())\na = list(map(int, input().split()))\nx = 'Y'\nnum = -1\nwhile x == 'Y':\n    l = []\n    num += 1\n    for i in a:\n        if i%2 == 0:\n            l.append(i\/\/2)\n        else:\n            x = 'N'\n            break\n    a = l\nprint(num)","N = int(input())\nA = list(map(int, input().split()))\nct = 0\nflag = 0\nwhile flag == 0:\n    for i in range(N):\n        if A[i] % 2 != 0:\n            flag = 1\n            break\n        else:\n            A[i] \/= 2\n    if flag == 1:\n        break\n    ct += 1\nprint(ct)","l = list(input().split(\" \"))\n\nloop_count = 0\ncount = 0\nmin_count = 0\n\nfor n in l:\n    loop_count = loop_count + 1\n    while int(n) % 2 == 0:\n        n = int(n)\/2\n        count = count + 1\n    if loop_count == 1:\n        min_count = count\n    elif min_count > count:\n        min_count = count\n    count = 0\n\nprint(min_count)","import itertools\nimport numpy as np\nimport sys\nMAX_INT = int(10e10)\nMIN_INT = -MAX_INT\nmod = 1000000007\ndef IL(): return list(map(int,input().split()))\ndef SL(): return input().split()\ndef I(): return int(sys.stdin.readline())\ndef S(): return input()\n\nN = I()\nA = np.array(IL())\n\ncnt = 0\nfor i in range(40):\n    if 1 in (A%2):\n        print(cnt)\n        exit()\n    else:\n        A \/\/= 2\n        cnt += 1","n = int(input())\nint_list = list(map(int,(input().split())))\ncount = 0\nfor i in range(30):\n    for i in range(len(int_list)):\n        \n        if int_list[i] % 2 == 0 :\n            int_list[i] = int_list[i]\/2\n        else:\n            int_list = []\n            break      \n    if len(int_list) == n :\n        count += 1\n    else: \n        break\nprint(count)\n","n = int(input())\na = [map(int, input().split())]\nl = [0 for i in range(n)]\nfor i in range(len(a)):\n    while a[i] % 2 == 0:\n        a[i] \/= 2\n        l[i] += 1\nprint(min(l))","n=int(input())\na=list(map(int,input().split()))\ncount=0\nwhile(1):\n  for i in range(n):\n    if a[i]%2==1:\n      break\n    else:\n      a[i]=a[i]\/\/2\n      count+=1\n  else:\n    break\nprint(count)","N=int(input())\na=list(map(int,input().split()))\nans=0\ngo=True\nwhile go:\n    for i in range(N):\n        if a[i]%2==0:\n            a[i]=a[i]\/2\n        else:\n            go=False\n            break\n    if go==False:\n        break\n    ans+=1\nprint(ans)","import numpy as np\ninput()\nx=np.array(input().split(),dtype=np.int32)\nans=0\nwhile (x%2==0).all():\n  x\/\/2\n  ans +=1\nprint(ans)","def check_even(a_list):\n    flag = True\n    for i, a in enumerate(a_list):\n        if a%2 == 1:\n            flag = False\n            break\n        a_list[i] = a\/\/2\n    return a_list, flag\n\n\ndef main():\n    n = int(input())\n    a_list = [int(a) for a in input().split()]\n\n    cnt = 0\n    while True:\n        a_list, flag = check_even(a_list)\n        if not flag:\n            break\n        cnt += 1\n\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()","n=int(input())\na=list(map(int,input().split()))\n \ncount=0\nans=a[0]\nfor i in range(n):\n  count=0\n  while(a[i]%2==0):\n    a[i]=a[i]\/\/2\n    count+=1\n  print(count)\n  ans=min(ans,count)\n  \nprint(ans)","import math\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nmax_even = 0\nfor x in arr:\n   if x % 2 == 0 and x > max_even:\n      max_even = x \n\nprint(math.log2(max_even))\n","input()\nA = list(map(int, input().split))\ncount = 0\n\nwhile all(a % 2 == 0 for a in A):\n    A = [a\/2 for a in A]\n    count += 1\nprint(count)","s = int(input())\ny = list(map(int, input().split()))\nx = 0\n \nwhile all(a%2==0 for a in y):\n    y = [a\/2 for a in y]\n    x += 1\n \nprint(x)","N = int(input())\nA = range(N)\nfor i in range(N):\n  A[i] = int(input())\n  \n\nA2nums = [0] * N\nfor i in range(N):\n  while True:\n    A[i] \/= 2\n    if A[i] % 2 == 0:\n      A2num[i] += 1\n    else: \n      break    \n\nprint(min(A2num))","N=int(input())\nA=[int(x) for x in input().split()]\n\nn=0\nt=0\nwhile 1:\n    #\u3059\u3079\u3066\u5076\u6570\u304b\u30c1\u30a7\u30c3\u30af\n    for i in range(N):\n        if A[i]%2 !=0:\n            t=1\n    \n    if t==1:break\n\n    for i in range(N):\n        A[i]=A[i]\/2\n    n+=1\nprint(n)\n","N=int(input())\nabcetc=input()\nabli=abcetc.split()\nabli=[int(s) for s in abli]\nctr=0\nwhile all(i%2==0 for i in abli):\n    for i in range(0,N):\n        abli[i]=abli[i]\/2\n    ctr+=1\nprint(ctr)","n = int(input())\na=list(map(int, input().split()))\ncount = 0\n\nwhile True:\n\tfor i in range(n):\n\t\tif a[i]%2 == 0 :\n\t\t\ta[i] = a[i]\/2\n\t\t\tif i == (n-1):\n\t\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\tbreak\n\nprint(count)","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nisExit = 0\nwhile isExit != 1:\n    for i in range(N):\n        if A[i] % 2 == 1:\n            isExit = 1\n        A[i] \/\/= 2\n    if isExit == 0:\n        ans += 1 \n\nprint(ans)\n","N = int(input())\nA = list(map(int, input().split()))\ndef isOdd(n):\n    return n % 2 == 1\ndef div2(n):\n    return n \/\/ 2\n\nres = 0\nwhile True:\n    if sum(map(isOdd, A)) > 0 or sum(A) == 0:\n        print(res)\n        exit()\n    else:\n        res += 1\n        A = list(map(div2, A))\n\n","n = int(input())\na = [int(i) for i in input().split()]\nans = 10**10\nfor i in range(n):\n\tcounter = 0\n\twhile a[i] % 2 == 0:\n\t\ta[i] \/= 2\n\t\tcounter += 1\n\tif counter <= ans:\n\t\tans = counter\nprint(ans)","n = input()\nls = list(map(int, input().split()))\n\ncnt = ''\nfor idx in range(0,len(ls)):\n    buf = 0\n    while ls[idx] % 2 ==0:\n        ls[idx] \/= 2\n        buf += 1\n    if cnt == '' or  buf < cnt:\n        cnt = buf\nprint(cnt)\n","n = int(input())\na = list(map(int, input().split()))\nans = 0\nwhile True:\n    exist_odd = False\n    for d in a:\n        if d&1 == 1:\n            exist_odd = True\n    if exist_odd:\n        break\n    for i in range(n):\n        a[i] \/\/= 2\n    ans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\nd = 0\nwhile all(b % 2 == 0 for b in a):\n    d += 1\n    a = list(c \/ 2 for c in a)\nprint(d)","import numpy as np\nN = int(input())\na  = [int(i) for i in input().split()]\nb = np.zeros_like(a)\nt = 0\nwhile [i % 2 for i in a] == b:\n  a = [i \/ 2 for i in a]\n  t = t + 1\nprint(t)\n","N = int(input())\nA = list(map(int, input().split()))\ncau = 0\nflag = \"go\"\nwhile flag == \"go\":\n    for i in range(N):\n        if(A[i] % 2 == 1):\n            flag = \"stop\"\n            break        \n    if(flag = \"go\"):\n        for i in range(N):\n            A[i] = A[i]\/2\n        cau += 1\nprint(cau)","n=int(input())\na=list(map(int,input().split()))\na=eval(\"+\".join(str(a)))\nl=0\nwhile a%2==0:\n  l+=1\nprint(l)","n = int(input())\na = list(map(int,input().split()))\n\nans = 0\nmin = 1000000\n\nfor i in range(n):\n\twhile (a[i]>>1 != 0) and (a[i]%2 == 0):\n\t\ta[i]=a[i]>>1\n\t\tans+=1\n\tif ans<min:\n\t\tmin = ans\n\tans = 0\nprint(min)\n","l = list(map(int, input().split()))\nv = np.array(l)\ncount = 0\nwhile np.sum(v % 2) == 0:\n    count += 1\n    v = v \/ 2\nprint(count)","import math\nn = input()\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint(round(ans))","import sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    t = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 0:\n                A[i] = A[i]\/2\n            else:\n                print(t)\n                sys.exit\n        t += 1\n\nmain()","n = int(input())\na = list(map(int,input().split()))\n\nminno = 10 ** 9\n\nfor x in a:\n    cheknow = 0\n    while x % 2 == 0:\n        x = x \/ 2\n        cheknow += 1\n    if cheknow < minno:\n        minno = cheknow\nprint(minno)"],"formatted_programs":["n=input()\nl=list(map(int, input().split()))\n\ncount=0\n\nwhile all(i\/2==0 for i in l):\n  l=[i\/2 for i in l]\n  count+=1\n  \nprint(count)","n = int(input())\nmax_cnt = 0\nnum_list = [] \nfor i in range(n):\n  num_list.append(int(input()))\nfor num in num_list:\n  num_cnt = 0\n  while True:\n    if num % 2 == 1:\n      if num_cnt > max_cnt: max_cnt = num_cnt\n      break\n    else:\n      num = num \/ 2\n      num_cnt += 1\nprint(max_cnt)\n ","# -*- coding: utf-8 -*-\n# \u6574\u6570\u306e\u5165\u529b\nsize = int(input())\nnums = [int(s) for s in input().split()]\n\ncount = 0\nchecked = False\n\nwhile True:\n  for i in range(size):\n    t = nums[i]\n    if t % 2 == 1:\n      checked = True\n      break;\n    nums[i] = t\/2\n  if checked:\n    break\n  count = count + 1\n\nprint(count)\n","N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\n\ndivide_two_num = []\nfor i in A:\n    n = 0\n    while i > 1:\n        if i % 2 == 0:\n            i \/\/= 2\n            n += 1\n        else:\n            break\n    divide_two_num += [n]\n\nprint(min(divide_two_num))","N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True: \n    odd_flag = False\n    for i in range(N):\n        if A[i] % 2 == 1:\n            odd_flag = True\n    if odd_flag:\n        break\n    for i in range(N):\n        A[i] = A[i] \/\/ 2\n    cnt += 1\n\nprint(cnt)","n=eval([*open(0)][1].replace(*' |'))\nprint(len(bin(n&-n))-3)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(512):\n    for j in range(n):\n        if a[j] % 2 != 0:\n            break\n    else:\n        ans += 1\n    a = list(map(lambda x: x \/ 2, a))\nprint(ans)\n","import re;\nimport sys;\nimport math;\nfrom functools import reduce;\nsys.stdin.readline()\na=reduce(math.gcd,map(int, sys.stdin.readline()[:-1].split()))\nm=re.search(r'.*?1?(0+)$','{0:b}0'.format(a))\nprint(len(m[1])-1)\n","input()\nnums = input().split()\nresult = 18\nfor num in nums:\n  num = int(num)\n  div_times = 0\n  while (num & 1) == 0:\n    num = num >> 1\n    div_times += 1\n  if div_times < result:\n    result = div_times\nprint(result)","N = int(input())\nA = list(map(int, input().split()))\n\ncnt = 0\nwhile True:\n    for i in range(len(A)):\n        if A[i] % 2 != 0:\n            break #for\u304b\u3089\u629c\u3051\u308b\n    else:\n        A = [a\/2 for a in A]\n        cnt += 1\n        continue\n    break #while\u304b\u3089\u629c\u3051\u308b\n\nprint(cnt)","N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\nans = []\nfor i in range(N):\n    while A[i]%2==0:\n        A[i] \/=2\n        cnt += 1\n    ans.append(int(cnt))\n    cnt = 0\n        \nprint(min(ans))","def count_factor2(num):\n    count = 0\n    while True:\n        if num % 2 == 0:\n            count += 1\n            num \/\/= 2\n        else:\n            return count\n\nn = input()\nnums = [int(i) for i in input().split()]\n\nprint(min([count_factor2(num) for num in nums]))\n","num = int(input())\nx = input().split()\ncount = 0\nTF = True\nwhile TF: \n    count += 1\n    for i in range(0,num):\n        number = int(x[i])\n        if(number%2==0):\n            number = number\/2\n            x[i] =  number\n            TF = True\n        else:\n            TF =False\nprint(count)\n","def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n    c = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 1:\n                return c\n            else:\n                A[i] = A[i] \/\/ 2\n        c += 1\n    print(c)\n\nmain()","N = int(input())\nA = list(map(int,input().split()))\na = A\ndef calc(n):\n  if(n%2 == 0):\n    return int(n\/2)\n  else:\n    return False\n\ncnt = 0\nwhile all(a) == True:\n  a = list(map(calc, a))\n  cnt += 1\nprint(cnt-1)","n = int(input())\na = list(map(int, input().split()))\n\ndef count(x):\n    cnt = 0\n    while x%2==0:\n        x\/\/=2\n        cnt += 1\n    return cnt\n\nans = 10**9\nfor i in a:\n    ans = min(ans, count(i))\nprint(ans)","# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Nov 11 15:09:04 2018\nABC081\n@author: maezawa\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\n\nj = 0\nok = True\nwhile ok:\n    for i in range(n):\n        if a[i] % 2 == 0:\n            a[i] = a[i]\/\/2\n        else:\n            ok = False\n            break\n    if ok:\n        j += 1\n\nprint(j)\n        ","n=int(input())\nl=list(map(int,input().split()))\nans=0\nfor i in l:\n  t=0\n  while(i%2==0):\n    i=i\/\/2\n    t+=1\n  ans=min(ans,t)\nprint(ans)","# coding: utf-8\nN = int(input())\nA = [int(n) for n in input().split(\" \")]\ncnt = 0\nisKeep = True\nwhile(isKeep):\n    for i in range(len(A)):\n        if A[i] % 2 == 0:\n            A[i] = A[i]\/2\n        else:\n            isKeep = False\n    if isKeep:\n        cnt = cnt + 1\nprint(cnt)","import sys\nsys.setrecursionlimit(10**8)\n\ndef sort(a):\n\ta.sort()\n\ndef rev(a):\n\ta.reverse()\n\ndef sd():\n\treturn int(input())\n\ndef _sd():\n\treturn map(int,input().split())\n\n\ndef ss():\n\treturn input()\n\ndef sf():\n\treturn float(input())\n\ndef dfs():\n\t\t# write dfs code here. And delete pass.\n\t\tpass\n\ndef bfs():\n\t\t# write bfs code here. And delete pass.\n\t\tpass\n \ndef main():\n\tf=bool(False)\n\tans = int(0)\n\tN=sd()\n\tA=list(map(int,input().split()))\n\twhile(1):\n\t\tfor i in range(N):\n\t\t\tif A[i]%2:\n\t\t\t\tf=True\n\t\t\telse : \n\t\t\t\tA[i]\/=2\n\t\tif(not f):\n\t\t\tans+=1\n\t\telse:\n\t\t\tbreak\n\tprint(ans)\n\nmain()","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nflag = False\nfor i in range(10000):\n    for j in range(n):\n        if a[j] % 2 != 0:\n            flag = True\n        a[j] \/= 2\n    if flag:\n        break\n    cnt += 1\nprint(cnt)","n = int(input())\nA = list(map(int, input().split()))\n\nanswer = 0\nflg = 0\nwhile 1:\n\tfor i in range(len(A)):\n\t\tif A[i] % 2 == 0:\n\t\t\tA[i] = A[i]\/\/2\n\t\telse:\n\t\t\tflg = 1\n\t\t\tbreak\n\tif flg == 1:\n\t\tbreak\n\telse:\n\t\tanswer+=1\nprint(answer)\n","N = int(input())\nA = list(map(int, input().split()))    \n\ncount, end =0,0\nwhile end==0:\n    A= list(map(lambda x: x\/2, A))\n    for i in range(N):\n        if A[i]% 2 == 1:\n            end=1\n    count +=1\nprint(count)\n","n=input()\n\na=list(map(bin(int),input(),split()))\n\nb=map(rfind('1')-1,a)\n\nprint(min(b))","# coding-utf8 #\n\nn = int(input())\n\nli = list(map(int, input().split()))\n\ncount = 0\nresult = 0\nflag = True\n\nwhile flag:\n  for index, num in enumerate(li):\n    if num % 2 == 0:\n      count += 1\n      li[index] = num \/ 2\n\n  if count == n:\n    count = 0\n    result += 1\n  else:\n    flag = False\n\nprint(result)","import sys\ndef input(): return sys.stdin.readline().strip()\nn=input()\naa=list(map(int,input().split()))\nc=0\nwhile True:\n    if all(a&1==0 for a in aa):\n        aa = list(map(lambda a: a>>1, aa))\n        c+=1\n    else:\n        break\nprint(c)","\ndef count(x):\n    c = 0\n    while True:\n        if x == 1 or x == 0:\n            return c\n        x, v = divmod(x, 2)\n        if v == 0:\n            c += 1\n        else:\n            return c\n\ndef main():\n    n = [int(x.strip()) for x in input().split()]\n    a = [int(x.strip()) for x in input().split()]\n\n    m = 10 ** 9\n    for x in a:\n        c = count(x)\n        m = min(m, c)\n\n    print(m)\n    \n\nif __name__ == '__main__':\n    main()\n","N = int(input())\nA = list(map(int, input().split()))\n\nf = True\ncnt = 0\nwhile(f):\n\tfor i in range(N):\n\t\tif A[i]%2 == 0:\n\t\t\tA[i] = A[i]\/\/2\n\t\telse:\n\t\t\tf = False\n\t\t\tbreak\n\tif f:\n\t\tcnt += 1\n\nprint(cnt)\n\t\t\t","N = int(input())\nx = list(map(int, input().split()))\nmn_lst = []\nfor i in x:\n    cnt = 0\n    while i % 2 == 0:\n        cnt += 1\n        i >>= 1\n    mn_lst.append(cnt)\n    \nprint(min(mn_lst))","n=int(input())\ndat = list(map(int, input().split()))\ndan = []\nfor e in dat:\n    e = str(bin(e))\n    e=e[2:]\n       \n\n                \n\n         \n           \n\n\n","N = int(input())\nA = list(map(int,input().split()))\namari = 0\nans = 0\nwhile True:\n    for i in A:\n        amari += i%2\n    if amari != 0:\n        break\n    elif amari == 0:\n        for j in range(len(A)):\n            A[j] = A[j]\/2\n        ans += 1\nprint(ans)   ","def divide_count(n):\n    cnt = 0\n    while n % 2 == 0:\n        n \/= 2\n        cnt += 1\n    return cnt\n\nn = int(input())\na = list(map(int, input().split()))\nprint(min(map(divide_count, a)))\n","N = int(input())\nA = list(map(int,input().split()))\n\ncount = 0\nsw = 1\n\nwhile sw==1:\n\tsw = 0\n\ttmp = 0\n\tfor i in range(N):\n\t\ttmp = tmp + A[i]%2\n\tif tmp == 0:\n\t\tA = list(map(lambda x:x\/2,A))\n\t\tcount = count + 1\n\t\tsw = 1\n\telse:\n\t\tbreak\n\nprint(count)\n","n = int(input())\nl=list(map(int ,input().split(\" \")))\ncount=0\nwhile True:\n    for i in range(n):\n        if l[i]%2==0:\n            l[i]=l[i]\/\/2\n        else:\n            print(count)\n            exit()\n    count+=1    ","N=int(input())\nA=list(map(int,input().split()))\ncount=0\nwhile all(a%2==0 for a in A):\n    A=[a\/2 for a in A]\n    count+=1\nprint(count)","n=int(input())\na=list(map(int,input().split()))\n\nfor A in a:\n    cnt=0\n    while A % 2==0:\n        A=A\/\/2\n        cnt=cnt+1\n\nprint(cnt)\n","c=0;_,*l=map(int,open(0).read().split())\nwhile all(map(lambda i:i&1==0,l)):l=list(map(lambda i:i>>1,l));c+=1\nprint(c)","N = int(input())\nA = list(map(int,input().split()))\nj = True\ncount = 0\nwhile j :\n     for i in range(N):\n             if A[i] % 2 == 0 or A[i] == 0:\n                     A[i] =\/ 2\n             else:\n                     j = False\n     if j == True:             \n     \tcount += 1\nprint(count)","n = int(input())\nA = list(map(int, input().split()))\ncount = 0\nwhile True:\n    for i in range(n):\n        if (A[i] % 2 == 1) or (A[i] == 0):\n            break\n        elif:\n            A[j] = A[j] \/\/ 2\n            s += 1\n            continue\n    \n    break\nprint(count)\n","import numpy as np\n# \u8907\u6570\u500b\u683c\u7d0d\n# A B = map(int, input().split())\n# \u884c\u5217\u5316\n# A = np.array(A)\n# A=A.reshape(1,-1)\n# A=A.T\n\nN = int(input())\nA = list(map(int, input().split()))\nA = np.array(A)\nA=A.reshape(1,-1)\nvector0=A*0\ncount=0\ni=0\nflg=False\n\nfor i in range(N):\n    B=A%2\n    C=((A%2 == vector0).all())\n    if C == False:\n        break\n    count=count+1\n    A=A\/2\n\nprint(count)","n = int(input())\nlst = list(map(int, input().split()))\nans = 0\nfor x in lst:\n  c = 0\n  while x % 2 == 0:\n    x \/\/= 2\n    c += 1\n  if ans < c:\n    ans = c\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\nl=[]\nfor i in range(30):\n    c=i\n    for j in range(n):\n        if a[j]%2==0:\n            a[j]\/\/=2\n        else:\n            l.append(c)\n            break\nprint(l[0])","int(input())\nA = list(map(int, input().split()))\n\ncount = 0\n\nwhile all(a%2==0 for a in A):\n  A = [a\/2 for a in A]\n  count+=1\n  \nprint(count)","n=int(input())\na=list(map(int,input().split()))\n\ni=0\nwhile sum(a)%2==0:\n    end=False\n\n    for x in a:\n        if x%2!=0:\n            end=True\n            break\n\n    if end: \n        break\n        \n    a=list(map(lambda x: x\/2, a))\n    i+=1\n\nprint(i)","n = int(input())\nns = list(map(int, input().split()))\ncnt = 0\nwhile all(i % 2 == 0 for i in ns):\n    cnt += 1\n    ns = [i \/\/ 2 for i in ns]\nprint(cnt)","import math\nN = int(input())\nA = list(map(int, input().split()))\nans = float('inf')\nfor a in A:\n  ans = min(ans, len(bin(a)) - bin(a).rfind('1') - 1)\nprint(ans)","_ = input()\na = map(int, input().split())\ncnt = 0\n \nwhile(1):\n  flg = 0\n  for i in a:\n    if(i%2 == 1):\n      flg = 1\n      break\n      \n  if(flg == 0):\n    a = map(lambda x:x\/2, a)\n    cnt += 1\n  else:\n    break\n \nprint(cnt)","N = input()\nB = False\nkaisu = 0\narray = map(int,input().split())\n\ndef calc(n):\n  retuen n\/2\n  \n  \nwhile !B:\n\tfor i in range(N):\n  \t\tif array[i]\/2 == 1:\n    \t\tB = True\n  \tif B == False:\n    \tarray = map(calc, array)\n    \tkaisu += 1\n  \telse:\n    \tbreak\n        \nprint(kaisu)\n    \n\n    ","N = int(input())\nA = list(map(int, input().split()))\ncnt = 0\n \nwhile True:\n    for i in range(len(A)):\n        if A[i]%2 != 0:\n            break\n        elif A[i]%2 == 0:\n            A[i] \/= 2\n    else:\n        cnt += 1\n        continue\n    break\n    \nprint(cnt)","N = int(input())\nnumbers = list(map(int,input().split()))\n\ncount=0\nwhile True:\n  for number in numbers:\n    if number%2 != 0:\n      print(int(count))\n      quit()\n      \n  numbers = list(map(lambda number:number\/2,numbers))\n  count += 1\n\nprint(int(count))","N = int(input())\nA = [int(a) for a in input().split()]\n\nflag = False\nans = 0\n\nwhile flag == False :\n\tfor i in range(len(A)):\n\t\tif A[i] % 2 == 0 :\n\t\t\tA[i] = A[i] \/\/ 2\n\t\telse :\n\t\t\tflag = True\n\t\t\tbreak\n\tif flag == False :\n\t\tans += 1\n\nprint(ans)\n","N = input()\na = list(map(int, input().split()))\n     \nanswer = 0\nflg = True\nwhile flg:\n    \n    for i, m in enumerate(a):\n        if m%2 == 1:\n            flg = False\n            break\n        a[i] = m\/2\n    if flg:\n        answer += 1\n\nprint(answer)\n","n = int(input())\na = list(map(int, input().split()))\ncount = 0\nodd = 0\nwhile odd == 0:\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            a[i] = a[i] \/\/ 2\n        else:\n            odd += 1\n    count+=1\n\nprint(count-1)   ","s = int,input()\ni = list(map(int,input().split()))\nerr = 0\ntotal = 0\n\nwhile err == 0:\n    count = 0\n    for nom in i:\n        if nom % 2 == 1:\n            err = 1\n            count += 1\n        else:\n            i[count] = nom \/ 2\n            count += 1\n    if err == 0:\n        total += 1\n\nprint(total)","n=input()\na=map(list(int,input().split()))\n\ncount==0\nall=[]\n\nfor i in range(n):\n  if a[i]%2 ==0:\n    while true:\n      if a[i]%2==0:\n        count+=1\n      else:\n        break\n    all.append(count)\n    \nprint(max(count))\n    ","N = int(input())\nA = list(map(int, input().split()))\nans = 100000\n\nfor i in A:\n    temp = format(i, 'b')\n    ans = min(ans, len(temp) - temp.rfind('1') - 1)\n\nprint(ans)","n = int(input())\nA = [0]*n\nL = list(map(int,input().split()))\nfor i in range(n):\n  cnt = 0\n  while L[i] % 2 == 0:\n    L[i] = L[i]\/2\n    cnt += 1\n  A[i] = cnt\nprint(min(A))","import numpy as np\n\nline_len = int(input())\nnum_list = []\nnum_list = input().rstrip().split(' ')\nnp_num_list = np.array(num_list).astype(int)\ndiv = [2]*line_len\nnp_div = np.array(div)\ncounter = 0\nflag = False\nwhile True:\n    for i in range(line_len):\n        if np_num_list[i]%2 != 0:\n            flag = True\n    if flag:\n        print(counter)\n        break\n    np_num_list =  np_num_list\/np_div\n    counter = counter + 1","N = int(input())\nA = list(map(int, input().split()))\n\ncount = 0\nflag = False\nwhile True:\n  for n in range(N):\n    if A[n] % 2 == 0: A[n] = A[n] \/\/ 2\n    else:\n      flag = True\n      break\n  count += 1\n  if flag: break  \n\nprint(count)","N = int(input())\na = input().split(' ')\nb = 0\nfor i in a:\n    b += int(i)\n\nif b%2 == 0:\n    print(min(int(i) for i in a)\/\/2)\nelse:\n    print(0)","N=input()\nA=list(map(int,input().split()))\nans=float('inf')\nfor i in A:\n      ans=min(ans,len(bin(i))-bin(i).rfind('1')-1)\nprint(ans)\n","n = int(input())\nA = []\nA = list(map(int, input().split()))\nres = 0\n\nwhile(True):\n    flg_odd = 0\n    for i in range(n):\n        print(A[i])\n        if ( A[i] % 2 != 0):\n            flg_odd = 1\n    if ( flg_odd == 1):\n        break\n    for i in range(n):\n        A[i] = A[i]\/2\n    res += 1\nprint(res)\n","count = input()\nnumbers = (int(num) for num in input().split())\n\ncounter = 0\nwhile True:\n  tmp = 0\n  for item in numbers:\n    tmp += item % 2\n  if tmp > 0:\n    break\n  counter ++\n  numbers = [item \/ 2 for item in numbers]\nprint(counter)","def check(a,cnt)\n  b = [int(x)%2 for x in a]\n  if 1 in b:\n    return 0,cnt\n  else :\n    cnt +=1\n    b = [int(x)\/2 for x in a]\n    return 1,cnt\n\nN = input()\na = input().split()\ncnt = 0\nwhile(1):\n  m,cnt = check(a,cnt)\n  if m == 0:\n    print(cnt)\n  else :\n    continue","a=int(input())\nb=[]\ncount=0\nfor i in len(b):\n  if i%a!==0:\n    break\n  else:\n    i=i\/\/a\n    count+=1\nprint(count\/\/len(b))\n    \n    \n    ","N = input()\nA = list(map(int, input().split()))\ncount = 0\nwhile all(i % 2 == 0 for i in A):\n    A = [i\/2 for i in A]\n    count += 1\nprint(count)","input()\nstrs = input().split(' ')\nnums = [int(i) for i in strs]\n\nct = 0\nb_flag = False\nwhile(1):\n  for i, num in enumerate(nums):\n    if num % 2 == 0:\n      nums[i] = num\/2\n      continue\n    else:\n      b_flag = True\n      break\n  if b_flag:\n    break\n  ct += 1\nprint(ct)","N = int(input())\n\nnums = list(map(int,input().split()))\n\ni = 0\n\nwhile 1 != 0:\n    new = [(num\/2) for num in nums if (num%2) == 0]\n\n    if len(new) != N:\n        print(i)\n        exit()\n    else:\n        i += 1\n        nums = new\n","n = int(input())\na = list(map(int, input().split()))\nx = 'Y'\nnum = -1\nwhile x == 'Y':\n    l = []\n    num += 1\n    for i in a:\n        if i%2 == 0:\n            l.append(i\/\/2)\n        else:\n            x = 'N'\n            break\n    a = l\nprint(num)","N = int(input())\nA = list(map(int, input().split()))\nct = 0\nflag = 0\nwhile flag == 0:\n    for i in range(N):\n        if A[i] % 2 != 0:\n            flag = 1\n            break\n        else:\n            A[i] \/= 2\n    if flag == 1:\n        break\n    ct += 1\nprint(ct)","l = list(input().split(\" \"))\n\nloop_count = 0\ncount = 0\nmin_count = 0\n\nfor n in l:\n    loop_count = loop_count + 1\n    while int(n) % 2 == 0:\n        n = int(n)\/2\n        count = count + 1\n    if loop_count == 1:\n        min_count = count\n    elif min_count > count:\n        min_count = count\n    count = 0\n\nprint(min_count)","import itertools\nimport numpy as np\nimport sys\nMAX_INT = int(10e10)\nMIN_INT = -MAX_INT\nmod = 1000000007\ndef IL(): return list(map(int,input().split()))\ndef SL(): return input().split()\ndef I(): return int(sys.stdin.readline())\ndef S(): return input()\n\nN = I()\nA = np.array(IL())\n\ncnt = 0\nfor i in range(40):\n    if 1 in (A%2):\n        print(cnt)\n        exit()\n    else:\n        A \/\/= 2\n        cnt += 1","n = int(input())\nint_list = list(map(int,(input().split())))\ncount = 0\nfor i in range(30):\n    for i in range(len(int_list)):\n        \n        if int_list[i] % 2 == 0 :\n            int_list[i] = int_list[i]\/2\n        else:\n            int_list = []\n            break      \n    if len(int_list) == n :\n        count += 1\n    else: \n        break\nprint(count)\n","n = int(input())\na = [map(int, input().split())]\nl = [0 for i in range(n)]\nfor i in range(len(a)):\n    while a[i] % 2 == 0:\n        a[i] \/= 2\n        l[i] += 1\nprint(min(l))","n=int(input())\na=list(map(int,input().split()))\ncount=0\nwhile(1):\n  for i in range(n):\n    if a[i]%2==1:\n      break\n    else:\n      a[i]=a[i]\/\/2\n      count+=1\n  else:\n    break\nprint(count)","N=int(input())\na=list(map(int,input().split()))\nans=0\ngo=True\nwhile go:\n    for i in range(N):\n        if a[i]%2==0:\n            a[i]=a[i]\/2\n        else:\n            go=False\n            break\n    if go==False:\n        break\n    ans+=1\nprint(ans)","import numpy as np\ninput()\nx=np.array(input().split(),dtype=np.int32)\nans=0\nwhile (x%2==0).all():\n  x\/\/2\n  ans +=1\nprint(ans)","def check_even(a_list):\n    flag = True\n    for i, a in enumerate(a_list):\n        if a%2 == 1:\n            flag = False\n            break\n        a_list[i] = a\/\/2\n    return a_list, flag\n\n\ndef main():\n    n = int(input())\n    a_list = [int(a) for a in input().split()]\n\n    cnt = 0\n    while True:\n        a_list, flag = check_even(a_list)\n        if not flag:\n            break\n        cnt += 1\n\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()","n=int(input())\na=list(map(int,input().split()))\n \ncount=0\nans=a[0]\nfor i in range(n):\n  count=0\n  while(a[i]%2==0):\n    a[i]=a[i]\/\/2\n    count+=1\n  print(count)\n  ans=min(ans,count)\n  \nprint(ans)","import math\n\nn = int(input())\narr = [int(x) for x in input().split()]\n\nmax_even = 0\nfor x in arr:\n   if x % 2 == 0 and x > max_even:\n      max_even = x \n\nprint(math.log2(max_even))\n","input()\nA = list(map(int, input().split))\ncount = 0\n\nwhile all(a % 2 == 0 for a in A):\n    A = [a\/2 for a in A]\n    count += 1\nprint(count)","s = int(input())\ny = list(map(int, input().split()))\nx = 0\n \nwhile all(a%2==0 for a in y):\n    y = [a\/2 for a in y]\n    x += 1\n \nprint(x)","N = int(input())\nA = range(N)\nfor i in range(N):\n  A[i] = int(input())\n  \n\nA2nums = [0] * N\nfor i in range(N):\n  while True:\n    A[i] \/= 2\n    if A[i] % 2 == 0:\n      A2num[i] += 1\n    else: \n      break    \n\nprint(min(A2num))","N=int(input())\nA=[int(x) for x in input().split()]\n\nn=0\nt=0\nwhile 1:\n    #\u3059\u3079\u3066\u5076\u6570\u304b\u30c1\u30a7\u30c3\u30af\n    for i in range(N):\n        if A[i]%2 !=0:\n            t=1\n    \n    if t==1:break\n\n    for i in range(N):\n        A[i]=A[i]\/2\n    n+=1\nprint(n)\n","N=int(input())\nabcetc=input()\nabli=abcetc.split()\nabli=[int(s) for s in abli]\nctr=0\nwhile all(i%2==0 for i in abli):\n    for i in range(0,N):\n        abli[i]=abli[i]\/2\n    ctr+=1\nprint(ctr)","n = int(input())\na=list(map(int, input().split()))\ncount = 0\n\nwhile True:\n\tfor i in range(n):\n\t\tif a[i]%2 == 0 :\n\t\t\ta[i] = a[i]\/2\n\t\t\tif i == (n-1):\n\t\t\t\tcount += 1\n\t\telse:\n\t\t\tbreak\n\tbreak\n\nprint(count)","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nisExit = 0\nwhile isExit != 1:\n    for i in range(N):\n        if A[i] % 2 == 1:\n            isExit = 1\n        A[i] \/\/= 2\n    if isExit == 0:\n        ans += 1 \n\nprint(ans)\n","N = int(input())\nA = list(map(int, input().split()))\ndef isOdd(n):\n    return n % 2 == 1\ndef div2(n):\n    return n \/\/ 2\n\nres = 0\nwhile True:\n    if sum(map(isOdd, A)) > 0 or sum(A) == 0:\n        print(res)\n        exit()\n    else:\n        res += 1\n        A = list(map(div2, A))\n\n","n = int(input())\na = [int(i) for i in input().split()]\nans = 10**10\nfor i in range(n):\n\tcounter = 0\n\twhile a[i] % 2 == 0:\n\t\ta[i] \/= 2\n\t\tcounter += 1\n\tif counter <= ans:\n\t\tans = counter\nprint(ans)","n = input()\nls = list(map(int, input().split()))\n\ncnt = ''\nfor idx in range(0,len(ls)):\n    buf = 0\n    while ls[idx] % 2 ==0:\n        ls[idx] \/= 2\n        buf += 1\n    if cnt == '' or  buf < cnt:\n        cnt = buf\nprint(cnt)\n","n = int(input())\na = list(map(int, input().split()))\nans = 0\nwhile True:\n    exist_odd = False\n    for d in a:\n        if d&1 == 1:\n            exist_odd = True\n    if exist_odd:\n        break\n    for i in range(n):\n        a[i] \/\/= 2\n    ans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\nd = 0\nwhile all(b % 2 == 0 for b in a):\n    d += 1\n    a = list(c \/ 2 for c in a)\nprint(d)","import numpy as np\nN = int(input())\na  = [int(i) for i in input().split()]\nb = np.zeros_like(a)\nt = 0\nwhile [i % 2 for i in a] == b:\n  a = [i \/ 2 for i in a]\n  t = t + 1\nprint(t)\n","N = int(input())\nA = list(map(int, input().split()))\ncau = 0\nflag = \"go\"\nwhile flag == \"go\":\n    for i in range(N):\n        if(A[i] % 2 == 1):\n            flag = \"stop\"\n            break        \n    if(flag = \"go\"):\n        for i in range(N):\n            A[i] = A[i]\/2\n        cau += 1\nprint(cau)","n=int(input())\na=list(map(int,input().split()))\na=eval(\"+\".join(str(a)))\nl=0\nwhile a%2==0:\n  l+=1\nprint(l)","n = int(input())\na = list(map(int,input().split()))\n\nans = 0\nmin = 1000000\n\nfor i in range(n):\n\twhile (a[i]>>1 != 0) and (a[i]%2 == 0):\n\t\ta[i]=a[i]>>1\n\t\tans+=1\n\tif ans<min:\n\t\tmin = ans\n\tans = 0\nprint(min)\n","l = list(map(int, input().split()))\nv = np.array(l)\ncount = 0\nwhile np.sum(v % 2) == 0:\n    count += 1\n    v = v \/ 2\nprint(count)","import math\nn = input()\na = list(map(int, input().split()))\nans = float(\"inf\")\nfor i in a:\n    ans = min(ans, len(bin(i)) - bin(i).rfind(\"1\") - 1)\nprint(round(ans))","import sys\n\ndef main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    t = 0\n    while True:\n        for i in range(N):\n            if A[i] % 2 == 0:\n                A[i] = A[i]\/2\n            else:\n                print(t)\n                sys.exit\n        t += 1\n\nmain()","n = int(input())\na = list(map(int,input().split()))\n\nminno = 10 ** 9\n\nfor x in a:\n    cheknow = 0\n    while x % 2 == 0:\n        x = x \/ 2\n        cheknow += 1\n    if cheknow < minno:\n        minno = cheknow\nprint(minno)"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Find the sum of the integers between <var>1<\/var> and <var>N<\/var> (inclusive), whose sum of digits written in base <var>10<\/var> is between <var>A<\/var> and <var>B<\/var> (inclusive).<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 10^4<\/var><\/li>\n<li><var>1 \\leq A \\leq B \\leq 36<\/var><\/li>\n<li>All input values are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>A<\/var> <var>B<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the sum of the integers between <var>1<\/var> and <var>N<\/var> (inclusive), whose sum of digits written in base <var>10<\/var> is between <var>A<\/var> and <var>B<\/var> (inclusive).<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>20 2 5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>84\n<\/pre>\n<p>Among the integers not greater than <var>20<\/var>, the ones whose sums of digits are between <var>2<\/var> and <var>5<\/var>, are: <var>2,3,4,5,11,12,13,14<\/var> and <var>20<\/var>. We should print the sum of these, <var>84<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>10 1 2\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>13\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>100 4 16\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>4554\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\n\n\n\nConstraints\n1 \\leq N \\leq 10^4\n1 \\leq A \\leq B \\leq 36\nAll input values are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN A B\n\n\n\n\n\nOutputPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\n\n\n\n\n\nSample Input 120 2 5\n\n\n\n\n\nSample Output 184\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\n\n\n\n\nSample Input 210 1 2\n\n\n\n\n\nSample Output 213\n\n\n\n\n\n\nSample Input 3100 4 16\n\n\n\n\n\nSample Output 34554\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Find the sum of the integers between <var>1<\/var> and <var>N<\/var> (inclusive), whose sum of digits written in base <var>10<\/var> is between <var>A<\/var> and <var>B<\/var> (inclusive).<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 10^4<\/var><\/li>\n<li><var>1 \\leq A \\leq B \\leq 36<\/var><\/li>\n<li>All input values are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>A<\/var> <var>B<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the sum of the integers between <var>1<\/var> and <var>N<\/var> (inclusive), whose sum of digits written in base <var>10<\/var> is between <var>A<\/var> and <var>B<\/var> (inclusive).<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>20 2 5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>84\n<\/pre>\n<p>Among the integers not greater than <var>20<\/var>, the ones whose sums of digits are between <var>2<\/var> and <var>5<\/var>, are: <var>2,3,4,5,11,12,13,14<\/var> and <var>20<\/var>. We should print the sum of these, <var>84<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>10 1 2\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>13\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>100 4 16\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>4554\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementFind the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\n\n\n\nConstraints\n1 \\leq N \\leq 10^4\n1 \\leq A \\leq B \\leq 36\nAll input values are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN A B\n\n\n\n\n\nOutputPrint the sum of the integers between 1 and N (inclusive), whose sum of digits written in base 10 is between A and B (inclusive).\n\n\n\n\n\n\nSample Input 120 2 5\n\n\n\n\n\nSample Output 184\n\nAmong the integers not greater than 20, the ones whose sums of digits are between 2 and 5, are: 2,3,4,5,11,12,13,14 and 20. We should print the sum of these, 84.\n\n\n\n\n\nSample Input 210 1 2\n\n\n\n\n\nSample Output 213\n\n\n\n\n\n\nSample Input 3100 4 16\n\n\n\n\n\nSample Output 34554\n\n\n","solve_rate":0.667271847,"codenet_problem_id":"p03478","input_testcases":{"10":"37 1 18","27":"101 2 10","21":"110 4 34","4":"100 5 12","60":"111 1 011","8":"37 1 6","7":"101 3 12","48":"101 1 011","102":"100 4 16","49":"101 1 010","45":"10 1 6","100":"10 1 2","70":"010 5 010","40":"6 2 3","13":"37 1 3","79":"001 6 12","61":"100 2 011","11":"001 1 12","71":"010 6 010","12":"37 1 2","50":"100 1 010","19":"011 4 20","5":"20 1 6","38":"2 2 2","6":"37 2 6","103":"20 2 5","1":"20 2 6","3":"20 3 6","77":"001 3 12","64":"100 10 011","101":"20 2 5","63":"4 4 6","41":"6 2 5","65":"110 2 010","28":"101 2 19","57":"100 3 011","62":"100 5 011","74":"101 5 12","58":"100 1 011","42":"10 2 4","69":"010 8 010","9":"37 1 9","51":"100 2 010","26":"111 2 10","68":"110 4 011","59":"110 1 011","56":"100 3 010","52":"110 3 010","18":"011 2 20","2":"100 4 12","14":"4 1 6"},"output_testcases":{"10":"703\n","27":"2400\n","21":"5582\n","4":"3036\n","60":"4060\n","8":"332\n","7":"3212\n","48":"2995\n","102":"4554\n","49":"2511\n","45":"31\n","100":"13\n","70":"35\n","40":"5\n","13":"110\n","79":"0\n","61":"2783\n","11":"1\n","71":"30\n","12":"44\n","50":"2410\n","19":"39\n","5":"116\n","38":"2\n","6":"321\n","103":"84\n","1":"105\n","3":"72\n","77":"0\n","64":"979\n","101":"84\n","63":"4\n","41":"14\n","65":"3354\n","28":"5040\n","57":"2750\n","62":"2574\n","74":"3036\n","58":"2894\n","42":"9\n","69":"17\n","9":"590\n","51":"2299\n","26":"3465\n","68":"3426\n","59":"3949\n","56":"2266\n","52":"3110\n","18":"55\n","2":"3146\n","14":"10\n"},"n_missing":53,"programs":["a = list(int(i) for i in input().split()) \nct = 0\nfor i in range (0,a[0]):\n c = int(0)\n d = int(i+1)\n for j in range(0,5):\n  c += d%10\n  d  = d\/\/10\n if a[1]<=c and c <=a[2]:\n  ct += i+1\nprint(ct)","n,a,b = [int(x) for x in input().split()]\n\nans = 0\nfor x in range(n+1):\n    amount = sum([int(i) for i in list(str(x))])\n    if amount >= a and amount <= b:\n        ans += x\n\nprint(ans)\n","N, A, B = map(int,input().split())\ncount = 0\nfor i in range(1, N+1):\n    x = sum([int(c) for c in str(i)])\n    if A <= x and x <= B:\n        count += i\n\nprint(count)","n, a, b = map(int, input().split())\nanswer = 0\nfor i in range(n + 1):\n  if a<= sum(list(map(int, list(str(i))))) <= b:\n    answer += i\nprint(answer)","n,a,b = list(map(int, input().split()))\ns = 0\nfor i in range(1, n+1):\n    ns = sum(list(map(int, str(i))))\n    if ns >= a and ns <= b:\n        s += i\nprint(s)","n, a, b = map(int, input().split())\n\nnum_lists = list(range(1, n+1, 1))\nsum_lists = []\nfor i in num_lists:\n  count = 0\n  j = i\n  while j >0:\n    ans = j%10\n    count += ans\n    j = j\/\/10\n  if a <= count and count <= b:\n    sum_lists.append(i)\n\nanswer = 0\nfor i in sum_lists:\n  answer += i\n\nprint(answer)","n,a,b=map(int,input().split())\n\nprint(sum(i for i in range(n+1) if a<=sum(map(int,str(i)))<=b))","n, a, b = list(map(int, input().split()))\nans = 0\n\nfor i in range(1,n+1):\n    m = str(i)\n    x = len(m)\n    cnt = 0\n    for j in range(x):\n        cnt = cnt + int(m[j])\n    if a <= cnt <= b:\n        ans = ans + i\n    else:\n        continue\nprint(ans)","N, A, B = map(int input().split())\nres = 0\n \nfor i in range(N+1):\n  if A <= sum([int(n) for n in str(i)]) <= B:\n    res += 1\n \nprint(res)","N,A,B=map(int,input().split())\nC=0\nfor i in range(N+1):\n  T=0\n  for ii in str(i):\n    T=T+int(ii)\n  if T>=A and B>=T:\n    C=C+i\nprint(C)","import sys\n\ndef main():\n    N, A, B = map(int, input().split())\n    print(counter(N, A, B))\n\ndef counter(N, A, B):\n    total = 0\n    for n in range(1, N+1):\n        sum = 0\n        nn = n\n        while n!=0:\n            sum += n % 10\n            n = n \/\/ 10\n        if A <= sum <= B: total += nn\n    return total\n\nif __name__ == '__main__':\n    main()\n","N, A, B = map(int, input().split())\nans = 0\n\ndef FindSumOfDigits(x):\n    count = 0\n    while x>0:\n        count += x%10\n        x = x\/\/10\n\n    return count\n\nfor n in range(1, N+1):\n    count = FindSumOfDigits(n)\n    if A<= count <=B:\n        ans += n\n\nprint(ans) ","N,A,B = map(int,input().split(' '))\nnum = 0\nfor i in range(N+1):\n  x = list(str(i))\n  y = map(int,x)\n  if A <= sum(y) <= B:\n    num += i\nprint(num)\n    ","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n    if a <= sum(list(map(int, list(str(i))))) <= b:\n        ans += i\nprint(ans)","N, A, B = list(map(int, input().split()))\n\nresult = 0\n\nfor i in range(1,N+1):\n    x = i\n    y = 1000\n    sum = 0\n    while y > 0:\n        sum += int(x\/y)\n        x = int(x%y)\n        y = int(y\/10)\n    if sum >= A and sum <= B:\n        result += i\n\nprint(result)","N,A,B=map(int,input().split())\n\nS=[]\nfor i in range(1,N+1):\n    tmp=list(map(int,str(i)))\n    S.append(sum(tmp))\n\nAns=0\nfor i in S:\n    if i >= A and i<=B:\n        Ans+=i\nprint(Ans)","N, a, b = map(int, input().split())\n\ndef findSumOfDigits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\ncount = 0\n\nfor i in range(1, N + 1):\n    sum = findSumOfDigits(i)\n    if sum <= b and a <= sum:\n        count += i\n\nprint(count)","type1 =[]\nN,A,B = map(int,input().split())\nfor i in range(20):\n  if i >= A and i <= B:\n    type1.append(i)\n    \nprint(sum(type1))","n,a,b=map(int,input().split())\nprint(sum(i for i in range(n+1) if a<=sum(map(int,str(i)))<=b))","import numpy as np\nN, A, B = map(int, input().split())\n\ntotal = 0\nfor i in range(N+1):\n  a = i\n  lis =[]\n  while i >0:\n    lis.append(i%10)\n    i \/\/=10\n  lis.reverse()\n  lis = np.array(lis)\n  SUM = np.sum(lis)\n\n  if SUM >=A and SUM <=B:\n    total += a","n,a,b=map(int,input().split())\nsum=0\nfor i in range(n):\n     x10 = i \/\/ 10\n     x1 = i - x10\n     if 2 <= x10 + x1 and x10 + x1 <=5:\n         sum +=x10+x1\nprint(sum)","# -*- coding: utf-8 -*-\n\ndef calcsum(i):\n\tsum = 0\n\twhile (i>0):\n\t\tsum += i%10\n\t\ti -= i%10\n\t\ti = i\/10\n\t#print(sum)\n\treturn sum\n\ntmparr = input().split()\n\nn = int(tmparr[0])\na = int(tmparr[1])\nb = int(tmparr[2])\nsum = 0\n\n#print(\"n:{}\".format(n))\n#print(\"a:{}\".format(a))\n#print(\"b:{}\".format(b))\n\nfor i in range(n+1):\n\ttmp = calcsum(i)\n\tif(tmp >= a):\n\t\tif(tmp <= b):\n\t\t\tsum += i\nprint(sum)\n\n","n,a,b = map(int,input().split())\nsum1 = 0\nfor i in range(1,n+1):\n  if a<= i\/\/10 + (i - i\/\/10) <=b:\n    sum1 += i\/\/10 + (i - i\/\/10)\nprint(sum1)"," #ABC83, B - some sums\n\nn, a, b = [int(el) for el in input().split(' ')]\n\ntotal = 0\nfor i in range(1, n+1):\n    some_sum = sum(divmod(i, 10))\n    if a <= some_sum <= b:\n        total += i\nprint(total)\n","N, A, B = list(map(int, input().split()))\nans = 0\nfor i in range(1,N+1):\n    if A <= sum([int(x) for x in str(i)]) <= B:\n        ans += i\nprint(ans)","n, a, b = map(int, input().split())\nsum = 0\nfor i in range(1, n + 1):\n    a1 = n \/\/ 10000\n    a2 = n \/\/ 1000\n    a3 = n \/\/ 100\n    a4 = n \/\/ 10\n    k = a1 + (a2 - a1*10) + (a3 - a2*10) + (a4 - a3*10)\n    if (k >= a) and (k <= b):\n        sum += k\nprint(sum)\n","n, a, b = map(int, input().split())\nn = list(str(n))\n\ncount = 0\nfor j in range(n):\n    l = [n[i] for i in range(len(j))]\n    sum = sum(l)\n    if a <= sum and sum <= b:\n        count += 1\nprint(count)\n","import math\nfrom collections import deque\nfrom collections import defaultdict\n\n#\u81ea\u4f5c\u95a2\u6570\u7fa4\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\ndef factorization(n):\n\tres = []\n\tif n%2==0:\n\t\tres.append(2)\n\tfor i in range(3,math.floor(n\/\/2)+1,2):\n\t\tif n%i==0:\n\t\t\tc = 0\n\t\t\tfor j in res:\n\t\t\t\tif i%j==0:\n\t\t\t\t\tc=1\n\t\t\tif c==0:\n\t\t\t\tres.append(i)\n\treturn res\ndef fact2(n):\n\tp = factorization(n)\n\tres = []\n\tfor i in p:\n\t\tc=0\n\t\tz=n\n\t\twhile 1:\n\t\t\tif z%i==0:\n\t\t\t\tc+=1\n\t\t\t\tz\/=i\n\t\t\telse:\n\t\t\t\tbreak\n\t\tres.append([i,c])\n\treturn res\ndef fact(n):#\u968e\u4e57\n\tans = 1\n\tm=n\n\tfor _i in range(n-1):\n\t\tans*=m\n\t\tm-=1\n\treturn ans\ndef comb(n,r):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\n\tif n<r:\n\t\treturn 0\n\tl = min(r,n-r)\n\tm=n\n\tu=1\n\tfor _i in range(l):\n\t\tu*=m\n\t\tm-=1\n\treturn u\/\/fact(l)\ndef combmod(n,r,mod):\n\treturn (fact(n)\/fact(n-r)*pow(fact(r),mod-2,mod))%mod\ndef printQueue(q):\n\tr=copyQueue(q)\n\tans=[0]*r.qsize()\n\tfor i in range(r.qsize()-1,-1,-1):\n\t\tans[i] = r.get()\n\tprint(ans)\nclass UnionFind():\n\tdef __init__(self, n):\n\t\tself.n = n\n\t\tself.parents = [-1]*n\n\n\tdef find(self, x): # root\n\t\tif self.parents[x]<0:\n\t\t\treturn x\n\t\telse:\n\t\t\tself.parents[x] = self.find(self.parents[x])\n\t\t\treturn self.parents[x]\n\n\tdef union(self,x,y):\n\t\tx = self.find(x)\n\t\ty = self.find(y)\n\n\t\tif x==y:\n\t\t\treturn\n\n\t\tif self.parents[x]>self.parents[y]:\n\t\t\tx,y = y,x\n\n\t\tself.parents[x]+=self.parents[y]\n\t\tself.parents[y]=x\n\n\tdef size(self,x):\n\t\treturn -1*self.parents[self.find(x)]\n\n\tdef same(self,x,y):\n\t\treturn self.find(x)==self.find(y)\n\n\tdef members(self,x): # much time\n\t\troot = self.find(x)\n\t\treturn [i for i in range(self.n) if self.find(i)==root]\n\n\tdef roots(self):\n\t\treturn [i for i,x in enumerate(self.parents) if x<0]\n\n\tdef group_count(self):\n\t\treturn len(self.roots())\n\n\tdef all_group_members(self):\n\t\treturn {r: self.members(r) for r in self.roots()} # 1~n\ndef bitArr(n):#\u30d3\u30c3\u30c8\u5168\u63a2\u7d22\n\tx = 1\n\tzero = \"0\"*n\n\tans = []\n\tans.append([0]*n)\n\tfor i in range(2**n-1):\n\t\tans.append(list(map(lambda x:int(x),list((zero+bin(x)[2:])[-1*n:]))))\n\t\tx+=1\n\treturn ans;\ndef arrsSum(a1,a2):\n\tfor i in range(len(a1)):\n\t\ta1[i]+=a2[i]\n\treturn a1\ndef maxValue(a,b,v):\n\tv2 = v\n\tfor i in range(v2,-1,-1):\n\t\tfor j in range(v2\/\/a+1): #j:a\u306e\u500b\u6570\n\t\t\tk = i-a*j\n\t\t\tif k%b==0:\n\t\t\t\treturn i\n\treturn -1\ndef copyQueue(q):\n\tnq = queue.Queue()\n\tn = q.qsize()\n\tfor i in range(n):\n\t\tx = q.get()\n\t\tq.put(x)\n\t\tnq.put(x)\n\treturn nq\ndef get_sieve_of_eratosthenes(n):\n\t#data = [2]\n\tdata = [0,0,0]\n\tfor i in range(3,n+1,2):\n\t\tdata.append(i)\n\t\tdata.append(0)\n\tfor i in range(len(data)):\n\t\tinterval = data[i]\n\t\tif interval!=0:\n\t\t\tfor j in range(i+interval,n-1,interval):\n\t\t\t\tdata[j] = 0\n\t#ans = [x for x in data if x!=0]\n\tans = data[:]\n\treturn ans\n\nn,a,b = readInts()\n\nans = 0\n\nfor i in range(n+1):\n\tx=sum(list(map(lambda x:int(x), list(str(i)))))\n\tif x>=a and x<=b:\n\t\t#print(i)\n\t\tans+=i\n\nprint(ans)","n, a, b = map(int, input().split())\n\ntotal = 0\n\nfor i in range(1, n + 1):\n\n    p = i \/\/ 10000 + (i % 10000) \/\/ 1000 + (i % 1000) \/\/ 100 + (i % 100) \/\/ 10 + (i % 10)\n\n    if a <= p <= b:\n        total += i\n\nprint(total)\n","N,A,B = map(int,input().split())\nans =0\nfor i in range(1,N+1):\n    sumnum= sum([int(j) for j in str(i)])\n    if sumnum>=A and sumnum<=B:\n        ans+=i\nprint(ans)","n, a, b = map(int, input().split())\nresult = 0\nfor i in range(n + 1):\n  if a <= sum(map(int, list(str(i)))) <= b:\n    result += i\nprint(result)","n, a, b = map(int, input().split())\nprint(sum([x for x in range(1, n + 1) if a <= sum([int(c) for c in str(x)]) <= b]))","n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    x = sum(map(int,str(i)))\n    if a <= x <= b:\n        ans += i\nprint(ans)","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n  if a<= sum(list(map(int, list(str(i))))) <= b:\n    ans += i\nprint(ans)","# ABC083B - Some Sums\n\nn, a, b = list(map(int, input().split()))\nanswer = 0\n\nfor i in range(1, n + 1):\n    total = sum(list(map(int, list(str(i)))))\n    if a <= total <= b:\n        answer += total\n    \nprint(answer)","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n):\n    if a <= sum(list(map(int, list(str(i))))) <= b:\n    ans += 1\nprint(ans)","s=[[int(j) for j in input().split()] for i in range(1)]\nn=s[0][0]\na=s[0][1]\nb=s[0][2]\nans=0\nfor i in range(1,n+1,1):\n    n1=i \/\/ 1000\n    n2=(i-n1*1000) \/\/ 100\n    n3=(i-n1*1000-n2*100) \/\/ 10\n    n4=i-n1*1000-n2*100-n3*10\n    sum=n1+n2+n3+n4\n    if sum>=a and sum<=b:\n        ans+=n1*1000+n2*100+n3*10+n4\nprint(ans)","N, A, B = map(int, input().split())\nprint(sum(i for i in range(1, N + 1) if A <= sum(list(map(int, str(i)))) & sum(list(map(int, str(i)))) <= B))","n,a,b = (int(x) for x input().split())\nans = 0\n\ndef k(N):\n    sum = 0\n    while N>0:\n        sum += N%10\n        N = N\/\/10\n    return sum\n\nfor i in range(1,n+1):\n    if a<=k(i)<=b:\n        ans +=i\nprint(ans)\n","N, A, B = map(int, input().split())\nans = 0\nfor n in range(1, N+1):\n  s = sum(map(int, list(str(n))))\n  if s >= A and s <= B:\n    ans += n\nprint(ans)\n\n","N,A,B=map(int,input().split())\nans=0\nfor i in range(N+1):\n    tmp=0\n    n=i\n    for j in range(len(str(i))):\n        tmp+=n%10\n        n\/\/=10\n    if A<=tmp<=B:\n        ans+=i\nprint(ans)\n","n, a, b = map(int,input().split())\ncount = 0\nfor i in range(1,n+1):\n    num = i\n    digit = 0\n    while num > 0:\n        digit += num % 10\n        num = num \/\/ 10\n    if a <= digit <= b:\n        count += i\nprint(count)","n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    su = 0\n    x = i\n    while x != 0:\n        su += x % 10\n        x = x\/\/10\n    if a <= su <= b:\n        ans += i\nprint(ans)","n, a, b =map(int, input().split())\nsum = 0\nfor i in range(1, n+1):\n    s = 0\n    num = i\n    while num > 0:\n        s += num % 10\n        num \/\/= 10\n    if a <= s <= b:\n        sum += i\nprint(sum)","n,a,b = map(int, input().split())\nsum = 0\nfor i in range(10):\n  for j in range(10):\n    for k in range(10):\n      for l in range(10):\n   \t    if 1000*i + 100*j + 10*k + l <= n and a<i+j and i+j<b :\n   \t\t   sum += 1000*i + 100*j + 10*k + l\nprint(sum)","def sums(n):\n    s=sum(map(int,str(n)))\n    return s\n\nans=0\nN,a,b=map(int,input().split())\nfor i in range(1,N+1):\n    if a<=sums(i) and sums(i)<=b:\n        ans+=i\nprint(ans)\n","n, a, b = map(int, input().split())\nprint(sum(i for i in range(1, n+1) if a <= sum(map(int, list(str(i)))) <= b))","n,a,b = map(int, input().split())\n\nans = 0\nfor i in range(1, n+1):\n    l = list(str(i))\n    total = sum([int(i) for i in l])\n    if a <= total <= b:\n        tmp = int(\"\".join(l))\n        ans += tmp\nprint(ans)","(lambda N,A,B:print(sum([int(i) for i in range(1,N+1) if A<=sum(map(int,list(str(i))))<= B])))(**dict(zip([\"N\",\"A\",\"B\"],[int(i) for i in input().split()])))","N, A, B = map(int, input().split())\nprint(sum(i for i in range(1, N+1) if A <= sum(map(int, str(i))) <= B))","n, a, b = map(int, input().split())\nsum = 0\nfor ia in range(10):\n    for ib in range(10):\n        if a<=(ia + ib)<=b:\n            v = 10*ia + ib\n            if v<=n:\n                ##print('{}{}'.format(ia, ib))\n                sum += v \nprint(sum)\n    \n","\nn, a, b = map(int, input().split())\nans = 0\n\ndef calc_sum(i):\n    ret = 0\n    while i != 0:\n        ret += i % 10\n        i \/\/= 10\n    return ret\n\nfor i in range(1, n + 1):\n    sum = calc_sum(i)\n    if a <= sum and sum <= b:\n        ans += i\n\nprint(ans)\n","Last login: Mon Jun 24 15:45:40 on ttys001\n\nokazaki@shinji-2(16:27:24) ~\n% ls                                                                       [~]\n#.zshrc#        Downloads       Pictures        Untitled2.ipynb\nApplications    Library         Public          anaconda3\nDesktop         Movies          Untitled.ipynb  play\nDocuments       Music           Untitled1.ipynb\n\nokazaki@shinji-2(16:27:27) ~\n% mkdir prokon                                                             [~]\n\nokazaki@shinji-2(16:28:18) ~\n% cd prokon                                                                [~]\n\nokazaki@shinji-2(16:28:23) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:28:24) ~\/prokon\n% mkdir 20190624                                                      [prokon]\n\nokazaki@shinji-2(16:28:36) ~\/prokon\n% ls                                                                  [prokon]\n20190624\n\nokazaki@shinji-2(16:30:19) ~\/prokon\n% cd ..                                                               [prokon]\n\nokazaki@shinji-2(16:30:21) ~\n% ls                                                                       [~]\n#.zshrc#        Downloads       Pictures        Untitled2.ipynb\nApplications    Library         Public          anaconda3\nDesktop         Movies          Untitled.ipynb  play\nDocuments       Music           Untitled1.ipynb prokon\n\nokazaki@shinji-2(16:30:29) ~\n% cd prokon                                                                [~]\n\nokazaki@shinji-2(16:30:33) ~\/prokon\n% ls                                                                  [prokon]\n20190624\n\nokazaki@shinji-2(16:30:35) ~\/prokon\n% rmdir 20190624                                                      [prokon]\n\nokazaki@shinji-2(16:30:42) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:30:44) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:31:36) ~\/prokon\n% mkdir 083                                                           [prokon]\n\nokazaki@shinji-2(16:31:41) ~\/prokon\n% mkdir 088                                                           [prokon]\n\nokazaki@shinji-2(16:31:48) ~\/prokon\n% mkdir 085                                                           [prokon]\n\nokazaki@shinji-2(16:31:56) ~\/prokon\n% ls                                                                  [prokon]\n083 085 088\n\nokazaki@shinji-2(16:31:58) ~\/prokon\n% cd 083                                                              [prokon]\n\nokazaki@shinji-2(16:32:03) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:36:04) ~\/prokon\/083\n% b.py                                                                   [083]\nzsh: command not found: b.py\n\nokazaki@shinji-2(16:36:10) ~\/prokon\/083\n% python b.py                                                            [083]\nTraceback (most recent call last):\n  File \"b.py\", line 1, in <module>\n    N,A,B = map(char,input().split())\nNameError: name 'char' is not defined\n\nokazaki@shinji-2(16:36:19) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:38:03) ~\/prokon\/083\n% python b.py                                                            [083]\n\\  File \"b.py\", line 5\n    for i in 10x:\n               ^\nSyntaxError: invalid syntax\n\nokazaki@shinji-2(16:38:04) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:38:17) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n3 5\nTraceback (most recent call last):\n  File \"b.py\", line 5, in <module>\n    for i in 10:\nTypeError: 'int' object is not iterable\n\nokazaki@shinji-2(16:38:25) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:39:02) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n2\nTraceback (most recent call last):\n  File \"b.py\", line 2, in <module>\n    A,B = map(int,input().split())\nValueError: not enough values to unpack (expected 2, got 1)\n\nokazaki@shinji-2(16:39:06) ~\/prokon\/083\n% python b.py                                                            [083]\n10   \n3 4\n10\n3\n4\n\nokazaki@shinji-2(16:39:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:40:28) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n3 4\n1\n\nokazaki@shinji-2(16:40:35) ~\/prokon\/083\n% python b.py                                                            [083]\n28 \n3 5\n10\n\nokazaki@shinji-2(16:40:49) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:44:11) ~\/prokon\/083\n% python b.py                                                            [083]\n15\n3 4\n15\n\nokazaki@shinji-2(16:44:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:47:38) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:47:44) ~\/prokon\/083\n% python b.py                                                            [083]\n20\n2 5\n28\n\nokazaki@shinji-2(16:47:52) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:50:33) ~\/prokon\/083\n% python b.py                                                            [083]\n20\n2 5\n40\n\nokazaki@shinji-2(16:50:44) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n^Z\nzsh: suspended  python b.py\n\nokazaki@shinji-2(16:50:57) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:52:11) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n40\n\nokazaki@shinji-2(16:52:18) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:52:39) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5 \n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n190\n\nokazaki@shinji-2(16:52:45) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:53:17) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\nTraceback (most recent call last):\n  File \"b.py\", line 15, in <module>\n    keta = sum(list(map(int,str(n))))\nNameError: name 'n' is not defined\n\nokazaki@shinji-2(16:53:22) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:53:40) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n64\n\nokazaki@shinji-2(16:53:43) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:54:34) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n2\n84\n\nokazaki@shinji-2(16:54:38) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:55:45) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n2\n3\n4\n5\n2\n3\n4\n5\n2\n84\n\nokazaki@shinji-2(16:55:51) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:56:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nN,A,B = map(int,input().split())\n\ncount = 0\n\n'''                                                                            \ndef keta_sum(n):                                                               \n    sum = 0                                                                    \n    while n>0:                                                                 \n        sum += n%10 #\u5bfe\u8c61\u306e\u6841\u3092\u52a0\u7b97                                            \n        n = n\/\/10 # \u6b21\u306e\u6841\u3092\u307f\u308b                                               \n    return(sum)                                                                \n'''\n\nfor i in range(N):\n    keta = sum(list(map(int,str(i+1))))\n\n    if keta >= A and keta<= B:\n      #  print(keta)                                                           \n        count += (i+1)\n\nprint(count)","from sys import stdin\n\n\ndef find_sum_of_digits(n, base=10):\n    _sum = 0\n    while n>0:\n        _sum += n%base\n        n \/= base\n    return _sum\n\n\nif __name__ == \"__main__\":\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    N, A, B = list(map(int,_in[0].split(' ')))  # type:list(int)\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    cnt = 0\n    for n in range(N+1):\n        _sum = find_sum_of_digits(n)\n        if A <= _sum <= B:\n            cnt += n\n    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(cnt)\n","N,A,B = map(int,input().split())\nS = 0\nfor i in range(N + 1):\n    if i < 10:\n        W = i\n    elif i < 100:\n        W = int(str(i)[0]) + int(str(i)[1])\n    elif i < 1000:\n        W = int(str(i)[0]) + int(str(i)[1]) + int(str(i)[2])\n    elif W < 10000:\n        W = int(str(i)[0]) + int(str(i)[1]) + int(str(i)[2]) + int(str(i)[3])\n    else:\n        W = 1\n    \n    if A <= W <= B:\n        S += i\n\nprint(S)","from sys import stdin\nN, A, B = [int(x) for x in stdin.readline().rstrip().split()]\n#N, A, B = map(int, input().split())\nn_list = [0]\n#digit3_max = min(int(N \/ 100), 9)\ndigit_N = len(str(N))\n\ndef setDigit(N_max, sum_min, sum_max, digit):\n    n_max = int(N_max \/ (10 ** (digit - 1)))\n    for i in range(min(n_max, sum_max, 9) + 1):\n        if digit == 1 and i >= sum_min:\n            n_list.append(N - N_max + i)\n            #print(N_max, i)\n        elif digit == 1 and i < sum_min: continue\n        else:\n            #print(N_max - (i * 10 ** (digit - 1)), max(sum_min - i, 0), sum_max - i, digit - 1)\n            setDigit(N_max - (i * 10 ** (digit - 1)), max(sum_min - i, 0), sum_max - i, digit - 1)\n\n\nsetDigit(N, A, B, digit_N)\n'''\nfor digit3 in range(digit3_max + 1):\n    tmp1 = N - digit3 * 100\n    digit2_max = min(int(tmp1 \/ 10), 9)\n    for digit2 in range(digit2_max + 1):\n        tmp2 = tmp1 - digit2 * 10\n        digit1_max = min(tmp2, 9)\n        for digit1 in range(digit1_max + 1):\n            if (digit1 + digit2 + digit3) >= A and (digit1 + digit2 + digit3) <= B:\n                n_list.append(digit3 * 100 + digit2 * 10 + digit1)\n'''\n\nprint(sum(n_list))\n","n = list(map(int,input().split()))\nans = 0\ncount = 0\nfor i in range(n[0]+1):\n    j = i\n    ans = 0\n    while(i is not 0):\n        ans = ans + i%10\n        i = int(i\/10)\n    if ans >= n[1] and ans <= n[2]:\n        count = count +j\nprint(count)","N, A, B = int(input()), int(input()), int(input())\ndata = []\n\ndef digitsum(n):\n        s = str(n)\n        array = list(map(int, s))\n        return sum(array)\n\nn = 0\nfor n in range(N+1):\n        x = digitsum(n)\n        if A <= x <= B:\n                data.append(x)\n\nprint(sum(data))","N,A,B = map(int, input().split())\nans = 0\nfor num in range(1,N+1):\n    strnum = str(num)\n    count = 0\n    for s in strnum:\n        count += int(s)\n    if count >= A and count <= B:\n        ans += num\nprint(ans)","N, A, B = map(int, input().split())\nlist = []\n\nfor i in range(1, N+1):\n    num = i\n    num_sum = 0\n    while num > 0:\n        num_sum += num % 10\n        num = num \/\/ 10\n    if A <= num_sum and num_sum <= B:\n        list.append(i)\n\nprint(sum(list))","#\u5404\u6841\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\u3059\u308b\ndef digitSum(n):\n    s = str(n)\n    #\u4e00\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\n    array = list(map(int, s))\n    return sum(array)\n\nn,a,b=map(int,input().split())\nl=[]\n\nfor i in range(0,n+1):\n    if a<=digitSum(i) and digitSum(i)<=b:\n        l.append(i)\n\nprint(sum(l))\n","N, A, B = map(int, input().split())\nans = 0\nfor i in range(1, N+1):\n    i = str(i)\n    val = 0\n    for j in range(len(i)): val += int(i[j])\n    if A <= val <= B: ans += int(i)\nprint(ans)\n","n, a, b = map(int, input().split())\nprint(sum(x for x in range(1, n+1) if a <= sum(map(int, str(x))) <= b))","n,b,c = map(int,input().split())\ncount = 0\n\nfor i in range(1,n+1): #startnumber, endnumber\n  s = str(i)\n  numSum = 0\n  for si in range(len(s)):\n    numSum += int(s[si]) \n  \n  if numSum >= b and numSum <= c:\n    count += i\n\nprint(count)\n","def calculate_sum_of_digits(n):\n    result = 0\n    while n != 0:\n        result += n % 10\n\n        n \/\/= 10\n\n    return result\n\n\nn, a, b = map(int, input().split())\nresult = 0\nfor i in range(1, n + 1):\n    sum_of_digits = calculate_sum_of_digits(i)\n    if a <= sum_of_digits <= b:\n        result += i\n\nprint(result)\n","N, A, B = map(int, input().split())\n\nans = 0\n\n\ndef somesum(x):\n    total = 0\n    while x > 0:\n        total += x % 10\n        x = x \/\/ 10\n    return total\n\n\nfor i in range(N + 1):\n    total = somesum(i)\n    if total >= A and total <= B:\n        ans += i\n\nprint(ans)\n","#abc083 b-some sums\nn,a,b=map(int,input().split())\nnum=[str(x) for x in range(1,n+1)]\nans=0\nfor x in num:\n    s=0\n    for y in range(len(x)):\n        s+=int(x[y])\n    if s>=a and s<=b:\n        ans+=s\nprint(ans)","n, a, b = map(int, input().split())\n\nans = 0\nfor i in range(n+1):\n\ts = str(i)\n\tsum = 0\n\tfor c in s:\n\t\tsum += int(c)\n\tif a <= sum and sum <= b:\n\t\tans += i\nprint(ans)","n, a, b = map(int, input().split())\nsum = 0\nfor i in range(n+1):\n    i_str = list(str(i))\n    # print(i_str)\n    num_sum = 0\n    for num_str in i_str:\n        num_sum += int(num_str)\n    if num_sum >= a and num_sum <= b:\n        sum += i\nprint(sum)","N, A, B = map(int, input().split())\ncnt = 0\nfor i in range(1, N+1):\n    sum = 0\n    num = i\n    while num > 0:\n        sum += num % 10\n        num \/\/= 10\n    if A <= sum <= B:\n        cnt += i\nprint(cnt)\n","N, A, B = map(int, input().split())\nSUM = 0\nfor i in range(1, N+1):\n    j = i\n    s = 0\n    while True:\n        if j == 0:\n            break\n        s += j%10\n        j = j\/\/10\n    if A <= s <= B:\n        SUM += i\nprint(SUM)","n,a,b=map(int,input().split())\nnum = 0\nall = 0\n\ndef sum(x):\n  total = 0\n  while x>0:\n    num = x%10\n    total +=num\n    num=0\n    x = int(x\/10)\n  \n  return total\n    \nfor i in range(1,n+1):\n  if sum(i)>=a and sum(i)<=b:\n    all +=i\n  \nprint(all)\n","n,a,b = (int(i) for i in input().split())\ncount = 0\n\nfor i in range(1,n+1):\n    si = str(i)\n    if len(si) == 1:\n        s = int(si[0])\n    elif len(si) == 2:\n        s = int(si[0])+int(si[1])\n    elif len(si) == 3:\n        s = int(si[0])+int(si[1])+int(si[2])\n    else:\n        s = int(si[0])+int(si[1])+int(si[2])+int(si[3])\n\n    if a <= s and s <= b:\n        count += i\nprint(count)\n","N, A, B = map(int, input().split())\nans = 0\nfor i in range(N+1):\n    sum = i%10 + i\/\/10%10 + i\/\/100%10 + i\/\/1000%10\n    if A <= sum <= B:\n        ans += i\nprint(ans)\n","n,a,b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n    l = sum(list(map(int, list(str(i)))))\n    if a <= l <= b:\n        ans += i\nprint(ans)","N,A,B=map(int,input().split())\nprint(sum([i for i in range(1,N+1) if sum([int(j) for j in str(i)])>=A and sum([int(j) for j in str(i)])<=B]))","N,A,B = map(int,input().split())\nt = 0\nfor i in range(N+1):\n    if A <= sum([int(x) for x in str(i)]) <= B:\n        t += i\nprint(t)","n,a,b=map(int,input().split())\nx=[]\ny=[]\nfor i in range(1,n+1):\n  x.append(i)\nfor j in range(n):\n  s=sum(list(map(int,str(x[j]))))\n  if s>=a and s<=b:\n    y.append(x[j])\nprint(sum(y))\n","n,a,b=map(int, input().split())\nsu=0\nfor i in range(n+1):\n  keta=sum(list(map(int, str(i))))\n  if a<=keta<=b:\n    su+=i\n\n    \nprint(su)","N, A, B = map(int, input().split())\nsum = 0\n \nfor n in range(N+1):\n  N1 = int(n\/10000)\n  N2 = int((n-10000*N1)\/1000)\n  N3 = int((n-10000*N1-1000*N2)\/100)\n  N4 = int((n-10000*N1-1000*N2-100*N3)\/10)\n  N5 = n-10000*N1-1000*N2-100*N3-10*N4\n  if A <= N1+N2+N3+N4+N5 <= B:\n    sum = sum + n\n \n \nprint(sum)","#!\/usr\/bin\/env python3\nn, a, b = map(int, input().split())\nans = 0\n\nfor i in range(1, n + 1):\n    arr = [int(c) for c in str(i)]\n    sumarr = sum(arr)\n    if sumarr >= a and sumarr <= b:\n        ans += i\n\nprint(ans)\n","n, a, b = map(int, input().split())\ntotal = 0\nfor i in range(1, n+1):\n    if a<= sum(map(int, list(str(i)))) <= b:\n        total += i\n \nprint(total)","n,a,b = map(int,input().split())\nans = 0\nfor i in range(n):\n  if a<=sum(map(int,list(str(i))))<=b:\n    ans += i\nprint(ans)","N, A, B = map(int, input().split())\nans = 0\nfor n in range(1, N+1):\n  tmp = n\n  i = 4\n  s = 0\n  while i > -1:\n    keta = tmp \/\/ (10 ** i)\n    tmp -=  keta * (10 ** i)\n    s += keta\n    i -= 1\n  if s >= A and s <= B:\n    ans += n\nprint(ans)\n\n","def find_sum_of_digits(n):\n    sum_of_digits = 0\n    while n>0:\n        sum_of_digits = sum_of_digits + n % 10\n        n = int(n \/ 10)\n    return sum_of_digits\n\n\nn, a, b = [int(e) for e in input().split()]\nans = 0\nfor i in range(n+1):\n    sum_of_digits = find_sum_of_digits(i)\n    if a <= sum_of_digits and sum_of_digits <= b:\n        ans = ans + i\nprint(ans)","while True:\n    s = 0\n    a = input().split()\n    X = [int(i) for i in a]\n    N,A,B = str(X[0]), X[1], X[2]\n    if (int(N) < 1 or int(N) >10001) or (A > B or B > 36 or A < 1):\n        continue\n    for i in range(1,int(N)+1):\n        a = 0\n        l = []\n        l = list(map(int,list(str(i))))\n        for j in l:\n            a = a + j\n        if a >= A and a <= B:\n            s = s + i\n    print(s)\n    break","s = input().split()\nn = int(s[0])\na = int(s[1])\nb = int(s[2])\n\nsums = []\n\nfor i in range(1, n + 1):\n    x = i\n    check = 0\n    while (x > 0):\n        y = x % 10\n        x = int(x \/ 10)\n        check += y\n    if a <= check <= b:\n        sums.append(i)\n\nanswer = 0\nfor i in range(len(sums)):\n    answer += sums[i]\n\nprint(answer)","n, a, b = map(int, input().split())\n\nans = 0\nfor i in range(1, n + 1):\n    temp = 0\n    hoge = i\n    while hoge > 0:\n        temp += hoge % 10\n        hoge \/\/= 10\n    if a <= temp <= b:\n        ans += 1\n\nprint(ans)\n","n, a, b = map(int, input().split())\narr = []\nfor i in range(n):\n  i = str(i + 1)\n  k = 0\n  for e in range(len(i)):\n    k += int(i[e])\n  if a <= k and k <= b:\n    arr.append(int(i))\nprint(sum(arr))","n,a,b=map(int,input().split())\nresult=0\nfor i in range(1,n+1):\n    if a <= sum(list(map(int,list(str(i))))) <= b:\n        result += i\nprint(result)","N,A,B = map(int,input().split())\ncount = 0\nfor i in range(N+1):\n    if A <= sum(map(int, str(i))) <= B :\n        count += i\nprint(count)","n,a,b = [int(i) for i in input().split()]\n\nsum2 = 0\n\nfor x in range(n+1):\n    sum1 = 0\n    x2 = x\n    while x > 0:\n        sum1 += x % 10\n        x = int(x\/10)\n\n    if sum1 >= a and sum1 <= b:\n        sum2 += x2\nprint(sum2)","def summ(n):\n    n_s = str(n)\n    tmp = 0\n    for i in n_s:\n        tmp += int(i)\n    return tmp\n\nN,A,B = map(int, input().split())\n\nans = 0\nfor i in range(N+1):\n    if A <= summ(i) <= B:\n        ans += i\nprint(ans)\n","import sys\nstin = sys.stdin.readline\nN,A,B=list(map(int,stin().split()))\nprint(sum(i for i in range(N) if A <= sum(map(int,str(i))) <= B))","from functools import reduce\n\nn,a,b = map(lambda x:int(x),input().split(\" \"))\n\nans = 0\nfor ni in range(a,n+1):\n    add_each_dig = int(reduce(lambda x, y: int(x) + int(y), str(ni) ))\n    if a <= add_each_dig and add_each_dig <= b:\n        ans += ni\n\nprint(ans)","n,a,b=map(int,input().split())\nN=list(range(1,n+1))\nans=0\nfor num in N:\n  S=sum(list(map(int, str(num))))\n  if a<=S<=b:\n    ans+=num\nprint(ans)","N, A, B = map(int, input().split())\nans = 0\n\n\ndef sumDigits(n):\n    sum = 0\n    while n != 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\n\nfor i in range(N+1):\n    x = sumDigits(i)\n    if A <= x <= B:\n        ans += i\n\nprint(ans)","INPUT=input()\nIN=INPUT.split(\" \")\n#N=int(IN[0])\nnumber=int(IN[0])\n#N\nA=int(IN[1])\nB=int(IN[2])\n\nGOUKEI=0\nkazu=0\n\nwhile kazu<=number:\n    X=list(map(int,list(str(kazu))))\n    #X = list(map(int, n))\n   \n    #print(X)\n    if A<=sum(X)<=B:\n        GOUKEI+=kazu\n        #print(\"add\",kazu)\n    kazu+=1\nprint(GOUKEI)\n","n,a,b=map(int,input().split())\nan=0\n \nfor i in range(n+1):\n    c=0\n    for j in range(len(str(i))):\n        c += int(str(i)[j])\n    \n    if a <= c and c <= b:\n        an+=i\n \nprint(an)","n,a,b = map(int,input().split())\ndef ketawa(i):\n  ret = 0\n  while(i):\n    ret += i % 10\n    i \/\/= 10\n  return ret\n\nret = 0\nfor i in range(1,n+1):\n  if a <= ketawa(i) <= b: ret += i\nprint(ret)\n"],"raw_generations":["a = list(int(i) for i in input().split()) \nct = 0\nfor i in range (0,a[0]):\n c = int(0)\n d = int(i+1)\n for j in range(0,5):\n  c += d%10\n  d  = d\/\/10\n if a[1]<=c and c <=a[2]:\n  ct += i+1\nprint(ct)","n,a,b = [int(x) for x in input().split()]\n\nans = 0\nfor x in range(n+1):\n    amount = sum([int(i) for i in list(str(x))])\n    if amount >= a and amount <= b:\n        ans += x\n\nprint(ans)\n","N, A, B = map(int,input().split())\ncount = 0\nfor i in range(1, N+1):\n    x = sum([int(c) for c in str(i)])\n    if A <= x and x <= B:\n        count += i\n\nprint(count)","n, a, b = map(int, input().split())\nanswer = 0\nfor i in range(n + 1):\n  if a<= sum(list(map(int, list(str(i))))) <= b:\n    answer += i\nprint(answer)","n,a,b = list(map(int, input().split()))\ns = 0\nfor i in range(1, n+1):\n    ns = sum(list(map(int, str(i))))\n    if ns >= a and ns <= b:\n        s += i\nprint(s)","n, a, b = map(int, input().split())\n\nnum_lists = list(range(1, n+1, 1))\nsum_lists = []\nfor i in num_lists:\n  count = 0\n  j = i\n  while j >0:\n    ans = j%10\n    count += ans\n    j = j\/\/10\n  if a <= count and count <= b:\n    sum_lists.append(i)\n\nanswer = 0\nfor i in sum_lists:\n  answer += i\n\nprint(answer)","n,a,b=map(int,input().split())\n\nprint(sum(i for i in range(n+1) if a<=sum(map(int,str(i)))<=b))","n, a, b = list(map(int, input().split()))\nans = 0\n\nfor i in range(1,n+1):\n    m = str(i)\n    x = len(m)\n    cnt = 0\n    for j in range(x):\n        cnt = cnt + int(m[j])\n    if a <= cnt <= b:\n        ans = ans + i\n    else:\n        continue\nprint(ans)","N, A, B = map(int input().split())\nres = 0\n \nfor i in range(N+1):\n  if A <= sum([int(n) for n in str(i)]) <= B:\n    res += 1\n \nprint(res)","N,A,B=map(int,input().split())\nC=0\nfor i in range(N+1):\n  T=0\n  for ii in str(i):\n    T=T+int(ii)\n  if T>=A and B>=T:\n    C=C+i\nprint(C)","import sys\n\ndef main():\n    N, A, B = map(int, input().split())\n    print(counter(N, A, B))\n\ndef counter(N, A, B):\n    total = 0\n    for n in range(1, N+1):\n        sum = 0\n        nn = n\n        while n!=0:\n            sum += n % 10\n            n = n \/\/ 10\n        if A <= sum <= B: total += nn\n    return total\n\nif __name__ == '__main__':\n    main()\n","N, A, B = map(int, input().split())\nans = 0\n\ndef FindSumOfDigits(x):\n    count = 0\n    while x>0:\n        count += x%10\n        x = x\/\/10\n\n    return count\n\nfor n in range(1, N+1):\n    count = FindSumOfDigits(n)\n    if A<= count <=B:\n        ans += n\n\nprint(ans) ","N,A,B = map(int,input().split(' '))\nnum = 0\nfor i in range(N+1):\n  x = list(str(i))\n  y = map(int,x)\n  if A <= sum(y) <= B:\n    num += i\nprint(num)\n    ","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n    if a <= sum(list(map(int, list(str(i))))) <= b:\n        ans += i\nprint(ans)","N, A, B = list(map(int, input().split()))\n\nresult = 0\n\nfor i in range(1,N+1):\n    x = i\n    y = 1000\n    sum = 0\n    while y > 0:\n        sum += int(x\/y)\n        x = int(x%y)\n        y = int(y\/10)\n    if sum >= A and sum <= B:\n        result += i\n\nprint(result)","N,A,B=map(int,input().split())\n\nS=[]\nfor i in range(1,N+1):\n    tmp=list(map(int,str(i)))\n    S.append(sum(tmp))\n\nAns=0\nfor i in S:\n    if i >= A and i<=B:\n        Ans+=i\nprint(Ans)","N, a, b = map(int, input().split())\n\ndef findSumOfDigits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\ncount = 0\n\nfor i in range(1, N + 1):\n    sum = findSumOfDigits(i)\n    if sum <= b and a <= sum:\n        count += i\n\nprint(count)","type1 =[]\nN,A,B = map(int,input().split())\nfor i in range(20):\n  if i >= A and i <= B:\n    type1.append(i)\n    \nprint(sum(type1))","n,a,b=map(int,input().split())\nprint(sum(i for i in range(n+1) if a<=sum(map(int,str(i)))<=b))","import numpy as np\nN, A, B = map(int, input().split())\n\ntotal = 0\nfor i in range(N+1):\n  a = i\n  lis =[]\n  while i >0:\n    lis.append(i%10)\n    i \/\/=10\n  lis.reverse()\n  lis = np.array(lis)\n  SUM = np.sum(lis)\n\n  if SUM >=A and SUM <=B:\n    total += a","n,a,b=map(int,input().split())\nsum=0\nfor i in range(n):\n     x10 = i \/\/ 10\n     x1 = i - x10\n     if 2 <= x10 + x1 and x10 + x1 <=5:\n         sum +=x10+x1\nprint(sum)","# -*- coding: utf-8 -*-\n\ndef calcsum(i):\n\tsum = 0\n\twhile (i>0):\n\t\tsum += i%10\n\t\ti -= i%10\n\t\ti = i\/10\n\t#print(sum)\n\treturn sum\n\ntmparr = input().split()\n\nn = int(tmparr[0])\na = int(tmparr[1])\nb = int(tmparr[2])\nsum = 0\n\n#print(\"n:{}\".format(n))\n#print(\"a:{}\".format(a))\n#print(\"b:{}\".format(b))\n\nfor i in range(n+1):\n\ttmp = calcsum(i)\n\tif(tmp >= a):\n\t\tif(tmp <= b):\n\t\t\tsum += i\nprint(sum)\n\n","n,a,b = map(int,input().split())\nsum1 = 0\nfor i in range(1,n+1):\n  if a<= i\/\/10 + (i - i\/\/10) <=b:\n    sum1 += i\/\/10 + (i - i\/\/10)\nprint(sum1)"," #ABC83, B - some sums\n\nn, a, b = [int(el) for el in input().split(' ')]\n\ntotal = 0\nfor i in range(1, n+1):\n    some_sum = sum(divmod(i, 10))\n    if a <= some_sum <= b:\n        total += i\nprint(total)\n","N, A, B = list(map(int, input().split()))\nans = 0\nfor i in range(1,N+1):\n    if A <= sum([int(x) for x in str(i)]) <= B:\n        ans += i\nprint(ans)","n, a, b = map(int, input().split())\nsum = 0\nfor i in range(1, n + 1):\n    a1 = n \/\/ 10000\n    a2 = n \/\/ 1000\n    a3 = n \/\/ 100\n    a4 = n \/\/ 10\n    k = a1 + (a2 - a1*10) + (a3 - a2*10) + (a4 - a3*10)\n    if (k >= a) and (k <= b):\n        sum += k\nprint(sum)\n","n, a, b = map(int, input().split())\nn = list(str(n))\n\ncount = 0\nfor j in range(n):\n    l = [n[i] for i in range(len(j))]\n    sum = sum(l)\n    if a <= sum and sum <= b:\n        count += 1\nprint(count)\n","import math\nfrom collections import deque\nfrom collections import defaultdict\n\n#\u81ea\u4f5c\u95a2\u6570\u7fa4\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\ndef factorization(n):\n\tres = []\n\tif n%2==0:\n\t\tres.append(2)\n\tfor i in range(3,math.floor(n\/\/2)+1,2):\n\t\tif n%i==0:\n\t\t\tc = 0\n\t\t\tfor j in res:\n\t\t\t\tif i%j==0:\n\t\t\t\t\tc=1\n\t\t\tif c==0:\n\t\t\t\tres.append(i)\n\treturn res\ndef fact2(n):\n\tp = factorization(n)\n\tres = []\n\tfor i in p:\n\t\tc=0\n\t\tz=n\n\t\twhile 1:\n\t\t\tif z%i==0:\n\t\t\t\tc+=1\n\t\t\t\tz\/=i\n\t\t\telse:\n\t\t\t\tbreak\n\t\tres.append([i,c])\n\treturn res\ndef fact(n):#\u968e\u4e57\n\tans = 1\n\tm=n\n\tfor _i in range(n-1):\n\t\tans*=m\n\t\tm-=1\n\treturn ans\ndef comb(n,r):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\n\tif n<r:\n\t\treturn 0\n\tl = min(r,n-r)\n\tm=n\n\tu=1\n\tfor _i in range(l):\n\t\tu*=m\n\t\tm-=1\n\treturn u\/\/fact(l)\ndef combmod(n,r,mod):\n\treturn (fact(n)\/fact(n-r)*pow(fact(r),mod-2,mod))%mod\ndef printQueue(q):\n\tr=copyQueue(q)\n\tans=[0]*r.qsize()\n\tfor i in range(r.qsize()-1,-1,-1):\n\t\tans[i] = r.get()\n\tprint(ans)\nclass UnionFind():\n\tdef __init__(self, n):\n\t\tself.n = n\n\t\tself.parents = [-1]*n\n\n\tdef find(self, x): # root\n\t\tif self.parents[x]<0:\n\t\t\treturn x\n\t\telse:\n\t\t\tself.parents[x] = self.find(self.parents[x])\n\t\t\treturn self.parents[x]\n\n\tdef union(self,x,y):\n\t\tx = self.find(x)\n\t\ty = self.find(y)\n\n\t\tif x==y:\n\t\t\treturn\n\n\t\tif self.parents[x]>self.parents[y]:\n\t\t\tx,y = y,x\n\n\t\tself.parents[x]+=self.parents[y]\n\t\tself.parents[y]=x\n\n\tdef size(self,x):\n\t\treturn -1*self.parents[self.find(x)]\n\n\tdef same(self,x,y):\n\t\treturn self.find(x)==self.find(y)\n\n\tdef members(self,x): # much time\n\t\troot = self.find(x)\n\t\treturn [i for i in range(self.n) if self.find(i)==root]\n\n\tdef roots(self):\n\t\treturn [i for i,x in enumerate(self.parents) if x<0]\n\n\tdef group_count(self):\n\t\treturn len(self.roots())\n\n\tdef all_group_members(self):\n\t\treturn {r: self.members(r) for r in self.roots()} # 1~n\ndef bitArr(n):#\u30d3\u30c3\u30c8\u5168\u63a2\u7d22\n\tx = 1\n\tzero = \"0\"*n\n\tans = []\n\tans.append([0]*n)\n\tfor i in range(2**n-1):\n\t\tans.append(list(map(lambda x:int(x),list((zero+bin(x)[2:])[-1*n:]))))\n\t\tx+=1\n\treturn ans;\ndef arrsSum(a1,a2):\n\tfor i in range(len(a1)):\n\t\ta1[i]+=a2[i]\n\treturn a1\ndef maxValue(a,b,v):\n\tv2 = v\n\tfor i in range(v2,-1,-1):\n\t\tfor j in range(v2\/\/a+1): #j:a\u306e\u500b\u6570\n\t\t\tk = i-a*j\n\t\t\tif k%b==0:\n\t\t\t\treturn i\n\treturn -1\ndef copyQueue(q):\n\tnq = queue.Queue()\n\tn = q.qsize()\n\tfor i in range(n):\n\t\tx = q.get()\n\t\tq.put(x)\n\t\tnq.put(x)\n\treturn nq\ndef get_sieve_of_eratosthenes(n):\n\t#data = [2]\n\tdata = [0,0,0]\n\tfor i in range(3,n+1,2):\n\t\tdata.append(i)\n\t\tdata.append(0)\n\tfor i in range(len(data)):\n\t\tinterval = data[i]\n\t\tif interval!=0:\n\t\t\tfor j in range(i+interval,n-1,interval):\n\t\t\t\tdata[j] = 0\n\t#ans = [x for x in data if x!=0]\n\tans = data[:]\n\treturn ans\n\nn,a,b = readInts()\n\nans = 0\n\nfor i in range(n+1):\n\tx=sum(list(map(lambda x:int(x), list(str(i)))))\n\tif x>=a and x<=b:\n\t\t#print(i)\n\t\tans+=i\n\nprint(ans)","n, a, b = map(int, input().split())\n\ntotal = 0\n\nfor i in range(1, n + 1):\n\n    p = i \/\/ 10000 + (i % 10000) \/\/ 1000 + (i % 1000) \/\/ 100 + (i % 100) \/\/ 10 + (i % 10)\n\n    if a <= p <= b:\n        total += i\n\nprint(total)\n","N,A,B = map(int,input().split())\nans =0\nfor i in range(1,N+1):\n    sumnum= sum([int(j) for j in str(i)])\n    if sumnum>=A and sumnum<=B:\n        ans+=i\nprint(ans)","n, a, b = map(int, input().split())\nresult = 0\nfor i in range(n + 1):\n  if a <= sum(map(int, list(str(i)))) <= b:\n    result += i\nprint(result)","n, a, b = map(int, input().split())\nprint(sum([x for x in range(1, n + 1) if a <= sum([int(c) for c in str(x)]) <= b]))","n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    x = sum(map(int,str(i)))\n    if a <= x <= b:\n        ans += i\nprint(ans)","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n  if a<= sum(list(map(int, list(str(i))))) <= b:\n    ans += i\nprint(ans)","# ABC083B - Some Sums\n\nn, a, b = list(map(int, input().split()))\nanswer = 0\n\nfor i in range(1, n + 1):\n    total = sum(list(map(int, list(str(i)))))\n    if a <= total <= b:\n        answer += total\n    \nprint(answer)","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n):\n    if a <= sum(list(map(int, list(str(i))))) <= b:\n    ans += 1\nprint(ans)","s=[[int(j) for j in input().split()] for i in range(1)]\nn=s[0][0]\na=s[0][1]\nb=s[0][2]\nans=0\nfor i in range(1,n+1,1):\n    n1=i \/\/ 1000\n    n2=(i-n1*1000) \/\/ 100\n    n3=(i-n1*1000-n2*100) \/\/ 10\n    n4=i-n1*1000-n2*100-n3*10\n    sum=n1+n2+n3+n4\n    if sum>=a and sum<=b:\n        ans+=n1*1000+n2*100+n3*10+n4\nprint(ans)","N, A, B = map(int, input().split())\nprint(sum(i for i in range(1, N + 1) if A <= sum(list(map(int, str(i)))) & sum(list(map(int, str(i)))) <= B))","n,a,b = (int(x) for x input().split())\nans = 0\n\ndef k(N):\n    sum = 0\n    while N>0:\n        sum += N%10\n        N = N\/\/10\n    return sum\n\nfor i in range(1,n+1):\n    if a<=k(i)<=b:\n        ans +=i\nprint(ans)\n","N, A, B = map(int, input().split())\nans = 0\nfor n in range(1, N+1):\n  s = sum(map(int, list(str(n))))\n  if s >= A and s <= B:\n    ans += n\nprint(ans)\n\n","N,A,B=map(int,input().split())\nans=0\nfor i in range(N+1):\n    tmp=0\n    n=i\n    for j in range(len(str(i))):\n        tmp+=n%10\n        n\/\/=10\n    if A<=tmp<=B:\n        ans+=i\nprint(ans)\n","n, a, b = map(int,input().split())\ncount = 0\nfor i in range(1,n+1):\n    num = i\n    digit = 0\n    while num > 0:\n        digit += num % 10\n        num = num \/\/ 10\n    if a <= digit <= b:\n        count += i\nprint(count)","n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    su = 0\n    x = i\n    while x != 0:\n        su += x % 10\n        x = x\/\/10\n    if a <= su <= b:\n        ans += i\nprint(ans)","n, a, b =map(int, input().split())\nsum = 0\nfor i in range(1, n+1):\n    s = 0\n    num = i\n    while num > 0:\n        s += num % 10\n        num \/\/= 10\n    if a <= s <= b:\n        sum += i\nprint(sum)","n,a,b = map(int, input().split())\nsum = 0\nfor i in range(10):\n  for j in range(10):\n    for k in range(10):\n      for l in range(10):\n   \t    if 1000*i + 100*j + 10*k + l <= n and a<i+j and i+j<b :\n   \t\t   sum += 1000*i + 100*j + 10*k + l\nprint(sum)","def sums(n):\n    s=sum(map(int,str(n)))\n    return s\n\nans=0\nN,a,b=map(int,input().split())\nfor i in range(1,N+1):\n    if a<=sums(i) and sums(i)<=b:\n        ans+=i\nprint(ans)\n","n, a, b = map(int, input().split())\nprint(sum(i for i in range(1, n+1) if a <= sum(map(int, list(str(i)))) <= b))","n,a,b = map(int, input().split())\n\nans = 0\nfor i in range(1, n+1):\n    l = list(str(i))\n    total = sum([int(i) for i in l])\n    if a <= total <= b:\n        tmp = int(\"\".join(l))\n        ans += tmp\nprint(ans)","(lambda N,A,B:print(sum([int(i) for i in range(1,N+1) if A<=sum(map(int,list(str(i))))<= B])))(**dict(zip([\"N\",\"A\",\"B\"],[int(i) for i in input().split()])))","N, A, B = map(int, input().split())\nprint(sum(i for i in range(1, N+1) if A <= sum(map(int, str(i))) <= B))","n, a, b = map(int, input().split())\nsum = 0\nfor ia in range(10):\n    for ib in range(10):\n        if a<=(ia + ib)<=b:\n            v = 10*ia + ib\n            if v<=n:\n                ##print('{}{}'.format(ia, ib))\n                sum += v \nprint(sum)\n    \n","\nn, a, b = map(int, input().split())\nans = 0\n\ndef calc_sum(i):\n    ret = 0\n    while i != 0:\n        ret += i % 10\n        i \/\/= 10\n    return ret\n\nfor i in range(1, n + 1):\n    sum = calc_sum(i)\n    if a <= sum and sum <= b:\n        ans += i\n\nprint(ans)\n","Last login: Mon Jun 24 15:45:40 on ttys001\n\nokazaki@shinji-2(16:27:24) ~\n% ls                                                                       [~]\n#.zshrc#        Downloads       Pictures        Untitled2.ipynb\nApplications    Library         Public          anaconda3\nDesktop         Movies          Untitled.ipynb  play\nDocuments       Music           Untitled1.ipynb\n\nokazaki@shinji-2(16:27:27) ~\n% mkdir prokon                                                             [~]\n\nokazaki@shinji-2(16:28:18) ~\n% cd prokon                                                                [~]\n\nokazaki@shinji-2(16:28:23) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:28:24) ~\/prokon\n% mkdir 20190624                                                      [prokon]\n\nokazaki@shinji-2(16:28:36) ~\/prokon\n% ls                                                                  [prokon]\n20190624\n\nokazaki@shinji-2(16:30:19) ~\/prokon\n% cd ..                                                               [prokon]\n\nokazaki@shinji-2(16:30:21) ~\n% ls                                                                       [~]\n#.zshrc#        Downloads       Pictures        Untitled2.ipynb\nApplications    Library         Public          anaconda3\nDesktop         Movies          Untitled.ipynb  play\nDocuments       Music           Untitled1.ipynb prokon\n\nokazaki@shinji-2(16:30:29) ~\n% cd prokon                                                                [~]\n\nokazaki@shinji-2(16:30:33) ~\/prokon\n% ls                                                                  [prokon]\n20190624\n\nokazaki@shinji-2(16:30:35) ~\/prokon\n% rmdir 20190624                                                      [prokon]\n\nokazaki@shinji-2(16:30:42) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:30:44) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:31:36) ~\/prokon\n% mkdir 083                                                           [prokon]\n\nokazaki@shinji-2(16:31:41) ~\/prokon\n% mkdir 088                                                           [prokon]\n\nokazaki@shinji-2(16:31:48) ~\/prokon\n% mkdir 085                                                           [prokon]\n\nokazaki@shinji-2(16:31:56) ~\/prokon\n% ls                                                                  [prokon]\n083 085 088\n\nokazaki@shinji-2(16:31:58) ~\/prokon\n% cd 083                                                              [prokon]\n\nokazaki@shinji-2(16:32:03) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:36:04) ~\/prokon\/083\n% b.py                                                                   [083]\nzsh: command not found: b.py\n\nokazaki@shinji-2(16:36:10) ~\/prokon\/083\n% python b.py                                                            [083]\nTraceback (most recent call last):\n  File \"b.py\", line 1, in <module>\n    N,A,B = map(char,input().split())\nNameError: name 'char' is not defined\n\nokazaki@shinji-2(16:36:19) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:38:03) ~\/prokon\/083\n% python b.py                                                            [083]\n\\  File \"b.py\", line 5\n    for i in 10x:\n               ^\nSyntaxError: invalid syntax\n\nokazaki@shinji-2(16:38:04) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:38:17) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n3 5\nTraceback (most recent call last):\n  File \"b.py\", line 5, in <module>\n    for i in 10:\nTypeError: 'int' object is not iterable\n\nokazaki@shinji-2(16:38:25) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:39:02) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n2\nTraceback (most recent call last):\n  File \"b.py\", line 2, in <module>\n    A,B = map(int,input().split())\nValueError: not enough values to unpack (expected 2, got 1)\n\nokazaki@shinji-2(16:39:06) ~\/prokon\/083\n% python b.py                                                            [083]\n10   \n3 4\n10\n3\n4\n\nokazaki@shinji-2(16:39:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:40:28) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n3 4\n1\n\nokazaki@shinji-2(16:40:35) ~\/prokon\/083\n% python b.py                                                            [083]\n28 \n3 5\n10\n\nokazaki@shinji-2(16:40:49) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:44:11) ~\/prokon\/083\n% python b.py                                                            [083]\n15\n3 4\n15\n\nokazaki@shinji-2(16:44:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:47:38) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:47:44) ~\/prokon\/083\n% python b.py                                                            [083]\n20\n2 5\n28\n\nokazaki@shinji-2(16:47:52) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:50:33) ~\/prokon\/083\n% python b.py                                                            [083]\n20\n2 5\n40\n\nokazaki@shinji-2(16:50:44) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n^Z\nzsh: suspended  python b.py\n\nokazaki@shinji-2(16:50:57) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:52:11) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n40\n\nokazaki@shinji-2(16:52:18) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:52:39) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5 \n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n190\n\nokazaki@shinji-2(16:52:45) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:53:17) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\nTraceback (most recent call last):\n  File \"b.py\", line 15, in <module>\n    keta = sum(list(map(int,str(n))))\nNameError: name 'n' is not defined\n\nokazaki@shinji-2(16:53:22) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:53:40) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n64\n\nokazaki@shinji-2(16:53:43) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:54:34) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n2\n84\n\nokazaki@shinji-2(16:54:38) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:55:45) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n2\n3\n4\n5\n2\n3\n4\n5\n2\n84\n\nokazaki@shinji-2(16:55:51) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:56:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nN,A,B = map(int,input().split())\n\ncount = 0\n\n'''                                                                            \ndef keta_sum(n):                                                               \n    sum = 0                                                                    \n    while n>0:                                                                 \n        sum += n%10 #\u5bfe\u8c61\u306e\u6841\u3092\u52a0\u7b97                                            \n        n = n\/\/10 # \u6b21\u306e\u6841\u3092\u307f\u308b                                               \n    return(sum)                                                                \n'''\n\nfor i in range(N):\n    keta = sum(list(map(int,str(i+1))))\n\n    if keta >= A and keta<= B:\n      #  print(keta)                                                           \n        count += (i+1)\n\nprint(count)","from sys import stdin\n\n\ndef find_sum_of_digits(n, base=10):\n    _sum = 0\n    while n>0:\n        _sum += n%base\n        n \/= base\n    return _sum\n\n\nif __name__ == \"__main__\":\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    N, A, B = list(map(int,_in[0].split(' ')))  # type:list(int)\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    cnt = 0\n    for n in range(N+1):\n        _sum = find_sum_of_digits(n)\n        if A <= _sum <= B:\n            cnt += n\n    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(cnt)\n","N,A,B = map(int,input().split())\nS = 0\nfor i in range(N + 1):\n    if i < 10:\n        W = i\n    elif i < 100:\n        W = int(str(i)[0]) + int(str(i)[1])\n    elif i < 1000:\n        W = int(str(i)[0]) + int(str(i)[1]) + int(str(i)[2])\n    elif W < 10000:\n        W = int(str(i)[0]) + int(str(i)[1]) + int(str(i)[2]) + int(str(i)[3])\n    else:\n        W = 1\n    \n    if A <= W <= B:\n        S += i\n\nprint(S)","from sys import stdin\nN, A, B = [int(x) for x in stdin.readline().rstrip().split()]\n#N, A, B = map(int, input().split())\nn_list = [0]\n#digit3_max = min(int(N \/ 100), 9)\ndigit_N = len(str(N))\n\ndef setDigit(N_max, sum_min, sum_max, digit):\n    n_max = int(N_max \/ (10 ** (digit - 1)))\n    for i in range(min(n_max, sum_max, 9) + 1):\n        if digit == 1 and i >= sum_min:\n            n_list.append(N - N_max + i)\n            #print(N_max, i)\n        elif digit == 1 and i < sum_min: continue\n        else:\n            #print(N_max - (i * 10 ** (digit - 1)), max(sum_min - i, 0), sum_max - i, digit - 1)\n            setDigit(N_max - (i * 10 ** (digit - 1)), max(sum_min - i, 0), sum_max - i, digit - 1)\n\n\nsetDigit(N, A, B, digit_N)\n'''\nfor digit3 in range(digit3_max + 1):\n    tmp1 = N - digit3 * 100\n    digit2_max = min(int(tmp1 \/ 10), 9)\n    for digit2 in range(digit2_max + 1):\n        tmp2 = tmp1 - digit2 * 10\n        digit1_max = min(tmp2, 9)\n        for digit1 in range(digit1_max + 1):\n            if (digit1 + digit2 + digit3) >= A and (digit1 + digit2 + digit3) <= B:\n                n_list.append(digit3 * 100 + digit2 * 10 + digit1)\n'''\n\nprint(sum(n_list))\n","n = list(map(int,input().split()))\nans = 0\ncount = 0\nfor i in range(n[0]+1):\n    j = i\n    ans = 0\n    while(i is not 0):\n        ans = ans + i%10\n        i = int(i\/10)\n    if ans >= n[1] and ans <= n[2]:\n        count = count +j\nprint(count)","N, A, B = int(input()), int(input()), int(input())\ndata = []\n\ndef digitsum(n):\n        s = str(n)\n        array = list(map(int, s))\n        return sum(array)\n\nn = 0\nfor n in range(N+1):\n        x = digitsum(n)\n        if A <= x <= B:\n                data.append(x)\n\nprint(sum(data))","N,A,B = map(int, input().split())\nans = 0\nfor num in range(1,N+1):\n    strnum = str(num)\n    count = 0\n    for s in strnum:\n        count += int(s)\n    if count >= A and count <= B:\n        ans += num\nprint(ans)","N, A, B = map(int, input().split())\nlist = []\n\nfor i in range(1, N+1):\n    num = i\n    num_sum = 0\n    while num > 0:\n        num_sum += num % 10\n        num = num \/\/ 10\n    if A <= num_sum and num_sum <= B:\n        list.append(i)\n\nprint(sum(list))","#\u5404\u6841\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\u3059\u308b\ndef digitSum(n):\n    s = str(n)\n    #\u4e00\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\n    array = list(map(int, s))\n    return sum(array)\n\nn,a,b=map(int,input().split())\nl=[]\n\nfor i in range(0,n+1):\n    if a<=digitSum(i) and digitSum(i)<=b:\n        l.append(i)\n\nprint(sum(l))\n","N, A, B = map(int, input().split())\nans = 0\nfor i in range(1, N+1):\n    i = str(i)\n    val = 0\n    for j in range(len(i)): val += int(i[j])\n    if A <= val <= B: ans += int(i)\nprint(ans)\n","n, a, b = map(int, input().split())\nprint(sum(x for x in range(1, n+1) if a <= sum(map(int, str(x))) <= b))","n,b,c = map(int,input().split())\ncount = 0\n\nfor i in range(1,n+1): #startnumber, endnumber\n  s = str(i)\n  numSum = 0\n  for si in range(len(s)):\n    numSum += int(s[si]) \n  \n  if numSum >= b and numSum <= c:\n    count += i\n\nprint(count)\n","def calculate_sum_of_digits(n):\n    result = 0\n    while n != 0:\n        result += n % 10\n\n        n \/\/= 10\n\n    return result\n\n\nn, a, b = map(int, input().split())\nresult = 0\nfor i in range(1, n + 1):\n    sum_of_digits = calculate_sum_of_digits(i)\n    if a <= sum_of_digits <= b:\n        result += i\n\nprint(result)\n","N, A, B = map(int, input().split())\n\nans = 0\n\n\ndef somesum(x):\n    total = 0\n    while x > 0:\n        total += x % 10\n        x = x \/\/ 10\n    return total\n\n\nfor i in range(N + 1):\n    total = somesum(i)\n    if total >= A and total <= B:\n        ans += i\n\nprint(ans)\n","#abc083 b-some sums\nn,a,b=map(int,input().split())\nnum=[str(x) for x in range(1,n+1)]\nans=0\nfor x in num:\n    s=0\n    for y in range(len(x)):\n        s+=int(x[y])\n    if s>=a and s<=b:\n        ans+=s\nprint(ans)","n, a, b = map(int, input().split())\n\nans = 0\nfor i in range(n+1):\n\ts = str(i)\n\tsum = 0\n\tfor c in s:\n\t\tsum += int(c)\n\tif a <= sum and sum <= b:\n\t\tans += i\nprint(ans)","n, a, b = map(int, input().split())\nsum = 0\nfor i in range(n+1):\n    i_str = list(str(i))\n    # print(i_str)\n    num_sum = 0\n    for num_str in i_str:\n        num_sum += int(num_str)\n    if num_sum >= a and num_sum <= b:\n        sum += i\nprint(sum)","N, A, B = map(int, input().split())\ncnt = 0\nfor i in range(1, N+1):\n    sum = 0\n    num = i\n    while num > 0:\n        sum += num % 10\n        num \/\/= 10\n    if A <= sum <= B:\n        cnt += i\nprint(cnt)\n","N, A, B = map(int, input().split())\nSUM = 0\nfor i in range(1, N+1):\n    j = i\n    s = 0\n    while True:\n        if j == 0:\n            break\n        s += j%10\n        j = j\/\/10\n    if A <= s <= B:\n        SUM += i\nprint(SUM)","n,a,b=map(int,input().split())\nnum = 0\nall = 0\n\ndef sum(x):\n  total = 0\n  while x>0:\n    num = x%10\n    total +=num\n    num=0\n    x = int(x\/10)\n  \n  return total\n    \nfor i in range(1,n+1):\n  if sum(i)>=a and sum(i)<=b:\n    all +=i\n  \nprint(all)\n","n,a,b = (int(i) for i in input().split())\ncount = 0\n\nfor i in range(1,n+1):\n    si = str(i)\n    if len(si) == 1:\n        s = int(si[0])\n    elif len(si) == 2:\n        s = int(si[0])+int(si[1])\n    elif len(si) == 3:\n        s = int(si[0])+int(si[1])+int(si[2])\n    else:\n        s = int(si[0])+int(si[1])+int(si[2])+int(si[3])\n\n    if a <= s and s <= b:\n        count += i\nprint(count)\n","N, A, B = map(int, input().split())\nans = 0\nfor i in range(N+1):\n    sum = i%10 + i\/\/10%10 + i\/\/100%10 + i\/\/1000%10\n    if A <= sum <= B:\n        ans += i\nprint(ans)\n","n,a,b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n    l = sum(list(map(int, list(str(i)))))\n    if a <= l <= b:\n        ans += i\nprint(ans)","N,A,B=map(int,input().split())\nprint(sum([i for i in range(1,N+1) if sum([int(j) for j in str(i)])>=A and sum([int(j) for j in str(i)])<=B]))","N,A,B = map(int,input().split())\nt = 0\nfor i in range(N+1):\n    if A <= sum([int(x) for x in str(i)]) <= B:\n        t += i\nprint(t)","n,a,b=map(int,input().split())\nx=[]\ny=[]\nfor i in range(1,n+1):\n  x.append(i)\nfor j in range(n):\n  s=sum(list(map(int,str(x[j]))))\n  if s>=a and s<=b:\n    y.append(x[j])\nprint(sum(y))\n","n,a,b=map(int, input().split())\nsu=0\nfor i in range(n+1):\n  keta=sum(list(map(int, str(i))))\n  if a<=keta<=b:\n    su+=i\n\n    \nprint(su)","N, A, B = map(int, input().split())\nsum = 0\n \nfor n in range(N+1):\n  N1 = int(n\/10000)\n  N2 = int((n-10000*N1)\/1000)\n  N3 = int((n-10000*N1-1000*N2)\/100)\n  N4 = int((n-10000*N1-1000*N2-100*N3)\/10)\n  N5 = n-10000*N1-1000*N2-100*N3-10*N4\n  if A <= N1+N2+N3+N4+N5 <= B:\n    sum = sum + n\n \n \nprint(sum)","#!\/usr\/bin\/env python3\nn, a, b = map(int, input().split())\nans = 0\n\nfor i in range(1, n + 1):\n    arr = [int(c) for c in str(i)]\n    sumarr = sum(arr)\n    if sumarr >= a and sumarr <= b:\n        ans += i\n\nprint(ans)\n","n, a, b = map(int, input().split())\ntotal = 0\nfor i in range(1, n+1):\n    if a<= sum(map(int, list(str(i)))) <= b:\n        total += i\n \nprint(total)","n,a,b = map(int,input().split())\nans = 0\nfor i in range(n):\n  if a<=sum(map(int,list(str(i))))<=b:\n    ans += i\nprint(ans)","N, A, B = map(int, input().split())\nans = 0\nfor n in range(1, N+1):\n  tmp = n\n  i = 4\n  s = 0\n  while i > -1:\n    keta = tmp \/\/ (10 ** i)\n    tmp -=  keta * (10 ** i)\n    s += keta\n    i -= 1\n  if s >= A and s <= B:\n    ans += n\nprint(ans)\n\n","def find_sum_of_digits(n):\n    sum_of_digits = 0\n    while n>0:\n        sum_of_digits = sum_of_digits + n % 10\n        n = int(n \/ 10)\n    return sum_of_digits\n\n\nn, a, b = [int(e) for e in input().split()]\nans = 0\nfor i in range(n+1):\n    sum_of_digits = find_sum_of_digits(i)\n    if a <= sum_of_digits and sum_of_digits <= b:\n        ans = ans + i\nprint(ans)","while True:\n    s = 0\n    a = input().split()\n    X = [int(i) for i in a]\n    N,A,B = str(X[0]), X[1], X[2]\n    if (int(N) < 1 or int(N) >10001) or (A > B or B > 36 or A < 1):\n        continue\n    for i in range(1,int(N)+1):\n        a = 0\n        l = []\n        l = list(map(int,list(str(i))))\n        for j in l:\n            a = a + j\n        if a >= A and a <= B:\n            s = s + i\n    print(s)\n    break","s = input().split()\nn = int(s[0])\na = int(s[1])\nb = int(s[2])\n\nsums = []\n\nfor i in range(1, n + 1):\n    x = i\n    check = 0\n    while (x > 0):\n        y = x % 10\n        x = int(x \/ 10)\n        check += y\n    if a <= check <= b:\n        sums.append(i)\n\nanswer = 0\nfor i in range(len(sums)):\n    answer += sums[i]\n\nprint(answer)","n, a, b = map(int, input().split())\n\nans = 0\nfor i in range(1, n + 1):\n    temp = 0\n    hoge = i\n    while hoge > 0:\n        temp += hoge % 10\n        hoge \/\/= 10\n    if a <= temp <= b:\n        ans += 1\n\nprint(ans)\n","n, a, b = map(int, input().split())\narr = []\nfor i in range(n):\n  i = str(i + 1)\n  k = 0\n  for e in range(len(i)):\n    k += int(i[e])\n  if a <= k and k <= b:\n    arr.append(int(i))\nprint(sum(arr))","n,a,b=map(int,input().split())\nresult=0\nfor i in range(1,n+1):\n    if a <= sum(list(map(int,list(str(i))))) <= b:\n        result += i\nprint(result)","N,A,B = map(int,input().split())\ncount = 0\nfor i in range(N+1):\n    if A <= sum(map(int, str(i))) <= B :\n        count += i\nprint(count)","n,a,b = [int(i) for i in input().split()]\n\nsum2 = 0\n\nfor x in range(n+1):\n    sum1 = 0\n    x2 = x\n    while x > 0:\n        sum1 += x % 10\n        x = int(x\/10)\n\n    if sum1 >= a and sum1 <= b:\n        sum2 += x2\nprint(sum2)","def summ(n):\n    n_s = str(n)\n    tmp = 0\n    for i in n_s:\n        tmp += int(i)\n    return tmp\n\nN,A,B = map(int, input().split())\n\nans = 0\nfor i in range(N+1):\n    if A <= summ(i) <= B:\n        ans += i\nprint(ans)\n","import sys\nstin = sys.stdin.readline\nN,A,B=list(map(int,stin().split()))\nprint(sum(i for i in range(N) if A <= sum(map(int,str(i))) <= B))","from functools import reduce\n\nn,a,b = map(lambda x:int(x),input().split(\" \"))\n\nans = 0\nfor ni in range(a,n+1):\n    add_each_dig = int(reduce(lambda x, y: int(x) + int(y), str(ni) ))\n    if a <= add_each_dig and add_each_dig <= b:\n        ans += ni\n\nprint(ans)","n,a,b=map(int,input().split())\nN=list(range(1,n+1))\nans=0\nfor num in N:\n  S=sum(list(map(int, str(num))))\n  if a<=S<=b:\n    ans+=num\nprint(ans)","N, A, B = map(int, input().split())\nans = 0\n\n\ndef sumDigits(n):\n    sum = 0\n    while n != 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\n\nfor i in range(N+1):\n    x = sumDigits(i)\n    if A <= x <= B:\n        ans += i\n\nprint(ans)","INPUT=input()\nIN=INPUT.split(\" \")\n#N=int(IN[0])\nnumber=int(IN[0])\n#N\nA=int(IN[1])\nB=int(IN[2])\n\nGOUKEI=0\nkazu=0\n\nwhile kazu<=number:\n    X=list(map(int,list(str(kazu))))\n    #X = list(map(int, n))\n   \n    #print(X)\n    if A<=sum(X)<=B:\n        GOUKEI+=kazu\n        #print(\"add\",kazu)\n    kazu+=1\nprint(GOUKEI)\n","n,a,b=map(int,input().split())\nan=0\n \nfor i in range(n+1):\n    c=0\n    for j in range(len(str(i))):\n        c += int(str(i)[j])\n    \n    if a <= c and c <= b:\n        an+=i\n \nprint(an)","n,a,b = map(int,input().split())\ndef ketawa(i):\n  ret = 0\n  while(i):\n    ret += i % 10\n    i \/\/= 10\n  return ret\n\nret = 0\nfor i in range(1,n+1):\n  if a <= ketawa(i) <= b: ret += i\nprint(ret)\n"],"formatted_programs":["a = list(int(i) for i in input().split()) \nct = 0\nfor i in range (0,a[0]):\n c = int(0)\n d = int(i+1)\n for j in range(0,5):\n  c += d%10\n  d  = d\/\/10\n if a[1]<=c and c <=a[2]:\n  ct += i+1\nprint(ct)","n,a,b = [int(x) for x in input().split()]\n\nans = 0\nfor x in range(n+1):\n    amount = sum([int(i) for i in list(str(x))])\n    if amount >= a and amount <= b:\n        ans += x\n\nprint(ans)\n","N, A, B = map(int,input().split())\ncount = 0\nfor i in range(1, N+1):\n    x = sum([int(c) for c in str(i)])\n    if A <= x and x <= B:\n        count += i\n\nprint(count)","n, a, b = map(int, input().split())\nanswer = 0\nfor i in range(n + 1):\n  if a<= sum(list(map(int, list(str(i))))) <= b:\n    answer += i\nprint(answer)","n,a,b = list(map(int, input().split()))\ns = 0\nfor i in range(1, n+1):\n    ns = sum(list(map(int, str(i))))\n    if ns >= a and ns <= b:\n        s += i\nprint(s)","n, a, b = map(int, input().split())\n\nnum_lists = list(range(1, n+1, 1))\nsum_lists = []\nfor i in num_lists:\n  count = 0\n  j = i\n  while j >0:\n    ans = j%10\n    count += ans\n    j = j\/\/10\n  if a <= count and count <= b:\n    sum_lists.append(i)\n\nanswer = 0\nfor i in sum_lists:\n  answer += i\n\nprint(answer)","n,a,b=map(int,input().split())\n\nprint(sum(i for i in range(n+1) if a<=sum(map(int,str(i)))<=b))","n, a, b = list(map(int, input().split()))\nans = 0\n\nfor i in range(1,n+1):\n    m = str(i)\n    x = len(m)\n    cnt = 0\n    for j in range(x):\n        cnt = cnt + int(m[j])\n    if a <= cnt <= b:\n        ans = ans + i\n    else:\n        continue\nprint(ans)","N, A, B = map(int input().split())\nres = 0\n \nfor i in range(N+1):\n  if A <= sum([int(n) for n in str(i)]) <= B:\n    res += 1\n \nprint(res)","N,A,B=map(int,input().split())\nC=0\nfor i in range(N+1):\n  T=0\n  for ii in str(i):\n    T=T+int(ii)\n  if T>=A and B>=T:\n    C=C+i\nprint(C)","import sys\n\ndef main():\n    N, A, B = map(int, input().split())\n    print(counter(N, A, B))\n\ndef counter(N, A, B):\n    total = 0\n    for n in range(1, N+1):\n        sum = 0\n        nn = n\n        while n!=0:\n            sum += n % 10\n            n = n \/\/ 10\n        if A <= sum <= B: total += nn\n    return total\n\nif __name__ == '__main__':\n    main()\n","N, A, B = map(int, input().split())\nans = 0\n\ndef FindSumOfDigits(x):\n    count = 0\n    while x>0:\n        count += x%10\n        x = x\/\/10\n\n    return count\n\nfor n in range(1, N+1):\n    count = FindSumOfDigits(n)\n    if A<= count <=B:\n        ans += n\n\nprint(ans) ","N,A,B = map(int,input().split(' '))\nnum = 0\nfor i in range(N+1):\n  x = list(str(i))\n  y = map(int,x)\n  if A <= sum(y) <= B:\n    num += i\nprint(num)\n    ","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n    if a <= sum(list(map(int, list(str(i))))) <= b:\n        ans += i\nprint(ans)","N, A, B = list(map(int, input().split()))\n\nresult = 0\n\nfor i in range(1,N+1):\n    x = i\n    y = 1000\n    sum = 0\n    while y > 0:\n        sum += int(x\/y)\n        x = int(x%y)\n        y = int(y\/10)\n    if sum >= A and sum <= B:\n        result += i\n\nprint(result)","N,A,B=map(int,input().split())\n\nS=[]\nfor i in range(1,N+1):\n    tmp=list(map(int,str(i)))\n    S.append(sum(tmp))\n\nAns=0\nfor i in S:\n    if i >= A and i<=B:\n        Ans+=i\nprint(Ans)","N, a, b = map(int, input().split())\n\ndef findSumOfDigits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\ncount = 0\n\nfor i in range(1, N + 1):\n    sum = findSumOfDigits(i)\n    if sum <= b and a <= sum:\n        count += i\n\nprint(count)","type1 =[]\nN,A,B = map(int,input().split())\nfor i in range(20):\n  if i >= A and i <= B:\n    type1.append(i)\n    \nprint(sum(type1))","n,a,b=map(int,input().split())\nprint(sum(i for i in range(n+1) if a<=sum(map(int,str(i)))<=b))","import numpy as np\nN, A, B = map(int, input().split())\n\ntotal = 0\nfor i in range(N+1):\n  a = i\n  lis =[]\n  while i >0:\n    lis.append(i%10)\n    i \/\/=10\n  lis.reverse()\n  lis = np.array(lis)\n  SUM = np.sum(lis)\n\n  if SUM >=A and SUM <=B:\n    total += a","n,a,b=map(int,input().split())\nsum=0\nfor i in range(n):\n     x10 = i \/\/ 10\n     x1 = i - x10\n     if 2 <= x10 + x1 and x10 + x1 <=5:\n         sum +=x10+x1\nprint(sum)","# -*- coding: utf-8 -*-\n\ndef calcsum(i):\n\tsum = 0\n\twhile (i>0):\n\t\tsum += i%10\n\t\ti -= i%10\n\t\ti = i\/10\n\t#print(sum)\n\treturn sum\n\ntmparr = input().split()\n\nn = int(tmparr[0])\na = int(tmparr[1])\nb = int(tmparr[2])\nsum = 0\n\n#print(\"n:{}\".format(n))\n#print(\"a:{}\".format(a))\n#print(\"b:{}\".format(b))\n\nfor i in range(n+1):\n\ttmp = calcsum(i)\n\tif(tmp >= a):\n\t\tif(tmp <= b):\n\t\t\tsum += i\nprint(sum)\n\n","n,a,b = map(int,input().split())\nsum1 = 0\nfor i in range(1,n+1):\n  if a<= i\/\/10 + (i - i\/\/10) <=b:\n    sum1 += i\/\/10 + (i - i\/\/10)\nprint(sum1)"," #ABC83, B - some sums\n\nn, a, b = [int(el) for el in input().split(' ')]\n\ntotal = 0\nfor i in range(1, n+1):\n    some_sum = sum(divmod(i, 10))\n    if a <= some_sum <= b:\n        total += i\nprint(total)\n","N, A, B = list(map(int, input().split()))\nans = 0\nfor i in range(1,N+1):\n    if A <= sum([int(x) for x in str(i)]) <= B:\n        ans += i\nprint(ans)","n, a, b = map(int, input().split())\nsum = 0\nfor i in range(1, n + 1):\n    a1 = n \/\/ 10000\n    a2 = n \/\/ 1000\n    a3 = n \/\/ 100\n    a4 = n \/\/ 10\n    k = a1 + (a2 - a1*10) + (a3 - a2*10) + (a4 - a3*10)\n    if (k >= a) and (k <= b):\n        sum += k\nprint(sum)\n","n, a, b = map(int, input().split())\nn = list(str(n))\n\ncount = 0\nfor j in range(n):\n    l = [n[i] for i in range(len(j))]\n    sum = sum(l)\n    if a <= sum and sum <= b:\n        count += 1\nprint(count)\n","import math\nfrom collections import deque\nfrom collections import defaultdict\n\n#\u81ea\u4f5c\u95a2\u6570\u7fa4\ndef readInt():\n\treturn int(input())\ndef readInts():\n\treturn list(map(int, input().split()))\ndef readChar():\n\treturn input()\ndef readChars():\n\treturn input().split()\ndef factorization(n):\n\tres = []\n\tif n%2==0:\n\t\tres.append(2)\n\tfor i in range(3,math.floor(n\/\/2)+1,2):\n\t\tif n%i==0:\n\t\t\tc = 0\n\t\t\tfor j in res:\n\t\t\t\tif i%j==0:\n\t\t\t\t\tc=1\n\t\t\tif c==0:\n\t\t\t\tres.append(i)\n\treturn res\ndef fact2(n):\n\tp = factorization(n)\n\tres = []\n\tfor i in p:\n\t\tc=0\n\t\tz=n\n\t\twhile 1:\n\t\t\tif z%i==0:\n\t\t\t\tc+=1\n\t\t\t\tz\/=i\n\t\t\telse:\n\t\t\t\tbreak\n\t\tres.append([i,c])\n\treturn res\ndef fact(n):#\u968e\u4e57\n\tans = 1\n\tm=n\n\tfor _i in range(n-1):\n\t\tans*=m\n\t\tm-=1\n\treturn ans\ndef comb(n,r):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\n\tif n<r:\n\t\treturn 0\n\tl = min(r,n-r)\n\tm=n\n\tu=1\n\tfor _i in range(l):\n\t\tu*=m\n\t\tm-=1\n\treturn u\/\/fact(l)\ndef combmod(n,r,mod):\n\treturn (fact(n)\/fact(n-r)*pow(fact(r),mod-2,mod))%mod\ndef printQueue(q):\n\tr=copyQueue(q)\n\tans=[0]*r.qsize()\n\tfor i in range(r.qsize()-1,-1,-1):\n\t\tans[i] = r.get()\n\tprint(ans)\nclass UnionFind():\n\tdef __init__(self, n):\n\t\tself.n = n\n\t\tself.parents = [-1]*n\n\n\tdef find(self, x): # root\n\t\tif self.parents[x]<0:\n\t\t\treturn x\n\t\telse:\n\t\t\tself.parents[x] = self.find(self.parents[x])\n\t\t\treturn self.parents[x]\n\n\tdef union(self,x,y):\n\t\tx = self.find(x)\n\t\ty = self.find(y)\n\n\t\tif x==y:\n\t\t\treturn\n\n\t\tif self.parents[x]>self.parents[y]:\n\t\t\tx,y = y,x\n\n\t\tself.parents[x]+=self.parents[y]\n\t\tself.parents[y]=x\n\n\tdef size(self,x):\n\t\treturn -1*self.parents[self.find(x)]\n\n\tdef same(self,x,y):\n\t\treturn self.find(x)==self.find(y)\n\n\tdef members(self,x): # much time\n\t\troot = self.find(x)\n\t\treturn [i for i in range(self.n) if self.find(i)==root]\n\n\tdef roots(self):\n\t\treturn [i for i,x in enumerate(self.parents) if x<0]\n\n\tdef group_count(self):\n\t\treturn len(self.roots())\n\n\tdef all_group_members(self):\n\t\treturn {r: self.members(r) for r in self.roots()} # 1~n\ndef bitArr(n):#\u30d3\u30c3\u30c8\u5168\u63a2\u7d22\n\tx = 1\n\tzero = \"0\"*n\n\tans = []\n\tans.append([0]*n)\n\tfor i in range(2**n-1):\n\t\tans.append(list(map(lambda x:int(x),list((zero+bin(x)[2:])[-1*n:]))))\n\t\tx+=1\n\treturn ans;\ndef arrsSum(a1,a2):\n\tfor i in range(len(a1)):\n\t\ta1[i]+=a2[i]\n\treturn a1\ndef maxValue(a,b,v):\n\tv2 = v\n\tfor i in range(v2,-1,-1):\n\t\tfor j in range(v2\/\/a+1): #j:a\u306e\u500b\u6570\n\t\t\tk = i-a*j\n\t\t\tif k%b==0:\n\t\t\t\treturn i\n\treturn -1\ndef copyQueue(q):\n\tnq = queue.Queue()\n\tn = q.qsize()\n\tfor i in range(n):\n\t\tx = q.get()\n\t\tq.put(x)\n\t\tnq.put(x)\n\treturn nq\ndef get_sieve_of_eratosthenes(n):\n\t#data = [2]\n\tdata = [0,0,0]\n\tfor i in range(3,n+1,2):\n\t\tdata.append(i)\n\t\tdata.append(0)\n\tfor i in range(len(data)):\n\t\tinterval = data[i]\n\t\tif interval!=0:\n\t\t\tfor j in range(i+interval,n-1,interval):\n\t\t\t\tdata[j] = 0\n\t#ans = [x for x in data if x!=0]\n\tans = data[:]\n\treturn ans\n\nn,a,b = readInts()\n\nans = 0\n\nfor i in range(n+1):\n\tx=sum(list(map(lambda x:int(x), list(str(i)))))\n\tif x>=a and x<=b:\n\t\t#print(i)\n\t\tans+=i\n\nprint(ans)","n, a, b = map(int, input().split())\n\ntotal = 0\n\nfor i in range(1, n + 1):\n\n    p = i \/\/ 10000 + (i % 10000) \/\/ 1000 + (i % 1000) \/\/ 100 + (i % 100) \/\/ 10 + (i % 10)\n\n    if a <= p <= b:\n        total += i\n\nprint(total)\n","N,A,B = map(int,input().split())\nans =0\nfor i in range(1,N+1):\n    sumnum= sum([int(j) for j in str(i)])\n    if sumnum>=A and sumnum<=B:\n        ans+=i\nprint(ans)","n, a, b = map(int, input().split())\nresult = 0\nfor i in range(n + 1):\n  if a <= sum(map(int, list(str(i)))) <= b:\n    result += i\nprint(result)","n, a, b = map(int, input().split())\nprint(sum([x for x in range(1, n + 1) if a <= sum([int(c) for c in str(x)]) <= b]))","n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    x = sum(map(int,str(i)))\n    if a <= x <= b:\n        ans += i\nprint(ans)","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n  if a<= sum(list(map(int, list(str(i))))) <= b:\n    ans += i\nprint(ans)","# ABC083B - Some Sums\n\nn, a, b = list(map(int, input().split()))\nanswer = 0\n\nfor i in range(1, n + 1):\n    total = sum(list(map(int, list(str(i)))))\n    if a <= total <= b:\n        answer += total\n    \nprint(answer)","n, a, b = map(int, input().split())\nans = 0\nfor i in range(n):\n    if a <= sum(list(map(int, list(str(i))))) <= b:\n    ans += 1\nprint(ans)","s=[[int(j) for j in input().split()] for i in range(1)]\nn=s[0][0]\na=s[0][1]\nb=s[0][2]\nans=0\nfor i in range(1,n+1,1):\n    n1=i \/\/ 1000\n    n2=(i-n1*1000) \/\/ 100\n    n3=(i-n1*1000-n2*100) \/\/ 10\n    n4=i-n1*1000-n2*100-n3*10\n    sum=n1+n2+n3+n4\n    if sum>=a and sum<=b:\n        ans+=n1*1000+n2*100+n3*10+n4\nprint(ans)","N, A, B = map(int, input().split())\nprint(sum(i for i in range(1, N + 1) if A <= sum(list(map(int, str(i)))) & sum(list(map(int, str(i)))) <= B))","n,a,b = (int(x) for x input().split())\nans = 0\n\ndef k(N):\n    sum = 0\n    while N>0:\n        sum += N%10\n        N = N\/\/10\n    return sum\n\nfor i in range(1,n+1):\n    if a<=k(i)<=b:\n        ans +=i\nprint(ans)\n","N, A, B = map(int, input().split())\nans = 0\nfor n in range(1, N+1):\n  s = sum(map(int, list(str(n))))\n  if s >= A and s <= B:\n    ans += n\nprint(ans)\n\n","N,A,B=map(int,input().split())\nans=0\nfor i in range(N+1):\n    tmp=0\n    n=i\n    for j in range(len(str(i))):\n        tmp+=n%10\n        n\/\/=10\n    if A<=tmp<=B:\n        ans+=i\nprint(ans)\n","n, a, b = map(int,input().split())\ncount = 0\nfor i in range(1,n+1):\n    num = i\n    digit = 0\n    while num > 0:\n        digit += num % 10\n        num = num \/\/ 10\n    if a <= digit <= b:\n        count += i\nprint(count)","n,a,b = map(int,input().split())\nans = 0\nfor i in range(1,n+1):\n    su = 0\n    x = i\n    while x != 0:\n        su += x % 10\n        x = x\/\/10\n    if a <= su <= b:\n        ans += i\nprint(ans)","n, a, b =map(int, input().split())\nsum = 0\nfor i in range(1, n+1):\n    s = 0\n    num = i\n    while num > 0:\n        s += num % 10\n        num \/\/= 10\n    if a <= s <= b:\n        sum += i\nprint(sum)","n,a,b = map(int, input().split())\nsum = 0\nfor i in range(10):\n  for j in range(10):\n    for k in range(10):\n      for l in range(10):\n   \t    if 1000*i + 100*j + 10*k + l <= n and a<i+j and i+j<b :\n   \t\t   sum += 1000*i + 100*j + 10*k + l\nprint(sum)","def sums(n):\n    s=sum(map(int,str(n)))\n    return s\n\nans=0\nN,a,b=map(int,input().split())\nfor i in range(1,N+1):\n    if a<=sums(i) and sums(i)<=b:\n        ans+=i\nprint(ans)\n","n, a, b = map(int, input().split())\nprint(sum(i for i in range(1, n+1) if a <= sum(map(int, list(str(i)))) <= b))","n,a,b = map(int, input().split())\n\nans = 0\nfor i in range(1, n+1):\n    l = list(str(i))\n    total = sum([int(i) for i in l])\n    if a <= total <= b:\n        tmp = int(\"\".join(l))\n        ans += tmp\nprint(ans)","(lambda N,A,B:print(sum([int(i) for i in range(1,N+1) if A<=sum(map(int,list(str(i))))<= B])))(**dict(zip([\"N\",\"A\",\"B\"],[int(i) for i in input().split()])))","N, A, B = map(int, input().split())\nprint(sum(i for i in range(1, N+1) if A <= sum(map(int, str(i))) <= B))","n, a, b = map(int, input().split())\nsum = 0\nfor ia in range(10):\n    for ib in range(10):\n        if a<=(ia + ib)<=b:\n            v = 10*ia + ib\n            if v<=n:\n                ##print('{}{}'.format(ia, ib))\n                sum += v \nprint(sum)\n    \n","\nn, a, b = map(int, input().split())\nans = 0\n\ndef calc_sum(i):\n    ret = 0\n    while i != 0:\n        ret += i % 10\n        i \/\/= 10\n    return ret\n\nfor i in range(1, n + 1):\n    sum = calc_sum(i)\n    if a <= sum and sum <= b:\n        ans += i\n\nprint(ans)\n","Last login: Mon Jun 24 15:45:40 on ttys001\n\nokazaki@shinji-2(16:27:24) ~\n% ls                                                                       [~]\n#.zshrc#        Downloads       Pictures        Untitled2.ipynb\nApplications    Library         Public          anaconda3\nDesktop         Movies          Untitled.ipynb  play\nDocuments       Music           Untitled1.ipynb\n\nokazaki@shinji-2(16:27:27) ~\n% mkdir prokon                                                             [~]\n\nokazaki@shinji-2(16:28:18) ~\n% cd prokon                                                                [~]\n\nokazaki@shinji-2(16:28:23) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:28:24) ~\/prokon\n% mkdir 20190624                                                      [prokon]\n\nokazaki@shinji-2(16:28:36) ~\/prokon\n% ls                                                                  [prokon]\n20190624\n\nokazaki@shinji-2(16:30:19) ~\/prokon\n% cd ..                                                               [prokon]\n\nokazaki@shinji-2(16:30:21) ~\n% ls                                                                       [~]\n#.zshrc#        Downloads       Pictures        Untitled2.ipynb\nApplications    Library         Public          anaconda3\nDesktop         Movies          Untitled.ipynb  play\nDocuments       Music           Untitled1.ipynb prokon\n\nokazaki@shinji-2(16:30:29) ~\n% cd prokon                                                                [~]\n\nokazaki@shinji-2(16:30:33) ~\/prokon\n% ls                                                                  [prokon]\n20190624\n\nokazaki@shinji-2(16:30:35) ~\/prokon\n% rmdir 20190624                                                      [prokon]\n\nokazaki@shinji-2(16:30:42) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:30:44) ~\/prokon\n% ls                                                                  [prokon]\n\nokazaki@shinji-2(16:31:36) ~\/prokon\n% mkdir 083                                                           [prokon]\n\nokazaki@shinji-2(16:31:41) ~\/prokon\n% mkdir 088                                                           [prokon]\n\nokazaki@shinji-2(16:31:48) ~\/prokon\n% mkdir 085                                                           [prokon]\n\nokazaki@shinji-2(16:31:56) ~\/prokon\n% ls                                                                  [prokon]\n083 085 088\n\nokazaki@shinji-2(16:31:58) ~\/prokon\n% cd 083                                                              [prokon]\n\nokazaki@shinji-2(16:32:03) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:36:04) ~\/prokon\/083\n% b.py                                                                   [083]\nzsh: command not found: b.py\n\nokazaki@shinji-2(16:36:10) ~\/prokon\/083\n% python b.py                                                            [083]\nTraceback (most recent call last):\n  File \"b.py\", line 1, in <module>\n    N,A,B = map(char,input().split())\nNameError: name 'char' is not defined\n\nokazaki@shinji-2(16:36:19) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:38:03) ~\/prokon\/083\n% python b.py                                                            [083]\n\\  File \"b.py\", line 5\n    for i in 10x:\n               ^\nSyntaxError: invalid syntax\n\nokazaki@shinji-2(16:38:04) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:38:17) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n3 5\nTraceback (most recent call last):\n  File \"b.py\", line 5, in <module>\n    for i in 10:\nTypeError: 'int' object is not iterable\n\nokazaki@shinji-2(16:38:25) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:39:02) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n2\nTraceback (most recent call last):\n  File \"b.py\", line 2, in <module>\n    A,B = map(int,input().split())\nValueError: not enough values to unpack (expected 2, got 1)\n\nokazaki@shinji-2(16:39:06) ~\/prokon\/083\n% python b.py                                                            [083]\n10   \n3 4\n10\n3\n4\n\nokazaki@shinji-2(16:39:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:40:28) ~\/prokon\/083\n% python b.py                                                            [083]\n10\n3 4\n1\n\nokazaki@shinji-2(16:40:35) ~\/prokon\/083\n% python b.py                                                            [083]\n28 \n3 5\n10\n\nokazaki@shinji-2(16:40:49) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:44:11) ~\/prokon\/083\n% python b.py                                                            [083]\n15\n3 4\n15\n\nokazaki@shinji-2(16:44:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:47:38) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:47:44) ~\/prokon\/083\n% python b.py                                                            [083]\n20\n2 5\n28\n\nokazaki@shinji-2(16:47:52) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:50:33) ~\/prokon\/083\n% python b.py                                                            [083]\n20\n2 5\n40\n\nokazaki@shinji-2(16:50:44) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n^Z\nzsh: suspended  python b.py\n\nokazaki@shinji-2(16:50:57) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:52:11) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n40\n\nokazaki@shinji-2(16:52:18) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:52:39) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5 \n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n190\n\nokazaki@shinji-2(16:52:45) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:53:17) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\nTraceback (most recent call last):\n  File \"b.py\", line 15, in <module>\n    keta = sum(list(map(int,str(n))))\nNameError: name 'n' is not defined\n\nokazaki@shinji-2(16:53:22) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:53:40) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n64\n\nokazaki@shinji-2(16:53:43) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:54:34) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n1\n2\n3\n4\n5\n6\n7\n8\n9\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n2\n84\n\nokazaki@shinji-2(16:54:38) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:55:45) ~\/prokon\/083\n% python b.py                                                            [083]\n20 2 5\n2\n3\n4\n5\n2\n3\n4\n5\n2\n84\n\nokazaki@shinji-2(16:55:51) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nokazaki@shinji-2(16:56:17) ~\/prokon\/083\n% emacs b.py                                                             [083]\n\nN,A,B = map(int,input().split())\n\ncount = 0\n\n'''                                                                            \ndef keta_sum(n):                                                               \n    sum = 0                                                                    \n    while n>0:                                                                 \n        sum += n%10 #\u5bfe\u8c61\u306e\u6841\u3092\u52a0\u7b97                                            \n        n = n\/\/10 # \u6b21\u306e\u6841\u3092\u307f\u308b                                               \n    return(sum)                                                                \n'''\n\nfor i in range(N):\n    keta = sum(list(map(int,str(i+1))))\n\n    if keta >= A and keta<= B:\n      #  print(keta)                                                           \n        count += (i+1)\n\nprint(count)","from sys import stdin\n\n\ndef find_sum_of_digits(n, base=10):\n    _sum = 0\n    while n>0:\n        _sum += n%base\n        n \/= base\n    return _sum\n\n\nif __name__ == \"__main__\":\n    _in = [_.rstrip() for _ in stdin.readlines()]\n    N, A, B = list(map(int,_in[0].split(' ')))  # type:list(int)\n    # vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n    cnt = 0\n    for n in range(N+1):\n        _sum = find_sum_of_digits(n)\n        if A <= _sum <= B:\n            cnt += n\n    ## ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    print(cnt)\n","N,A,B = map(int,input().split())\nS = 0\nfor i in range(N + 1):\n    if i < 10:\n        W = i\n    elif i < 100:\n        W = int(str(i)[0]) + int(str(i)[1])\n    elif i < 1000:\n        W = int(str(i)[0]) + int(str(i)[1]) + int(str(i)[2])\n    elif W < 10000:\n        W = int(str(i)[0]) + int(str(i)[1]) + int(str(i)[2]) + int(str(i)[3])\n    else:\n        W = 1\n    \n    if A <= W <= B:\n        S += i\n\nprint(S)","from sys import stdin\nN, A, B = [int(x) for x in stdin.readline().rstrip().split()]\n#N, A, B = map(int, input().split())\nn_list = [0]\n#digit3_max = min(int(N \/ 100), 9)\ndigit_N = len(str(N))\n\ndef setDigit(N_max, sum_min, sum_max, digit):\n    n_max = int(N_max \/ (10 ** (digit - 1)))\n    for i in range(min(n_max, sum_max, 9) + 1):\n        if digit == 1 and i >= sum_min:\n            n_list.append(N - N_max + i)\n            #print(N_max, i)\n        elif digit == 1 and i < sum_min: continue\n        else:\n            #print(N_max - (i * 10 ** (digit - 1)), max(sum_min - i, 0), sum_max - i, digit - 1)\n            setDigit(N_max - (i * 10 ** (digit - 1)), max(sum_min - i, 0), sum_max - i, digit - 1)\n\n\nsetDigit(N, A, B, digit_N)\n'''\nfor digit3 in range(digit3_max + 1):\n    tmp1 = N - digit3 * 100\n    digit2_max = min(int(tmp1 \/ 10), 9)\n    for digit2 in range(digit2_max + 1):\n        tmp2 = tmp1 - digit2 * 10\n        digit1_max = min(tmp2, 9)\n        for digit1 in range(digit1_max + 1):\n            if (digit1 + digit2 + digit3) >= A and (digit1 + digit2 + digit3) <= B:\n                n_list.append(digit3 * 100 + digit2 * 10 + digit1)\n'''\n\nprint(sum(n_list))\n","n = list(map(int,input().split()))\nans = 0\ncount = 0\nfor i in range(n[0]+1):\n    j = i\n    ans = 0\n    while(i is not 0):\n        ans = ans + i%10\n        i = int(i\/10)\n    if ans >= n[1] and ans <= n[2]:\n        count = count +j\nprint(count)","N, A, B = int(input()), int(input()), int(input())\ndata = []\n\ndef digitsum(n):\n        s = str(n)\n        array = list(map(int, s))\n        return sum(array)\n\nn = 0\nfor n in range(N+1):\n        x = digitsum(n)\n        if A <= x <= B:\n                data.append(x)\n\nprint(sum(data))","N,A,B = map(int, input().split())\nans = 0\nfor num in range(1,N+1):\n    strnum = str(num)\n    count = 0\n    for s in strnum:\n        count += int(s)\n    if count >= A and count <= B:\n        ans += num\nprint(ans)","N, A, B = map(int, input().split())\nlist = []\n\nfor i in range(1, N+1):\n    num = i\n    num_sum = 0\n    while num > 0:\n        num_sum += num % 10\n        num = num \/\/ 10\n    if A <= num_sum and num_sum <= B:\n        list.append(i)\n\nprint(sum(list))","#\u5404\u6841\u306e\u5408\u8a08\u5024\u3092\u8a08\u7b97\u3059\u308b\ndef digitSum(n):\n    s = str(n)\n    #\u4e00\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\n    array = list(map(int, s))\n    return sum(array)\n\nn,a,b=map(int,input().split())\nl=[]\n\nfor i in range(0,n+1):\n    if a<=digitSum(i) and digitSum(i)<=b:\n        l.append(i)\n\nprint(sum(l))\n","N, A, B = map(int, input().split())\nans = 0\nfor i in range(1, N+1):\n    i = str(i)\n    val = 0\n    for j in range(len(i)): val += int(i[j])\n    if A <= val <= B: ans += int(i)\nprint(ans)\n","n, a, b = map(int, input().split())\nprint(sum(x for x in range(1, n+1) if a <= sum(map(int, str(x))) <= b))","n,b,c = map(int,input().split())\ncount = 0\n\nfor i in range(1,n+1): #startnumber, endnumber\n  s = str(i)\n  numSum = 0\n  for si in range(len(s)):\n    numSum += int(s[si]) \n  \n  if numSum >= b and numSum <= c:\n    count += i\n\nprint(count)\n","def calculate_sum_of_digits(n):\n    result = 0\n    while n != 0:\n        result += n % 10\n\n        n \/\/= 10\n\n    return result\n\n\nn, a, b = map(int, input().split())\nresult = 0\nfor i in range(1, n + 1):\n    sum_of_digits = calculate_sum_of_digits(i)\n    if a <= sum_of_digits <= b:\n        result += i\n\nprint(result)\n","N, A, B = map(int, input().split())\n\nans = 0\n\n\ndef somesum(x):\n    total = 0\n    while x > 0:\n        total += x % 10\n        x = x \/\/ 10\n    return total\n\n\nfor i in range(N + 1):\n    total = somesum(i)\n    if total >= A and total <= B:\n        ans += i\n\nprint(ans)\n","#abc083 b-some sums\nn,a,b=map(int,input().split())\nnum=[str(x) for x in range(1,n+1)]\nans=0\nfor x in num:\n    s=0\n    for y in range(len(x)):\n        s+=int(x[y])\n    if s>=a and s<=b:\n        ans+=s\nprint(ans)","n, a, b = map(int, input().split())\n\nans = 0\nfor i in range(n+1):\n\ts = str(i)\n\tsum = 0\n\tfor c in s:\n\t\tsum += int(c)\n\tif a <= sum and sum <= b:\n\t\tans += i\nprint(ans)","n, a, b = map(int, input().split())\nsum = 0\nfor i in range(n+1):\n    i_str = list(str(i))\n    # print(i_str)\n    num_sum = 0\n    for num_str in i_str:\n        num_sum += int(num_str)\n    if num_sum >= a and num_sum <= b:\n        sum += i\nprint(sum)","N, A, B = map(int, input().split())\ncnt = 0\nfor i in range(1, N+1):\n    sum = 0\n    num = i\n    while num > 0:\n        sum += num % 10\n        num \/\/= 10\n    if A <= sum <= B:\n        cnt += i\nprint(cnt)\n","N, A, B = map(int, input().split())\nSUM = 0\nfor i in range(1, N+1):\n    j = i\n    s = 0\n    while True:\n        if j == 0:\n            break\n        s += j%10\n        j = j\/\/10\n    if A <= s <= B:\n        SUM += i\nprint(SUM)","n,a,b=map(int,input().split())\nnum = 0\nall = 0\n\ndef sum(x):\n  total = 0\n  while x>0:\n    num = x%10\n    total +=num\n    num=0\n    x = int(x\/10)\n  \n  return total\n    \nfor i in range(1,n+1):\n  if sum(i)>=a and sum(i)<=b:\n    all +=i\n  \nprint(all)\n","n,a,b = (int(i) for i in input().split())\ncount = 0\n\nfor i in range(1,n+1):\n    si = str(i)\n    if len(si) == 1:\n        s = int(si[0])\n    elif len(si) == 2:\n        s = int(si[0])+int(si[1])\n    elif len(si) == 3:\n        s = int(si[0])+int(si[1])+int(si[2])\n    else:\n        s = int(si[0])+int(si[1])+int(si[2])+int(si[3])\n\n    if a <= s and s <= b:\n        count += i\nprint(count)\n","N, A, B = map(int, input().split())\nans = 0\nfor i in range(N+1):\n    sum = i%10 + i\/\/10%10 + i\/\/100%10 + i\/\/1000%10\n    if A <= sum <= B:\n        ans += i\nprint(ans)\n","n,a,b = map(int, input().split())\nans = 0\nfor i in range(n+1):\n    l = sum(list(map(int, list(str(i)))))\n    if a <= l <= b:\n        ans += i\nprint(ans)","N,A,B=map(int,input().split())\nprint(sum([i for i in range(1,N+1) if sum([int(j) for j in str(i)])>=A and sum([int(j) for j in str(i)])<=B]))","N,A,B = map(int,input().split())\nt = 0\nfor i in range(N+1):\n    if A <= sum([int(x) for x in str(i)]) <= B:\n        t += i\nprint(t)","n,a,b=map(int,input().split())\nx=[]\ny=[]\nfor i in range(1,n+1):\n  x.append(i)\nfor j in range(n):\n  s=sum(list(map(int,str(x[j]))))\n  if s>=a and s<=b:\n    y.append(x[j])\nprint(sum(y))\n","n,a,b=map(int, input().split())\nsu=0\nfor i in range(n+1):\n  keta=sum(list(map(int, str(i))))\n  if a<=keta<=b:\n    su+=i\n\n    \nprint(su)","N, A, B = map(int, input().split())\nsum = 0\n \nfor n in range(N+1):\n  N1 = int(n\/10000)\n  N2 = int((n-10000*N1)\/1000)\n  N3 = int((n-10000*N1-1000*N2)\/100)\n  N4 = int((n-10000*N1-1000*N2-100*N3)\/10)\n  N5 = n-10000*N1-1000*N2-100*N3-10*N4\n  if A <= N1+N2+N3+N4+N5 <= B:\n    sum = sum + n\n \n \nprint(sum)","#!\/usr\/bin\/env python3\nn, a, b = map(int, input().split())\nans = 0\n\nfor i in range(1, n + 1):\n    arr = [int(c) for c in str(i)]\n    sumarr = sum(arr)\n    if sumarr >= a and sumarr <= b:\n        ans += i\n\nprint(ans)\n","n, a, b = map(int, input().split())\ntotal = 0\nfor i in range(1, n+1):\n    if a<= sum(map(int, list(str(i)))) <= b:\n        total += i\n \nprint(total)","n,a,b = map(int,input().split())\nans = 0\nfor i in range(n):\n  if a<=sum(map(int,list(str(i))))<=b:\n    ans += i\nprint(ans)","N, A, B = map(int, input().split())\nans = 0\nfor n in range(1, N+1):\n  tmp = n\n  i = 4\n  s = 0\n  while i > -1:\n    keta = tmp \/\/ (10 ** i)\n    tmp -=  keta * (10 ** i)\n    s += keta\n    i -= 1\n  if s >= A and s <= B:\n    ans += n\nprint(ans)\n\n","def find_sum_of_digits(n):\n    sum_of_digits = 0\n    while n>0:\n        sum_of_digits = sum_of_digits + n % 10\n        n = int(n \/ 10)\n    return sum_of_digits\n\n\nn, a, b = [int(e) for e in input().split()]\nans = 0\nfor i in range(n+1):\n    sum_of_digits = find_sum_of_digits(i)\n    if a <= sum_of_digits and sum_of_digits <= b:\n        ans = ans + i\nprint(ans)","while True:\n    s = 0\n    a = input().split()\n    X = [int(i) for i in a]\n    N,A,B = str(X[0]), X[1], X[2]\n    if (int(N) < 1 or int(N) >10001) or (A > B or B > 36 or A < 1):\n        continue\n    for i in range(1,int(N)+1):\n        a = 0\n        l = []\n        l = list(map(int,list(str(i))))\n        for j in l:\n            a = a + j\n        if a >= A and a <= B:\n            s = s + i\n    print(s)\n    break","s = input().split()\nn = int(s[0])\na = int(s[1])\nb = int(s[2])\n\nsums = []\n\nfor i in range(1, n + 1):\n    x = i\n    check = 0\n    while (x > 0):\n        y = x % 10\n        x = int(x \/ 10)\n        check += y\n    if a <= check <= b:\n        sums.append(i)\n\nanswer = 0\nfor i in range(len(sums)):\n    answer += sums[i]\n\nprint(answer)","n, a, b = map(int, input().split())\n\nans = 0\nfor i in range(1, n + 1):\n    temp = 0\n    hoge = i\n    while hoge > 0:\n        temp += hoge % 10\n        hoge \/\/= 10\n    if a <= temp <= b:\n        ans += 1\n\nprint(ans)\n","n, a, b = map(int, input().split())\narr = []\nfor i in range(n):\n  i = str(i + 1)\n  k = 0\n  for e in range(len(i)):\n    k += int(i[e])\n  if a <= k and k <= b:\n    arr.append(int(i))\nprint(sum(arr))","n,a,b=map(int,input().split())\nresult=0\nfor i in range(1,n+1):\n    if a <= sum(list(map(int,list(str(i))))) <= b:\n        result += i\nprint(result)","N,A,B = map(int,input().split())\ncount = 0\nfor i in range(N+1):\n    if A <= sum(map(int, str(i))) <= B :\n        count += i\nprint(count)","n,a,b = [int(i) for i in input().split()]\n\nsum2 = 0\n\nfor x in range(n+1):\n    sum1 = 0\n    x2 = x\n    while x > 0:\n        sum1 += x % 10\n        x = int(x\/10)\n\n    if sum1 >= a and sum1 <= b:\n        sum2 += x2\nprint(sum2)","def summ(n):\n    n_s = str(n)\n    tmp = 0\n    for i in n_s:\n        tmp += int(i)\n    return tmp\n\nN,A,B = map(int, input().split())\n\nans = 0\nfor i in range(N+1):\n    if A <= summ(i) <= B:\n        ans += i\nprint(ans)\n","import sys\nstin = sys.stdin.readline\nN,A,B=list(map(int,stin().split()))\nprint(sum(i for i in range(N) if A <= sum(map(int,str(i))) <= B))","from functools import reduce\n\nn,a,b = map(lambda x:int(x),input().split(\" \"))\n\nans = 0\nfor ni in range(a,n+1):\n    add_each_dig = int(reduce(lambda x, y: int(x) + int(y), str(ni) ))\n    if a <= add_each_dig and add_each_dig <= b:\n        ans += ni\n\nprint(ans)","n,a,b=map(int,input().split())\nN=list(range(1,n+1))\nans=0\nfor num in N:\n  S=sum(list(map(int, str(num))))\n  if a<=S<=b:\n    ans+=num\nprint(ans)","N, A, B = map(int, input().split())\nans = 0\n\n\ndef sumDigits(n):\n    sum = 0\n    while n != 0:\n        sum += n % 10\n        n = n \/\/ 10\n    return sum\n\n\nfor i in range(N+1):\n    x = sumDigits(i)\n    if A <= x <= B:\n        ans += i\n\nprint(ans)","INPUT=input()\nIN=INPUT.split(\" \")\n#N=int(IN[0])\nnumber=int(IN[0])\n#N\nA=int(IN[1])\nB=int(IN[2])\n\nGOUKEI=0\nkazu=0\n\nwhile kazu<=number:\n    X=list(map(int,list(str(kazu))))\n    #X = list(map(int, n))\n   \n    #print(X)\n    if A<=sum(X)<=B:\n        GOUKEI+=kazu\n        #print(\"add\",kazu)\n    kazu+=1\nprint(GOUKEI)\n","n,a,b=map(int,input().split())\nan=0\n \nfor i in range(n+1):\n    c=0\n    for j in range(len(str(i))):\n        c += int(str(i)[j])\n    \n    if a <= c and c <= b:\n        an+=i\n \nprint(an)","n,a,b = map(int,input().split())\ndef ketawa(i):\n  ret = 0\n  while(i):\n    ret += i % 10\n    i \/\/= 10\n  return ret\n\nret = 0\nfor i in range(1,n+1):\n  if a <= ketawa(i) <= b: ret += i\nprint(ret)\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score: <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3>\n<p>Find the minimum prime number greater than or equal to <var>X<\/var>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Notes<\/h3>\n<p>A prime number is an integer greater than <var>1<\/var> that cannot be evenly divided by any positive integer except <var>1<\/var> and itself.<\/p>\n<p>For example, <var>2<\/var>, <var>3<\/var>, and <var>5<\/var> are prime numbers, while <var>4<\/var> and <var>6<\/var> are not.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3>\n<ul>\n<li><var> 2 \\le X \\le 10^5 <\/var><\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3>\n<p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>X<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3>\n<p>Print the minimum prime number greater than or equal to <var>X<\/var>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>20\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>23\n<\/pre>\n<p>The minimum prime number greater than or equal to <var>20<\/var> is <var>23<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>2\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>2\n<\/pre>\n<p><var>X<\/var> itself can be a prime number.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>99992\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>100003\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore: 300 points\n\n\nProblem Statement\nFind the minimum prime number greater than or equal to X.\n\n\n\n\nNotes\nA prime number is an integer greater than 1 that cannot be evenly divided by any positive integer except 1 and itself.\nFor example, 2, 3, and 5 are prime numbers, while 4 and 6 are not.\n\n\n\n\nConstraints\n\n 2 \\le X \\le 10^5 \nAll values in input are integers.\n\n\n\n\n\n\n\nInput\nInput is given from Standard Input in the following format:\nX\n\n\n\n\n\nOutput\nPrint the minimum prime number greater than or equal to X.\n\n\n\n\n\n\nSample Input 120\n\n\n\n\n\nSample Output 123\n\nThe minimum prime number greater than or equal to 20 is 23.\n\n\n\n\n\nSample Input 22\n\n\n\n\n\nSample Output 22\n\nX itself can be a prime number.\n\n\n\n\n\nSample Input 399992\n\n\n\n\n\nSample Output 3100003\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score: <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3>\n<p>Find the minimum prime number greater than or equal to <var>X<\/var>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Notes<\/h3>\n<p>A prime number is an integer greater than <var>1<\/var> that cannot be evenly divided by any positive integer except <var>1<\/var> and itself.<\/p>\n<p>For example, <var>2<\/var>, <var>3<\/var>, and <var>5<\/var> are prime numbers, while <var>4<\/var> and <var>6<\/var> are not.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3>\n<ul>\n<li><var> 2 \\le X \\le 10^5 <\/var><\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3>\n<p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>X<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3>\n<p>Print the minimum prime number greater than or equal to <var>X<\/var>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>20\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>23\n<\/pre>\n<p>The minimum prime number greater than or equal to <var>20<\/var> is <var>23<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>2\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>2\n<\/pre>\n<p><var>X<\/var> itself can be a prime number.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>99992\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>100003\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore: 300 points\n\n\nProblem Statement\nFind the minimum prime number greater than or equal to X.\n\n\n\n\nNotes\nA prime number is an integer greater than 1 that cannot be evenly divided by any positive integer except 1 and itself.\nFor example, 2, 3, and 5 are prime numbers, while 4 and 6 are not.\n\n\n\n\nConstraints\n\n 2 \\le X \\le 10^5 \nAll values in input are integers.\n\n\n\n\n\n\n\nInput\nInput is given from Standard Input in the following format:\nX\n\n\n\n\n\nOutput\nPrint the minimum prime number greater than or equal to X.\n\n\n\n\n\n\nSample Input 120\n\n\n\n\n\nSample Output 123\n\nThe minimum prime number greater than or equal to 20 is 23.\n\n\n\n\n\nSample Input 22\n\n\n\n\n\nSample Output 22\n\nX itself can be a prime number.\n\n\n\n\n\nSample Input 399992\n\n\n\n\n\nSample Output 3100003\n\n\n","solve_rate":0.7452803804,"codenet_problem_id":"p02819","input_testcases":{"44":"180","72":"577","24":"79","25":"61","42":"590","54":"789","80":"464","40":"226","43":"248","78":"3048","57":"838","10":"5","84":"630","67":"777","90":"4450","19":"12","30":"315","8":"17","31":"130","49":"421","56":"398","39":"182","0":"40","82":"275","99":"2425","81":"2396","65":"603","23":"110","73":"1154","100":"99992","95":"4751","63":"542","66":"856","4":"97","98":"1518","45":"179","6":"11","83":"927","16":"122","68":"341","36":"298","76":"1040","37":"150","87":"1003","22":"31","51":"292","77":"431","88":"859","2":"73","85":"1267","55":"365","103":"20","28":"210","58":"331","17":"57","21":"44","96":"5560","101":"20","7":"18","38":"153","14":"101","5":"37","15":"106","89":"1664","75":"1955","32":"42","79":"986","102":"2","35":"212","52":"384","18":"171","26":"52","64":"418","41":"138","70":"997","93":"3052","33":"135","34":"166","27":"70","20":"89","59":"228","53":"357","71":"240","97":"1466","48":"1171","92":"2968","62":"310","47":"159","60":"369","91":"7876","46":"433","3":"28","69":"197","61":"312","86":"1413","94":"5496","9":"22","13":"82"},"output_testcases":{"44":"181\n","72":"577\n","24":"79\n","25":"61\n","42":"593\n","54":"797\n","80":"467\n","40":"227\n","43":"251\n","78":"3049\n","57":"839\n","10":"5\n","84":"631\n","67":"787\n","90":"4451\n","19":"13\n","30":"317\n","8":"17\n","31":"131\n","49":"421\n","56":"401\n","39":"191\n","0":"41\n","82":"277\n","99":"2437\n","81":"2399\n","65":"607\n","23":"113\n","73":"1163\n","100":"100003\n","95":"4751\n","63":"547\n","66":"857\n","4":"97\n","98":"1523\n","45":"179\n","6":"11\n","83":"929\n","16":"127\n","68":"347\n","36":"307\n","76":"1049\n","37":"151\n","87":"1009\n","22":"31\n","51":"293\n","77":"431\n","88":"859\n","2":"73\n","85":"1277\n","55":"367\n","103":"23\n","28":"211\n","58":"331\n","17":"59\n","21":"47\n","96":"5563\n","101":"23\n","7":"19\n","38":"157\n","14":"101\n","5":"37\n","15":"107\n","89":"1667\n","75":"1973\n","32":"43\n","79":"991\n","102":"2\n","35":"223\n","52":"389\n","18":"173\n","26":"53\n","64":"419\n","41":"139\n","70":"997\n","93":"3061\n","33":"137\n","34":"167\n","27":"71\n","20":"89\n","59":"229\n","53":"359\n","71":"241\n","97":"1471\n","48":"1171\n","92":"2969\n","62":"311\n","47":"163\n","60":"373\n","91":"7877\n","46":"433\n","3":"29\n","69":"197\n","61":"313\n","86":"1423\n","94":"5501\n","9":"23\n","13":"83\n"},"n_missing":6,"programs":["a = int(input())\ndef hantei(x):\n    k = 0\n    for i in range(2, x\/\/2):\n        if x % i == 0:\n            k += 1\n    if k ==0:\n        return x\n\nc = True\nwhile c:\n    hantei(a)\n    b = hantei(a)\n    if b is not None:\n        print(b)\n        c = False\n    elif b is None:\n        a += 1","import sys\n\nx = int(input())\nnums = [i for i in range(1, 100004, 2)]\ndel nums[0]\nif x == 2:\n    print(2)\n    sys.exit()\nwhile nums:\n    primal = nums.pop(0)\n    if primal >= x:\n        print(primal)\n        break\n    nums = [num for num in nums if num % primal != 0]\n","from bisect import bisect_left\n\n\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\nx = int(input())\np = primes(100100)\nprint(p[bisect_left(p, x)])","x=int(input())\n#n,m=map(int,input().split())\n#pl=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\nimport math\n\nwhile True:\n    flag=True\n    for i in range(2,int(math.sqrt(x))+1):\n        if x%i==0:\n            flag=False\n            break    \n    if flag:\n        break\n    else:\n        x+=1\nprint(x)\n\n","import math\ndef is_prime(N):\n    if N == 1:\n      return False\n    for k in range(2, int(math.sqrt(N))+1):\n      if N % k == 0:\n          return False\n    return True\n  \nx = int(input())\nfor i in range(x+1, 2*10**7):\n  if is_prime(i):\n    print(i)\n    exit()","def prime_num(n):\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            return 1\n        f += 2\n    return 0\n\nx = int(input())\nif x == 2:\n    print(x)\n    exit()\nprime = (x\/\/2)*2 + 1\nwhile 1 == 1:\n    if prime_num(prime) == 0:\n        print(prime)\n        exit()\n    prime += 2","X = int(input())\n\n\ndef is_prime(q):\n    q = abs(q)\n    if q == 2:\n        return True\n    if q < 2 or q & 1 == 0:\n        return False\n    return pow(2, q - 1, q) == 1\n\n\ndef solve(X):\n    judge = False\n    while not judge:\n        if (is_prime(X)):\n            return X\n        X += 1\n\n\nprint(solve(X))\n","def isPrime(x):\n  for i in range(2,int(x**0.5)+1):\n    if x%i==0:\n      return False\n  return True\n\nn = int(input())\n\nfor i in range(n,10**5):\n  if isPrime(i):\n    print(i)\n    break\n","import sys\nfrom collections import deque\n#import numpy as np\nimport math\n#sys.setrecursionlimit(10**6)\ndef S(): return sys.stdin.readline().rstrip()\ndef SL(): return map(str,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef IL(): return map(int,sys.stdin.readline().rstrip().split())\n\ndef solve():\n    exclude = set()\n    prime = set()\n    for i in range(2,int(math.sqrt(x))+1):\n        if i in exclude:\n            continue\n        prime.add(i)\n        j = i\n        while j<=math.sqrt(x):\n            exclude.add(j)\n            j += i\n    current = x\n    while True:\n        for rep in prime:\n            if current%rep==0:\n                break\n        else:\n            print(current)\n            return\n        current += 1\n    return\n\nif __name__=='__main__':\n    x = I()\n    solve()","n=int(input())\n\nprimelist=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991,100003]\ni=0\nwhile True:\n    if n==2:\n        print(2)\n        break\n    elif primelist[i]<n and n<=primelist[i+1]:\n        print(primelist[i+1])\n        break\n    else:\n        i+=1\n","x=int(input())\nps=[2]\ni=3\nwhile ps[-1] < x:\n    for p in ps:\n        if i%p==0:\n            break\n        elif i<p**2:\n            ps.append(i)\n            break\n    i+=2\nprint(ps[-1])","x = int(input())\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nfor i in range(x, 10 ** 9):\n    if is_prime(i):\n        print(i)\n        exit()\n","from bisect import bisect_left\n\nX = int(input())\n\nN = 10 ** 6 + 10\n# N = int(input())\ndef primes(n):\n    import math\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\nprime_lst = primes(N)\n\ntmp = bisect_left(prime_lst, X)\nprint (prime_lst[tmp])","x = int(input())\nflg = 0\n_flg = 1\nwhile flg == 0:\n    mx  = int(x**0.5)\n    for i in range(2, mx+1):\n        if x % i == 0:\n            _flg = 0\n            break\n    fig = _flg\n    if flg == 0:\n        x+=1\nprint(x)\n","x=int(input())\nl=[]\nif x==2:\n    print(2)\n    exit()\nfor i in range(2,x):\n    for j in l:\n        if i%j==0:break\n    else:\n        l.append(i)\nif x%2==0:x+=1\nwhile True:\n    for i in l:\n        if x%i==0:\n            x+=2\n            break\n    else:\n        break\nprint(x)","X = int(input())\nfrom sympy import primerange, sieve\nL = list(sieve.primerange(X, 10**5))\nprint(L[0])","from sympy import sieve\n \ndef Eratosthenes(n):\n    li = [i for i in range(2,n+1)]\n    judge = [True for i in range(n+1)]\n    ans = []\n \n    for i in range(2,n+1):\n        if judge[i] == True:\n            for j in range(i*2,n+1,i):\n                judge[j] = False\n            ans.append(i)\n    return ans\n \nx = int(input())\nl = Eratosthenes(10 ** 6)\nfor i in l:\n    if i >= x:\n        print(i)\n        exit()","import sys\ninput = sys.stdin.readline\n\n\nx = int(input())\n\nprime = [True] * (1000000)\nprime[2] = True\n\ndef e_prime(x):\n\ti = 2\n\tflag = False\n\twhile True:\n\t\tif prime[i]:\n\t\t\tif(flag==True):\n\t\t\t\treturn i\n\t\t\telse:\n\t\t\t\tfor j in range(i**2,len(prime),i):\n\t\t\t\t\tprime[j]=False\n\t\ti+=1\n\t\tif(i==x):flag=True\n\nprint(e_prime(x))","import math\nimport sys\ninput = sys.stdin.readline\n\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\ndef main():\n    X = int(input())\n    for i in range(X, 100004):\n        if is_prime(i):\n            print(i)\n            break\n\nif __name__ == '__main__': main()","n = int(input())\n\n\nwhile 1:\n    prime_dc = 0\n    for i in range(2,n):\n        if n % i != 0:\n            prime_dc += 1\n            \n    if n-2 == prime_dc:\n        break\n    \n    n += 1\n\nprint(n)","x = int(input())\nwhile True:\n    if x % 2 != 0:    \n        for m in range(3,x,2):\n            if x % m == 0:\n                break\n        else:\n            break\n    x += 1\nprint (x)","import math\n\ndef IsP(n):\n    s = int(math.ceil(math.sqrt(x)))\n    for i in range(2,s+1):\n        if(n%i == 0):\n            return 0\n    return 1\n\nx = int(input())\n\nwhile(IsP(x)==0):\n    x +=1\nprint(x)\n","x = int(input())\n\ndef is_prime(q):\n    if q == 2:\n        return True\n    if q < 2 or q & 1 == 0:\n        return False\n    return pow(2, q-1, q) == 1\n\ni = 0\nwhile True:\n    if is_prime(x+i):\n        break\n    i += 1\n\nprint(x+i)\n","def isPrime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    k = 3\n    while k < x:\n        if x % k == 0:\n            return False\n        k += 2\n    return True\n    \nX = int(input())\n\nwhile True:\n    if isPrime(X):\n        print(X)\n        exit(0)\n    X += 1\n","X = int(input())\nif X == 2:\n    print(X)\n    exit()\ntemp = 2\nfor i in range(X, 1000000):\n    for j in range(2, X):\n        if i % j == 0:\n            break\n        if j == X-1:\n            print(i)\n            exit()","x=int(input())\ndef eratosthenes(n):\n  l0=list(range(2,n+1))\n  l1=[1]*(n+1)\n  l1[0]=0\n  l1[1]=0\n  for li in l0:\n    if li>int(n**0.5):\n      break\n    if l1[li]==1:\n      k=2\n      while k*li<=n:\n        l1[k*li]=0\n        k+=1\n  ret=[i for i,li in enumerate(l1) if li==1]\n  return ret\na=eratosthenes(x)\nwhile True:\n  flg=True\n  for ai in a:\n    if x%ai==0:\n      flg=False\n      break\n  if flg:\n    print(x)\n    exit()\n  x+=1\n","x = int(input())\ndef primechecker(n):\n    if n != 2:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n                break\n        return True\n    else:\n        return True\n#\nwhile primechecker(x) == False:\n    x += 1\n\nprint(x)\n","n = int(input())\n\ndef isprime(x):\n    if x == 2:\n        return True\n    elif x == 4:\n        return False\n    for i in range(3, int(x**0.5), 2):\n        if x % i == 0:\n            return False\n    return True\n\ni = n\nwhile True:\n    if isprime(i):\n        break\n    else:\n        i += 1\nprint(i)","from math import sqrt\ndef judge(num):\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(sqrt(num))+1,2):\n            if num % i == 0:\n                return False\n        return True\ns = int(input()) \nwhile(1):\n    if judge(s):\n        print(s)\n        break\n    else:\n        s += 1","def isp(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            x += 1\n            return isp(x)\n        else:\n            pass\n    return x\nn = int(input())\nprint(isp(n))","def isprime(x):\n    if x <= 1:\n        return False\n    else:\n        i = 2\n        while i*i <= x:\n            if x % i == 0:\n                return False\n            i += 1\n        return True\n\nX = int(input())\nwhile not(isprime(X)):\n    X += 1\nprint(X)\n    ","X = int(input())\n\nprime = [True for i in range(10**6)]\nprime[0] = False\nprime[1] = False\n\nfor i in range(2, 10**5+4):\n  if prime[i]:\n    for j in range(2, (10**5+4)\/\/i + 1):\n        prime[i*j] = False\nfor i, is_prime in enumerate(prime):\n  if i >= X and is_prime:\n    ret = i\n    break\n    \nprint(ret)","x = int(input())\n\ndef is_prime(n):\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        if n % i == 0:\n            return False\n    return n != 1\n\n\nsosu = False\n\nwhile sosu==False:\n    sosu = is_prime(x)\n    x += 1\n\nprint(x-1)","def com(_x):\n    _flg = 1\n    mx  = int(_x**0.5)\n    for i in range(2, mx+1):\n        if _x % i == 0:\n            _flg = 0\n            break\n    return _flg\n\n\nx = int(input())\nflg = 0\nwhile flg == 0:\n    #print(\"a\")\n    flg = com(x)\n    if flg == 0:\n        x+=1\nprint(x)\n","x=int(input())\n\nflag=0\nfor i in range(x,10**18):\n  for p in range(2,i):\n    if i%p==0:\n      break\n  else:\n    print(i)\n    break","import math\nfrom bisect import bisect_left\n\nX = int(input())\n\ndef primes_ref(x):\n    if x < 2: return []\n\n    primes = [i for i in range(x)]\n    primes[1] = 0\n    x_sqrt = math.sqrt(x)\n\n    for prime in primes:\n        if prime == 0: continue \n        if prime > x_sqrt: break\n        for non_prime in range(2 * prime, x, prime): primes[non_prime] = 0\n\n    return [prime for prime in primes if prime != 0]\n\ndef find_ge(a, x):\n  i = bisect_left(a, x)\n  if i != len(a):\n    return a[i]\n  raise ValueError\n\nprimes = primes_ref(min(X * X, 100004))\nprint(find_ge(primes, X))","import math\nimport sys\n\ndef eratosthenes(limit):\n    A = [i for i in range(2, limit+1)]\n    P = []\n    time = 0\n    \n    while True:\n        prime = min(A)\n        \n        if prime > math.sqrt(limit):\n            break\n            \n        P.append(prime)\n            \n        i = 0\n        while i < len(A):\n            if A[i] % prime == 0:\n                A.pop(i)\n                continue\n            i += 1\n            \n    for a in A:\n        P.append(a)\n            \n    return P\n\nX = int(input())\nfor i in eratosthenes(100003):\n    if i >= X:\n        print(i)\n        sys.exit()","x=int(input())\nif x==2:\n    print(2)\nelse:\n    tmp=x\n    flag=False\n    while True:\n        for i in range(2,tmp):\n            if tmp%i==0:\n                break\n            if i==tmp-1:\n                flag=True\n        if flag:\n            break\n        else:\n            flag=False\n            tmp+=1\n    print(tmp)","import math\na=int(input())\n\n# \u6574\u6570x\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\ndef is_prime(x):\n    if x < 2: return False # 2\u672a\u6e80\u306b\u7d20\u6570\u306f\u306a\u3044\n    if x == 2 or x == 3 or x == 5: return True # 2,3,5\u306f\u7d20\u6570\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0: return False # 2,3,5\u306e\u500d\u6570\u306f\u5408\u6210\u6570\n\n    # \u305f\u3081\u3057\u5272\u308a: \u7591\u4f3c\u7d20\u6570(2\u3067\u30823\u3067\u30825\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u6570\u5b57)\u3067\u6b21\u3005\u306b\u5272\u3063\u3066\u3044\u304f\n    prime = 7\n    step = 4\n    while prime <= math.sqrt(x):\n        if x % prime == 0: return False\n\n        prime += step\n        step = 6 - step\n\n    return True\n\nfor i in range(a,a+10**5):\n    if is_prime(i):\n        print(i)\n        break","x=int(input())\nimport math\ndef is_prime(n):\n    if n==1:\n        return False\n    for divisor in range(2,int(math.sqrt(n))+1):\n        if n%divisor == 0:\n            return False\n    return True\n\nk=0\nwhile True:\n    if is_prime(x+k):\n        print(x+k)\n        break\n    else:\n        k += 1","# Original Submission At: https:\/\/atcoder.jp\/contests\/abc149\/submissions\/16823042\nimport sys\nsys.setrecursionlimit(1000000)\n\nx= int(input())\n\ndef prime_check(num,count):\n    if (num % count) != 0:\n        if num <= count**2:\n            print(num)\n        else:\n            prime_check(num,count+1)\n    else :\n        prime_check(num+1,2)\n\nif x==2 :\n    print (2)\nelse:\n    prime_check(x,2)\n","# -*- coding: utf-8 -*-\nX = int(input())\nans = 0\npn = [2]\nflag = 0\nfor i in range(3,100005):\n  for k in pn:\n    if i%k == 0:\n      flag = 0\n      break\n    else:\n      flag = 1\n  if flag == 1:\n    pn.append(i)\nfor i in range(len(pn)-1):\n  if pn[i] < X < pn[i+1]:\n    ans = pn[i+1]\nprint(ans)","for i in range(int(input()),100004):\n  for j in range(2, i):\n    if i % j == 0:\n      break\n  else:\n    print(i)\n    break","X = int(input())\nX = X + 1\nprime = None\nwhile True:\n    for i in range(2, X):\n        if X % i == 0:\n            break\n    else:\n        prime = X\n    if prime != None:\n        break\n    else:\n        X += 1\n\nprint(X)","import sys\n#import numpy as np\nstdin = sys.stdin\n\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split())) # applies to numbers only\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nX = ri()\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\nl = set(primes(10**6))\n\nwhile True:\n    if X in l:\n        print(X)\n        exit()\n    X += 1","import sys\nimport  math\nimport fractions\nfrom collections import defaultdict\nstdin = sys.stdin\n     \nns = lambda: stdin.readline().rstrip()\nni = lambda: int(stdin.readline().rstrip())\nnm = lambda: map(int, stdin.readline().split())\nnl = lambda: list(map(int, stdin.readline().split()))\n\n\n\nX=int(input())\n\nprime_l=[0]*(2*X)\nfor  i in range(2,X):\n    if(prime_l[i]==0):\n        for j in range(1,(2*X)\/\/i):\n            prime_l[i*j]+=1\n        \nwhile(1):\n    X+=1\n    if(prime_l[X]==0):\n        print(X)\n        sys.exit(0)\n","def miller_rabin(n, k=100):\n    import random\n    if n == 2:\n        return True\n    if n == 1 or n & 1 == 0:\n        return False\n    d = (n - 1) >> 1\n    while d & 1 == 0:\n        d >>= 1\n    for _ in range(k):\n        a = random.randint(1, n - 1)\n        t = d\n        y = pow(a, t, n)\n        while t != n - 1 and y != 1 and y != n - 1:\n            y = (y * y) % n\n            t <<= 1\n        if y != n - 1 and t & 1 == 0:\n            return False\n    return True\ndef main():\n  x=int(input())\n  for i in range(x+1,1000000):\n    if miller_rabin(i):\n      print(i)\n      return\nmain()","a=input()\n\ndef prime(n):\n  if n <= 1:\n    return False\n  else:\n    for i in range(2,n):\n      if n%i == 0:\n      \treturn False\n      return True\n    \nwhile prime(a)==False:\n  a += 1\n\nprint(a)","M = 10 ** 6\ne = 10 ** 3\n\n# the sieve of Eratosthenes\nprimes = [True] * (M + 1)\nprimes[0] = False\nprimes[1] = False\nfor i in range(2, e):\n    if primes[i]:\n        for j in range(i * 2, M + 1, i):\n            primes[j] = False\n\nX = int(input())\n\nprint(X + primes[X:].index(1))","\nX=int(input())\nif X==2:\n  print(X)\nelse:\n  for i in range(2,X**(1\/2)):\n    if X%i==0:\n      X+=1\n  print(X)\n","from bisect import bisect_right\nINFTY = 10**5\nP = [1 for _ in range(INFTY)]\nP[0]=0\nP[1]=0\nfor i in range(2,int(INFTY**0.5)+1):\n    for j in range(i*i,INFTY,i):\n        P[j] = 0\nQ = []\nfor i in range(INFTY):\n    if P[i]==1:\n        Q.append(i)\nX = int(input())\nind = bisect_right(Q,X)\nprint(Q[ind])","X = int(input())\n\ni = X\n\nwhile 1:\n    if i == 2:\n        print(2)\n        exit()\n    if i % 2 == 0:\n        pass\n    else:\n        for j in range(2, i):\n            if i % j == 0:\n                break\n\n            if j == i-1:\n                print(i)\n                exit()\n    i += 1","import math\nn = int(input())\n\ndef check(s):\n\tif s == 1:\n\t\treturn False\n\tfor i in range(2, int(math.sqrt(s)) + 1):\n\t\tif s%i == 0:\n\t\t\treturn False\n\treturn True\n\nfor i in range(n,10**6):\n\tif check(i):\n\t\tprint (i)\n\t\texit()\n","import math\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\n\nx = int(input())\n\nif x == 2:\n    print(x)\n    exit()\n\nif x % 2 == 0:\n    x += 1\n\nwhile not is_prime(x):\n    x += 2\n\nprint(x)\n","#!\/usr\/bin\/env python3\n\ndef main():\n    x = int(input())\n    primes = furui(300000)\n    for p in primes:\n        if x <= p:\n            print(p)\n            return\n    raise ValueError\n\n# https:\/\/mathtrain.jp\/eratosthenes\ndef furui(nmax):\n    assert nmax > 2\n    p = 2\n    primes = list(range(2, nmax + 1))\n    while True:\n        if p ** 2 > nmax:\n            break\n        primes_next = []\n        for x in primes:\n            if x <= p or x % p != 0:\n                primes_next.append(x)\n        primes = primes_next\n        p = primes[primes.index(p) + 1]\n    return primes\n\nif __name__ == \"__main__\":\n    main()\n","n = int(input())\nif n == 2:\n    n = 2\nelse:\n    while pow(2, n-1, n) != 1:\n        n += 1\nprint(n)","def is_prime(n):\n    for p in range(2,n):\n        if n % p ==0:\n            return True\n\nN =int(input())\np=N\nwhile p <10**7:\n    if is_prime(p):\n        p +=1\n    else:\n        print(p)\n        break","x=int(input())\nwhile(True):\n    for i in range(2,x):\n        if x%i==0:\n            break\n    else:\n        print(x)\n        break\n    x+=1","import math\nX=int(input())\nfor i in range(0,X):\n  a=X+i\n  c=int(math.sqrt(a))\n  for j in range(2,c):\n    if a%j!=0:\n      print(a)\nbreak\n      ","import math\nN = int(input())\n\ndef chkPrime(N):\n  if N == 2 or N == 3:\n    return True\n  else:\n    for i in range(2,int(math.sqrt(N))+1):\n      if N % i == 0:\n        return False\n    else:\n      return True\n\nwhile not chkPrime(N):\n  N += 1\n\nprint (N)\n","X = int(input())\n\nwhile True:\n  cnt = 0\n  for i in range(1, X + 1):\n    if X % i != 0:\n      continue\n    else:\n      cnt += 1\n  if cnt == 2:\n    print(X)\n    exit()\n  X += 1","X=int(input())\ndef is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\nflag=False\nwhile(flag==False):\n    if is_prime(X):\n        print(X)\n        flag=True\n        break\n    X+=1","x = int(input())\n\nimport math\n\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\nfor i in range(x, x +1000):\n    if is_prime(i) == True:\n        print(i)\n        break","X = int(input())\n\ndef is_prime(n):\n    if n <= 1:\n        return False   \n    else:\n        for i in range(2, n):\n            if n%i==0:\n                return False\n        return True\n\nwhile is_prime(X)==False:\n    X += 1\n","x=int(input())\n\ndef is_prime(x):\n    if x==2:\n        return 1\n    if x<2 or x%2==0:\n        return 0\n    i=3\n    while i<=x**0.5:\n        if x%i==0:\n            return 0\n        i+=2\n    return 1\nfor i in range(x,x+10**5):\n    if is_prime(i):\n        print(i)\n        exit()\n        \n","import sys\nimport math\ndef is_prime(num):\n    if num < 2:\n        return False\n    else:\n        num_sqrt = math.floor(math.sqrt(num))\n        for prime in range(2, num_sqrt + 1):\n            if num % prime == 0:\n                return False\n                break\n        return True\n\ndef main():\n    x = int(input())\n    i = x\n    while True:\n        if is_prime(i) == True:\n            print(i)\n            sys.exit()\n        i = i + 1\n\n\nif __name__ == '__main__':\n    main()","primes = list((2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017 2027 2029 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269 2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459 2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683 2687 2689 2693 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 2777 2789 2791 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887 2897 2903 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023 3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167 3169 3181 3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271 3299 3301 3307 3313 3319 3323 3329 3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433 3449 3457 3461 3463 3467 3469 3491 3499 3511 3517 3527 3529 3533 3539 3541 3547 3557 3559 3571 3581 3583 3593 3607 3613 3617 3623 3631 3637 3643 3659 3671 3673 3677 3691 3697 3701 3709 3719 3727 3733 3739 3761 3767 3769 3779 3793 3797 3803 3821 3823 3833 3847 3851 3853 3863 3877 3881 3889 3907 3911 3917 3919 3923 3929 3931 3943 3947 3967 3989 4001 4003 4007 4013 4019 4021 4027 4049 4051 4057 4073 4079 4091 4093 4099 4111 4127 4129 4133 4139 4153 4157 4159 4177 4201 4211 4217 4219 4229 4231 4241 4243 4253 4259 4261 4271 4273 4283 4289 4297 4327 4337 4339 4349 4357 4363 4373 4391 4397 4409 4421 4423 4441 4447 4451 4457 4463 4481 4483 4493 4507 4513 4517 4519 4523 4547 4549 4561 4567 4583 4591 4597 4603 4621 4637 4639 4643 4649 4651 4657 4663 4673 4679 4691 4703 4721 4723 4729 4733 4751 4759 4783 4787 4789 4793 4799 4801 4813 4817 4831 4861 4871 4877 4889 4903 4909 4919 4931 4933 4937 4943 4951 4957 4967 4969 4973 4987 4993 4999 5003 5009 5011 5021 5023 5039 5051 5059 5077 5081 5087 5099 5101 5107 5113 5119 5147 5153 5167 5171 5179 5189 5197 5209 5227 5231 5233 5237 5261 5273 5279 5281 5297 5303 5309 5323 5333 5347 5351 5381 5387 5393 5399 5407 5413 5417 5419 5431 5437 5441 5443 5449 5471 5477 5479 5483 5501 5503 5507 5519 5521 5527 5531 5557 5563 5569 5573 5581 5591 5623 5639 5641 5647 5651 5653 5657 5659 5669 5683 5689 5693 5701 5711 5717 5737 5741 5743 5749 5779 5783 5791 5801 5807 5813 5821 5827 5839 5843 5849 5851 5857 5861 5867 5869 5879 5881 5897 5903 5923 5927 5939 5953 5981 5987 6007 6011 6029 6037 6043 6047 6053 6067 6073 6079 6089 6091 6101 6113 6121 6131 6133 6143 6151 6163 6173 6197 6199 6203 6211 6217 6221 6229 6247 6257 6263 6269 6271 6277 6287 6299 6301 6311 6317 6323 6329 6337 6343 6353 6359 6361 6367 6373 6379 6389 6397 6421 6427 6449 6451 6469 6473 6481 6491 6521 6529 6547 6551 6553 6563 6569 6571 6577 6581 6599 6607 6619 6637 6653 6659 6661 6673 6679 6689 6691 6701 6703 6709 6719 6733 6737 6761 6763 6779 6781 6791 6793 6803 6823 6827 6829 6833 6841 6857 6863 6869 6871 6883 6899 6907 6911 6917 6947 6949 6959 6961 6967 6971 6977 6983 6991 6997 7001 7013 7019 7027 7039 7043 7057 7069 7079 7103 7109 7121 7127 7129 7151 7159 7177 7187 7193 7207 7211 7213 7219 7229 7237 7243 7247 7253 7283 7297 7307 7309 7321 7331 7333 7349 7351 7369 7393 7411 7417 7433 7451 7457 7459 7477 7481 7487 7489 7499 7507 7517 7523 7529 7537 7541 7547 7549 7559 7561 7573 7577 7583 7589 7591 7603 7607 7621 7639 7643 7649 7669 7673 7681 7687 7691 7699 7703 7717 7723 7727 7741 7753 7757 7759 7789 7793 7817 7823 7829 7841 7853 7867 7873 7877 7879 7883 7901 7907 7919 7927 7933 7937 7949 7951 7963 7993 8009 8011 8017 8039 8053 8059 8069 8081 8087 8089 8093 8101 8111 8117 8123 8147 8161 8167 8171 8179 8191 8209 8219 8221 8231 8233 8237 8243 8263 8269 8273 8287 8291 8293 8297 8311 8317 8329 8353 8363 8369 8377 8387 8389 8419 8423 8429 8431 8443 8447 8461 8467 8501 8513 8521 8527 8537 8539 8543 8563 8573 8581 8597 8599 8609 8623 8627 8629 8641 8647 8663 8669 8677 8681 8689 8693 8699 8707 8713 8719 8731 8737 8741 8747 8753 8761 8779 8783 8803 8807 8819 8821 8831 8837 8839 8849 8861 8863 8867 8887 8893 8923 8929 8933 8941 8951 8963 8969 8971 8999 9001 9007 9011 9013 9029 9041 9043 9049 9059 9067 9091 9103 9109 9127 9133 9137 9151 9157 9161 9173 9181 9187 9199 9203 9209 9221 9227 9239 9241 9257 9277 9281 9283 9293 9311 9319 9323 9337 9341 9343 9349 9371 9377 9391 9397 9403 9413 9419 9421 9431 9433 9437 9439 9461 9463 9467 9473 9479 9491 9497 9511 9521 9533 9539 9547 9551 9587 9601 9613 9619 9623 9629 9631 9643 9649 9661 9677 9679 9689 9697 9719 9721 9733 9739 9743 9749 9767 9769 9781 9787 9791 9803 9811 9817 9829 9833 9839 9851 9857 9859 9871 9883 9887 9901 9907 9923 9929 9931 9941 9949 9967 9973 10007).split()) \n\n\nX = int(input())\nX -= 1\n\nwhile 1:\n  X += 1\n  if X is in primes:\n    print(X)\n    break","import math\nx = int(input())\n\na = 10 ** 6\nb = int(math.sqrt(a)+1)\np = [True]*(a+1)\np[0] = False\np[1] = False\n\nfor i in range(4, a+1, 2):\n  p[i] = False\n  \nfor i in range(3, b+1, 2):\n  if p[i]:\n    for j in range(i+i, a+1, i):\n      p[j] = False\n\nfor i in range(x, a+1):\n  if p[i]:\n    print(i)\n    break","import math\n\n# \u7d20\u6570\u5224\u5b9a\u95a2\u6570\ndef isPrime(num):\n    # 2\u672a\u6e80\u306e\u6570\u5b57\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    if num < 2: return False\n    # 2\u306f\u7d20\u6570\n    elif num == 2: return True\n    # \u5076\u6570\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    elif num % 2 == 0: return False\n\n    # 3 ~ num\u307e\u3067\u30eb\u30fc\u30d7\u3057\u3001\u9014\u4e2d\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u304c\u3042\u308b\u304b\u691c\u7d22\n    # \u9014\u4e2d\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u5408\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    for i in range(3, math.floor(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n\n    # \u7d20\u6570\n    return True\n\n# \u7d20\u6570\u5224\u5b9a\ndef callIsPrime(input_num=1000):\n    numbers = []\n    # \u30eb\u30fc\u30d7\u3057\u306a\u304c\u3089\u7d20\u6570\u3092\u691c\u7d22\u3059\u308b\n    for i in range(1, input_num):\n        if isPrime(i):\n            numbers.append(i)\n\n    # \u7d20\u6570\u914d\u5217\u3092\u8fd4\u3059\n    return numbers\n\n# \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\nprime_list = callIsPrime(100004)\n\n\nX = int(input())\n\nfor v in prime_list:\n    if X<=v:\n        print(v)\n        break","def is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\n\nif __name__ == '__main__':\n    a = int(input())\n    while(not is_prime(a)):\n        a = a+1\n    print(a)\n","def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nX = int(input())\n\nfor i in range(X, 10 ** 6):\n    check = factorization(i)\n    l = len(check)\n    if l == 1 and check[0][1] == 1:\n        print(i)\n        exit()","x = int(input())\n\nx_ = int(x ** 0.5)\n\nprime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331]\n\nidx=0\nwhile True:\n    if prime[idx+1] > x_:\n        break\n    idx += 1\nidx+=1\n\ny = x\nwhile True:\n    f = True\n    for i in prime[:idx]:\n        if y % i == 0:\n            f = False\n            break\n    if f:\n        break\n    else:\n        y += 1\n\nprint(y)","num = int(input())\n\ndef factors(x):\n  a = []\n  for i in range(1, x + 1):\n      if x % i == 0:\n          a.append(i)\n  return a\n\nf = (factors(num))\n\nif (len(f) != 2): \n  while (len(f) != 2): \n    num += 1\n    f = factors(num)\n  print (num)\nelse: \n  print (num)","X=int(input())\nfor i in range(X,10**6):\n  for j in range(2,i):\n    if i%j==0:\n      break\n    if j==i-1:\n      print(i)\n      exit()","import bisect\n\ndef sieve(n):\n  num = [True]*n\n  num[0] = num[1] = False\n  for i in range(2,int(n**0.5)+1):\n    if num[i]:\n      for j in range(i**2, n, i):\n        num[j] = False\n  return [i for i in range(2,n) if num[i]]\n      \nx = int(input())\n\np = sieve(10**5+4)\n\nindex = bisect.bisect_left(p,x)\n\nprint(p[index])","def sosu(x):\n    for i in range(2,int(x**0.5)):\n        if x%i==0:\n            return False\n    else:\n        return True\n\nx=int(input())\nfor i in range(x,10**6):\n    if sosu(i)==True:\n        print(i)\n        break","import math\nx = int(input())\n\ndef isPrime(x):\n    for i in range(2,int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor i in range(100000):\n    if isPrime(x+i):\n        break\n    else:\n        continue\nprint(x+i)\n","x = int(input())\nprimes = [True for _ in range(2*x)]\nfor i in range(2,len(primes)):\n    if primes[i]:\n        index = 2\n        while i * index < len(primes):\n            primes[i * index] = False\n            index+=1\n\nfor num in range(2,len(primes)):\n    if primes[num] and num >= x:\n        print(num)\n        break","def main():\n\tx = int(input())\n\twhile not IsPrime(x):\n\t\tx += 1\n\tprint(x)\n\ndef IsPrime(n):\n\tif n < 2:\n\t\treturn False\n\telif n == 2:\n\t\treturn True\n\telif n % 2 == 0:\n\t\treturn False\n\t\n\tsqrtN = int(n**0.5)\n\tfor i in range(3, sqrtN, 2):\n\t\tif n%i == 0:\n\t\t\treturn False\n\treturn True\n\nif __name__ == '__main__':\n\tmain()\n","x=int(input())\nwhile 1:\n    for i in range(2,x):\n        if x%i==0:\n            x+=1\n            break\n    else:\n        break\nprint(x)","X = int(input())\ndone = False\nnum = X - 1\n\nwhile not done:\n    num += 1\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            done = True\n\nprint(num)","from collections import deque\n\nX = int(input())\nN = 10**5+4\nN_sq=N**(1\/2)\n\ncheck = deque(range(2,N+1))\nsearch = deque([])\n\nfor n in range(N):\n    if len(check)<=0:\n        break\n        \n    c = check.popleft()\n    search.append(c)\n\n    check = deque([ _ for _ in check if _%c != 0])\n    \n    if c > N_sq:\n        search.extend(check)\n        break\n        \nfor s in search:\n    if X <= s:\n        print(s)\n        break\n","x = int(input())\nflag = False\nwhile not flag:\n    n = x\n    cnt = 0\n    for i in range(2, int(n**0.5+1)):\n        if n % i == 0:\n            cnt += 1\n    if cnt == 0:\n        print(n)\n        flag = True\n    else:\n        x += 1\n","n = int(input())\n\ndef prime_or(num):\n    mx = int(num**(1\/2))\n    \n    for i in range(2,mx):\n        if(num%i == 0):\n            return 0\n    \n    return 1\n    \nflag = 0\nst = n\nwhile True:\n    if(prime_or(st)==1):\n        print(st)\n        break\n    else:\n        st += 1","# coding: utf-8\n\ndef is_prime2(q,k=100):\n  q = abs(q)\n  if q == 2: return True\n  if q < 2 or q&1 == 0: return False\n  for i in xrange(3,k):\n    x,y = q,i\n    while y:\n      x, y =  y, x % y\n    if x != 1: continue\n    if pow(i, q-1, q) != 1:\n      return False\n  return True\n\nX = int(input())\n\nfor i in range(X,10**5+4):\n  if is_prime(i):\n    print(i)\n    exit()","import math\n\nX = int(input())\nmax_n = int(math.sqrt(X))\n\n\ndef solve(x):\n    if x == 2:\n        return 2\n    if x % 2 == 0:\n        x += 1\n\n    for i in range(x, 200001, 2):\n        is_prime = True\n        for j in range(3, max_n+1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return i\n\n\nprint(solve(X))\n","import math\ndef get_primenumber(number):\n    prime_list = []\n    search_list = list(range(2,10**6+1))\n    while True:\n      if search_list[0] > math.sqrt(number):\n        prime_list.extend(search_list)\n        break\n      else:\n        head_num = search_list[0]\n        prime_list.append(head_num)\n        search_list.pop(0)\n        search_list = [num for num in search_list if num % head_num != 0]\n    return prime_list\n\nx = int(input())\nh = get_primenumber(x)\nfor i in h:\n    if i >= x:\n        print(i)\n        exit()","import math\n\ndef getPrimes(X):\n    primes = []\n    limit = math.sqrt(X)\n    data = [i + 1 for i in range(1, X)]\n    while True:\n        p = data[0]\n        if limit <= p:\n            return primes + data\n        primes.append(p)\n        data = [d for d in data if d % p != 0]\n\ndef getNextPrime(primes, X):\n    while True:\n        if any([X % p == 0 for p in primes]):\n            X += 1\n        else:\n            return X\n        \n        \nX = int(input())\nprimes = getPrimes(X)\nprint(getNextPrime(primes, X))","X=int(input())\ny=0\nif X==2:\n  print(X)\nelse:\n  for i in range(2,X):\n    if X%i==0:\n      X+=1\n  print(X)","X = int(input())\ndef is_prime(n):\n    if n == 2: return True\n    if n < 2 or n%2 == 0: return False\n    m = 3\n    while m*m <= n:\n        if n%m == 0: return False\n        m += 2\n    return True\n\nwhile True:\n    if is_prime(X):\n        print(X)\n        exit()\n    X += 1","x = int(input())\n\nimport math\n\nwhile True:\n  is_prime = True\n  for i in range(2, int(math.sqrt(x))+1):\n    if x % i == 0:\n      is_prime = False\n  if is_prime:\n    print(x)\n    break\n  x += 1","def isprime(n):\n    judgement = True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            judgement = False\n            break\n    return judgement\n\n\nx = int(input())\n\nwhile True:\n    if isprime(x):\n        answer = x\n        print(answer)\n        exit()\n    else:\n        x += 1\n","x = int(input())\n\nlp = [0] * 1000005\nfor i in range(2, 100005):\n    if lp[i] == 1:\n        continue\n    if x < i:\n        print(i)\n        break\n\n    k = i*i\n    while k < 1000005:\n        lp[k] = 1\n        k += i\n","import math\n\ndef aa(n):\n    if n==1:\n        return False\n    else:\n        for i in range(2,int(n**0.5)+1):\n            if n % i ==0:\n              return False\n        return True\n      \nx = int(input())\n\nwhile aa(x)== False:\n    x +=1\n    \nprint(x)","x = int(input())\nfor i in range(x,10**5 +4):\n    for p in range(2, int(x**(1\/2)+1)):\n        if i%p == 0 :\n            break\n    else:\n        print(i)\n        break","import sys\nfrom bisect import bisect_left\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    X = int(readline())\n\n    while not is_prime(X):\n        X += 1\n\n    print(X)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","x=int(input())\nwhile(x%i<1 for i in range(2,x)):\n  x+=1\n\nprint(x)\n","import math\nX = int(input())\n\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\n\tif n == 2:\n\t\treturn True\n\n\tif n%2 == 0:\n\t\treturn False\n\n\tfor i in range(3,math.ceil(math.sqrt(n)),2):\n\t\tif n%i == 0:\n\t\t\treturn False\n\n\treturn True\n\ninf = 10**20\nif is_prime(X) == True:\n\tprint(X)\n\nelse:\n\tfor i in range(X+1,inf):\n\t\tif is_prime(i) == True:\n\t\t\tprint(i)\n\t\t\tbreak\n","x = int(input())\n\nfor i in range(x, 10**5 + 4):\n    flag = True\n    for j in range(2, i):\n        if (i % j == 0):\n            flag = False\n            continue\n    if flag:\n        print(i)\n        break\n    else:\n        continue\n            \n","import math\n\nx = int(input())\n\nj = True\n\ndef isPrime(a):\n  for i in range(2, int(math.sqrt(a)+1)):\n    if a % i == 0:\n      return True\n  \n  return False\n\nwhile j:\n  j = isPrime(x)\n  x += 1\n  \nprint(x-1)"],"raw_generations":["a = int(input())\ndef hantei(x):\n    k = 0\n    for i in range(2, x\/\/2):\n        if x % i == 0:\n            k += 1\n    if k ==0:\n        return x\n\nc = True\nwhile c:\n    hantei(a)\n    b = hantei(a)\n    if b is not None:\n        print(b)\n        c = False\n    elif b is None:\n        a += 1","import sys\n\nx = int(input())\nnums = [i for i in range(1, 100004, 2)]\ndel nums[0]\nif x == 2:\n    print(2)\n    sys.exit()\nwhile nums:\n    primal = nums.pop(0)\n    if primal >= x:\n        print(primal)\n        break\n    nums = [num for num in nums if num % primal != 0]\n","from bisect import bisect_left\n\n\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\nx = int(input())\np = primes(100100)\nprint(p[bisect_left(p, x)])","x=int(input())\n#n,m=map(int,input().split())\n#pl=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\nimport math\n\nwhile True:\n    flag=True\n    for i in range(2,int(math.sqrt(x))+1):\n        if x%i==0:\n            flag=False\n            break    \n    if flag:\n        break\n    else:\n        x+=1\nprint(x)\n\n","import math\ndef is_prime(N):\n    if N == 1:\n      return False\n    for k in range(2, int(math.sqrt(N))+1):\n      if N % k == 0:\n          return False\n    return True\n  \nx = int(input())\nfor i in range(x+1, 2*10**7):\n  if is_prime(i):\n    print(i)\n    exit()","def prime_num(n):\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            return 1\n        f += 2\n    return 0\n\nx = int(input())\nif x == 2:\n    print(x)\n    exit()\nprime = (x\/\/2)*2 + 1\nwhile 1 == 1:\n    if prime_num(prime) == 0:\n        print(prime)\n        exit()\n    prime += 2","X = int(input())\n\n\ndef is_prime(q):\n    q = abs(q)\n    if q == 2:\n        return True\n    if q < 2 or q & 1 == 0:\n        return False\n    return pow(2, q - 1, q) == 1\n\n\ndef solve(X):\n    judge = False\n    while not judge:\n        if (is_prime(X)):\n            return X\n        X += 1\n\n\nprint(solve(X))\n","def isPrime(x):\n  for i in range(2,int(x**0.5)+1):\n    if x%i==0:\n      return False\n  return True\n\nn = int(input())\n\nfor i in range(n,10**5):\n  if isPrime(i):\n    print(i)\n    break\n","import sys\nfrom collections import deque\n#import numpy as np\nimport math\n#sys.setrecursionlimit(10**6)\ndef S(): return sys.stdin.readline().rstrip()\ndef SL(): return map(str,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef IL(): return map(int,sys.stdin.readline().rstrip().split())\n\ndef solve():\n    exclude = set()\n    prime = set()\n    for i in range(2,int(math.sqrt(x))+1):\n        if i in exclude:\n            continue\n        prime.add(i)\n        j = i\n        while j<=math.sqrt(x):\n            exclude.add(j)\n            j += i\n    current = x\n    while True:\n        for rep in prime:\n            if current%rep==0:\n                break\n        else:\n            print(current)\n            return\n        current += 1\n    return\n\nif __name__=='__main__':\n    x = I()\n    solve()","n=int(input())\n\nprimelist=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991,100003]\ni=0\nwhile True:\n    if n==2:\n        print(2)\n        break\n    elif primelist[i]<n and n<=primelist[i+1]:\n        print(primelist[i+1])\n        break\n    else:\n        i+=1\n","x=int(input())\nps=[2]\ni=3\nwhile ps[-1] < x:\n    for p in ps:\n        if i%p==0:\n            break\n        elif i<p**2:\n            ps.append(i)\n            break\n    i+=2\nprint(ps[-1])","x = int(input())\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nfor i in range(x, 10 ** 9):\n    if is_prime(i):\n        print(i)\n        exit()\n","from bisect import bisect_left\n\nX = int(input())\n\nN = 10 ** 6 + 10\n# N = int(input())\ndef primes(n):\n    import math\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\nprime_lst = primes(N)\n\ntmp = bisect_left(prime_lst, X)\nprint (prime_lst[tmp])","x = int(input())\nflg = 0\n_flg = 1\nwhile flg == 0:\n    mx  = int(x**0.5)\n    for i in range(2, mx+1):\n        if x % i == 0:\n            _flg = 0\n            break\n    fig = _flg\n    if flg == 0:\n        x+=1\nprint(x)\n","x=int(input())\nl=[]\nif x==2:\n    print(2)\n    exit()\nfor i in range(2,x):\n    for j in l:\n        if i%j==0:break\n    else:\n        l.append(i)\nif x%2==0:x+=1\nwhile True:\n    for i in l:\n        if x%i==0:\n            x+=2\n            break\n    else:\n        break\nprint(x)","X = int(input())\nfrom sympy import primerange, sieve\nL = list(sieve.primerange(X, 10**5))\nprint(L[0])","from sympy import sieve\n \ndef Eratosthenes(n):\n    li = [i for i in range(2,n+1)]\n    judge = [True for i in range(n+1)]\n    ans = []\n \n    for i in range(2,n+1):\n        if judge[i] == True:\n            for j in range(i*2,n+1,i):\n                judge[j] = False\n            ans.append(i)\n    return ans\n \nx = int(input())\nl = Eratosthenes(10 ** 6)\nfor i in l:\n    if i >= x:\n        print(i)\n        exit()","import sys\ninput = sys.stdin.readline\n\n\nx = int(input())\n\nprime = [True] * (1000000)\nprime[2] = True\n\ndef e_prime(x):\n\ti = 2\n\tflag = False\n\twhile True:\n\t\tif prime[i]:\n\t\t\tif(flag==True):\n\t\t\t\treturn i\n\t\t\telse:\n\t\t\t\tfor j in range(i**2,len(prime),i):\n\t\t\t\t\tprime[j]=False\n\t\ti+=1\n\t\tif(i==x):flag=True\n\nprint(e_prime(x))","import math\nimport sys\ninput = sys.stdin.readline\n\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\ndef main():\n    X = int(input())\n    for i in range(X, 100004):\n        if is_prime(i):\n            print(i)\n            break\n\nif __name__ == '__main__': main()","n = int(input())\n\n\nwhile 1:\n    prime_dc = 0\n    for i in range(2,n):\n        if n % i != 0:\n            prime_dc += 1\n            \n    if n-2 == prime_dc:\n        break\n    \n    n += 1\n\nprint(n)","x = int(input())\nwhile True:\n    if x % 2 != 0:    \n        for m in range(3,x,2):\n            if x % m == 0:\n                break\n        else:\n            break\n    x += 1\nprint (x)","import math\n\ndef IsP(n):\n    s = int(math.ceil(math.sqrt(x)))\n    for i in range(2,s+1):\n        if(n%i == 0):\n            return 0\n    return 1\n\nx = int(input())\n\nwhile(IsP(x)==0):\n    x +=1\nprint(x)\n","x = int(input())\n\ndef is_prime(q):\n    if q == 2:\n        return True\n    if q < 2 or q & 1 == 0:\n        return False\n    return pow(2, q-1, q) == 1\n\ni = 0\nwhile True:\n    if is_prime(x+i):\n        break\n    i += 1\n\nprint(x+i)\n","def isPrime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    k = 3\n    while k < x:\n        if x % k == 0:\n            return False\n        k += 2\n    return True\n    \nX = int(input())\n\nwhile True:\n    if isPrime(X):\n        print(X)\n        exit(0)\n    X += 1\n","X = int(input())\nif X == 2:\n    print(X)\n    exit()\ntemp = 2\nfor i in range(X, 1000000):\n    for j in range(2, X):\n        if i % j == 0:\n            break\n        if j == X-1:\n            print(i)\n            exit()","x=int(input())\ndef eratosthenes(n):\n  l0=list(range(2,n+1))\n  l1=[1]*(n+1)\n  l1[0]=0\n  l1[1]=0\n  for li in l0:\n    if li>int(n**0.5):\n      break\n    if l1[li]==1:\n      k=2\n      while k*li<=n:\n        l1[k*li]=0\n        k+=1\n  ret=[i for i,li in enumerate(l1) if li==1]\n  return ret\na=eratosthenes(x)\nwhile True:\n  flg=True\n  for ai in a:\n    if x%ai==0:\n      flg=False\n      break\n  if flg:\n    print(x)\n    exit()\n  x+=1\n","x = int(input())\ndef primechecker(n):\n    if n != 2:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n                break\n        return True\n    else:\n        return True\n#\nwhile primechecker(x) == False:\n    x += 1\n\nprint(x)\n","n = int(input())\n\ndef isprime(x):\n    if x == 2:\n        return True\n    elif x == 4:\n        return False\n    for i in range(3, int(x**0.5), 2):\n        if x % i == 0:\n            return False\n    return True\n\ni = n\nwhile True:\n    if isprime(i):\n        break\n    else:\n        i += 1\nprint(i)","from math import sqrt\ndef judge(num):\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(sqrt(num))+1,2):\n            if num % i == 0:\n                return False\n        return True\ns = int(input()) \nwhile(1):\n    if judge(s):\n        print(s)\n        break\n    else:\n        s += 1","def isp(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            x += 1\n            return isp(x)\n        else:\n            pass\n    return x\nn = int(input())\nprint(isp(n))","def isprime(x):\n    if x <= 1:\n        return False\n    else:\n        i = 2\n        while i*i <= x:\n            if x % i == 0:\n                return False\n            i += 1\n        return True\n\nX = int(input())\nwhile not(isprime(X)):\n    X += 1\nprint(X)\n    ","X = int(input())\n\nprime = [True for i in range(10**6)]\nprime[0] = False\nprime[1] = False\n\nfor i in range(2, 10**5+4):\n  if prime[i]:\n    for j in range(2, (10**5+4)\/\/i + 1):\n        prime[i*j] = False\nfor i, is_prime in enumerate(prime):\n  if i >= X and is_prime:\n    ret = i\n    break\n    \nprint(ret)","x = int(input())\n\ndef is_prime(n):\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        if n % i == 0:\n            return False\n    return n != 1\n\n\nsosu = False\n\nwhile sosu==False:\n    sosu = is_prime(x)\n    x += 1\n\nprint(x-1)","def com(_x):\n    _flg = 1\n    mx  = int(_x**0.5)\n    for i in range(2, mx+1):\n        if _x % i == 0:\n            _flg = 0\n            break\n    return _flg\n\n\nx = int(input())\nflg = 0\nwhile flg == 0:\n    #print(\"a\")\n    flg = com(x)\n    if flg == 0:\n        x+=1\nprint(x)\n","x=int(input())\n\nflag=0\nfor i in range(x,10**18):\n  for p in range(2,i):\n    if i%p==0:\n      break\n  else:\n    print(i)\n    break","import math\nfrom bisect import bisect_left\n\nX = int(input())\n\ndef primes_ref(x):\n    if x < 2: return []\n\n    primes = [i for i in range(x)]\n    primes[1] = 0\n    x_sqrt = math.sqrt(x)\n\n    for prime in primes:\n        if prime == 0: continue \n        if prime > x_sqrt: break\n        for non_prime in range(2 * prime, x, prime): primes[non_prime] = 0\n\n    return [prime for prime in primes if prime != 0]\n\ndef find_ge(a, x):\n  i = bisect_left(a, x)\n  if i != len(a):\n    return a[i]\n  raise ValueError\n\nprimes = primes_ref(min(X * X, 100004))\nprint(find_ge(primes, X))","import math\nimport sys\n\ndef eratosthenes(limit):\n    A = [i for i in range(2, limit+1)]\n    P = []\n    time = 0\n    \n    while True:\n        prime = min(A)\n        \n        if prime > math.sqrt(limit):\n            break\n            \n        P.append(prime)\n            \n        i = 0\n        while i < len(A):\n            if A[i] % prime == 0:\n                A.pop(i)\n                continue\n            i += 1\n            \n    for a in A:\n        P.append(a)\n            \n    return P\n\nX = int(input())\nfor i in eratosthenes(100003):\n    if i >= X:\n        print(i)\n        sys.exit()","x=int(input())\nif x==2:\n    print(2)\nelse:\n    tmp=x\n    flag=False\n    while True:\n        for i in range(2,tmp):\n            if tmp%i==0:\n                break\n            if i==tmp-1:\n                flag=True\n        if flag:\n            break\n        else:\n            flag=False\n            tmp+=1\n    print(tmp)","import math\na=int(input())\n\n# \u6574\u6570x\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\ndef is_prime(x):\n    if x < 2: return False # 2\u672a\u6e80\u306b\u7d20\u6570\u306f\u306a\u3044\n    if x == 2 or x == 3 or x == 5: return True # 2,3,5\u306f\u7d20\u6570\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0: return False # 2,3,5\u306e\u500d\u6570\u306f\u5408\u6210\u6570\n\n    # \u305f\u3081\u3057\u5272\u308a: \u7591\u4f3c\u7d20\u6570(2\u3067\u30823\u3067\u30825\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u6570\u5b57)\u3067\u6b21\u3005\u306b\u5272\u3063\u3066\u3044\u304f\n    prime = 7\n    step = 4\n    while prime <= math.sqrt(x):\n        if x % prime == 0: return False\n\n        prime += step\n        step = 6 - step\n\n    return True\n\nfor i in range(a,a+10**5):\n    if is_prime(i):\n        print(i)\n        break","x=int(input())\nimport math\ndef is_prime(n):\n    if n==1:\n        return False\n    for divisor in range(2,int(math.sqrt(n))+1):\n        if n%divisor == 0:\n            return False\n    return True\n\nk=0\nwhile True:\n    if is_prime(x+k):\n        print(x+k)\n        break\n    else:\n        k += 1","# Original Submission At: https:\/\/atcoder.jp\/contests\/abc149\/submissions\/16823042\nimport sys\nsys.setrecursionlimit(1000000)\n\nx= int(input())\n\ndef prime_check(num,count):\n    if (num % count) != 0:\n        if num <= count**2:\n            print(num)\n        else:\n            prime_check(num,count+1)\n    else :\n        prime_check(num+1,2)\n\nif x==2 :\n    print (2)\nelse:\n    prime_check(x,2)\n","# -*- coding: utf-8 -*-\nX = int(input())\nans = 0\npn = [2]\nflag = 0\nfor i in range(3,100005):\n  for k in pn:\n    if i%k == 0:\n      flag = 0\n      break\n    else:\n      flag = 1\n  if flag == 1:\n    pn.append(i)\nfor i in range(len(pn)-1):\n  if pn[i] < X < pn[i+1]:\n    ans = pn[i+1]\nprint(ans)","for i in range(int(input()),100004):\n  for j in range(2, i):\n    if i % j == 0:\n      break\n  else:\n    print(i)\n    break","X = int(input())\nX = X + 1\nprime = None\nwhile True:\n    for i in range(2, X):\n        if X % i == 0:\n            break\n    else:\n        prime = X\n    if prime != None:\n        break\n    else:\n        X += 1\n\nprint(X)","import sys\n#import numpy as np\nstdin = sys.stdin\n\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split())) # applies to numbers only\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nX = ri()\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\nl = set(primes(10**6))\n\nwhile True:\n    if X in l:\n        print(X)\n        exit()\n    X += 1","import sys\nimport  math\nimport fractions\nfrom collections import defaultdict\nstdin = sys.stdin\n     \nns = lambda: stdin.readline().rstrip()\nni = lambda: int(stdin.readline().rstrip())\nnm = lambda: map(int, stdin.readline().split())\nnl = lambda: list(map(int, stdin.readline().split()))\n\n\n\nX=int(input())\n\nprime_l=[0]*(2*X)\nfor  i in range(2,X):\n    if(prime_l[i]==0):\n        for j in range(1,(2*X)\/\/i):\n            prime_l[i*j]+=1\n        \nwhile(1):\n    X+=1\n    if(prime_l[X]==0):\n        print(X)\n        sys.exit(0)\n","def miller_rabin(n, k=100):\n    import random\n    if n == 2:\n        return True\n    if n == 1 or n & 1 == 0:\n        return False\n    d = (n - 1) >> 1\n    while d & 1 == 0:\n        d >>= 1\n    for _ in range(k):\n        a = random.randint(1, n - 1)\n        t = d\n        y = pow(a, t, n)\n        while t != n - 1 and y != 1 and y != n - 1:\n            y = (y * y) % n\n            t <<= 1\n        if y != n - 1 and t & 1 == 0:\n            return False\n    return True\ndef main():\n  x=int(input())\n  for i in range(x+1,1000000):\n    if miller_rabin(i):\n      print(i)\n      return\nmain()","a=input()\n\ndef prime(n):\n  if n <= 1:\n    return False\n  else:\n    for i in range(2,n):\n      if n%i == 0:\n      \treturn False\n      return True\n    \nwhile prime(a)==False:\n  a += 1\n\nprint(a)","M = 10 ** 6\ne = 10 ** 3\n\n# the sieve of Eratosthenes\nprimes = [True] * (M + 1)\nprimes[0] = False\nprimes[1] = False\nfor i in range(2, e):\n    if primes[i]:\n        for j in range(i * 2, M + 1, i):\n            primes[j] = False\n\nX = int(input())\n\nprint(X + primes[X:].index(1))","\nX=int(input())\nif X==2:\n  print(X)\nelse:\n  for i in range(2,X**(1\/2)):\n    if X%i==0:\n      X+=1\n  print(X)\n","from bisect import bisect_right\nINFTY = 10**5\nP = [1 for _ in range(INFTY)]\nP[0]=0\nP[1]=0\nfor i in range(2,int(INFTY**0.5)+1):\n    for j in range(i*i,INFTY,i):\n        P[j] = 0\nQ = []\nfor i in range(INFTY):\n    if P[i]==1:\n        Q.append(i)\nX = int(input())\nind = bisect_right(Q,X)\nprint(Q[ind])","X = int(input())\n\ni = X\n\nwhile 1:\n    if i == 2:\n        print(2)\n        exit()\n    if i % 2 == 0:\n        pass\n    else:\n        for j in range(2, i):\n            if i % j == 0:\n                break\n\n            if j == i-1:\n                print(i)\n                exit()\n    i += 1","import math\nn = int(input())\n\ndef check(s):\n\tif s == 1:\n\t\treturn False\n\tfor i in range(2, int(math.sqrt(s)) + 1):\n\t\tif s%i == 0:\n\t\t\treturn False\n\treturn True\n\nfor i in range(n,10**6):\n\tif check(i):\n\t\tprint (i)\n\t\texit()\n","import math\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\n\nx = int(input())\n\nif x == 2:\n    print(x)\n    exit()\n\nif x % 2 == 0:\n    x += 1\n\nwhile not is_prime(x):\n    x += 2\n\nprint(x)\n","#!\/usr\/bin\/env python3\n\ndef main():\n    x = int(input())\n    primes = furui(300000)\n    for p in primes:\n        if x <= p:\n            print(p)\n            return\n    raise ValueError\n\n# https:\/\/mathtrain.jp\/eratosthenes\ndef furui(nmax):\n    assert nmax > 2\n    p = 2\n    primes = list(range(2, nmax + 1))\n    while True:\n        if p ** 2 > nmax:\n            break\n        primes_next = []\n        for x in primes:\n            if x <= p or x % p != 0:\n                primes_next.append(x)\n        primes = primes_next\n        p = primes[primes.index(p) + 1]\n    return primes\n\nif __name__ == \"__main__\":\n    main()\n","n = int(input())\nif n == 2:\n    n = 2\nelse:\n    while pow(2, n-1, n) != 1:\n        n += 1\nprint(n)","def is_prime(n):\n    for p in range(2,n):\n        if n % p ==0:\n            return True\n\nN =int(input())\np=N\nwhile p <10**7:\n    if is_prime(p):\n        p +=1\n    else:\n        print(p)\n        break","x=int(input())\nwhile(True):\n    for i in range(2,x):\n        if x%i==0:\n            break\n    else:\n        print(x)\n        break\n    x+=1","import math\nX=int(input())\nfor i in range(0,X):\n  a=X+i\n  c=int(math.sqrt(a))\n  for j in range(2,c):\n    if a%j!=0:\n      print(a)\nbreak\n      ","import math\nN = int(input())\n\ndef chkPrime(N):\n  if N == 2 or N == 3:\n    return True\n  else:\n    for i in range(2,int(math.sqrt(N))+1):\n      if N % i == 0:\n        return False\n    else:\n      return True\n\nwhile not chkPrime(N):\n  N += 1\n\nprint (N)\n","X = int(input())\n\nwhile True:\n  cnt = 0\n  for i in range(1, X + 1):\n    if X % i != 0:\n      continue\n    else:\n      cnt += 1\n  if cnt == 2:\n    print(X)\n    exit()\n  X += 1","X=int(input())\ndef is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\nflag=False\nwhile(flag==False):\n    if is_prime(X):\n        print(X)\n        flag=True\n        break\n    X+=1","x = int(input())\n\nimport math\n\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\nfor i in range(x, x +1000):\n    if is_prime(i) == True:\n        print(i)\n        break","X = int(input())\n\ndef is_prime(n):\n    if n <= 1:\n        return False   \n    else:\n        for i in range(2, n):\n            if n%i==0:\n                return False\n        return True\n\nwhile is_prime(X)==False:\n    X += 1\n","x=int(input())\n\ndef is_prime(x):\n    if x==2:\n        return 1\n    if x<2 or x%2==0:\n        return 0\n    i=3\n    while i<=x**0.5:\n        if x%i==0:\n            return 0\n        i+=2\n    return 1\nfor i in range(x,x+10**5):\n    if is_prime(i):\n        print(i)\n        exit()\n        \n","import sys\nimport math\ndef is_prime(num):\n    if num < 2:\n        return False\n    else:\n        num_sqrt = math.floor(math.sqrt(num))\n        for prime in range(2, num_sqrt + 1):\n            if num % prime == 0:\n                return False\n                break\n        return True\n\ndef main():\n    x = int(input())\n    i = x\n    while True:\n        if is_prime(i) == True:\n            print(i)\n            sys.exit()\n        i = i + 1\n\n\nif __name__ == '__main__':\n    main()","primes = listsplit()) \n\n\nX = int(input())\nX -= 1\n\nwhile 1:\n  X += 1\n  if X is in primes:\n    print(X)\n    break","import math\nx = int(input())\n\na = 10 ** 6\nb = int(math.sqrt(a)+1)\np = [True]*(a+1)\np[0] = False\np[1] = False\n\nfor i in range(4, a+1, 2):\n  p[i] = False\n  \nfor i in range(3, b+1, 2):\n  if p[i]:\n    for j in range(i+i, a+1, i):\n      p[j] = False\n\nfor i in range(x, a+1):\n  if p[i]:\n    print(i)\n    break","import math\n\n# \u7d20\u6570\u5224\u5b9a\u95a2\u6570\ndef isPrime(num):\n    # 2\u672a\u6e80\u306e\u6570\u5b57\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    if num < 2: return False\n    # 2\u306f\u7d20\u6570\n    elif num == 2: return True\n    # \u5076\u6570\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    elif num % 2 == 0: return False\n\n    # 3 ~ num\u307e\u3067\u30eb\u30fc\u30d7\u3057\u3001\u9014\u4e2d\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u304c\u3042\u308b\u304b\u691c\u7d22\n    # \u9014\u4e2d\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u5408\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    for i in range(3, math.floor(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n\n    # \u7d20\u6570\n    return True\n\n# \u7d20\u6570\u5224\u5b9a\ndef callIsPrime(input_num=1000):\n    numbers = []\n    # \u30eb\u30fc\u30d7\u3057\u306a\u304c\u3089\u7d20\u6570\u3092\u691c\u7d22\u3059\u308b\n    for i in range(1, input_num):\n        if isPrime(i):\n            numbers.append(i)\n\n    # \u7d20\u6570\u914d\u5217\u3092\u8fd4\u3059\n    return numbers\n\n# \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\nprime_list = callIsPrime(100004)\n\n\nX = int(input())\n\nfor v in prime_list:\n    if X<=v:\n        print(v)\n        break","def is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\n\nif __name__ == '__main__':\n    a = int(input())\n    while(not is_prime(a)):\n        a = a+1\n    print(a)\n","def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nX = int(input())\n\nfor i in range(X, 10 ** 6):\n    check = factorization(i)\n    l = len(check)\n    if l == 1 and check[0][1] == 1:\n        print(i)\n        exit()","x = int(input())\n\nx_ = int(x ** 0.5)\n\nprime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331]\n\nidx=0\nwhile True:\n    if prime[idx+1] > x_:\n        break\n    idx += 1\nidx+=1\n\ny = x\nwhile True:\n    f = True\n    for i in prime[:idx]:\n        if y % i == 0:\n            f = False\n            break\n    if f:\n        break\n    else:\n        y += 1\n\nprint(y)","num = int(input())\n\ndef factors(x):\n  a = []\n  for i in range(1, x + 1):\n      if x % i == 0:\n          a.append(i)\n  return a\n\nf = (factors(num))\n\nif (len(f) != 2): \n  while (len(f) != 2): \n    num += 1\n    f = factors(num)\n  print (num)\nelse: \n  print (num)","X=int(input())\nfor i in range(X,10**6):\n  for j in range(2,i):\n    if i%j==0:\n      break\n    if j==i-1:\n      print(i)\n      exit()","import bisect\n\ndef sieve(n):\n  num = [True]*n\n  num[0] = num[1] = False\n  for i in range(2,int(n**0.5)+1):\n    if num[i]:\n      for j in range(i**2, n, i):\n        num[j] = False\n  return [i for i in range(2,n) if num[i]]\n      \nx = int(input())\n\np = sieve(10**5+4)\n\nindex = bisect.bisect_left(p,x)\n\nprint(p[index])","def sosu(x):\n    for i in range(2,int(x**0.5)):\n        if x%i==0:\n            return False\n    else:\n        return True\n\nx=int(input())\nfor i in range(x,10**6):\n    if sosu(i)==True:\n        print(i)\n        break","import math\nx = int(input())\n\ndef isPrime(x):\n    for i in range(2,int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor i in range(100000):\n    if isPrime(x+i):\n        break\n    else:\n        continue\nprint(x+i)\n","x = int(input())\nprimes = [True for _ in range(2*x)]\nfor i in range(2,len(primes)):\n    if primes[i]:\n        index = 2\n        while i * index < len(primes):\n            primes[i * index] = False\n            index+=1\n\nfor num in range(2,len(primes)):\n    if primes[num] and num >= x:\n        print(num)\n        break","def main():\n\tx = int(input())\n\twhile not IsPrime(x):\n\t\tx += 1\n\tprint(x)\n\ndef IsPrime(n):\n\tif n < 2:\n\t\treturn False\n\telif n == 2:\n\t\treturn True\n\telif n % 2 == 0:\n\t\treturn False\n\t\n\tsqrtN = int(n**0.5)\n\tfor i in range(3, sqrtN, 2):\n\t\tif n%i == 0:\n\t\t\treturn False\n\treturn True\n\nif __name__ == '__main__':\n\tmain()\n","x=int(input())\nwhile 1:\n    for i in range(2,x):\n        if x%i==0:\n            x+=1\n            break\n    else:\n        break\nprint(x)","X = int(input())\ndone = False\nnum = X - 1\n\nwhile not done:\n    num += 1\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            done = True\n\nprint(num)","from collections import deque\n\nX = int(input())\nN = 10**5+4\nN_sq=N**(1\/2)\n\ncheck = deque(range(2,N+1))\nsearch = deque([])\n\nfor n in range(N):\n    if len(check)<=0:\n        break\n        \n    c = check.popleft()\n    search.append(c)\n\n    check = deque([ _ for _ in check if _%c != 0])\n    \n    if c > N_sq:\n        search.extend(check)\n        break\n        \nfor s in search:\n    if X <= s:\n        print(s)\n        break\n","x = int(input())\nflag = False\nwhile not flag:\n    n = x\n    cnt = 0\n    for i in range(2, int(n**0.5+1)):\n        if n % i == 0:\n            cnt += 1\n    if cnt == 0:\n        print(n)\n        flag = True\n    else:\n        x += 1\n","n = int(input())\n\ndef prime_or(num):\n    mx = int(num**(1\/2))\n    \n    for i in range(2,mx):\n        if(num%i == 0):\n            return 0\n    \n    return 1\n    \nflag = 0\nst = n\nwhile True:\n    if(prime_or(st)==1):\n        print(st)\n        break\n    else:\n        st += 1","# coding: utf-8\n\ndef is_prime2(q,k=100):\n  q = abs(q)\n  if q == 2: return True\n  if q < 2 or q&1 == 0: return False\n  for i in xrange(3,k):\n    x,y = q,i\n    while y:\n      x, y =  y, x % y\n    if x != 1: continue\n    if pow(i, q-1, q) != 1:\n      return False\n  return True\n\nX = int(input())\n\nfor i in range(X,10**5+4):\n  if is_prime(i):\n    print(i)\n    exit()","import math\n\nX = int(input())\nmax_n = int(math.sqrt(X))\n\n\ndef solve(x):\n    if x == 2:\n        return 2\n    if x % 2 == 0:\n        x += 1\n\n    for i in range(x, 200001, 2):\n        is_prime = True\n        for j in range(3, max_n+1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return i\n\n\nprint(solve(X))\n","import math\ndef get_primenumber(number):\n    prime_list = []\n    search_list = list(range(2,10**6+1))\n    while True:\n      if search_list[0] > math.sqrt(number):\n        prime_list.extend(search_list)\n        break\n      else:\n        head_num = search_list[0]\n        prime_list.append(head_num)\n        search_list.pop(0)\n        search_list = [num for num in search_list if num % head_num != 0]\n    return prime_list\n\nx = int(input())\nh = get_primenumber(x)\nfor i in h:\n    if i >= x:\n        print(i)\n        exit()","import math\n\ndef getPrimes(X):\n    primes = []\n    limit = math.sqrt(X)\n    data = [i + 1 for i in range(1, X)]\n    while True:\n        p = data[0]\n        if limit <= p:\n            return primes + data\n        primes.append(p)\n        data = [d for d in data if d % p != 0]\n\ndef getNextPrime(primes, X):\n    while True:\n        if any([X % p == 0 for p in primes]):\n            X += 1\n        else:\n            return X\n        \n        \nX = int(input())\nprimes = getPrimes(X)\nprint(getNextPrime(primes, X))","X=int(input())\ny=0\nif X==2:\n  print(X)\nelse:\n  for i in range(2,X):\n    if X%i==0:\n      X+=1\n  print(X)","X = int(input())\ndef is_prime(n):\n    if n == 2: return True\n    if n < 2 or n%2 == 0: return False\n    m = 3\n    while m*m <= n:\n        if n%m == 0: return False\n        m += 2\n    return True\n\nwhile True:\n    if is_prime(X):\n        print(X)\n        exit()\n    X += 1","x = int(input())\n\nimport math\n\nwhile True:\n  is_prime = True\n  for i in range(2, int(math.sqrt(x))+1):\n    if x % i == 0:\n      is_prime = False\n  if is_prime:\n    print(x)\n    break\n  x += 1","def isprime(n):\n    judgement = True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            judgement = False\n            break\n    return judgement\n\n\nx = int(input())\n\nwhile True:\n    if isprime(x):\n        answer = x\n        print(answer)\n        exit()\n    else:\n        x += 1\n","x = int(input())\n\nlp = [0] * 1000005\nfor i in range(2, 100005):\n    if lp[i] == 1:\n        continue\n    if x < i:\n        print(i)\n        break\n\n    k = i*i\n    while k < 1000005:\n        lp[k] = 1\n        k += i\n","import math\n\ndef aa(n):\n    if n==1:\n        return False\n    else:\n        for i in range(2,int(n**0.5)+1):\n            if n % i ==0:\n              return False\n        return True\n      \nx = int(input())\n\nwhile aa(x)== False:\n    x +=1\n    \nprint(x)","x = int(input())\nfor i in range(x,10**5 +4):\n    for p in range(2, int(x**(1\/2)+1)):\n        if i%p == 0 :\n            break\n    else:\n        print(i)\n        break","import sys\nfrom bisect import bisect_left\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    X = int(readline())\n\n    while not is_prime(X):\n        X += 1\n\n    print(X)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","x=int(input())\nwhile(x%i<1 for i in range(2,x)):\n  x+=1\n\nprint(x)\n","import math\nX = int(input())\n\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\n\tif n == 2:\n\t\treturn True\n\n\tif n%2 == 0:\n\t\treturn False\n\n\tfor i in range(3,math.ceil(math.sqrt(n)),2):\n\t\tif n%i == 0:\n\t\t\treturn False\n\n\treturn True\n\ninf = 10**20\nif is_prime(X) == True:\n\tprint(X)\n\nelse:\n\tfor i in range(X+1,inf):\n\t\tif is_prime(i) == True:\n\t\t\tprint(i)\n\t\t\tbreak\n","x = int(input())\n\nfor i in range(x, 10**5 + 4):\n    flag = True\n    for j in range(2, i):\n        if (i % j == 0):\n            flag = False\n            continue\n    if flag:\n        print(i)\n        break\n    else:\n        continue\n            \n","import math\n\nx = int(input())\n\nj = True\n\ndef isPrime(a):\n  for i in range(2, int(math.sqrt(a)+1)):\n    if a % i == 0:\n      return True\n  \n  return False\n\nwhile j:\n  j = isPrime(x)\n  x += 1\n  \nprint(x-1)"],"formatted_programs":["a = int(input())\ndef hantei(x):\n    k = 0\n    for i in range(2, x\/\/2):\n        if x % i == 0:\n            k += 1\n    if k ==0:\n        return x\n\nc = True\nwhile c:\n    hantei(a)\n    b = hantei(a)\n    if b is not None:\n        print(b)\n        c = False\n    elif b is None:\n        a += 1","import sys\n\nx = int(input())\nnums = [i for i in range(1, 100004, 2)]\ndel nums[0]\nif x == 2:\n    print(2)\n    sys.exit()\nwhile nums:\n    primal = nums.pop(0)\n    if primal >= x:\n        print(primal)\n        break\n    nums = [num for num in nums if num % primal != 0]\n","from bisect import bisect_left\n\n\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\n\nx = int(input())\np = primes(100100)\nprint(p[bisect_left(p, x)])","x=int(input())\n#n,m=map(int,input().split())\n#pl=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\nimport math\n\nwhile True:\n    flag=True\n    for i in range(2,int(math.sqrt(x))+1):\n        if x%i==0:\n            flag=False\n            break    \n    if flag:\n        break\n    else:\n        x+=1\nprint(x)\n\n","import math\ndef is_prime(N):\n    if N == 1:\n      return False\n    for k in range(2, int(math.sqrt(N))+1):\n      if N % k == 0:\n          return False\n    return True\n  \nx = int(input())\nfor i in range(x+1, 2*10**7):\n  if is_prime(i):\n    print(i)\n    exit()","def prime_num(n):\n    f = 3\n    while f * f <= n:\n        if n % f == 0:\n            return 1\n        f += 2\n    return 0\n\nx = int(input())\nif x == 2:\n    print(x)\n    exit()\nprime = (x\/\/2)*2 + 1\nwhile 1 == 1:\n    if prime_num(prime) == 0:\n        print(prime)\n        exit()\n    prime += 2","X = int(input())\n\n\ndef is_prime(q):\n    q = abs(q)\n    if q == 2:\n        return True\n    if q < 2 or q & 1 == 0:\n        return False\n    return pow(2, q - 1, q) == 1\n\n\ndef solve(X):\n    judge = False\n    while not judge:\n        if (is_prime(X)):\n            return X\n        X += 1\n\n\nprint(solve(X))\n","def isPrime(x):\n  for i in range(2,int(x**0.5)+1):\n    if x%i==0:\n      return False\n  return True\n\nn = int(input())\n\nfor i in range(n,10**5):\n  if isPrime(i):\n    print(i)\n    break\n","import sys\nfrom collections import deque\n#import numpy as np\nimport math\n#sys.setrecursionlimit(10**6)\ndef S(): return sys.stdin.readline().rstrip()\ndef SL(): return map(str,sys.stdin.readline().rstrip().split())\ndef I(): return int(sys.stdin.readline().rstrip())\ndef IL(): return map(int,sys.stdin.readline().rstrip().split())\n\ndef solve():\n    exclude = set()\n    prime = set()\n    for i in range(2,int(math.sqrt(x))+1):\n        if i in exclude:\n            continue\n        prime.add(i)\n        j = i\n        while j<=math.sqrt(x):\n            exclude.add(j)\n            j += i\n    current = x\n    while True:\n        for rep in prime:\n            if current%rep==0:\n                break\n        else:\n            print(current)\n            return\n        current += 1\n    return\n\nif __name__=='__main__':\n    x = I()\n    solve()","n=int(input())\n\nprimelist=[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347, 2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423, 2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543, 2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657, 2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713, 2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801, 2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903, 2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011, 3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119, 3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221, 3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323, 3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413, 3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527, 3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607, 3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697, 3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797, 3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907, 3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003, 4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093, 4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211, 4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283, 4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409, 4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513, 4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621, 4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721, 4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813, 4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937, 4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011, 5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113, 5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233, 5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351, 5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443, 5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531, 5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653, 5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743, 5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849, 5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939, 5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073, 6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173, 6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271, 6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359, 6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473, 6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581, 6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701, 6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803, 6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907, 6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997, 7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121, 7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229, 7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349, 7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487, 7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561, 7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669, 7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757, 7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879, 7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009, 8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111, 8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231, 8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317, 8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443, 8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573, 8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677, 8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753, 8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861, 8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971, 8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091, 9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199, 9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311, 9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413, 9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491, 9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623, 9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733, 9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829, 9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929, 9931, 9941, 9949, 9967, 9973, 10007, 10009, 10037, 10039, 10061, 10067, 10069, 10079, 10091, 10093, 10099, 10103, 10111, 10133, 10139, 10141, 10151, 10159, 10163, 10169, 10177, 10181, 10193, 10211, 10223, 10243, 10247, 10253, 10259, 10267, 10271, 10273, 10289, 10301, 10303, 10313, 10321, 10331, 10333, 10337, 10343, 10357, 10369, 10391, 10399, 10427, 10429, 10433, 10453, 10457, 10459, 10463, 10477, 10487, 10499, 10501, 10513, 10529, 10531, 10559, 10567, 10589, 10597, 10601, 10607, 10613, 10627, 10631, 10639, 10651, 10657, 10663, 10667, 10687, 10691, 10709, 10711, 10723, 10729, 10733, 10739, 10753, 10771, 10781, 10789, 10799, 10831, 10837, 10847, 10853, 10859, 10861, 10867, 10883, 10889, 10891, 10903, 10909, 10937, 10939, 10949, 10957, 10973, 10979, 10987, 10993, 11003, 11027, 11047, 11057, 11059, 11069, 11071, 11083, 11087, 11093, 11113, 11117, 11119, 11131, 11149, 11159, 11161, 11171, 11173, 11177, 11197, 11213, 11239, 11243, 11251, 11257, 11261, 11273, 11279, 11287, 11299, 11311, 11317, 11321, 11329, 11351, 11353, 11369, 11383, 11393, 11399, 11411, 11423, 11437, 11443, 11447, 11467, 11471, 11483, 11489, 11491, 11497, 11503, 11519, 11527, 11549, 11551, 11579, 11587, 11593, 11597, 11617, 11621, 11633, 11657, 11677, 11681, 11689, 11699, 11701, 11717, 11719, 11731, 11743, 11777, 11779, 11783, 11789, 11801, 11807, 11813, 11821, 11827, 11831, 11833, 11839, 11863, 11867, 11887, 11897, 11903, 11909, 11923, 11927, 11933, 11939, 11941, 11953, 11959, 11969, 11971, 11981, 11987, 12007, 12011, 12037, 12041, 12043, 12049, 12071, 12073, 12097, 12101, 12107, 12109, 12113, 12119, 12143, 12149, 12157, 12161, 12163, 12197, 12203, 12211, 12227, 12239, 12241, 12251, 12253, 12263, 12269, 12277, 12281, 12289, 12301, 12323, 12329, 12343, 12347, 12373, 12377, 12379, 12391, 12401, 12409, 12413, 12421, 12433, 12437, 12451, 12457, 12473, 12479, 12487, 12491, 12497, 12503, 12511, 12517, 12527, 12539, 12541, 12547, 12553, 12569, 12577, 12583, 12589, 12601, 12611, 12613, 12619, 12637, 12641, 12647, 12653, 12659, 12671, 12689, 12697, 12703, 12713, 12721, 12739, 12743, 12757, 12763, 12781, 12791, 12799, 12809, 12821, 12823, 12829, 12841, 12853, 12889, 12893, 12899, 12907, 12911, 12917, 12919, 12923, 12941, 12953, 12959, 12967, 12973, 12979, 12983, 13001, 13003, 13007, 13009, 13033, 13037, 13043, 13049, 13063, 13093, 13099, 13103, 13109, 13121, 13127, 13147, 13151, 13159, 13163, 13171, 13177, 13183, 13187, 13217, 13219, 13229, 13241, 13249, 13259, 13267, 13291, 13297, 13309, 13313, 13327, 13331, 13337, 13339, 13367, 13381, 13397, 13399, 13411, 13417, 13421, 13441, 13451, 13457, 13463, 13469, 13477, 13487, 13499, 13513, 13523, 13537, 13553, 13567, 13577, 13591, 13597, 13613, 13619, 13627, 13633, 13649, 13669, 13679, 13681, 13687, 13691, 13693, 13697, 13709, 13711, 13721, 13723, 13729, 13751, 13757, 13759, 13763, 13781, 13789, 13799, 13807, 13829, 13831, 13841, 13859, 13873, 13877, 13879, 13883, 13901, 13903, 13907, 13913, 13921, 13931, 13933, 13963, 13967, 13997, 13999, 14009, 14011, 14029, 14033, 14051, 14057, 14071, 14081, 14083, 14087, 14107, 14143, 14149, 14153, 14159, 14173, 14177, 14197, 14207, 14221, 14243, 14249, 14251, 14281, 14293, 14303, 14321, 14323, 14327, 14341, 14347, 14369, 14387, 14389, 14401, 14407, 14411, 14419, 14423, 14431, 14437, 14447, 14449, 14461, 14479, 14489, 14503, 14519, 14533, 14537, 14543, 14549, 14551, 14557, 14561, 14563, 14591, 14593, 14621, 14627, 14629, 14633, 14639, 14653, 14657, 14669, 14683, 14699, 14713, 14717, 14723, 14731, 14737, 14741, 14747, 14753, 14759, 14767, 14771, 14779, 14783, 14797, 14813, 14821, 14827, 14831, 14843, 14851, 14867, 14869, 14879, 14887, 14891, 14897, 14923, 14929, 14939, 14947, 14951, 14957, 14969, 14983, 15013, 15017, 15031, 15053, 15061, 15073, 15077, 15083, 15091, 15101, 15107, 15121, 15131, 15137, 15139, 15149, 15161, 15173, 15187, 15193, 15199, 15217, 15227, 15233, 15241, 15259, 15263, 15269, 15271, 15277, 15287, 15289, 15299, 15307, 15313, 15319, 15329, 15331, 15349, 15359, 15361, 15373, 15377, 15383, 15391, 15401, 15413, 15427, 15439, 15443, 15451, 15461, 15467, 15473, 15493, 15497, 15511, 15527, 15541, 15551, 15559, 15569, 15581, 15583, 15601, 15607, 15619, 15629, 15641, 15643, 15647, 15649, 15661, 15667, 15671, 15679, 15683, 15727, 15731, 15733, 15737, 15739, 15749, 15761, 15767, 15773, 15787, 15791, 15797, 15803, 15809, 15817, 15823, 15859, 15877, 15881, 15887, 15889, 15901, 15907, 15913, 15919, 15923, 15937, 15959, 15971, 15973, 15991, 16001, 16007, 16033, 16057, 16061, 16063, 16067, 16069, 16073, 16087, 16091, 16097, 16103, 16111, 16127, 16139, 16141, 16183, 16187, 16189, 16193, 16217, 16223, 16229, 16231, 16249, 16253, 16267, 16273, 16301, 16319, 16333, 16339, 16349, 16361, 16363, 16369, 16381, 16411, 16417, 16421, 16427, 16433, 16447, 16451, 16453, 16477, 16481, 16487, 16493, 16519, 16529, 16547, 16553, 16561, 16567, 16573, 16603, 16607, 16619, 16631, 16633, 16649, 16651, 16657, 16661, 16673, 16691, 16693, 16699, 16703, 16729, 16741, 16747, 16759, 16763, 16787, 16811, 16823, 16829, 16831, 16843, 16871, 16879, 16883, 16889, 16901, 16903, 16921, 16927, 16931, 16937, 16943, 16963, 16979, 16981, 16987, 16993, 17011, 17021, 17027, 17029, 17033, 17041, 17047, 17053, 17077, 17093, 17099, 17107, 17117, 17123, 17137, 17159, 17167, 17183, 17189, 17191, 17203, 17207, 17209, 17231, 17239, 17257, 17291, 17293, 17299, 17317, 17321, 17327, 17333, 17341, 17351, 17359, 17377, 17383, 17387, 17389, 17393, 17401, 17417, 17419, 17431, 17443, 17449, 17467, 17471, 17477, 17483, 17489, 17491, 17497, 17509, 17519, 17539, 17551, 17569, 17573, 17579, 17581, 17597, 17599, 17609, 17623, 17627, 17657, 17659, 17669, 17681, 17683, 17707, 17713, 17729, 17737, 17747, 17749, 17761, 17783, 17789, 17791, 17807, 17827, 17837, 17839, 17851, 17863, 17881, 17891, 17903, 17909, 17911, 17921, 17923, 17929, 17939, 17957, 17959, 17971, 17977, 17981, 17987, 17989, 18013, 18041, 18043, 18047, 18049, 18059, 18061, 18077, 18089, 18097, 18119, 18121, 18127, 18131, 18133, 18143, 18149, 18169, 18181, 18191, 18199, 18211, 18217, 18223, 18229, 18233, 18251, 18253, 18257, 18269, 18287, 18289, 18301, 18307, 18311, 18313, 18329, 18341, 18353, 18367, 18371, 18379, 18397, 18401, 18413, 18427, 18433, 18439, 18443, 18451, 18457, 18461, 18481, 18493, 18503, 18517, 18521, 18523, 18539, 18541, 18553, 18583, 18587, 18593, 18617, 18637, 18661, 18671, 18679, 18691, 18701, 18713, 18719, 18731, 18743, 18749, 18757, 18773, 18787, 18793, 18797, 18803, 18839, 18859, 18869, 18899, 18911, 18913, 18917, 18919, 18947, 18959, 18973, 18979, 19001, 19009, 19013, 19031, 19037, 19051, 19069, 19073, 19079, 19081, 19087, 19121, 19139, 19141, 19157, 19163, 19181, 19183, 19207, 19211, 19213, 19219, 19231, 19237, 19249, 19259, 19267, 19273, 19289, 19301, 19309, 19319, 19333, 19373, 19379, 19381, 19387, 19391, 19403, 19417, 19421, 19423, 19427, 19429, 19433, 19441, 19447, 19457, 19463, 19469, 19471, 19477, 19483, 19489, 19501, 19507, 19531, 19541, 19543, 19553, 19559, 19571, 19577, 19583, 19597, 19603, 19609, 19661, 19681, 19687, 19697, 19699, 19709, 19717, 19727, 19739, 19751, 19753, 19759, 19763, 19777, 19793, 19801, 19813, 19819, 19841, 19843, 19853, 19861, 19867, 19889, 19891, 19913, 19919, 19927, 19937, 19949, 19961, 19963, 19973, 19979, 19991, 19993, 19997, 20011, 20021, 20023, 20029, 20047, 20051, 20063, 20071, 20089, 20101, 20107, 20113, 20117, 20123, 20129, 20143, 20147, 20149, 20161, 20173, 20177, 20183, 20201, 20219, 20231, 20233, 20249, 20261, 20269, 20287, 20297, 20323, 20327, 20333, 20341, 20347, 20353, 20357, 20359, 20369, 20389, 20393, 20399, 20407, 20411, 20431, 20441, 20443, 20477, 20479, 20483, 20507, 20509, 20521, 20533, 20543, 20549, 20551, 20563, 20593, 20599, 20611, 20627, 20639, 20641, 20663, 20681, 20693, 20707, 20717, 20719, 20731, 20743, 20747, 20749, 20753, 20759, 20771, 20773, 20789, 20807, 20809, 20849, 20857, 20873, 20879, 20887, 20897, 20899, 20903, 20921, 20929, 20939, 20947, 20959, 20963, 20981, 20983, 21001, 21011, 21013, 21017, 21019, 21023, 21031, 21059, 21061, 21067, 21089, 21101, 21107, 21121, 21139, 21143, 21149, 21157, 21163, 21169, 21179, 21187, 21191, 21193, 21211, 21221, 21227, 21247, 21269, 21277, 21283, 21313, 21317, 21319, 21323, 21341, 21347, 21377, 21379, 21383, 21391, 21397, 21401, 21407, 21419, 21433, 21467, 21481, 21487, 21491, 21493, 21499, 21503, 21517, 21521, 21523, 21529, 21557, 21559, 21563, 21569, 21577, 21587, 21589, 21599, 21601, 21611, 21613, 21617, 21647, 21649, 21661, 21673, 21683, 21701, 21713, 21727, 21737, 21739, 21751, 21757, 21767, 21773, 21787, 21799, 21803, 21817, 21821, 21839, 21841, 21851, 21859, 21863, 21871, 21881, 21893, 21911, 21929, 21937, 21943, 21961, 21977, 21991, 21997, 22003, 22013, 22027, 22031, 22037, 22039, 22051, 22063, 22067, 22073, 22079, 22091, 22093, 22109, 22111, 22123, 22129, 22133, 22147, 22153, 22157, 22159, 22171, 22189, 22193, 22229, 22247, 22259, 22271, 22273, 22277, 22279, 22283, 22291, 22303, 22307, 22343, 22349, 22367, 22369, 22381, 22391, 22397, 22409, 22433, 22441, 22447, 22453, 22469, 22481, 22483, 22501, 22511, 22531, 22541, 22543, 22549, 22567, 22571, 22573, 22613, 22619, 22621, 22637, 22639, 22643, 22651, 22669, 22679, 22691, 22697, 22699, 22709, 22717, 22721, 22727, 22739, 22741, 22751, 22769, 22777, 22783, 22787, 22807, 22811, 22817, 22853, 22859, 22861, 22871, 22877, 22901, 22907, 22921, 22937, 22943, 22961, 22963, 22973, 22993, 23003, 23011, 23017, 23021, 23027, 23029, 23039, 23041, 23053, 23057, 23059, 23063, 23071, 23081, 23087, 23099, 23117, 23131, 23143, 23159, 23167, 23173, 23189, 23197, 23201, 23203, 23209, 23227, 23251, 23269, 23279, 23291, 23293, 23297, 23311, 23321, 23327, 23333, 23339, 23357, 23369, 23371, 23399, 23417, 23431, 23447, 23459, 23473, 23497, 23509, 23531, 23537, 23539, 23549, 23557, 23561, 23563, 23567, 23581, 23593, 23599, 23603, 23609, 23623, 23627, 23629, 23633, 23663, 23669, 23671, 23677, 23687, 23689, 23719, 23741, 23743, 23747, 23753, 23761, 23767, 23773, 23789, 23801, 23813, 23819, 23827, 23831, 23833, 23857, 23869, 23873, 23879, 23887, 23893, 23899, 23909, 23911, 23917, 23929, 23957, 23971, 23977, 23981, 23993, 24001, 24007, 24019, 24023, 24029, 24043, 24049, 24061, 24071, 24077, 24083, 24091, 24097, 24103, 24107, 24109, 24113, 24121, 24133, 24137, 24151, 24169, 24179, 24181, 24197, 24203, 24223, 24229, 24239, 24247, 24251, 24281, 24317, 24329, 24337, 24359, 24371, 24373, 24379, 24391, 24407, 24413, 24419, 24421, 24439, 24443, 24469, 24473, 24481, 24499, 24509, 24517, 24527, 24533, 24547, 24551, 24571, 24593, 24611, 24623, 24631, 24659, 24671, 24677, 24683, 24691, 24697, 24709, 24733, 24749, 24763, 24767, 24781, 24793, 24799, 24809, 24821, 24841, 24847, 24851, 24859, 24877, 24889, 24907, 24917, 24919, 24923, 24943, 24953, 24967, 24971, 24977, 24979, 24989, 25013, 25031, 25033, 25037, 25057, 25073, 25087, 25097, 25111, 25117, 25121, 25127, 25147, 25153, 25163, 25169, 25171, 25183, 25189, 25219, 25229, 25237, 25243, 25247, 25253, 25261, 25301, 25303, 25307, 25309, 25321, 25339, 25343, 25349, 25357, 25367, 25373, 25391, 25409, 25411, 25423, 25439, 25447, 25453, 25457, 25463, 25469, 25471, 25523, 25537, 25541, 25561, 25577, 25579, 25583, 25589, 25601, 25603, 25609, 25621, 25633, 25639, 25643, 25657, 25667, 25673, 25679, 25693, 25703, 25717, 25733, 25741, 25747, 25759, 25763, 25771, 25793, 25799, 25801, 25819, 25841, 25847, 25849, 25867, 25873, 25889, 25903, 25913, 25919, 25931, 25933, 25939, 25943, 25951, 25969, 25981, 25997, 25999, 26003, 26017, 26021, 26029, 26041, 26053, 26083, 26099, 26107, 26111, 26113, 26119, 26141, 26153, 26161, 26171, 26177, 26183, 26189, 26203, 26209, 26227, 26237, 26249, 26251, 26261, 26263, 26267, 26293, 26297, 26309, 26317, 26321, 26339, 26347, 26357, 26371, 26387, 26393, 26399, 26407, 26417, 26423, 26431, 26437, 26449, 26459, 26479, 26489, 26497, 26501, 26513, 26539, 26557, 26561, 26573, 26591, 26597, 26627, 26633, 26641, 26647, 26669, 26681, 26683, 26687, 26693, 26699, 26701, 26711, 26713, 26717, 26723, 26729, 26731, 26737, 26759, 26777, 26783, 26801, 26813, 26821, 26833, 26839, 26849, 26861, 26863, 26879, 26881, 26891, 26893, 26903, 26921, 26927, 26947, 26951, 26953, 26959, 26981, 26987, 26993, 27011, 27017, 27031, 27043, 27059, 27061, 27067, 27073, 27077, 27091, 27103, 27107, 27109, 27127, 27143, 27179, 27191, 27197, 27211, 27239, 27241, 27253, 27259, 27271, 27277, 27281, 27283, 27299, 27329, 27337, 27361, 27367, 27397, 27407, 27409, 27427, 27431, 27437, 27449, 27457, 27479, 27481, 27487, 27509, 27527, 27529, 27539, 27541, 27551, 27581, 27583, 27611, 27617, 27631, 27647, 27653, 27673, 27689, 27691, 27697, 27701, 27733, 27737, 27739, 27743, 27749, 27751, 27763, 27767, 27773, 27779, 27791, 27793, 27799, 27803, 27809, 27817, 27823, 27827, 27847, 27851, 27883, 27893, 27901, 27917, 27919, 27941, 27943, 27947, 27953, 27961, 27967, 27983, 27997, 28001, 28019, 28027, 28031, 28051, 28057, 28069, 28081, 28087, 28097, 28099, 28109, 28111, 28123, 28151, 28163, 28181, 28183, 28201, 28211, 28219, 28229, 28277, 28279, 28283, 28289, 28297, 28307, 28309, 28319, 28349, 28351, 28387, 28393, 28403, 28409, 28411, 28429, 28433, 28439, 28447, 28463, 28477, 28493, 28499, 28513, 28517, 28537, 28541, 28547, 28549, 28559, 28571, 28573, 28579, 28591, 28597, 28603, 28607, 28619, 28621, 28627, 28631, 28643, 28649, 28657, 28661, 28663, 28669, 28687, 28697, 28703, 28711, 28723, 28729, 28751, 28753, 28759, 28771, 28789, 28793, 28807, 28813, 28817, 28837, 28843, 28859, 28867, 28871, 28879, 28901, 28909, 28921, 28927, 28933, 28949, 28961, 28979, 29009, 29017, 29021, 29023, 29027, 29033, 29059, 29063, 29077, 29101, 29123, 29129, 29131, 29137, 29147, 29153, 29167, 29173, 29179, 29191, 29201, 29207, 29209, 29221, 29231, 29243, 29251, 29269, 29287, 29297, 29303, 29311, 29327, 29333, 29339, 29347, 29363, 29383, 29387, 29389, 29399, 29401, 29411, 29423, 29429, 29437, 29443, 29453, 29473, 29483, 29501, 29527, 29531, 29537, 29567, 29569, 29573, 29581, 29587, 29599, 29611, 29629, 29633, 29641, 29663, 29669, 29671, 29683, 29717, 29723, 29741, 29753, 29759, 29761, 29789, 29803, 29819, 29833, 29837, 29851, 29863, 29867, 29873, 29879, 29881, 29917, 29921, 29927, 29947, 29959, 29983, 29989, 30011, 30013, 30029, 30047, 30059, 30071, 30089, 30091, 30097, 30103, 30109, 30113, 30119, 30133, 30137, 30139, 30161, 30169, 30181, 30187, 30197, 30203, 30211, 30223, 30241, 30253, 30259, 30269, 30271, 30293, 30307, 30313, 30319, 30323, 30341, 30347, 30367, 30389, 30391, 30403, 30427, 30431, 30449, 30467, 30469, 30491, 30493, 30497, 30509, 30517, 30529, 30539, 30553, 30557, 30559, 30577, 30593, 30631, 30637, 30643, 30649, 30661, 30671, 30677, 30689, 30697, 30703, 30707, 30713, 30727, 30757, 30763, 30773, 30781, 30803, 30809, 30817, 30829, 30839, 30841, 30851, 30853, 30859, 30869, 30871, 30881, 30893, 30911, 30931, 30937, 30941, 30949, 30971, 30977, 30983, 31013, 31019, 31033, 31039, 31051, 31063, 31069, 31079, 31081, 31091, 31121, 31123, 31139, 31147, 31151, 31153, 31159, 31177, 31181, 31183, 31189, 31193, 31219, 31223, 31231, 31237, 31247, 31249, 31253, 31259, 31267, 31271, 31277, 31307, 31319, 31321, 31327, 31333, 31337, 31357, 31379, 31387, 31391, 31393, 31397, 31469, 31477, 31481, 31489, 31511, 31513, 31517, 31531, 31541, 31543, 31547, 31567, 31573, 31583, 31601, 31607, 31627, 31643, 31649, 31657, 31663, 31667, 31687, 31699, 31721, 31723, 31727, 31729, 31741, 31751, 31769, 31771, 31793, 31799, 31817, 31847, 31849, 31859, 31873, 31883, 31891, 31907, 31957, 31963, 31973, 31981, 31991, 32003, 32009, 32027, 32029, 32051, 32057, 32059, 32063, 32069, 32077, 32083, 32089, 32099, 32117, 32119, 32141, 32143, 32159, 32173, 32183, 32189, 32191, 32203, 32213, 32233, 32237, 32251, 32257, 32261, 32297, 32299, 32303, 32309, 32321, 32323, 32327, 32341, 32353, 32359, 32363, 32369, 32371, 32377, 32381, 32401, 32411, 32413, 32423, 32429, 32441, 32443, 32467, 32479, 32491, 32497, 32503, 32507, 32531, 32533, 32537, 32561, 32563, 32569, 32573, 32579, 32587, 32603, 32609, 32611, 32621, 32633, 32647, 32653, 32687, 32693, 32707, 32713, 32717, 32719, 32749, 32771, 32779, 32783, 32789, 32797, 32801, 32803, 32831, 32833, 32839, 32843, 32869, 32887, 32909, 32911, 32917, 32933, 32939, 32941, 32957, 32969, 32971, 32983, 32987, 32993, 32999, 33013, 33023, 33029, 33037, 33049, 33053, 33071, 33073, 33083, 33091, 33107, 33113, 33119, 33149, 33151, 33161, 33179, 33181, 33191, 33199, 33203, 33211, 33223, 33247, 33287, 33289, 33301, 33311, 33317, 33329, 33331, 33343, 33347, 33349, 33353, 33359, 33377, 33391, 33403, 33409, 33413, 33427, 33457, 33461, 33469, 33479, 33487, 33493, 33503, 33521, 33529, 33533, 33547, 33563, 33569, 33577, 33581, 33587, 33589, 33599, 33601, 33613, 33617, 33619, 33623, 33629, 33637, 33641, 33647, 33679, 33703, 33713, 33721, 33739, 33749, 33751, 33757, 33767, 33769, 33773, 33791, 33797, 33809, 33811, 33827, 33829, 33851, 33857, 33863, 33871, 33889, 33893, 33911, 33923, 33931, 33937, 33941, 33961, 33967, 33997, 34019, 34031, 34033, 34039, 34057, 34061, 34123, 34127, 34129, 34141, 34147, 34157, 34159, 34171, 34183, 34211, 34213, 34217, 34231, 34253, 34259, 34261, 34267, 34273, 34283, 34297, 34301, 34303, 34313, 34319, 34327, 34337, 34351, 34361, 34367, 34369, 34381, 34403, 34421, 34429, 34439, 34457, 34469, 34471, 34483, 34487, 34499, 34501, 34511, 34513, 34519, 34537, 34543, 34549, 34583, 34589, 34591, 34603, 34607, 34613, 34631, 34649, 34651, 34667, 34673, 34679, 34687, 34693, 34703, 34721, 34729, 34739, 34747, 34757, 34759, 34763, 34781, 34807, 34819, 34841, 34843, 34847, 34849, 34871, 34877, 34883, 34897, 34913, 34919, 34939, 34949, 34961, 34963, 34981, 35023, 35027, 35051, 35053, 35059, 35069, 35081, 35083, 35089, 35099, 35107, 35111, 35117, 35129, 35141, 35149, 35153, 35159, 35171, 35201, 35221, 35227, 35251, 35257, 35267, 35279, 35281, 35291, 35311, 35317, 35323, 35327, 35339, 35353, 35363, 35381, 35393, 35401, 35407, 35419, 35423, 35437, 35447, 35449, 35461, 35491, 35507, 35509, 35521, 35527, 35531, 35533, 35537, 35543, 35569, 35573, 35591, 35593, 35597, 35603, 35617, 35671, 35677, 35729, 35731, 35747, 35753, 35759, 35771, 35797, 35801, 35803, 35809, 35831, 35837, 35839, 35851, 35863, 35869, 35879, 35897, 35899, 35911, 35923, 35933, 35951, 35963, 35969, 35977, 35983, 35993, 35999, 36007, 36011, 36013, 36017, 36037, 36061, 36067, 36073, 36083, 36097, 36107, 36109, 36131, 36137, 36151, 36161, 36187, 36191, 36209, 36217, 36229, 36241, 36251, 36263, 36269, 36277, 36293, 36299, 36307, 36313, 36319, 36341, 36343, 36353, 36373, 36383, 36389, 36433, 36451, 36457, 36467, 36469, 36473, 36479, 36493, 36497, 36523, 36527, 36529, 36541, 36551, 36559, 36563, 36571, 36583, 36587, 36599, 36607, 36629, 36637, 36643, 36653, 36671, 36677, 36683, 36691, 36697, 36709, 36713, 36721, 36739, 36749, 36761, 36767, 36779, 36781, 36787, 36791, 36793, 36809, 36821, 36833, 36847, 36857, 36871, 36877, 36887, 36899, 36901, 36913, 36919, 36923, 36929, 36931, 36943, 36947, 36973, 36979, 36997, 37003, 37013, 37019, 37021, 37039, 37049, 37057, 37061, 37087, 37097, 37117, 37123, 37139, 37159, 37171, 37181, 37189, 37199, 37201, 37217, 37223, 37243, 37253, 37273, 37277, 37307, 37309, 37313, 37321, 37337, 37339, 37357, 37361, 37363, 37369, 37379, 37397, 37409, 37423, 37441, 37447, 37463, 37483, 37489, 37493, 37501, 37507, 37511, 37517, 37529, 37537, 37547, 37549, 37561, 37567, 37571, 37573, 37579, 37589, 37591, 37607, 37619, 37633, 37643, 37649, 37657, 37663, 37691, 37693, 37699, 37717, 37747, 37781, 37783, 37799, 37811, 37813, 37831, 37847, 37853, 37861, 37871, 37879, 37889, 37897, 37907, 37951, 37957, 37963, 37967, 37987, 37991, 37993, 37997, 38011, 38039, 38047, 38053, 38069, 38083, 38113, 38119, 38149, 38153, 38167, 38177, 38183, 38189, 38197, 38201, 38219, 38231, 38237, 38239, 38261, 38273, 38281, 38287, 38299, 38303, 38317, 38321, 38327, 38329, 38333, 38351, 38371, 38377, 38393, 38431, 38447, 38449, 38453, 38459, 38461, 38501, 38543, 38557, 38561, 38567, 38569, 38593, 38603, 38609, 38611, 38629, 38639, 38651, 38653, 38669, 38671, 38677, 38693, 38699, 38707, 38711, 38713, 38723, 38729, 38737, 38747, 38749, 38767, 38783, 38791, 38803, 38821, 38833, 38839, 38851, 38861, 38867, 38873, 38891, 38903, 38917, 38921, 38923, 38933, 38953, 38959, 38971, 38977, 38993, 39019, 39023, 39041, 39043, 39047, 39079, 39089, 39097, 39103, 39107, 39113, 39119, 39133, 39139, 39157, 39161, 39163, 39181, 39191, 39199, 39209, 39217, 39227, 39229, 39233, 39239, 39241, 39251, 39293, 39301, 39313, 39317, 39323, 39341, 39343, 39359, 39367, 39371, 39373, 39383, 39397, 39409, 39419, 39439, 39443, 39451, 39461, 39499, 39503, 39509, 39511, 39521, 39541, 39551, 39563, 39569, 39581, 39607, 39619, 39623, 39631, 39659, 39667, 39671, 39679, 39703, 39709, 39719, 39727, 39733, 39749, 39761, 39769, 39779, 39791, 39799, 39821, 39827, 39829, 39839, 39841, 39847, 39857, 39863, 39869, 39877, 39883, 39887, 39901, 39929, 39937, 39953, 39971, 39979, 39983, 39989, 40009, 40013, 40031, 40037, 40039, 40063, 40087, 40093, 40099, 40111, 40123, 40127, 40129, 40151, 40153, 40163, 40169, 40177, 40189, 40193, 40213, 40231, 40237, 40241, 40253, 40277, 40283, 40289, 40343, 40351, 40357, 40361, 40387, 40423, 40427, 40429, 40433, 40459, 40471, 40483, 40487, 40493, 40499, 40507, 40519, 40529, 40531, 40543, 40559, 40577, 40583, 40591, 40597, 40609, 40627, 40637, 40639, 40693, 40697, 40699, 40709, 40739, 40751, 40759, 40763, 40771, 40787, 40801, 40813, 40819, 40823, 40829, 40841, 40847, 40849, 40853, 40867, 40879, 40883, 40897, 40903, 40927, 40933, 40939, 40949, 40961, 40973, 40993, 41011, 41017, 41023, 41039, 41047, 41051, 41057, 41077, 41081, 41113, 41117, 41131, 41141, 41143, 41149, 41161, 41177, 41179, 41183, 41189, 41201, 41203, 41213, 41221, 41227, 41231, 41233, 41243, 41257, 41263, 41269, 41281, 41299, 41333, 41341, 41351, 41357, 41381, 41387, 41389, 41399, 41411, 41413, 41443, 41453, 41467, 41479, 41491, 41507, 41513, 41519, 41521, 41539, 41543, 41549, 41579, 41593, 41597, 41603, 41609, 41611, 41617, 41621, 41627, 41641, 41647, 41651, 41659, 41669, 41681, 41687, 41719, 41729, 41737, 41759, 41761, 41771, 41777, 41801, 41809, 41813, 41843, 41849, 41851, 41863, 41879, 41887, 41893, 41897, 41903, 41911, 41927, 41941, 41947, 41953, 41957, 41959, 41969, 41981, 41983, 41999, 42013, 42017, 42019, 42023, 42043, 42061, 42071, 42073, 42083, 42089, 42101, 42131, 42139, 42157, 42169, 42179, 42181, 42187, 42193, 42197, 42209, 42221, 42223, 42227, 42239, 42257, 42281, 42283, 42293, 42299, 42307, 42323, 42331, 42337, 42349, 42359, 42373, 42379, 42391, 42397, 42403, 42407, 42409, 42433, 42437, 42443, 42451, 42457, 42461, 42463, 42467, 42473, 42487, 42491, 42499, 42509, 42533, 42557, 42569, 42571, 42577, 42589, 42611, 42641, 42643, 42649, 42667, 42677, 42683, 42689, 42697, 42701, 42703, 42709, 42719, 42727, 42737, 42743, 42751, 42767, 42773, 42787, 42793, 42797, 42821, 42829, 42839, 42841, 42853, 42859, 42863, 42899, 42901, 42923, 42929, 42937, 42943, 42953, 42961, 42967, 42979, 42989, 43003, 43013, 43019, 43037, 43049, 43051, 43063, 43067, 43093, 43103, 43117, 43133, 43151, 43159, 43177, 43189, 43201, 43207, 43223, 43237, 43261, 43271, 43283, 43291, 43313, 43319, 43321, 43331, 43391, 43397, 43399, 43403, 43411, 43427, 43441, 43451, 43457, 43481, 43487, 43499, 43517, 43541, 43543, 43573, 43577, 43579, 43591, 43597, 43607, 43609, 43613, 43627, 43633, 43649, 43651, 43661, 43669, 43691, 43711, 43717, 43721, 43753, 43759, 43777, 43781, 43783, 43787, 43789, 43793, 43801, 43853, 43867, 43889, 43891, 43913, 43933, 43943, 43951, 43961, 43963, 43969, 43973, 43987, 43991, 43997, 44017, 44021, 44027, 44029, 44041, 44053, 44059, 44071, 44087, 44089, 44101, 44111, 44119, 44123, 44129, 44131, 44159, 44171, 44179, 44189, 44201, 44203, 44207, 44221, 44249, 44257, 44263, 44267, 44269, 44273, 44279, 44281, 44293, 44351, 44357, 44371, 44381, 44383, 44389, 44417, 44449, 44453, 44483, 44491, 44497, 44501, 44507, 44519, 44531, 44533, 44537, 44543, 44549, 44563, 44579, 44587, 44617, 44621, 44623, 44633, 44641, 44647, 44651, 44657, 44683, 44687, 44699, 44701, 44711, 44729, 44741, 44753, 44771, 44773, 44777, 44789, 44797, 44809, 44819, 44839, 44843, 44851, 44867, 44879, 44887, 44893, 44909, 44917, 44927, 44939, 44953, 44959, 44963, 44971, 44983, 44987, 45007, 45013, 45053, 45061, 45077, 45083, 45119, 45121, 45127, 45131, 45137, 45139, 45161, 45179, 45181, 45191, 45197, 45233, 45247, 45259, 45263, 45281, 45289, 45293, 45307, 45317, 45319, 45329, 45337, 45341, 45343, 45361, 45377, 45389, 45403, 45413, 45427, 45433, 45439, 45481, 45491, 45497, 45503, 45523, 45533, 45541, 45553, 45557, 45569, 45587, 45589, 45599, 45613, 45631, 45641, 45659, 45667, 45673, 45677, 45691, 45697, 45707, 45737, 45751, 45757, 45763, 45767, 45779, 45817, 45821, 45823, 45827, 45833, 45841, 45853, 45863, 45869, 45887, 45893, 45943, 45949, 45953, 45959, 45971, 45979, 45989, 46021, 46027, 46049, 46051, 46061, 46073, 46091, 46093, 46099, 46103, 46133, 46141, 46147, 46153, 46171, 46181, 46183, 46187, 46199, 46219, 46229, 46237, 46261, 46271, 46273, 46279, 46301, 46307, 46309, 46327, 46337, 46349, 46351, 46381, 46399, 46411, 46439, 46441, 46447, 46451, 46457, 46471, 46477, 46489, 46499, 46507, 46511, 46523, 46549, 46559, 46567, 46573, 46589, 46591, 46601, 46619, 46633, 46639, 46643, 46649, 46663, 46679, 46681, 46687, 46691, 46703, 46723, 46727, 46747, 46751, 46757, 46769, 46771, 46807, 46811, 46817, 46819, 46829, 46831, 46853, 46861, 46867, 46877, 46889, 46901, 46919, 46933, 46957, 46993, 46997, 47017, 47041, 47051, 47057, 47059, 47087, 47093, 47111, 47119, 47123, 47129, 47137, 47143, 47147, 47149, 47161, 47189, 47207, 47221, 47237, 47251, 47269, 47279, 47287, 47293, 47297, 47303, 47309, 47317, 47339, 47351, 47353, 47363, 47381, 47387, 47389, 47407, 47417, 47419, 47431, 47441, 47459, 47491, 47497, 47501, 47507, 47513, 47521, 47527, 47533, 47543, 47563, 47569, 47581, 47591, 47599, 47609, 47623, 47629, 47639, 47653, 47657, 47659, 47681, 47699, 47701, 47711, 47713, 47717, 47737, 47741, 47743, 47777, 47779, 47791, 47797, 47807, 47809, 47819, 47837, 47843, 47857, 47869, 47881, 47903, 47911, 47917, 47933, 47939, 47947, 47951, 47963, 47969, 47977, 47981, 48017, 48023, 48029, 48049, 48073, 48079, 48091, 48109, 48119, 48121, 48131, 48157, 48163, 48179, 48187, 48193, 48197, 48221, 48239, 48247, 48259, 48271, 48281, 48299, 48311, 48313, 48337, 48341, 48353, 48371, 48383, 48397, 48407, 48409, 48413, 48437, 48449, 48463, 48473, 48479, 48481, 48487, 48491, 48497, 48523, 48527, 48533, 48539, 48541, 48563, 48571, 48589, 48593, 48611, 48619, 48623, 48647, 48649, 48661, 48673, 48677, 48679, 48731, 48733, 48751, 48757, 48761, 48767, 48779, 48781, 48787, 48799, 48809, 48817, 48821, 48823, 48847, 48857, 48859, 48869, 48871, 48883, 48889, 48907, 48947, 48953, 48973, 48989, 48991, 49003, 49009, 49019, 49031, 49033, 49037, 49043, 49057, 49069, 49081, 49103, 49109, 49117, 49121, 49123, 49139, 49157, 49169, 49171, 49177, 49193, 49199, 49201, 49207, 49211, 49223, 49253, 49261, 49277, 49279, 49297, 49307, 49331, 49333, 49339, 49363, 49367, 49369, 49391, 49393, 49409, 49411, 49417, 49429, 49433, 49451, 49459, 49463, 49477, 49481, 49499, 49523, 49529, 49531, 49537, 49547, 49549, 49559, 49597, 49603, 49613, 49627, 49633, 49639, 49663, 49667, 49669, 49681, 49697, 49711, 49727, 49739, 49741, 49747, 49757, 49783, 49787, 49789, 49801, 49807, 49811, 49823, 49831, 49843, 49853, 49871, 49877, 49891, 49919, 49921, 49927, 49937, 49939, 49943, 49957, 49991, 49993, 49999, 50021, 50023, 50033, 50047, 50051, 50053, 50069, 50077, 50087, 50093, 50101, 50111, 50119, 50123, 50129, 50131, 50147, 50153, 50159, 50177, 50207, 50221, 50227, 50231, 50261, 50263, 50273, 50287, 50291, 50311, 50321, 50329, 50333, 50341, 50359, 50363, 50377, 50383, 50387, 50411, 50417, 50423, 50441, 50459, 50461, 50497, 50503, 50513, 50527, 50539, 50543, 50549, 50551, 50581, 50587, 50591, 50593, 50599, 50627, 50647, 50651, 50671, 50683, 50707, 50723, 50741, 50753, 50767, 50773, 50777, 50789, 50821, 50833, 50839, 50849, 50857, 50867, 50873, 50891, 50893, 50909, 50923, 50929, 50951, 50957, 50969, 50971, 50989, 50993, 51001, 51031, 51043, 51047, 51059, 51061, 51071, 51109, 51131, 51133, 51137, 51151, 51157, 51169, 51193, 51197, 51199, 51203, 51217, 51229, 51239, 51241, 51257, 51263, 51283, 51287, 51307, 51329, 51341, 51343, 51347, 51349, 51361, 51383, 51407, 51413, 51419, 51421, 51427, 51431, 51437, 51439, 51449, 51461, 51473, 51479, 51481, 51487, 51503, 51511, 51517, 51521, 51539, 51551, 51563, 51577, 51581, 51593, 51599, 51607, 51613, 51631, 51637, 51647, 51659, 51673, 51679, 51683, 51691, 51713, 51719, 51721, 51749, 51767, 51769, 51787, 51797, 51803, 51817, 51827, 51829, 51839, 51853, 51859, 51869, 51871, 51893, 51899, 51907, 51913, 51929, 51941, 51949, 51971, 51973, 51977, 51991, 52009, 52021, 52027, 52051, 52057, 52067, 52069, 52081, 52103, 52121, 52127, 52147, 52153, 52163, 52177, 52181, 52183, 52189, 52201, 52223, 52237, 52249, 52253, 52259, 52267, 52289, 52291, 52301, 52313, 52321, 52361, 52363, 52369, 52379, 52387, 52391, 52433, 52453, 52457, 52489, 52501, 52511, 52517, 52529, 52541, 52543, 52553, 52561, 52567, 52571, 52579, 52583, 52609, 52627, 52631, 52639, 52667, 52673, 52691, 52697, 52709, 52711, 52721, 52727, 52733, 52747, 52757, 52769, 52783, 52807, 52813, 52817, 52837, 52859, 52861, 52879, 52883, 52889, 52901, 52903, 52919, 52937, 52951, 52957, 52963, 52967, 52973, 52981, 52999, 53003, 53017, 53047, 53051, 53069, 53077, 53087, 53089, 53093, 53101, 53113, 53117, 53129, 53147, 53149, 53161, 53171, 53173, 53189, 53197, 53201, 53231, 53233, 53239, 53267, 53269, 53279, 53281, 53299, 53309, 53323, 53327, 53353, 53359, 53377, 53381, 53401, 53407, 53411, 53419, 53437, 53441, 53453, 53479, 53503, 53507, 53527, 53549, 53551, 53569, 53591, 53593, 53597, 53609, 53611, 53617, 53623, 53629, 53633, 53639, 53653, 53657, 53681, 53693, 53699, 53717, 53719, 53731, 53759, 53773, 53777, 53783, 53791, 53813, 53819, 53831, 53849, 53857, 53861, 53881, 53887, 53891, 53897, 53899, 53917, 53923, 53927, 53939, 53951, 53959, 53987, 53993, 54001, 54011, 54013, 54037, 54049, 54059, 54083, 54091, 54101, 54121, 54133, 54139, 54151, 54163, 54167, 54181, 54193, 54217, 54251, 54269, 54277, 54287, 54293, 54311, 54319, 54323, 54331, 54347, 54361, 54367, 54371, 54377, 54401, 54403, 54409, 54413, 54419, 54421, 54437, 54443, 54449, 54469, 54493, 54497, 54499, 54503, 54517, 54521, 54539, 54541, 54547, 54559, 54563, 54577, 54581, 54583, 54601, 54617, 54623, 54629, 54631, 54647, 54667, 54673, 54679, 54709, 54713, 54721, 54727, 54751, 54767, 54773, 54779, 54787, 54799, 54829, 54833, 54851, 54869, 54877, 54881, 54907, 54917, 54919, 54941, 54949, 54959, 54973, 54979, 54983, 55001, 55009, 55021, 55049, 55051, 55057, 55061, 55073, 55079, 55103, 55109, 55117, 55127, 55147, 55163, 55171, 55201, 55207, 55213, 55217, 55219, 55229, 55243, 55249, 55259, 55291, 55313, 55331, 55333, 55337, 55339, 55343, 55351, 55373, 55381, 55399, 55411, 55439, 55441, 55457, 55469, 55487, 55501, 55511, 55529, 55541, 55547, 55579, 55589, 55603, 55609, 55619, 55621, 55631, 55633, 55639, 55661, 55663, 55667, 55673, 55681, 55691, 55697, 55711, 55717, 55721, 55733, 55763, 55787, 55793, 55799, 55807, 55813, 55817, 55819, 55823, 55829, 55837, 55843, 55849, 55871, 55889, 55897, 55901, 55903, 55921, 55927, 55931, 55933, 55949, 55967, 55987, 55997, 56003, 56009, 56039, 56041, 56053, 56081, 56087, 56093, 56099, 56101, 56113, 56123, 56131, 56149, 56167, 56171, 56179, 56197, 56207, 56209, 56237, 56239, 56249, 56263, 56267, 56269, 56299, 56311, 56333, 56359, 56369, 56377, 56383, 56393, 56401, 56417, 56431, 56437, 56443, 56453, 56467, 56473, 56477, 56479, 56489, 56501, 56503, 56509, 56519, 56527, 56531, 56533, 56543, 56569, 56591, 56597, 56599, 56611, 56629, 56633, 56659, 56663, 56671, 56681, 56687, 56701, 56711, 56713, 56731, 56737, 56747, 56767, 56773, 56779, 56783, 56807, 56809, 56813, 56821, 56827, 56843, 56857, 56873, 56891, 56893, 56897, 56909, 56911, 56921, 56923, 56929, 56941, 56951, 56957, 56963, 56983, 56989, 56993, 56999, 57037, 57041, 57047, 57059, 57073, 57077, 57089, 57097, 57107, 57119, 57131, 57139, 57143, 57149, 57163, 57173, 57179, 57191, 57193, 57203, 57221, 57223, 57241, 57251, 57259, 57269, 57271, 57283, 57287, 57301, 57329, 57331, 57347, 57349, 57367, 57373, 57383, 57389, 57397, 57413, 57427, 57457, 57467, 57487, 57493, 57503, 57527, 57529, 57557, 57559, 57571, 57587, 57593, 57601, 57637, 57641, 57649, 57653, 57667, 57679, 57689, 57697, 57709, 57713, 57719, 57727, 57731, 57737, 57751, 57773, 57781, 57787, 57791, 57793, 57803, 57809, 57829, 57839, 57847, 57853, 57859, 57881, 57899, 57901, 57917, 57923, 57943, 57947, 57973, 57977, 57991, 58013, 58027, 58031, 58043, 58049, 58057, 58061, 58067, 58073, 58099, 58109, 58111, 58129, 58147, 58151, 58153, 58169, 58171, 58189, 58193, 58199, 58207, 58211, 58217, 58229, 58231, 58237, 58243, 58271, 58309, 58313, 58321, 58337, 58363, 58367, 58369, 58379, 58391, 58393, 58403, 58411, 58417, 58427, 58439, 58441, 58451, 58453, 58477, 58481, 58511, 58537, 58543, 58549, 58567, 58573, 58579, 58601, 58603, 58613, 58631, 58657, 58661, 58679, 58687, 58693, 58699, 58711, 58727, 58733, 58741, 58757, 58763, 58771, 58787, 58789, 58831, 58889, 58897, 58901, 58907, 58909, 58913, 58921, 58937, 58943, 58963, 58967, 58979, 58991, 58997, 59009, 59011, 59021, 59023, 59029, 59051, 59053, 59063, 59069, 59077, 59083, 59093, 59107, 59113, 59119, 59123, 59141, 59149, 59159, 59167, 59183, 59197, 59207, 59209, 59219, 59221, 59233, 59239, 59243, 59263, 59273, 59281, 59333, 59341, 59351, 59357, 59359, 59369, 59377, 59387, 59393, 59399, 59407, 59417, 59419, 59441, 59443, 59447, 59453, 59467, 59471, 59473, 59497, 59509, 59513, 59539, 59557, 59561, 59567, 59581, 59611, 59617, 59621, 59627, 59629, 59651, 59659, 59663, 59669, 59671, 59693, 59699, 59707, 59723, 59729, 59743, 59747, 59753, 59771, 59779, 59791, 59797, 59809, 59833, 59863, 59879, 59887, 59921, 59929, 59951, 59957, 59971, 59981, 59999, 60013, 60017, 60029, 60037, 60041, 60077, 60083, 60089, 60091, 60101, 60103, 60107, 60127, 60133, 60139, 60149, 60161, 60167, 60169, 60209, 60217, 60223, 60251, 60257, 60259, 60271, 60289, 60293, 60317, 60331, 60337, 60343, 60353, 60373, 60383, 60397, 60413, 60427, 60443, 60449, 60457, 60493, 60497, 60509, 60521, 60527, 60539, 60589, 60601, 60607, 60611, 60617, 60623, 60631, 60637, 60647, 60649, 60659, 60661, 60679, 60689, 60703, 60719, 60727, 60733, 60737, 60757, 60761, 60763, 60773, 60779, 60793, 60811, 60821, 60859, 60869, 60887, 60889, 60899, 60901, 60913, 60917, 60919, 60923, 60937, 60943, 60953, 60961, 61001, 61007, 61027, 61031, 61043, 61051, 61057, 61091, 61099, 61121, 61129, 61141, 61151, 61153, 61169, 61211, 61223, 61231, 61253, 61261, 61283, 61291, 61297, 61331, 61333, 61339, 61343, 61357, 61363, 61379, 61381, 61403, 61409, 61417, 61441, 61463, 61469, 61471, 61483, 61487, 61493, 61507, 61511, 61519, 61543, 61547, 61553, 61559, 61561, 61583, 61603, 61609, 61613, 61627, 61631, 61637, 61643, 61651, 61657, 61667, 61673, 61681, 61687, 61703, 61717, 61723, 61729, 61751, 61757, 61781, 61813, 61819, 61837, 61843, 61861, 61871, 61879, 61909, 61927, 61933, 61949, 61961, 61967, 61979, 61981, 61987, 61991, 62003, 62011, 62017, 62039, 62047, 62053, 62057, 62071, 62081, 62099, 62119, 62129, 62131, 62137, 62141, 62143, 62171, 62189, 62191, 62201, 62207, 62213, 62219, 62233, 62273, 62297, 62299, 62303, 62311, 62323, 62327, 62347, 62351, 62383, 62401, 62417, 62423, 62459, 62467, 62473, 62477, 62483, 62497, 62501, 62507, 62533, 62539, 62549, 62563, 62581, 62591, 62597, 62603, 62617, 62627, 62633, 62639, 62653, 62659, 62683, 62687, 62701, 62723, 62731, 62743, 62753, 62761, 62773, 62791, 62801, 62819, 62827, 62851, 62861, 62869, 62873, 62897, 62903, 62921, 62927, 62929, 62939, 62969, 62971, 62981, 62983, 62987, 62989, 63029, 63031, 63059, 63067, 63073, 63079, 63097, 63103, 63113, 63127, 63131, 63149, 63179, 63197, 63199, 63211, 63241, 63247, 63277, 63281, 63299, 63311, 63313, 63317, 63331, 63337, 63347, 63353, 63361, 63367, 63377, 63389, 63391, 63397, 63409, 63419, 63421, 63439, 63443, 63463, 63467, 63473, 63487, 63493, 63499, 63521, 63527, 63533, 63541, 63559, 63577, 63587, 63589, 63599, 63601, 63607, 63611, 63617, 63629, 63647, 63649, 63659, 63667, 63671, 63689, 63691, 63697, 63703, 63709, 63719, 63727, 63737, 63743, 63761, 63773, 63781, 63793, 63799, 63803, 63809, 63823, 63839, 63841, 63853, 63857, 63863, 63901, 63907, 63913, 63929, 63949, 63977, 63997, 64007, 64013, 64019, 64033, 64037, 64063, 64067, 64081, 64091, 64109, 64123, 64151, 64153, 64157, 64171, 64187, 64189, 64217, 64223, 64231, 64237, 64271, 64279, 64283, 64301, 64303, 64319, 64327, 64333, 64373, 64381, 64399, 64403, 64433, 64439, 64451, 64453, 64483, 64489, 64499, 64513, 64553, 64567, 64577, 64579, 64591, 64601, 64609, 64613, 64621, 64627, 64633, 64661, 64663, 64667, 64679, 64693, 64709, 64717, 64747, 64763, 64781, 64783, 64793, 64811, 64817, 64849, 64853, 64871, 64877, 64879, 64891, 64901, 64919, 64921, 64927, 64937, 64951, 64969, 64997, 65003, 65011, 65027, 65029, 65033, 65053, 65063, 65071, 65089, 65099, 65101, 65111, 65119, 65123, 65129, 65141, 65147, 65167, 65171, 65173, 65179, 65183, 65203, 65213, 65239, 65257, 65267, 65269, 65287, 65293, 65309, 65323, 65327, 65353, 65357, 65371, 65381, 65393, 65407, 65413, 65419, 65423, 65437, 65447, 65449, 65479, 65497, 65519, 65521, 65537, 65539, 65543, 65551, 65557, 65563, 65579, 65581, 65587, 65599, 65609, 65617, 65629, 65633, 65647, 65651, 65657, 65677, 65687, 65699, 65701, 65707, 65713, 65717, 65719, 65729, 65731, 65761, 65777, 65789, 65809, 65827, 65831, 65837, 65839, 65843, 65851, 65867, 65881, 65899, 65921, 65927, 65929, 65951, 65957, 65963, 65981, 65983, 65993, 66029, 66037, 66041, 66047, 66067, 66071, 66083, 66089, 66103, 66107, 66109, 66137, 66161, 66169, 66173, 66179, 66191, 66221, 66239, 66271, 66293, 66301, 66337, 66343, 66347, 66359, 66361, 66373, 66377, 66383, 66403, 66413, 66431, 66449, 66457, 66463, 66467, 66491, 66499, 66509, 66523, 66529, 66533, 66541, 66553, 66569, 66571, 66587, 66593, 66601, 66617, 66629, 66643, 66653, 66683, 66697, 66701, 66713, 66721, 66733, 66739, 66749, 66751, 66763, 66791, 66797, 66809, 66821, 66841, 66851, 66853, 66863, 66877, 66883, 66889, 66919, 66923, 66931, 66943, 66947, 66949, 66959, 66973, 66977, 67003, 67021, 67033, 67043, 67049, 67057, 67061, 67073, 67079, 67103, 67121, 67129, 67139, 67141, 67153, 67157, 67169, 67181, 67187, 67189, 67211, 67213, 67217, 67219, 67231, 67247, 67261, 67271, 67273, 67289, 67307, 67339, 67343, 67349, 67369, 67391, 67399, 67409, 67411, 67421, 67427, 67429, 67433, 67447, 67453, 67477, 67481, 67489, 67493, 67499, 67511, 67523, 67531, 67537, 67547, 67559, 67567, 67577, 67579, 67589, 67601, 67607, 67619, 67631, 67651, 67679, 67699, 67709, 67723, 67733, 67741, 67751, 67757, 67759, 67763, 67777, 67783, 67789, 67801, 67807, 67819, 67829, 67843, 67853, 67867, 67883, 67891, 67901, 67927, 67931, 67933, 67939, 67943, 67957, 67961, 67967, 67979, 67987, 67993, 68023, 68041, 68053, 68059, 68071, 68087, 68099, 68111, 68113, 68141, 68147, 68161, 68171, 68207, 68209, 68213, 68219, 68227, 68239, 68261, 68279, 68281, 68311, 68329, 68351, 68371, 68389, 68399, 68437, 68443, 68447, 68449, 68473, 68477, 68483, 68489, 68491, 68501, 68507, 68521, 68531, 68539, 68543, 68567, 68581, 68597, 68611, 68633, 68639, 68659, 68669, 68683, 68687, 68699, 68711, 68713, 68729, 68737, 68743, 68749, 68767, 68771, 68777, 68791, 68813, 68819, 68821, 68863, 68879, 68881, 68891, 68897, 68899, 68903, 68909, 68917, 68927, 68947, 68963, 68993, 69001, 69011, 69019, 69029, 69031, 69061, 69067, 69073, 69109, 69119, 69127, 69143, 69149, 69151, 69163, 69191, 69193, 69197, 69203, 69221, 69233, 69239, 69247, 69257, 69259, 69263, 69313, 69317, 69337, 69341, 69371, 69379, 69383, 69389, 69401, 69403, 69427, 69431, 69439, 69457, 69463, 69467, 69473, 69481, 69491, 69493, 69497, 69499, 69539, 69557, 69593, 69623, 69653, 69661, 69677, 69691, 69697, 69709, 69737, 69739, 69761, 69763, 69767, 69779, 69809, 69821, 69827, 69829, 69833, 69847, 69857, 69859, 69877, 69899, 69911, 69929, 69931, 69941, 69959, 69991, 69997, 70001, 70003, 70009, 70019, 70039, 70051, 70061, 70067, 70079, 70099, 70111, 70117, 70121, 70123, 70139, 70141, 70157, 70163, 70177, 70181, 70183, 70199, 70201, 70207, 70223, 70229, 70237, 70241, 70249, 70271, 70289, 70297, 70309, 70313, 70321, 70327, 70351, 70373, 70379, 70381, 70393, 70423, 70429, 70439, 70451, 70457, 70459, 70481, 70487, 70489, 70501, 70507, 70529, 70537, 70549, 70571, 70573, 70583, 70589, 70607, 70619, 70621, 70627, 70639, 70657, 70663, 70667, 70687, 70709, 70717, 70729, 70753, 70769, 70783, 70793, 70823, 70841, 70843, 70849, 70853, 70867, 70877, 70879, 70891, 70901, 70913, 70919, 70921, 70937, 70949, 70951, 70957, 70969, 70979, 70981, 70991, 70997, 70999, 71011, 71023, 71039, 71059, 71069, 71081, 71089, 71119, 71129, 71143, 71147, 71153, 71161, 71167, 71171, 71191, 71209, 71233, 71237, 71249, 71257, 71261, 71263, 71287, 71293, 71317, 71327, 71329, 71333, 71339, 71341, 71347, 71353, 71359, 71363, 71387, 71389, 71399, 71411, 71413, 71419, 71429, 71437, 71443, 71453, 71471, 71473, 71479, 71483, 71503, 71527, 71537, 71549, 71551, 71563, 71569, 71593, 71597, 71633, 71647, 71663, 71671, 71693, 71699, 71707, 71711, 71713, 71719, 71741, 71761, 71777, 71789, 71807, 71809, 71821, 71837, 71843, 71849, 71861, 71867, 71879, 71881, 71887, 71899, 71909, 71917, 71933, 71941, 71947, 71963, 71971, 71983, 71987, 71993, 71999, 72019, 72031, 72043, 72047, 72053, 72073, 72077, 72089, 72091, 72101, 72103, 72109, 72139, 72161, 72167, 72169, 72173, 72211, 72221, 72223, 72227, 72229, 72251, 72253, 72269, 72271, 72277, 72287, 72307, 72313, 72337, 72341, 72353, 72367, 72379, 72383, 72421, 72431, 72461, 72467, 72469, 72481, 72493, 72497, 72503, 72533, 72547, 72551, 72559, 72577, 72613, 72617, 72623, 72643, 72647, 72649, 72661, 72671, 72673, 72679, 72689, 72701, 72707, 72719, 72727, 72733, 72739, 72763, 72767, 72797, 72817, 72823, 72859, 72869, 72871, 72883, 72889, 72893, 72901, 72907, 72911, 72923, 72931, 72937, 72949, 72953, 72959, 72973, 72977, 72997, 73009, 73013, 73019, 73037, 73039, 73043, 73061, 73063, 73079, 73091, 73121, 73127, 73133, 73141, 73181, 73189, 73237, 73243, 73259, 73277, 73291, 73303, 73309, 73327, 73331, 73351, 73361, 73363, 73369, 73379, 73387, 73417, 73421, 73433, 73453, 73459, 73471, 73477, 73483, 73517, 73523, 73529, 73547, 73553, 73561, 73571, 73583, 73589, 73597, 73607, 73609, 73613, 73637, 73643, 73651, 73673, 73679, 73681, 73693, 73699, 73709, 73721, 73727, 73751, 73757, 73771, 73783, 73819, 73823, 73847, 73849, 73859, 73867, 73877, 73883, 73897, 73907, 73939, 73943, 73951, 73961, 73973, 73999, 74017, 74021, 74027, 74047, 74051, 74071, 74077, 74093, 74099, 74101, 74131, 74143, 74149, 74159, 74161, 74167, 74177, 74189, 74197, 74201, 74203, 74209, 74219, 74231, 74257, 74279, 74287, 74293, 74297, 74311, 74317, 74323, 74353, 74357, 74363, 74377, 74381, 74383, 74411, 74413, 74419, 74441, 74449, 74453, 74471, 74489, 74507, 74509, 74521, 74527, 74531, 74551, 74561, 74567, 74573, 74587, 74597, 74609, 74611, 74623, 74653, 74687, 74699, 74707, 74713, 74717, 74719, 74729, 74731, 74747, 74759, 74761, 74771, 74779, 74797, 74821, 74827, 74831, 74843, 74857, 74861, 74869, 74873, 74887, 74891, 74897, 74903, 74923, 74929, 74933, 74941, 74959, 75011, 75013, 75017, 75029, 75037, 75041, 75079, 75083, 75109, 75133, 75149, 75161, 75167, 75169, 75181, 75193, 75209, 75211, 75217, 75223, 75227, 75239, 75253, 75269, 75277, 75289, 75307, 75323, 75329, 75337, 75347, 75353, 75367, 75377, 75389, 75391, 75401, 75403, 75407, 75431, 75437, 75479, 75503, 75511, 75521, 75527, 75533, 75539, 75541, 75553, 75557, 75571, 75577, 75583, 75611, 75617, 75619, 75629, 75641, 75653, 75659, 75679, 75683, 75689, 75703, 75707, 75709, 75721, 75731, 75743, 75767, 75773, 75781, 75787, 75793, 75797, 75821, 75833, 75853, 75869, 75883, 75913, 75931, 75937, 75941, 75967, 75979, 75983, 75989, 75991, 75997, 76001, 76003, 76031, 76039, 76079, 76081, 76091, 76099, 76103, 76123, 76129, 76147, 76157, 76159, 76163, 76207, 76213, 76231, 76243, 76249, 76253, 76259, 76261, 76283, 76289, 76303, 76333, 76343, 76367, 76369, 76379, 76387, 76403, 76421, 76423, 76441, 76463, 76471, 76481, 76487, 76493, 76507, 76511, 76519, 76537, 76541, 76543, 76561, 76579, 76597, 76603, 76607, 76631, 76649, 76651, 76667, 76673, 76679, 76697, 76717, 76733, 76753, 76757, 76771, 76777, 76781, 76801, 76819, 76829, 76831, 76837, 76847, 76871, 76873, 76883, 76907, 76913, 76919, 76943, 76949, 76961, 76963, 76991, 77003, 77017, 77023, 77029, 77041, 77047, 77069, 77081, 77093, 77101, 77137, 77141, 77153, 77167, 77171, 77191, 77201, 77213, 77237, 77239, 77243, 77249, 77261, 77263, 77267, 77269, 77279, 77291, 77317, 77323, 77339, 77347, 77351, 77359, 77369, 77377, 77383, 77417, 77419, 77431, 77447, 77471, 77477, 77479, 77489, 77491, 77509, 77513, 77521, 77527, 77543, 77549, 77551, 77557, 77563, 77569, 77573, 77587, 77591, 77611, 77617, 77621, 77641, 77647, 77659, 77681, 77687, 77689, 77699, 77711, 77713, 77719, 77723, 77731, 77743, 77747, 77761, 77773, 77783, 77797, 77801, 77813, 77839, 77849, 77863, 77867, 77893, 77899, 77929, 77933, 77951, 77969, 77977, 77983, 77999, 78007, 78017, 78031, 78041, 78049, 78059, 78079, 78101, 78121, 78137, 78139, 78157, 78163, 78167, 78173, 78179, 78191, 78193, 78203, 78229, 78233, 78241, 78259, 78277, 78283, 78301, 78307, 78311, 78317, 78341, 78347, 78367, 78401, 78427, 78437, 78439, 78467, 78479, 78487, 78497, 78509, 78511, 78517, 78539, 78541, 78553, 78569, 78571, 78577, 78583, 78593, 78607, 78623, 78643, 78649, 78653, 78691, 78697, 78707, 78713, 78721, 78737, 78779, 78781, 78787, 78791, 78797, 78803, 78809, 78823, 78839, 78853, 78857, 78877, 78887, 78889, 78893, 78901, 78919, 78929, 78941, 78977, 78979, 78989, 79031, 79039, 79043, 79063, 79087, 79103, 79111, 79133, 79139, 79147, 79151, 79153, 79159, 79181, 79187, 79193, 79201, 79229, 79231, 79241, 79259, 79273, 79279, 79283, 79301, 79309, 79319, 79333, 79337, 79349, 79357, 79367, 79379, 79393, 79397, 79399, 79411, 79423, 79427, 79433, 79451, 79481, 79493, 79531, 79537, 79549, 79559, 79561, 79579, 79589, 79601, 79609, 79613, 79621, 79627, 79631, 79633, 79657, 79669, 79687, 79691, 79693, 79697, 79699, 79757, 79769, 79777, 79801, 79811, 79813, 79817, 79823, 79829, 79841, 79843, 79847, 79861, 79867, 79873, 79889, 79901, 79903, 79907, 79939, 79943, 79967, 79973, 79979, 79987, 79997, 79999, 80021, 80039, 80051, 80071, 80077, 80107, 80111, 80141, 80147, 80149, 80153, 80167, 80173, 80177, 80191, 80207, 80209, 80221, 80231, 80233, 80239, 80251, 80263, 80273, 80279, 80287, 80309, 80317, 80329, 80341, 80347, 80363, 80369, 80387, 80407, 80429, 80447, 80449, 80471, 80473, 80489, 80491, 80513, 80527, 80537, 80557, 80567, 80599, 80603, 80611, 80621, 80627, 80629, 80651, 80657, 80669, 80671, 80677, 80681, 80683, 80687, 80701, 80713, 80737, 80747, 80749, 80761, 80777, 80779, 80783, 80789, 80803, 80809, 80819, 80831, 80833, 80849, 80863, 80897, 80909, 80911, 80917, 80923, 80929, 80933, 80953, 80963, 80989, 81001, 81013, 81017, 81019, 81023, 81031, 81041, 81043, 81047, 81049, 81071, 81077, 81083, 81097, 81101, 81119, 81131, 81157, 81163, 81173, 81181, 81197, 81199, 81203, 81223, 81233, 81239, 81281, 81283, 81293, 81299, 81307, 81331, 81343, 81349, 81353, 81359, 81371, 81373, 81401, 81409, 81421, 81439, 81457, 81463, 81509, 81517, 81527, 81533, 81547, 81551, 81553, 81559, 81563, 81569, 81611, 81619, 81629, 81637, 81647, 81649, 81667, 81671, 81677, 81689, 81701, 81703, 81707, 81727, 81737, 81749, 81761, 81769, 81773, 81799, 81817, 81839, 81847, 81853, 81869, 81883, 81899, 81901, 81919, 81929, 81931, 81937, 81943, 81953, 81967, 81971, 81973, 82003, 82007, 82009, 82013, 82021, 82031, 82037, 82039, 82051, 82067, 82073, 82129, 82139, 82141, 82153, 82163, 82171, 82183, 82189, 82193, 82207, 82217, 82219, 82223, 82231, 82237, 82241, 82261, 82267, 82279, 82301, 82307, 82339, 82349, 82351, 82361, 82373, 82387, 82393, 82421, 82457, 82463, 82469, 82471, 82483, 82487, 82493, 82499, 82507, 82529, 82531, 82549, 82559, 82561, 82567, 82571, 82591, 82601, 82609, 82613, 82619, 82633, 82651, 82657, 82699, 82721, 82723, 82727, 82729, 82757, 82759, 82763, 82781, 82787, 82793, 82799, 82811, 82813, 82837, 82847, 82883, 82889, 82891, 82903, 82913, 82939, 82963, 82981, 82997, 83003, 83009, 83023, 83047, 83059, 83063, 83071, 83077, 83089, 83093, 83101, 83117, 83137, 83177, 83203, 83207, 83219, 83221, 83227, 83231, 83233, 83243, 83257, 83267, 83269, 83273, 83299, 83311, 83339, 83341, 83357, 83383, 83389, 83399, 83401, 83407, 83417, 83423, 83431, 83437, 83443, 83449, 83459, 83471, 83477, 83497, 83537, 83557, 83561, 83563, 83579, 83591, 83597, 83609, 83617, 83621, 83639, 83641, 83653, 83663, 83689, 83701, 83717, 83719, 83737, 83761, 83773, 83777, 83791, 83813, 83833, 83843, 83857, 83869, 83873, 83891, 83903, 83911, 83921, 83933, 83939, 83969, 83983, 83987, 84011, 84017, 84047, 84053, 84059, 84061, 84067, 84089, 84121, 84127, 84131, 84137, 84143, 84163, 84179, 84181, 84191, 84199, 84211, 84221, 84223, 84229, 84239, 84247, 84263, 84299, 84307, 84313, 84317, 84319, 84347, 84349, 84377, 84389, 84391, 84401, 84407, 84421, 84431, 84437, 84443, 84449, 84457, 84463, 84467, 84481, 84499, 84503, 84509, 84521, 84523, 84533, 84551, 84559, 84589, 84629, 84631, 84649, 84653, 84659, 84673, 84691, 84697, 84701, 84713, 84719, 84731, 84737, 84751, 84761, 84787, 84793, 84809, 84811, 84827, 84857, 84859, 84869, 84871, 84913, 84919, 84947, 84961, 84967, 84977, 84979, 84991, 85009, 85021, 85027, 85037, 85049, 85061, 85081, 85087, 85091, 85093, 85103, 85109, 85121, 85133, 85147, 85159, 85193, 85199, 85201, 85213, 85223, 85229, 85237, 85243, 85247, 85259, 85297, 85303, 85313, 85331, 85333, 85361, 85363, 85369, 85381, 85411, 85427, 85429, 85439, 85447, 85451, 85453, 85469, 85487, 85513, 85517, 85523, 85531, 85549, 85571, 85577, 85597, 85601, 85607, 85619, 85621, 85627, 85639, 85643, 85661, 85667, 85669, 85691, 85703, 85711, 85717, 85733, 85751, 85781, 85793, 85817, 85819, 85829, 85831, 85837, 85843, 85847, 85853, 85889, 85903, 85909, 85931, 85933, 85991, 85999, 86011, 86017, 86027, 86029, 86069, 86077, 86083, 86111, 86113, 86117, 86131, 86137, 86143, 86161, 86171, 86179, 86183, 86197, 86201, 86209, 86239, 86243, 86249, 86257, 86263, 86269, 86287, 86291, 86293, 86297, 86311, 86323, 86341, 86351, 86353, 86357, 86369, 86371, 86381, 86389, 86399, 86413, 86423, 86441, 86453, 86461, 86467, 86477, 86491, 86501, 86509, 86531, 86533, 86539, 86561, 86573, 86579, 86587, 86599, 86627, 86629, 86677, 86689, 86693, 86711, 86719, 86729, 86743, 86753, 86767, 86771, 86783, 86813, 86837, 86843, 86851, 86857, 86861, 86869, 86923, 86927, 86929, 86939, 86951, 86959, 86969, 86981, 86993, 87011, 87013, 87037, 87041, 87049, 87071, 87083, 87103, 87107, 87119, 87121, 87133, 87149, 87151, 87179, 87181, 87187, 87211, 87221, 87223, 87251, 87253, 87257, 87277, 87281, 87293, 87299, 87313, 87317, 87323, 87337, 87359, 87383, 87403, 87407, 87421, 87427, 87433, 87443, 87473, 87481, 87491, 87509, 87511, 87517, 87523, 87539, 87541, 87547, 87553, 87557, 87559, 87583, 87587, 87589, 87613, 87623, 87629, 87631, 87641, 87643, 87649, 87671, 87679, 87683, 87691, 87697, 87701, 87719, 87721, 87739, 87743, 87751, 87767, 87793, 87797, 87803, 87811, 87833, 87853, 87869, 87877, 87881, 87887, 87911, 87917, 87931, 87943, 87959, 87961, 87973, 87977, 87991, 88001, 88003, 88007, 88019, 88037, 88069, 88079, 88093, 88117, 88129, 88169, 88177, 88211, 88223, 88237, 88241, 88259, 88261, 88289, 88301, 88321, 88327, 88337, 88339, 88379, 88397, 88411, 88423, 88427, 88463, 88469, 88471, 88493, 88499, 88513, 88523, 88547, 88589, 88591, 88607, 88609, 88643, 88651, 88657, 88661, 88663, 88667, 88681, 88721, 88729, 88741, 88747, 88771, 88789, 88793, 88799, 88801, 88807, 88811, 88813, 88817, 88819, 88843, 88853, 88861, 88867, 88873, 88883, 88897, 88903, 88919, 88937, 88951, 88969, 88993, 88997, 89003, 89009, 89017, 89021, 89041, 89051, 89057, 89069, 89071, 89083, 89087, 89101, 89107, 89113, 89119, 89123, 89137, 89153, 89189, 89203, 89209, 89213, 89227, 89231, 89237, 89261, 89269, 89273, 89293, 89303, 89317, 89329, 89363, 89371, 89381, 89387, 89393, 89399, 89413, 89417, 89431, 89443, 89449, 89459, 89477, 89491, 89501, 89513, 89519, 89521, 89527, 89533, 89561, 89563, 89567, 89591, 89597, 89599, 89603, 89611, 89627, 89633, 89653, 89657, 89659, 89669, 89671, 89681, 89689, 89753, 89759, 89767, 89779, 89783, 89797, 89809, 89819, 89821, 89833, 89839, 89849, 89867, 89891, 89897, 89899, 89909, 89917, 89923, 89939, 89959, 89963, 89977, 89983, 89989, 90001, 90007, 90011, 90017, 90019, 90023, 90031, 90053, 90059, 90067, 90071, 90073, 90089, 90107, 90121, 90127, 90149, 90163, 90173, 90187, 90191, 90197, 90199, 90203, 90217, 90227, 90239, 90247, 90263, 90271, 90281, 90289, 90313, 90353, 90359, 90371, 90373, 90379, 90397, 90401, 90403, 90407, 90437, 90439, 90469, 90473, 90481, 90499, 90511, 90523, 90527, 90529, 90533, 90547, 90583, 90599, 90617, 90619, 90631, 90641, 90647, 90659, 90677, 90679, 90697, 90703, 90709, 90731, 90749, 90787, 90793, 90803, 90821, 90823, 90833, 90841, 90847, 90863, 90887, 90901, 90907, 90911, 90917, 90931, 90947, 90971, 90977, 90989, 90997, 91009, 91019, 91033, 91079, 91081, 91097, 91099, 91121, 91127, 91129, 91139, 91141, 91151, 91153, 91159, 91163, 91183, 91193, 91199, 91229, 91237, 91243, 91249, 91253, 91283, 91291, 91297, 91303, 91309, 91331, 91367, 91369, 91373, 91381, 91387, 91393, 91397, 91411, 91423, 91433, 91453, 91457, 91459, 91463, 91493, 91499, 91513, 91529, 91541, 91571, 91573, 91577, 91583, 91591, 91621, 91631, 91639, 91673, 91691, 91703, 91711, 91733, 91753, 91757, 91771, 91781, 91801, 91807, 91811, 91813, 91823, 91837, 91841, 91867, 91873, 91909, 91921, 91939, 91943, 91951, 91957, 91961, 91967, 91969, 91997, 92003, 92009, 92033, 92041, 92051, 92077, 92083, 92107, 92111, 92119, 92143, 92153, 92173, 92177, 92179, 92189, 92203, 92219, 92221, 92227, 92233, 92237, 92243, 92251, 92269, 92297, 92311, 92317, 92333, 92347, 92353, 92357, 92363, 92369, 92377, 92381, 92383, 92387, 92399, 92401, 92413, 92419, 92431, 92459, 92461, 92467, 92479, 92489, 92503, 92507, 92551, 92557, 92567, 92569, 92581, 92593, 92623, 92627, 92639, 92641, 92647, 92657, 92669, 92671, 92681, 92683, 92693, 92699, 92707, 92717, 92723, 92737, 92753, 92761, 92767, 92779, 92789, 92791, 92801, 92809, 92821, 92831, 92849, 92857, 92861, 92863, 92867, 92893, 92899, 92921, 92927, 92941, 92951, 92957, 92959, 92987, 92993, 93001, 93047, 93053, 93059, 93077, 93083, 93089, 93097, 93103, 93113, 93131, 93133, 93139, 93151, 93169, 93179, 93187, 93199, 93229, 93239, 93241, 93251, 93253, 93257, 93263, 93281, 93283, 93287, 93307, 93319, 93323, 93329, 93337, 93371, 93377, 93383, 93407, 93419, 93427, 93463, 93479, 93481, 93487, 93491, 93493, 93497, 93503, 93523, 93529, 93553, 93557, 93559, 93563, 93581, 93601, 93607, 93629, 93637, 93683, 93701, 93703, 93719, 93739, 93761, 93763, 93787, 93809, 93811, 93827, 93851, 93871, 93887, 93889, 93893, 93901, 93911, 93913, 93923, 93937, 93941, 93949, 93967, 93971, 93979, 93983, 93997, 94007, 94009, 94033, 94049, 94057, 94063, 94079, 94099, 94109, 94111, 94117, 94121, 94151, 94153, 94169, 94201, 94207, 94219, 94229, 94253, 94261, 94273, 94291, 94307, 94309, 94321, 94327, 94331, 94343, 94349, 94351, 94379, 94397, 94399, 94421, 94427, 94433, 94439, 94441, 94447, 94463, 94477, 94483, 94513, 94529, 94531, 94541, 94543, 94547, 94559, 94561, 94573, 94583, 94597, 94603, 94613, 94621, 94649, 94651, 94687, 94693, 94709, 94723, 94727, 94747, 94771, 94777, 94781, 94789, 94793, 94811, 94819, 94823, 94837, 94841, 94847, 94849, 94873, 94889, 94903, 94907, 94933, 94949, 94951, 94961, 94993, 94999, 95003, 95009, 95021, 95027, 95063, 95071, 95083, 95087, 95089, 95093, 95101, 95107, 95111, 95131, 95143, 95153, 95177, 95189, 95191, 95203, 95213, 95219, 95231, 95233, 95239, 95257, 95261, 95267, 95273, 95279, 95287, 95311, 95317, 95327, 95339, 95369, 95383, 95393, 95401, 95413, 95419, 95429, 95441, 95443, 95461, 95467, 95471, 95479, 95483, 95507, 95527, 95531, 95539, 95549, 95561, 95569, 95581, 95597, 95603, 95617, 95621, 95629, 95633, 95651, 95701, 95707, 95713, 95717, 95723, 95731, 95737, 95747, 95773, 95783, 95789, 95791, 95801, 95803, 95813, 95819, 95857, 95869, 95873, 95881, 95891, 95911, 95917, 95923, 95929, 95947, 95957, 95959, 95971, 95987, 95989, 96001, 96013, 96017, 96043, 96053, 96059, 96079, 96097, 96137, 96149, 96157, 96167, 96179, 96181, 96199, 96211, 96221, 96223, 96233, 96259, 96263, 96269, 96281, 96289, 96293, 96323, 96329, 96331, 96337, 96353, 96377, 96401, 96419, 96431, 96443, 96451, 96457, 96461, 96469, 96479, 96487, 96493, 96497, 96517, 96527, 96553, 96557, 96581, 96587, 96589, 96601, 96643, 96661, 96667, 96671, 96697, 96703, 96731, 96737, 96739, 96749, 96757, 96763, 96769, 96779, 96787, 96797, 96799, 96821, 96823, 96827, 96847, 96851, 96857, 96893, 96907, 96911, 96931, 96953, 96959, 96973, 96979, 96989, 96997, 97001, 97003, 97007, 97021, 97039, 97073, 97081, 97103, 97117, 97127, 97151, 97157, 97159, 97169, 97171, 97177, 97187, 97213, 97231, 97241, 97259, 97283, 97301, 97303, 97327, 97367, 97369, 97373, 97379, 97381, 97387, 97397, 97423, 97429, 97441, 97453, 97459, 97463, 97499, 97501, 97511, 97523, 97547, 97549, 97553, 97561, 97571, 97577, 97579, 97583, 97607, 97609, 97613, 97649, 97651, 97673, 97687, 97711, 97729, 97771, 97777, 97787, 97789, 97813, 97829, 97841, 97843, 97847, 97849, 97859, 97861, 97871, 97879, 97883, 97919, 97927, 97931, 97943, 97961, 97967, 97973, 97987, 98009, 98011, 98017, 98041, 98047, 98057, 98081, 98101, 98123, 98129, 98143, 98179, 98207, 98213, 98221, 98227, 98251, 98257, 98269, 98297, 98299, 98317, 98321, 98323, 98327, 98347, 98369, 98377, 98387, 98389, 98407, 98411, 98419, 98429, 98443, 98453, 98459, 98467, 98473, 98479, 98491, 98507, 98519, 98533, 98543, 98561, 98563, 98573, 98597, 98621, 98627, 98639, 98641, 98663, 98669, 98689, 98711, 98713, 98717, 98729, 98731, 98737, 98773, 98779, 98801, 98807, 98809, 98837, 98849, 98867, 98869, 98873, 98887, 98893, 98897, 98899, 98909, 98911, 98927, 98929, 98939, 98947, 98953, 98963, 98981, 98993, 98999, 99013, 99017, 99023, 99041, 99053, 99079, 99083, 99089, 99103, 99109, 99119, 99131, 99133, 99137, 99139, 99149, 99173, 99181, 99191, 99223, 99233, 99241, 99251, 99257, 99259, 99277, 99289, 99317, 99347, 99349, 99367, 99371, 99377, 99391, 99397, 99401, 99409, 99431, 99439, 99469, 99487, 99497, 99523, 99527, 99529, 99551, 99559, 99563, 99571, 99577, 99581, 99607, 99611, 99623, 99643, 99661, 99667, 99679, 99689, 99707, 99709, 99713, 99719, 99721, 99733, 99761, 99767, 99787, 99793, 99809, 99817, 99823, 99829, 99833, 99839, 99859, 99871, 99877, 99881, 99901, 99907, 99923, 99929, 99961, 99971, 99989, 99991,100003]\ni=0\nwhile True:\n    if n==2:\n        print(2)\n        break\n    elif primelist[i]<n and n<=primelist[i+1]:\n        print(primelist[i+1])\n        break\n    else:\n        i+=1\n","x=int(input())\nps=[2]\ni=3\nwhile ps[-1] < x:\n    for p in ps:\n        if i%p==0:\n            break\n        elif i<p**2:\n            ps.append(i)\n            break\n    i+=2\nprint(ps[-1])","x = int(input())\n\ndef is_prime(num):\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\nfor i in range(x, 10 ** 9):\n    if is_prime(i):\n        print(i)\n        exit()\n","from bisect import bisect_left\n\nX = int(input())\n\nN = 10 ** 6 + 10\n# N = int(input())\ndef primes(n):\n    import math\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\nprime_lst = primes(N)\n\ntmp = bisect_left(prime_lst, X)\nprint (prime_lst[tmp])","x = int(input())\nflg = 0\n_flg = 1\nwhile flg == 0:\n    mx  = int(x**0.5)\n    for i in range(2, mx+1):\n        if x % i == 0:\n            _flg = 0\n            break\n    fig = _flg\n    if flg == 0:\n        x+=1\nprint(x)\n","x=int(input())\nl=[]\nif x==2:\n    print(2)\n    exit()\nfor i in range(2,x):\n    for j in l:\n        if i%j==0:break\n    else:\n        l.append(i)\nif x%2==0:x+=1\nwhile True:\n    for i in l:\n        if x%i==0:\n            x+=2\n            break\n    else:\n        break\nprint(x)","X = int(input())\nfrom sympy import primerange, sieve\nL = list(sieve.primerange(X, 10**5))\nprint(L[0])","from sympy import sieve\n \ndef Eratosthenes(n):\n    li = [i for i in range(2,n+1)]\n    judge = [True for i in range(n+1)]\n    ans = []\n \n    for i in range(2,n+1):\n        if judge[i] == True:\n            for j in range(i*2,n+1,i):\n                judge[j] = False\n            ans.append(i)\n    return ans\n \nx = int(input())\nl = Eratosthenes(10 ** 6)\nfor i in l:\n    if i >= x:\n        print(i)\n        exit()","import sys\ninput = sys.stdin.readline\n\n\nx = int(input())\n\nprime = [True] * (1000000)\nprime[2] = True\n\ndef e_prime(x):\n\ti = 2\n\tflag = False\n\twhile True:\n\t\tif prime[i]:\n\t\t\tif(flag==True):\n\t\t\t\treturn i\n\t\t\telse:\n\t\t\t\tfor j in range(i**2,len(prime),i):\n\t\t\t\t\tprime[j]=False\n\t\ti+=1\n\t\tif(i==x):flag=True\n\nprint(e_prime(x))","import math\nimport sys\ninput = sys.stdin.readline\n\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\ndef main():\n    X = int(input())\n    for i in range(X, 100004):\n        if is_prime(i):\n            print(i)\n            break\n\nif __name__ == '__main__': main()","n = int(input())\n\n\nwhile 1:\n    prime_dc = 0\n    for i in range(2,n):\n        if n % i != 0:\n            prime_dc += 1\n            \n    if n-2 == prime_dc:\n        break\n    \n    n += 1\n\nprint(n)","x = int(input())\nwhile True:\n    if x % 2 != 0:    \n        for m in range(3,x,2):\n            if x % m == 0:\n                break\n        else:\n            break\n    x += 1\nprint (x)","import math\n\ndef IsP(n):\n    s = int(math.ceil(math.sqrt(x)))\n    for i in range(2,s+1):\n        if(n%i == 0):\n            return 0\n    return 1\n\nx = int(input())\n\nwhile(IsP(x)==0):\n    x +=1\nprint(x)\n","x = int(input())\n\ndef is_prime(q):\n    if q == 2:\n        return True\n    if q < 2 or q & 1 == 0:\n        return False\n    return pow(2, q-1, q) == 1\n\ni = 0\nwhile True:\n    if is_prime(x+i):\n        break\n    i += 1\n\nprint(x+i)\n","def isPrime(x):\n    if x == 1:\n        return False\n    if x == 2:\n        return True\n    k = 3\n    while k < x:\n        if x % k == 0:\n            return False\n        k += 2\n    return True\n    \nX = int(input())\n\nwhile True:\n    if isPrime(X):\n        print(X)\n        exit(0)\n    X += 1\n","X = int(input())\nif X == 2:\n    print(X)\n    exit()\ntemp = 2\nfor i in range(X, 1000000):\n    for j in range(2, X):\n        if i % j == 0:\n            break\n        if j == X-1:\n            print(i)\n            exit()","x=int(input())\ndef eratosthenes(n):\n  l0=list(range(2,n+1))\n  l1=[1]*(n+1)\n  l1[0]=0\n  l1[1]=0\n  for li in l0:\n    if li>int(n**0.5):\n      break\n    if l1[li]==1:\n      k=2\n      while k*li<=n:\n        l1[k*li]=0\n        k+=1\n  ret=[i for i,li in enumerate(l1) if li==1]\n  return ret\na=eratosthenes(x)\nwhile True:\n  flg=True\n  for ai in a:\n    if x%ai==0:\n      flg=False\n      break\n  if flg:\n    print(x)\n    exit()\n  x+=1\n","x = int(input())\ndef primechecker(n):\n    if n != 2:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n                break\n        return True\n    else:\n        return True\n#\nwhile primechecker(x) == False:\n    x += 1\n\nprint(x)\n","n = int(input())\n\ndef isprime(x):\n    if x == 2:\n        return True\n    elif x == 4:\n        return False\n    for i in range(3, int(x**0.5), 2):\n        if x % i == 0:\n            return False\n    return True\n\ni = n\nwhile True:\n    if isprime(i):\n        break\n    else:\n        i += 1\nprint(i)","from math import sqrt\ndef judge(num):\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(sqrt(num))+1,2):\n            if num % i == 0:\n                return False\n        return True\ns = int(input()) \nwhile(1):\n    if judge(s):\n        print(s)\n        break\n    else:\n        s += 1","def isp(x):\n    for i in range(2,int(x**0.5)+1):\n        if x % i == 0:\n            x += 1\n            return isp(x)\n        else:\n            pass\n    return x\nn = int(input())\nprint(isp(n))","def isprime(x):\n    if x <= 1:\n        return False\n    else:\n        i = 2\n        while i*i <= x:\n            if x % i == 0:\n                return False\n            i += 1\n        return True\n\nX = int(input())\nwhile not(isprime(X)):\n    X += 1\nprint(X)\n    ","X = int(input())\n\nprime = [True for i in range(10**6)]\nprime[0] = False\nprime[1] = False\n\nfor i in range(2, 10**5+4):\n  if prime[i]:\n    for j in range(2, (10**5+4)\/\/i + 1):\n        prime[i*j] = False\nfor i, is_prime in enumerate(prime):\n  if i >= X and is_prime:\n    ret = i\n    break\n    \nprint(ret)","x = int(input())\n\ndef is_prime(n):\n    for i in range(2, n + 1):\n        if i * i > n:\n            break\n        if n % i == 0:\n            return False\n    return n != 1\n\n\nsosu = False\n\nwhile sosu==False:\n    sosu = is_prime(x)\n    x += 1\n\nprint(x-1)","def com(_x):\n    _flg = 1\n    mx  = int(_x**0.5)\n    for i in range(2, mx+1):\n        if _x % i == 0:\n            _flg = 0\n            break\n    return _flg\n\n\nx = int(input())\nflg = 0\nwhile flg == 0:\n    #print(\"a\")\n    flg = com(x)\n    if flg == 0:\n        x+=1\nprint(x)\n","x=int(input())\n\nflag=0\nfor i in range(x,10**18):\n  for p in range(2,i):\n    if i%p==0:\n      break\n  else:\n    print(i)\n    break","import math\nfrom bisect import bisect_left\n\nX = int(input())\n\ndef primes_ref(x):\n    if x < 2: return []\n\n    primes = [i for i in range(x)]\n    primes[1] = 0\n    x_sqrt = math.sqrt(x)\n\n    for prime in primes:\n        if prime == 0: continue \n        if prime > x_sqrt: break\n        for non_prime in range(2 * prime, x, prime): primes[non_prime] = 0\n\n    return [prime for prime in primes if prime != 0]\n\ndef find_ge(a, x):\n  i = bisect_left(a, x)\n  if i != len(a):\n    return a[i]\n  raise ValueError\n\nprimes = primes_ref(min(X * X, 100004))\nprint(find_ge(primes, X))","import math\nimport sys\n\ndef eratosthenes(limit):\n    A = [i for i in range(2, limit+1)]\n    P = []\n    time = 0\n    \n    while True:\n        prime = min(A)\n        \n        if prime > math.sqrt(limit):\n            break\n            \n        P.append(prime)\n            \n        i = 0\n        while i < len(A):\n            if A[i] % prime == 0:\n                A.pop(i)\n                continue\n            i += 1\n            \n    for a in A:\n        P.append(a)\n            \n    return P\n\nX = int(input())\nfor i in eratosthenes(100003):\n    if i >= X:\n        print(i)\n        sys.exit()","x=int(input())\nif x==2:\n    print(2)\nelse:\n    tmp=x\n    flag=False\n    while True:\n        for i in range(2,tmp):\n            if tmp%i==0:\n                break\n            if i==tmp-1:\n                flag=True\n        if flag:\n            break\n        else:\n            flag=False\n            tmp+=1\n    print(tmp)","import math\na=int(input())\n\n# \u6574\u6570x\u304c\u7d20\u6570\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\ndef is_prime(x):\n    if x < 2: return False # 2\u672a\u6e80\u306b\u7d20\u6570\u306f\u306a\u3044\n    if x == 2 or x == 3 or x == 5: return True # 2,3,5\u306f\u7d20\u6570\n    if x % 2 == 0 or x % 3 == 0 or x % 5 == 0: return False # 2,3,5\u306e\u500d\u6570\u306f\u5408\u6210\u6570\n\n    # \u305f\u3081\u3057\u5272\u308a: \u7591\u4f3c\u7d20\u6570(2\u3067\u30823\u3067\u30825\u3067\u3082\u5272\u308a\u5207\u308c\u306a\u3044\u6570\u5b57)\u3067\u6b21\u3005\u306b\u5272\u3063\u3066\u3044\u304f\n    prime = 7\n    step = 4\n    while prime <= math.sqrt(x):\n        if x % prime == 0: return False\n\n        prime += step\n        step = 6 - step\n\n    return True\n\nfor i in range(a,a+10**5):\n    if is_prime(i):\n        print(i)\n        break","x=int(input())\nimport math\ndef is_prime(n):\n    if n==1:\n        return False\n    for divisor in range(2,int(math.sqrt(n))+1):\n        if n%divisor == 0:\n            return False\n    return True\n\nk=0\nwhile True:\n    if is_prime(x+k):\n        print(x+k)\n        break\n    else:\n        k += 1","# Original Submission At: https:\/\/atcoder.jp\/contests\/abc149\/submissions\/16823042\nimport sys\nsys.setrecursionlimit(1000000)\n\nx= int(input())\n\ndef prime_check(num,count):\n    if (num % count) != 0:\n        if num <= count**2:\n            print(num)\n        else:\n            prime_check(num,count+1)\n    else :\n        prime_check(num+1,2)\n\nif x==2 :\n    print (2)\nelse:\n    prime_check(x,2)\n","# -*- coding: utf-8 -*-\nX = int(input())\nans = 0\npn = [2]\nflag = 0\nfor i in range(3,100005):\n  for k in pn:\n    if i%k == 0:\n      flag = 0\n      break\n    else:\n      flag = 1\n  if flag == 1:\n    pn.append(i)\nfor i in range(len(pn)-1):\n  if pn[i] < X < pn[i+1]:\n    ans = pn[i+1]\nprint(ans)","for i in range(int(input()),100004):\n  for j in range(2, i):\n    if i % j == 0:\n      break\n  else:\n    print(i)\n    break","X = int(input())\nX = X + 1\nprime = None\nwhile True:\n    for i in range(2, X):\n        if X % i == 0:\n            break\n    else:\n        prime = X\n    if prime != None:\n        break\n    else:\n        X += 1\n\nprint(X)","import sys\n#import numpy as np\nstdin = sys.stdin\n\nri = lambda: int(rs())\nrl = lambda: list(map(int, stdin.readline().split())) # applies to numbers only\nrs = lambda: stdin.readline().rstrip()  # ignore trailing spaces\n\nX = ri()\ndef primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if not is_prime[i]:\n            continue\n        for j in range(i * 2, n + 1, i):\n            is_prime[j] = False\n    return [i for i in range(n + 1) if is_prime[i]]\n\nl = set(primes(10**6))\n\nwhile True:\n    if X in l:\n        print(X)\n        exit()\n    X += 1","import sys\nimport  math\nimport fractions\nfrom collections import defaultdict\nstdin = sys.stdin\n     \nns = lambda: stdin.readline().rstrip()\nni = lambda: int(stdin.readline().rstrip())\nnm = lambda: map(int, stdin.readline().split())\nnl = lambda: list(map(int, stdin.readline().split()))\n\n\n\nX=int(input())\n\nprime_l=[0]*(2*X)\nfor  i in range(2,X):\n    if(prime_l[i]==0):\n        for j in range(1,(2*X)\/\/i):\n            prime_l[i*j]+=1\n        \nwhile(1):\n    X+=1\n    if(prime_l[X]==0):\n        print(X)\n        sys.exit(0)\n","def miller_rabin(n, k=100):\n    import random\n    if n == 2:\n        return True\n    if n == 1 or n & 1 == 0:\n        return False\n    d = (n - 1) >> 1\n    while d & 1 == 0:\n        d >>= 1\n    for _ in range(k):\n        a = random.randint(1, n - 1)\n        t = d\n        y = pow(a, t, n)\n        while t != n - 1 and y != 1 and y != n - 1:\n            y = (y * y) % n\n            t <<= 1\n        if y != n - 1 and t & 1 == 0:\n            return False\n    return True\ndef main():\n  x=int(input())\n  for i in range(x+1,1000000):\n    if miller_rabin(i):\n      print(i)\n      return\nmain()","a=input()\n\ndef prime(n):\n  if n <= 1:\n    return False\n  else:\n    for i in range(2,n):\n      if n%i == 0:\n      \treturn False\n      return True\n    \nwhile prime(a)==False:\n  a += 1\n\nprint(a)","M = 10 ** 6\ne = 10 ** 3\n\n# the sieve of Eratosthenes\nprimes = [True] * (M + 1)\nprimes[0] = False\nprimes[1] = False\nfor i in range(2, e):\n    if primes[i]:\n        for j in range(i * 2, M + 1, i):\n            primes[j] = False\n\nX = int(input())\n\nprint(X + primes[X:].index(1))","\nX=int(input())\nif X==2:\n  print(X)\nelse:\n  for i in range(2,X**(1\/2)):\n    if X%i==0:\n      X+=1\n  print(X)\n","from bisect import bisect_right\nINFTY = 10**5\nP = [1 for _ in range(INFTY)]\nP[0]=0\nP[1]=0\nfor i in range(2,int(INFTY**0.5)+1):\n    for j in range(i*i,INFTY,i):\n        P[j] = 0\nQ = []\nfor i in range(INFTY):\n    if P[i]==1:\n        Q.append(i)\nX = int(input())\nind = bisect_right(Q,X)\nprint(Q[ind])","X = int(input())\n\ni = X\n\nwhile 1:\n    if i == 2:\n        print(2)\n        exit()\n    if i % 2 == 0:\n        pass\n    else:\n        for j in range(2, i):\n            if i % j == 0:\n                break\n\n            if j == i-1:\n                print(i)\n                exit()\n    i += 1","import math\nn = int(input())\n\ndef check(s):\n\tif s == 1:\n\t\treturn False\n\tfor i in range(2, int(math.sqrt(s)) + 1):\n\t\tif s%i == 0:\n\t\t\treturn False\n\treturn True\n\nfor i in range(n,10**6):\n\tif check(i):\n\t\tprint (i)\n\t\texit()\n","import math\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\n\nx = int(input())\n\nif x == 2:\n    print(x)\n    exit()\n\nif x % 2 == 0:\n    x += 1\n\nwhile not is_prime(x):\n    x += 2\n\nprint(x)\n","#!\/usr\/bin\/env python3\n\ndef main():\n    x = int(input())\n    primes = furui(300000)\n    for p in primes:\n        if x <= p:\n            print(p)\n            return\n    raise ValueError\n\n# https:\/\/mathtrain.jp\/eratosthenes\ndef furui(nmax):\n    assert nmax > 2\n    p = 2\n    primes = list(range(2, nmax + 1))\n    while True:\n        if p ** 2 > nmax:\n            break\n        primes_next = []\n        for x in primes:\n            if x <= p or x % p != 0:\n                primes_next.append(x)\n        primes = primes_next\n        p = primes[primes.index(p) + 1]\n    return primes\n\nif __name__ == \"__main__\":\n    main()\n","n = int(input())\nif n == 2:\n    n = 2\nelse:\n    while pow(2, n-1, n) != 1:\n        n += 1\nprint(n)","def is_prime(n):\n    for p in range(2,n):\n        if n % p ==0:\n            return True\n\nN =int(input())\np=N\nwhile p <10**7:\n    if is_prime(p):\n        p +=1\n    else:\n        print(p)\n        break","x=int(input())\nwhile(True):\n    for i in range(2,x):\n        if x%i==0:\n            break\n    else:\n        print(x)\n        break\n    x+=1","import math\nX=int(input())\nfor i in range(0,X):\n  a=X+i\n  c=int(math.sqrt(a))\n  for j in range(2,c):\n    if a%j!=0:\n      print(a)\nbreak\n      ","import math\nN = int(input())\n\ndef chkPrime(N):\n  if N == 2 or N == 3:\n    return True\n  else:\n    for i in range(2,int(math.sqrt(N))+1):\n      if N % i == 0:\n        return False\n    else:\n      return True\n\nwhile not chkPrime(N):\n  N += 1\n\nprint (N)\n","X = int(input())\n\nwhile True:\n  cnt = 0\n  for i in range(1, X + 1):\n    if X % i != 0:\n      continue\n    else:\n      cnt += 1\n  if cnt == 2:\n    print(X)\n    exit()\n  X += 1","X=int(input())\ndef is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\nflag=False\nwhile(flag==False):\n    if is_prime(X):\n        print(X)\n        flag=True\n        break\n    X+=1","x = int(input())\n\nimport math\n\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\nfor i in range(x, x +1000):\n    if is_prime(i) == True:\n        print(i)\n        break","X = int(input())\n\ndef is_prime(n):\n    if n <= 1:\n        return False   \n    else:\n        for i in range(2, n):\n            if n%i==0:\n                return False\n        return True\n\nwhile is_prime(X)==False:\n    X += 1\n","x=int(input())\n\ndef is_prime(x):\n    if x==2:\n        return 1\n    if x<2 or x%2==0:\n        return 0\n    i=3\n    while i<=x**0.5:\n        if x%i==0:\n            return 0\n        i+=2\n    return 1\nfor i in range(x,x+10**5):\n    if is_prime(i):\n        print(i)\n        exit()\n        \n","import sys\nimport math\ndef is_prime(num):\n    if num < 2:\n        return False\n    else:\n        num_sqrt = math.floor(math.sqrt(num))\n        for prime in range(2, num_sqrt + 1):\n            if num % prime == 0:\n                return False\n                break\n        return True\n\ndef main():\n    x = int(input())\n    i = x\n    while True:\n        if is_prime(i) == True:\n            print(i)\n            sys.exit()\n        i = i + 1\n\n\nif __name__ == '__main__':\n    main()","primes = list((2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 101 103 107 109 113 127 131 137 139 149 151 157 163 167 173 179 181 191 193 197 199 211 223 227 229 233 239 241 251 257 263 269 271 277 281 283 293 307 311 313 317 331 337 347 349 353 359 367 373 379 383 389 397 401 409 419 421 431 433 439 443 449 457 461 463 467 479 487 491 499 503 509 521 523 541 547 557 563 569 571 577 587 593 599 601 607 613 617 619 631 641 643 647 653 659 661 673 677 683 691 701 709 719 727 733 739 743 751 757 761 769 773 787 797 809 811 821 823 827 829 839 853 857 859 863 877 881 883 887 907 911 919 929 937 941 947 953 967 971 977 983 991 997 1009 1013 1019 1021 1031 1033 1039 1049 1051 1061 1063 1069 1087 1091 1093 1097 1103 1109 1117 1123 1129 1151 1153 1163 1171 1181 1187 1193 1201 1213 1217 1223 1229 1231 1237 1249 1259 1277 1279 1283 1289 1291 1297 1301 1303 1307 1319 1321 1327 1361 1367 1373 1381 1399 1409 1423 1427 1429 1433 1439 1447 1451 1453 1459 1471 1481 1483 1487 1489 1493 1499 1511 1523 1531 1543 1549 1553 1559 1567 1571 1579 1583 1597 1601 1607 1609 1613 1619 1621 1627 1637 1657 1663 1667 1669 1693 1697 1699 1709 1721 1723 1733 1741 1747 1753 1759 1777 1783 1787 1789 1801 1811 1823 1831 1847 1861 1867 1871 1873 1877 1879 1889 1901 1907 1913 1931 1933 1949 1951 1973 1979 1987 1993 1997 1999 2003 2011 2017 2027 2029 2039 2053 2063 2069 2081 2083 2087 2089 2099 2111 2113 2129 2131 2137 2141 2143 2153 2161 2179 2203 2207 2213 2221 2237 2239 2243 2251 2267 2269 2273 2281 2287 2293 2297 2309 2311 2333 2339 2341 2347 2351 2357 2371 2377 2381 2383 2389 2393 2399 2411 2417 2423 2437 2441 2447 2459 2467 2473 2477 2503 2521 2531 2539 2543 2549 2551 2557 2579 2591 2593 2609 2617 2621 2633 2647 2657 2659 2663 2671 2677 2683 2687 2689 2693 2699 2707 2711 2713 2719 2729 2731 2741 2749 2753 2767 2777 2789 2791 2797 2801 2803 2819 2833 2837 2843 2851 2857 2861 2879 2887 2897 2903 2909 2917 2927 2939 2953 2957 2963 2969 2971 2999 3001 3011 3019 3023 3037 3041 3049 3061 3067 3079 3083 3089 3109 3119 3121 3137 3163 3167 3169 3181 3187 3191 3203 3209 3217 3221 3229 3251 3253 3257 3259 3271 3299 3301 3307 3313 3319 3323 3329 3331 3343 3347 3359 3361 3371 3373 3389 3391 3407 3413 3433 3449 3457 3461 3463 3467 3469 3491 3499 3511 3517 3527 3529 3533 3539 3541 3547 3557 3559 3571 3581 3583 3593 3607 3613 3617 3623 3631 3637 3643 3659 3671 3673 3677 3691 3697 3701 3709 3719 3727 3733 3739 3761 3767 3769 3779 3793 3797 3803 3821 3823 3833 3847 3851 3853 3863 3877 3881 3889 3907 3911 3917 3919 3923 3929 3931 3943 3947 3967 3989 4001 4003 4007 4013 4019 4021 4027 4049 4051 4057 4073 4079 4091 4093 4099 4111 4127 4129 4133 4139 4153 4157 4159 4177 4201 4211 4217 4219 4229 4231 4241 4243 4253 4259 4261 4271 4273 4283 4289 4297 4327 4337 4339 4349 4357 4363 4373 4391 4397 4409 4421 4423 4441 4447 4451 4457 4463 4481 4483 4493 4507 4513 4517 4519 4523 4547 4549 4561 4567 4583 4591 4597 4603 4621 4637 4639 4643 4649 4651 4657 4663 4673 4679 4691 4703 4721 4723 4729 4733 4751 4759 4783 4787 4789 4793 4799 4801 4813 4817 4831 4861 4871 4877 4889 4903 4909 4919 4931 4933 4937 4943 4951 4957 4967 4969 4973 4987 4993 4999 5003 5009 5011 5021 5023 5039 5051 5059 5077 5081 5087 5099 5101 5107 5113 5119 5147 5153 5167 5171 5179 5189 5197 5209 5227 5231 5233 5237 5261 5273 5279 5281 5297 5303 5309 5323 5333 5347 5351 5381 5387 5393 5399 5407 5413 5417 5419 5431 5437 5441 5443 5449 5471 5477 5479 5483 5501 5503 5507 5519 5521 5527 5531 5557 5563 5569 5573 5581 5591 5623 5639 5641 5647 5651 5653 5657 5659 5669 5683 5689 5693 5701 5711 5717 5737 5741 5743 5749 5779 5783 5791 5801 5807 5813 5821 5827 5839 5843 5849 5851 5857 5861 5867 5869 5879 5881 5897 5903 5923 5927 5939 5953 5981 5987 6007 6011 6029 6037 6043 6047 6053 6067 6073 6079 6089 6091 6101 6113 6121 6131 6133 6143 6151 6163 6173 6197 6199 6203 6211 6217 6221 6229 6247 6257 6263 6269 6271 6277 6287 6299 6301 6311 6317 6323 6329 6337 6343 6353 6359 6361 6367 6373 6379 6389 6397 6421 6427 6449 6451 6469 6473 6481 6491 6521 6529 6547 6551 6553 6563 6569 6571 6577 6581 6599 6607 6619 6637 6653 6659 6661 6673 6679 6689 6691 6701 6703 6709 6719 6733 6737 6761 6763 6779 6781 6791 6793 6803 6823 6827 6829 6833 6841 6857 6863 6869 6871 6883 6899 6907 6911 6917 6947 6949 6959 6961 6967 6971 6977 6983 6991 6997 7001 7013 7019 7027 7039 7043 7057 7069 7079 7103 7109 7121 7127 7129 7151 7159 7177 7187 7193 7207 7211 7213 7219 7229 7237 7243 7247 7253 7283 7297 7307 7309 7321 7331 7333 7349 7351 7369 7393 7411 7417 7433 7451 7457 7459 7477 7481 7487 7489 7499 7507 7517 7523 7529 7537 7541 7547 7549 7559 7561 7573 7577 7583 7589 7591 7603 7607 7621 7639 7643 7649 7669 7673 7681 7687 7691 7699 7703 7717 7723 7727 7741 7753 7757 7759 7789 7793 7817 7823 7829 7841 7853 7867 7873 7877 7879 7883 7901 7907 7919 7927 7933 7937 7949 7951 7963 7993 8009 8011 8017 8039 8053 8059 8069 8081 8087 8089 8093 8101 8111 8117 8123 8147 8161 8167 8171 8179 8191 8209 8219 8221 8231 8233 8237 8243 8263 8269 8273 8287 8291 8293 8297 8311 8317 8329 8353 8363 8369 8377 8387 8389 8419 8423 8429 8431 8443 8447 8461 8467 8501 8513 8521 8527 8537 8539 8543 8563 8573 8581 8597 8599 8609 8623 8627 8629 8641 8647 8663 8669 8677 8681 8689 8693 8699 8707 8713 8719 8731 8737 8741 8747 8753 8761 8779 8783 8803 8807 8819 8821 8831 8837 8839 8849 8861 8863 8867 8887 8893 8923 8929 8933 8941 8951 8963 8969 8971 8999 9001 9007 9011 9013 9029 9041 9043 9049 9059 9067 9091 9103 9109 9127 9133 9137 9151 9157 9161 9173 9181 9187 9199 9203 9209 9221 9227 9239 9241 9257 9277 9281 9283 9293 9311 9319 9323 9337 9341 9343 9349 9371 9377 9391 9397 9403 9413 9419 9421 9431 9433 9437 9439 9461 9463 9467 9473 9479 9491 9497 9511 9521 9533 9539 9547 9551 9587 9601 9613 9619 9623 9629 9631 9643 9649 9661 9677 9679 9689 9697 9719 9721 9733 9739 9743 9749 9767 9769 9781 9787 9791 9803 9811 9817 9829 9833 9839 9851 9857 9859 9871 9883 9887 9901 9907 9923 9929 9931 9941 9949 9967 9973 10007).split()) \n\n\nX = int(input())\nX -= 1\n\nwhile 1:\n  X += 1\n  if X is in primes:\n    print(X)\n    break","import math\nx = int(input())\n\na = 10 ** 6\nb = int(math.sqrt(a)+1)\np = [True]*(a+1)\np[0] = False\np[1] = False\n\nfor i in range(4, a+1, 2):\n  p[i] = False\n  \nfor i in range(3, b+1, 2):\n  if p[i]:\n    for j in range(i+i, a+1, i):\n      p[j] = False\n\nfor i in range(x, a+1):\n  if p[i]:\n    print(i)\n    break","import math\n\n# \u7d20\u6570\u5224\u5b9a\u95a2\u6570\ndef isPrime(num):\n    # 2\u672a\u6e80\u306e\u6570\u5b57\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    if num < 2: return False\n    # 2\u306f\u7d20\u6570\n    elif num == 2: return True\n    # \u5076\u6570\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    elif num % 2 == 0: return False\n\n    # 3 ~ num\u307e\u3067\u30eb\u30fc\u30d7\u3057\u3001\u9014\u4e2d\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u304c\u3042\u308b\u304b\u691c\u7d22\n    # \u9014\u4e2d\u3067\u5272\u308a\u5207\u308c\u308b\u5834\u5408\u306f\u7d20\u6570\u3067\u306f\u306a\u3044\n    for i in range(3, math.floor(math.sqrt(num))+1, 2):\n        if num % i == 0:\n            return False\n\n    # \u7d20\u6570\n    return True\n\n# \u7d20\u6570\u5224\u5b9a\ndef callIsPrime(input_num=1000):\n    numbers = []\n    # \u30eb\u30fc\u30d7\u3057\u306a\u304c\u3089\u7d20\u6570\u3092\u691c\u7d22\u3059\u308b\n    for i in range(1, input_num):\n        if isPrime(i):\n            numbers.append(i)\n\n    # \u7d20\u6570\u914d\u5217\u3092\u8fd4\u3059\n    return numbers\n\n# \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057\nprime_list = callIsPrime(100004)\n\n\nX = int(input())\n\nfor v in prime_list:\n    if X<=v:\n        print(v)\n        break","def is_prime(q):\n    q = abs(q)\n    if q == 2: return True\n    if q < 2 or q&1 == 0: return False\n    return pow(2, q-1, q) == 1\n\nif __name__ == '__main__':\n    a = int(input())\n    while(not is_prime(a)):\n        a = a+1\n    print(a)\n","def factorization(n):\n    arr = []\n    temp = n\n    for i in range(2, int(-(-n**0.5\/\/1))+1):\n        if temp%i==0:\n            cnt=0\n            while temp%i==0:\n                cnt+=1\n                temp \/\/= i\n            arr.append([i, cnt])\n\n    if temp!=1:\n        arr.append([temp, 1])\n\n    if arr==[]:\n        arr.append([n, 1])\n\n    return arr\n\nX = int(input())\n\nfor i in range(X, 10 ** 6):\n    check = factorization(i)\n    l = len(check)\n    if l == 1 and check[0][1] == 1:\n        print(i)\n        exit()","x = int(input())\n\nx_ = int(x ** 0.5)\n\nprime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331]\n\nidx=0\nwhile True:\n    if prime[idx+1] > x_:\n        break\n    idx += 1\nidx+=1\n\ny = x\nwhile True:\n    f = True\n    for i in prime[:idx]:\n        if y % i == 0:\n            f = False\n            break\n    if f:\n        break\n    else:\n        y += 1\n\nprint(y)","num = int(input())\n\ndef factors(x):\n  a = []\n  for i in range(1, x + 1):\n      if x % i == 0:\n          a.append(i)\n  return a\n\nf = (factors(num))\n\nif (len(f) != 2): \n  while (len(f) != 2): \n    num += 1\n    f = factors(num)\n  print (num)\nelse: \n  print (num)","X=int(input())\nfor i in range(X,10**6):\n  for j in range(2,i):\n    if i%j==0:\n      break\n    if j==i-1:\n      print(i)\n      exit()","import bisect\n\ndef sieve(n):\n  num = [True]*n\n  num[0] = num[1] = False\n  for i in range(2,int(n**0.5)+1):\n    if num[i]:\n      for j in range(i**2, n, i):\n        num[j] = False\n  return [i for i in range(2,n) if num[i]]\n      \nx = int(input())\n\np = sieve(10**5+4)\n\nindex = bisect.bisect_left(p,x)\n\nprint(p[index])","def sosu(x):\n    for i in range(2,int(x**0.5)):\n        if x%i==0:\n            return False\n    else:\n        return True\n\nx=int(input())\nfor i in range(x,10**6):\n    if sosu(i)==True:\n        print(i)\n        break","import math\nx = int(input())\n\ndef isPrime(x):\n    for i in range(2,int(math.sqrt(x))+1):\n        if x % i == 0:\n            return False\n    return True\n\nfor i in range(100000):\n    if isPrime(x+i):\n        break\n    else:\n        continue\nprint(x+i)\n","x = int(input())\nprimes = [True for _ in range(2*x)]\nfor i in range(2,len(primes)):\n    if primes[i]:\n        index = 2\n        while i * index < len(primes):\n            primes[i * index] = False\n            index+=1\n\nfor num in range(2,len(primes)):\n    if primes[num] and num >= x:\n        print(num)\n        break","def main():\n\tx = int(input())\n\twhile not IsPrime(x):\n\t\tx += 1\n\tprint(x)\n\ndef IsPrime(n):\n\tif n < 2:\n\t\treturn False\n\telif n == 2:\n\t\treturn True\n\telif n % 2 == 0:\n\t\treturn False\n\t\n\tsqrtN = int(n**0.5)\n\tfor i in range(3, sqrtN, 2):\n\t\tif n%i == 0:\n\t\t\treturn False\n\treturn True\n\nif __name__ == '__main__':\n\tmain()\n","x=int(input())\nwhile 1:\n    for i in range(2,x):\n        if x%i==0:\n            x+=1\n            break\n    else:\n        break\nprint(x)","X = int(input())\ndone = False\nnum = X - 1\n\nwhile not done:\n    num += 1\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            done = True\n\nprint(num)","from collections import deque\n\nX = int(input())\nN = 10**5+4\nN_sq=N**(1\/2)\n\ncheck = deque(range(2,N+1))\nsearch = deque([])\n\nfor n in range(N):\n    if len(check)<=0:\n        break\n        \n    c = check.popleft()\n    search.append(c)\n\n    check = deque([ _ for _ in check if _%c != 0])\n    \n    if c > N_sq:\n        search.extend(check)\n        break\n        \nfor s in search:\n    if X <= s:\n        print(s)\n        break\n","x = int(input())\nflag = False\nwhile not flag:\n    n = x\n    cnt = 0\n    for i in range(2, int(n**0.5+1)):\n        if n % i == 0:\n            cnt += 1\n    if cnt == 0:\n        print(n)\n        flag = True\n    else:\n        x += 1\n","n = int(input())\n\ndef prime_or(num):\n    mx = int(num**(1\/2))\n    \n    for i in range(2,mx):\n        if(num%i == 0):\n            return 0\n    \n    return 1\n    \nflag = 0\nst = n\nwhile True:\n    if(prime_or(st)==1):\n        print(st)\n        break\n    else:\n        st += 1","# coding: utf-8\n\ndef is_prime2(q,k=100):\n  q = abs(q)\n  if q == 2: return True\n  if q < 2 or q&1 == 0: return False\n  for i in xrange(3,k):\n    x,y = q,i\n    while y:\n      x, y =  y, x % y\n    if x != 1: continue\n    if pow(i, q-1, q) != 1:\n      return False\n  return True\n\nX = int(input())\n\nfor i in range(X,10**5+4):\n  if is_prime(i):\n    print(i)\n    exit()","import math\n\nX = int(input())\nmax_n = int(math.sqrt(X))\n\n\ndef solve(x):\n    if x == 2:\n        return 2\n    if x % 2 == 0:\n        x += 1\n\n    for i in range(x, 200001, 2):\n        is_prime = True\n        for j in range(3, max_n+1, 2):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return i\n\n\nprint(solve(X))\n","import math\ndef get_primenumber(number):\n    prime_list = []\n    search_list = list(range(2,10**6+1))\n    while True:\n      if search_list[0] > math.sqrt(number):\n        prime_list.extend(search_list)\n        break\n      else:\n        head_num = search_list[0]\n        prime_list.append(head_num)\n        search_list.pop(0)\n        search_list = [num for num in search_list if num % head_num != 0]\n    return prime_list\n\nx = int(input())\nh = get_primenumber(x)\nfor i in h:\n    if i >= x:\n        print(i)\n        exit()","import math\n\ndef getPrimes(X):\n    primes = []\n    limit = math.sqrt(X)\n    data = [i + 1 for i in range(1, X)]\n    while True:\n        p = data[0]\n        if limit <= p:\n            return primes + data\n        primes.append(p)\n        data = [d for d in data if d % p != 0]\n\ndef getNextPrime(primes, X):\n    while True:\n        if any([X % p == 0 for p in primes]):\n            X += 1\n        else:\n            return X\n        \n        \nX = int(input())\nprimes = getPrimes(X)\nprint(getNextPrime(primes, X))","X=int(input())\ny=0\nif X==2:\n  print(X)\nelse:\n  for i in range(2,X):\n    if X%i==0:\n      X+=1\n  print(X)","X = int(input())\ndef is_prime(n):\n    if n == 2: return True\n    if n < 2 or n%2 == 0: return False\n    m = 3\n    while m*m <= n:\n        if n%m == 0: return False\n        m += 2\n    return True\n\nwhile True:\n    if is_prime(X):\n        print(X)\n        exit()\n    X += 1","x = int(input())\n\nimport math\n\nwhile True:\n  is_prime = True\n  for i in range(2, int(math.sqrt(x))+1):\n    if x % i == 0:\n      is_prime = False\n  if is_prime:\n    print(x)\n    break\n  x += 1","def isprime(n):\n    judgement = True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            judgement = False\n            break\n    return judgement\n\n\nx = int(input())\n\nwhile True:\n    if isprime(x):\n        answer = x\n        print(answer)\n        exit()\n    else:\n        x += 1\n","x = int(input())\n\nlp = [0] * 1000005\nfor i in range(2, 100005):\n    if lp[i] == 1:\n        continue\n    if x < i:\n        print(i)\n        break\n\n    k = i*i\n    while k < 1000005:\n        lp[k] = 1\n        k += i\n","import math\n\ndef aa(n):\n    if n==1:\n        return False\n    else:\n        for i in range(2,int(n**0.5)+1):\n            if n % i ==0:\n              return False\n        return True\n      \nx = int(input())\n\nwhile aa(x)== False:\n    x +=1\n    \nprint(x)","x = int(input())\nfor i in range(x,10**5 +4):\n    for p in range(2, int(x**(1\/2)+1)):\n        if i%p == 0 :\n            break\n    else:\n        print(i)\n        break","import sys\nfrom bisect import bisect_left\n\nread = sys.stdin.read\nreadline = sys.stdin.readline\nreadlines = sys.stdin.readlines\nsys.setrecursionlimit(10 ** 9)\nINF = 1 << 60\nMOD = 1000000007\n\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef main():\n    X = int(readline())\n\n    while not is_prime(X):\n        X += 1\n\n    print(X)\n    return\n\n\nif __name__ == '__main__':\n    main()\n","x=int(input())\nwhile(x%i<1 for i in range(2,x)):\n  x+=1\n\nprint(x)\n","import math\nX = int(input())\n\n\ndef is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\n\tif n == 2:\n\t\treturn True\n\n\tif n%2 == 0:\n\t\treturn False\n\n\tfor i in range(3,math.ceil(math.sqrt(n)),2):\n\t\tif n%i == 0:\n\t\t\treturn False\n\n\treturn True\n\ninf = 10**20\nif is_prime(X) == True:\n\tprint(X)\n\nelse:\n\tfor i in range(X+1,inf):\n\t\tif is_prime(i) == True:\n\t\t\tprint(i)\n\t\t\tbreak\n","x = int(input())\n\nfor i in range(x, 10**5 + 4):\n    flag = True\n    for j in range(2, i):\n        if (i % j == 0):\n            flag = False\n            continue\n    if flag:\n        print(i)\n        break\n    else:\n        continue\n            \n","import math\n\nx = int(input())\n\nj = True\n\ndef isPrime(a):\n  for i in range(2, int(math.sqrt(a)+1)):\n    if a % i == 0:\n      return True\n  \n  return False\n\nwhile j:\n  j = isPrime(x)\n  x += 1\n  \nprint(x-1)"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>500<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> blocks arranged in a row. Let us paint these blocks.<\/p>\n<p>We will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.<\/p>\n<p>Find the number of ways to paint the blocks under the following conditions:<\/p>\n<ul>\n<li>For each block, use one of the <var>M<\/var> colors, Color <var>1<\/var> through Color <var>M<\/var>, to paint it. It is not mandatory to use all the colors.<\/li>\n<li>There may be at most <var>K<\/var> pairs of adjacent blocks that are painted in the same color.<\/li>\n<\/ul>\n<p>Since the count may be enormous, print it modulo <var>998244353<\/var>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq N, M \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>0 \\leq K \\leq N - 1<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>M<\/var> <var>K<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the answer.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3 2 1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>6\n<\/pre>\n<p>The following ways to paint the blocks satisfy the conditions: <code>112<\/code>, <code>121<\/code>, <code>122<\/code>, <code>211<\/code>, <code>212<\/code>, and <code>221<\/code>. Here, digits represent the colors of the blocks.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>100 100 0\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>73074801\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>60522 114575 7559\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>479519525\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 500 points\n\n\nProblem StatementThere are N blocks arranged in a row. Let us paint these blocks.\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\nFind the number of ways to paint the blocks under the following conditions:\n\nFor each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\nThere may be at most K pairs of adjacent blocks that are painted in the same color.\n\nSince the count may be enormous, print it modulo 998244353.\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq N, M \\leq 2 \\times 10^5\n0 \\leq K \\leq N - 1\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN M K\n\n\n\n\n\nOutputPrint the answer.\n\n\n\n\n\n\nSample Input 13 2 1\n\n\n\n\n\nSample Output 16\n\nThe following ways to paint the blocks satisfy the conditions: 112, 121, 122, 211, 212, and 221. Here, digits represent the colors of the blocks.\n\n\n\n\n\nSample Input 2100 100 0\n\n\n\n\n\nSample Output 273074801\n\n\n\n\n\n\nSample Input 360522 114575 7559\n\n\n\n\n\nSample Output 3479519525\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>500<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> blocks arranged in a row. Let us paint these blocks.<\/p>\n<p>We will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.<\/p>\n<p>Find the number of ways to paint the blocks under the following conditions:<\/p>\n<ul>\n<li>For each block, use one of the <var>M<\/var> colors, Color <var>1<\/var> through Color <var>M<\/var>, to paint it. It is not mandatory to use all the colors.<\/li>\n<li>There may be at most <var>K<\/var> pairs of adjacent blocks that are painted in the same color.<\/li>\n<\/ul>\n<p>Since the count may be enormous, print it modulo <var>998244353<\/var>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq N, M \\leq 2 \\times 10^5<\/var><\/li>\n<li><var>0 \\leq K \\leq N - 1<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>M<\/var> <var>K<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the answer.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3 2 1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>6\n<\/pre>\n<p>The following ways to paint the blocks satisfy the conditions: <code>112<\/code>, <code>121<\/code>, <code>122<\/code>, <code>211<\/code>, <code>212<\/code>, and <code>221<\/code>. Here, digits represent the colors of the blocks.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>100 100 0\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>73074801\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>60522 114575 7559\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>479519525\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 500 points\n\n\nProblem StatementThere are N blocks arranged in a row. Let us paint these blocks.\nWe will consider two ways to paint the blocks different if and only if there is a block painted in different colors in those two ways.\nFind the number of ways to paint the blocks under the following conditions:\n\nFor each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\nThere may be at most K pairs of adjacent blocks that are painted in the same color.\n\nSince the count may be enormous, print it modulo 998244353.\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq N, M \\leq 2 \\times 10^5\n0 \\leq K \\leq N - 1\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN M K\n\n\n\n\n\nOutputPrint the answer.\n\n\n\n\n\n\nSample Input 13 2 1\n\n\n\n\n\nSample Output 16\n\nThe following ways to paint the blocks satisfy the conditions: 112, 121, 122, 211, 212, and 221. Here, digits represent the colors of the blocks.\n\n\n\n\n\nSample Input 2100 100 0\n\n\n\n\n\nSample Output 273074801\n\n\n\n\n\n\nSample Input 360522 114575 7559\n\n\n\n\n\nSample Output 3479519525\n\n\n","solve_rate":0.5813124108,"codenet_problem_id":"p02685","input_testcases":{"25":"100 101 0","88":"89290 32500 14976","70":"60522 125259 706","34":"19 3 1","94":"010 110 0","28":"101 110 0","69":"011 111 0","67":"57583 32500 14976","22":"57583 21503 12000","0":"100 110 0","20":"57583 19261 6864","2":"119754 114575 7559","54":"145188 34286 5126","24":"001 100 0","76":"19 2 2","33":"145188 34286 8988","79":"5 8 3","5":"119754 114575 8988","50":"001 110 0","96":"010 010 0","38":"5 4 2","103":"3 2 1","29":"12934 114575 7559","89":"56739 21449 18976","64":"57583 20097 8179","101":"3 2 1","75":"145188 7606 5126","57":"63620 70478 5625","66":"100106 27833 12000","36":"63620 114575 5625","23":"56739 21503 12000","73":"119754 65817 13147","86":"22492 27833 12000","10":"145188 114575 3371","4":"12 2 1","81":"182982 21717 9995","102":"60522 114575 7559","55":"19 3 2","87":"111 111 0","100":"100 100 0","44":"57583 20097 6864","71":"011 110 0","12":"145188 114575 5625","32":"2 2 1","84":"92188 20097 8179","65":"011 100 0","46":"57583 27833 12000","30":"7 2 1","74":"2 1 1","99":"19 2 3","68":"56739 31261 18976","53":"119754 65817 8988","78":"63620 70478 2189","92":"101 100 0","52":"13 2 1","97":"119754 65817 11044","85":"011 101 0","21":"57583 19261 12000","27":"60522 114575 2102","60":"182982 21717 6864","8":"145188 114575 8988","7":"11 2 1","48":"56739 21503 18976","49":"60522 125259 2102","90":"101 111 0","37":"7 3 2","45":"010 100 0","13":"5 3 2","11":"5 3 1","3":"100 010 0","1":"6 2 1","72":"3627 114575 1686","98":"145188 7606 4452","95":"3627 83126 1686","91":"011 111 1","93":"60522 125259 654","58":"5 8 2","31":"119754 38220 8988","9":"11 3 1","47":"57583 32500 12000","51":"12934 114575 1686","26":"3 2 0","14":"145188 114575 6864"},"output_testcases":{"25":"138412573\n","88":"44867558\n","70":"331921638\n","34":"7864320\n","94":"71970967\n","28":"599627031\n","69":"544804139\n","67":"504925142\n","22":"373059913\n","0":"701524751\n","20":"126487944\n","2":"612524154\n","54":"360544758\n","24":"100\n","76":"344\n","33":"538357075\n","79":"32760\n","5":"536128558\n","50":"110\n","96":"879471831\n","38":"972\n","103":"6\n","29":"818934629\n","89":"49433331\n","64":"113872139\n","101":"6\n","75":"463209136\n","57":"826450126\n","66":"125125314\n","36":"962233706\n","23":"556748149\n","73":"138297498\n","86":"559319191\n","10":"263223291\n","4":"24\n","81":"455892548\n","102":"479519525\n","55":"37945344\n","87":"965004208\n","100":"73074801\n","44":"716697264\n","71":"857124932\n","12":"70524932\n","32":"4\n","84":"887553093\n","65":"535746946\n","46":"198413055\n","30":"14\n","74":"1\n","99":"1976\n","68":"595739582\n","53":"713784331\n","78":"706270900\n","92":"246694828\n","52":"26\n","97":"591336103\n","85":"35732315\n","21":"991008892\n","27":"588019695\n","60":"11803297\n","8":"964030371\n","7":"22\n","48":"871404606\n","49":"93490611\n","90":"819180193\n","37":"1488\n","45":"166744006\n","13":"216\n","11":"144\n","3":"113759282\n","1":"12\n","72":"898348117\n","98":"534415352\n","95":"85285387\n","91":"594331788\n","93":"334333881\n","58":"32536\n","31":"759797475\n","9":"18432\n","47":"7621165\n","51":"771343317\n","26":"2\n","14":"539675612\n"},"n_missing":21,"programs":["import sys\ninput = sys.stdin.readline\nN, M, K = map(int, input().split())\nmod = 998244353\nclass Factorial:\n  def __init__(self, n, mod):\n    self.f = [1]\n    for i in range(1, n + 1):\n      self.f.append(self.f[-1] * i % mod)\n    self.i = [pow(self.f[-1], mod - 2, mod)]\n    for i in range(1, n + 1)[: : -1]:\n      self.i.append(self.i[-1] * i % mod)\n    self.i.reverse()\n  def factorial(self, i):\n    return self.f[i]\n  def ifactorial(self, i):\n    return self.i[i]\n  def combi(self, n, k):\n    return self.f[n] * self.i[n - k] % mod * self.i[k] % mod\n\nf = Factorial(N + M, mod)\n\ndp = [0] * (N + 1)\ndp[1] = M\nfor i in range(1, N):\n  dp[i + 1] = dp[i] * (M - 1)\n  dp[i + 1] %= mod\n#print(dp)\nres = 0\nfor i in range(K + 1):\n  res += dp[N - i] * f.combi(N - 1, i) % mod\n  res %= mod\nprint(res)","N,M,K = map(int,input().split())\nQ = [[0 for i in range(K+1)] for j in range(N)]\nQ[0][0] = M\nfor i in range(1,N):\n  for j in range(K+1):\n    Q[i][j] = Q[i-1][j-1]+(M-1)*Q[i-1][j]\nprint(sum(Q[N])%998244353)","mod = 998244353\ndef comb(n, r):\n    if n < r:return 0\n    if n < 0 or r < 0:return 0\n    return fa[n] * fi[r] % mod * fi[n - r] % mod\nn, m, k = map(int, input().split())\nfa = [1] * (n + 1)\nfi = [1] * (n + 1)\nfor i in range(1, n + 1):\n    fa[i] = fa[i - 1] * i % mod\n    fi[i] = pow(fa[i], mod - 2, mod)\nans = 0\nfor i in range(k + 1):\n    ans += pow(m - 1, n - i - 1, mod) % mod * comb(n - 1, i) * m % mod\n    ans %= mod\nprint(ans)","#n=int(input())\nn,m,k=map(int,input().split())\n#a=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\n\n\n#mod = 10**9+7 #\u5272\u308b\u6570\nmod=998244353 #\u5272\u308b\u6570\nN = 2*10**5 #n\u306e\u4e0a\u9650\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\na=0\nfor i in range(n-k,n+1):\n    a+=m*((m-1)**(i-1))*cmb(n-1,n-i,998244353) #comb(n-1,n-i)\nprint(a%998244353)\n","mod = 998244353\n\n\nN, M, K = map(int, input().split())\n\n\ninvs = {}\n\n\ndef inv(n):\n    if n not in invs:\n        invs[n] = pow(n, mod-2, mod)\n    return invs[n]\n\n\nans = 0\ncomb = 1\ncol = M*pow(M-1, N-1, mod)\nfor i in range(K+1):\n    now = col*comb\n    now %= mod\n    ans += now\n    ans %= mod\n    comb *= ((N-i-1)*inv(i+1))\n    comb %= mod\n    col *= inv(M-1)\n    col %= mod\n\nprint(ans)\n","N,M,K=map(int,input().split())\nP=998244353\nclass FactInv:\n    def __init__(self,N,P):\n        fact=[];ifact=[];fact=[0]*(N+1);ifact=[0]*(N+1);fact[1]=1\n        for i in range(1,N):\n            fact[i+1]=(fact[i]*(i+1))%P\n        ifact[-1]=pow(fact[-1],P-2,P)\n        for i in range(N,0,-1):\n            ifact[i-1]=(ifact[i]*i)%P\n        self.fact=fact;self.ifact=ifact;self.P=P\n    def Comb(self,n,k):\n        return (self.fact[n]*self.ifact[k]*self.ifact[n-k])%self.P\nFI=FactInv(N+10,P)\nans=0\nfor i in range(0,K+1):\n    ans+=(M*FI.Comb(N-1,i)*pow(M-1,N-1-i,P))%P\n    ans%=P\nprint(ans)","# -*- coding:utf-8 -*-\n\ndef solve():\n    import sys\n\n    MOD = 998244353\n    N, M, K = list(map(int, sys.stdin.readline().split()))\n\n    \"\"\"\n    x\u306e\u7d44\u3092\u4f5c\u308b\u3068\u3059\u308b\n    (1) \u30b0\u30eb\u30fc\u30d7\u6570: N-x\n    (2) \u30b0\u30eb\u30fc\u30d7\u306e\u8272\u306e\u5272\u308a\u5f53\u3066\u65b9\uff1aM(M-1)**(N-1)\n    (3) \u30b0\u30eb\u30fc\u30d7\u306e\u5206\u3051\u65b9\uff1a(N-1)C(x)\n    \"\"\"\n\n    bunsi_memo = {}\n    bunbo_memo = {}\n    pow_memo = {}\n    def combination_formula_MOD(n, r, MOD):\n        \"\"\"nCr\u3092 O(min(n-r, r)) \u3067\u9ad8\u901f\u306b\u8a08\u7b97\u3059\u308b\"\"\"\n        def _inv(x, MOD):\n            \"\"\"x\u306e\u9006\u5143\u3092\u8fd4\u3059\"\"\"\n            if not (x, MOD-2) in pow_memo:\n                pow_memo[(x, MOD-2)] = pow(x, MOD-2, MOD)\n            return pow_memo[(x, MOD-2)]\n\n        if n < r: return 0\n\n        r = min(n-r, r)\n        bunsi, bunbo = 1, 1\n        if not r in bunsi_memo:\n            for i in range(r):\n                bunsi = bunsi*(n-i)%MOD\n                bunbo = bunbo*(i+1)%MOD\n            bunsi_memo[r] = bunsi\n            bunbo_memo[r] = bunbo\n        bunsi, bunbo = bunsi_memo[r], bunbo_memo[r]\n        return (bunsi*_inv(bunbo, MOD))%MOD\n\n\n    ans = 0\n    col = M\n    for x in range(N-1, -1, -1):\n        if x <= K:\n            now = col%MOD\n            now = (now * combination_formula_MOD(N-1, x, MOD))%MOD\n            ans += now\n            ans %= MOD\n\n        col *= (M-1)\n        col %= MOD\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    solve()\n","import math\nN,M,K=map(int,input().split())\nmod=998244353\nans=0\nd=[1]+[1]\ne=[0]+[1]\nf=[0]+[1]\n\nfor i in range(2,N+1):\n  d += [d[i-1]*i%mod]\n  e += [ e[mod % i] * (mod - int(mod \/ i)) % mod]\n  f += [ f[i-1]*e[i]%mod]\ndef combinations_count(n, r):\n  if r==n or r==0:\n    return 1\n  return d[n] * f[n-r] * f[r]%mod\n\nfor i in range(K+1):\n  l=M*pow(M-1,N-1-i,mod)%mod\n  ans+=l*combinations_count(N-1,i)%mod\n  ans%=mod\nprint(ans)","n, m, k = map(int, input().split())\n\nmod = 998244353\nfact = [1] * (n + 1)\nifact = [1] * (n + 1)\n\nfor i in range(n):\n    fact[i + 1] = fact[i] * (i + 1) % mod\n    ifact[i + 1] = pow(fact[i + 1], mod - 2, mod)\n\n\ndef comb(x, y):\n    if y < 0 or y > x:\n        return 0\n    return (fact[x] * ifact[x - y] * ifact[y]) % mod\n\n\nmm = [1]\nfor _ in range(n + 1):\n    mm.append(mm[-1] * (m - 1) % mod)\n\nans = 0\nfor i in range(k + 1):\n    ans += m * comb(n - 1, i) * mm[n - 1 - i]\n    ans %= mod\n\nprint(ans)\n","def main():\n    def kaizyo(x):\n        ans = 1\n        for i in range(2, x+1):\n            ans *= i\n        return ans\n\n    n, m, k = map(int, input().split())\n    MAX = 998244353\n    ans = 0\n    kaizyos = [None]*n\n    ki = 1\n    kaizyos[0] = ki\n    for i in range(1, n):\n        ki *= i\n        ki %= MAX\n        kaizyos[i] = ki\n    def comb(a, b):\n        return kaizyos[a]\/\/(kaizyos[b]*kaizyos[a-b])\n    ruizyos = [None]*(k+1)\n    ruizyo = 1\n    for i in range(n-1-k):\n        ruizyo *= m-1\n        ruizyo %= MAX\n    ruizyos[0] = ruizyo\n    for i in range(n-k, n):\n        ruizyo *= m-1\n        ruizyo\n        ruizyos[i-n-k+1] = ruizyo\n    pattern = lambda x: (comb(n-1, x)*m*ruizyos[x])%MAX\n    for i in range(k+1):\n        ans += pattern(i)\n        ans %= MAX\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","def n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\n\nn,m,k=n1()\n\ndef cmb(n, k, mod, fac, ifac):\n    \"\"\"\n    nCk\u3092\u8a08\u7b97\u3059\u308b\n    \"\"\"\n    k = min(k, n-k)\n    return fac[n] * ifac[k] * ifac[n-k] % mod\n\n\ndef make_tables(mod, n):\n    \"\"\"\n    \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u3001\u9006\u5143\u306e\u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\n    \"\"\"\n    fac = [1, 1] # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(1)\n    ifac = [1, 1] #\u9006\u5143\u306e\u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(2)\n    inverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(3)\n\n    for i in range(2, n+1):\n        fac.append((fac[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n        ifac.append((ifac[-1] * inverse[-1]) % mod)\n    return fac, ifac\n\nans=0\na=1\nMOD=998244353\nfac, ifac = make_tables(MOD, n-1)\n        \nfor i in range(k+1):\n    ans+=m*pow(m-1,n-1-i,998244353)*cmb(n-1, i, MOD, fac, ifac)\nprint(ans%998244353)","class comb():\n  F = [1, 1]\n  Fi = [1, 1]\n  I = [0, 1]\n  def __init__(self, num, mod):\n    self.MOD = mod\n    for i in range(2, num + 1):\n      self.F.append((self.F[-1] * i) % mod)\n      self.I.append(mod - self.I[mod % i] * (mod \/\/ i) % mod)\n      self.Fi.append(self.Fi[-1] * self.I[i] % mod)\n  def com(self, n, k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return self.F[n] * (self.Fi[k] * self.Fi[n - k] % self.MOD) % self.MOD\n\n\nN, M, K = list(map(int, input().split()))\nMOD = 998244353\n\nans = 0\n\nP = [M] * (N)\n\nfor i in range(N - 1):\n  P[i + 1] = P[i] * (M - 1) % MOD\n\ncom = comb(N, MOD)\nfor i in range(K + 1):\n  t = P[-1 -i] * com.com(N - 1, i) % MOD\n  ans = (ans + t) % MOD\n\nprint(ans)","import sys\n\nsys.setrecursionlimit(10 ** 7)\nrl = sys.stdin.readline\n\n\nclass Combination:\n    def __init__(self, n: int, mod: int):\n        self.mod = mod\n        self.fact = [0] * (n + 1)\n        self.factinv = [0] * (n + 1)\n        self.inv = [0] * (n + 1)\n        \n        self.fact[0] = self.fact[1] = 1\n        self.factinv[0] = self.factinv[1] = 1\n        self.inv[1] = 1\n        for i in range(2, n + 1):\n            self.fact[i] = (self.fact[i - 1] * i) % mod\n            self.inv[i] = (-self.inv[mod % i] * (mod \/\/ i)) % mod\n            self.factinv[i] = (self.factinv[i - 1] * self.inv[i]) % mod\n    \n    def ncr(self, n: int, r: int):\n        if r < 0 or n < r:\n            return 0\n        r = min(r, n - r)\n        return self.fact[n] * self.factinv[r] % self.mod * self.factinv[n - r] % self.mod\n    \n    def nhr(self, n: int, r: int):\n        return self.ncr(n + r - 1, r)\n    \n    def npr(self, n: int, r: int):\n        if r < 0 or n < r:\n            return 0\n        return self.fact[n] * self.factinv[n - r] % self.mod\n\n\ndef solve():\n    N, M, K = map(int, rl().split())\n    MOD = 998244353\n    \n    com = Combination(N + 10, MOD)\n    \n    ans = 0\n    for x in range(K + 1):\n        ans = (ans + com.ncr(N - 1, x) * M * pow(M - 1, N - 1 - x, MOD)) % MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n","#!\/usr\/bin\/env python3\n\nimport sys\nimport math\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(2147483647)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 998244353\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\ndef comb(n,r):\n    if r >= n:\n        return 1\n    return fact[n]*pow(fact[n-r], mod-2, mod)*pow(fact[r], mod-2, mod) % mod\n\nn,m,k = LI()\nans = 0\nfact = [1]*(max(n,m)+1)\nfor i in range(1,n):\n    fact[i] = i*fact[i-1]\n    fact[i] %= mod\n\nfor i in range(k+1):\n    ans += comb(n-1, i) * m * pow(m-1, n-i-1, mod)\n    ans %= mod\nprint(ans)","MOD = 998244353\n\n\nclass Combination:\n\n    def __init__(self, n, mod):\n        self.mod = mod\n        self.fact = [1] * (n+1)\n        self.ifact = [1] * (n+1)\n\n        for i in range(1, n+1):\n            self.fact[i] = i*self.fact[i-1] % mod\n            self.ifact[i] = pow(i, mod-2, mod) * self.ifact[i-1] % mod\n\n    def get(self, n: int, k: int):\n        if k < 0 or n < k:\n            return 0\n        return self.fact[n] * self.ifact[k] * self.ifact[n-k] % MOD\n\n    def __call__(self, n: int, k: int):\n        return self.get(n, k)\n\n\ndef main():\n    N, M, K = [int(x) for x in input().split()]\n    comb = Combination(N, MOD)\n    ans = 0\n    for i in range(0, K+1):\n        ans += M * pow(M-1, N-i-1, MOD) * comb(N-1, i)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","n, m, k = map(int, input().split())\nmod = 998244353\n\nans = 0\ncomb = 1\nfor i in range(k+1):\n  ans += (((m*pow(m-1,n-i-1,mod))%mod)*comb)%mod\n  ans %= mod\n  comb = (comb*(n-1-i)*pow(i+1, mod-2, mod))%mod\n\nprint(ans)","def main():\n    n, m, k = map(int, input().split())\n    MOD = 998244353\n    ans = 0\n    c = 1\n\n    for i in range(k + 1):\n        ans += (((m * pow(m - 1, n - i - 1, MOD)) % MOD) * c) % MOD\n        ans %= MOD\n        c = (c * (n - 1 - i) * pow(i + 1, MOD - 2, MOD)) % MOD\n        \n        \n    print(ans % MOD)\n    \nif __name__ == '__main__':\n    main()","N, M, K = map(int, input().split())\nmod = 998244353\n\ndef comb(a, b):\n    global mod\n    l, r = 1, 1\n    for i in range(b):\n        l = l*(b-i)%mod\n        r = r*(a-i)%mod\n    return (r*pow(l, mod-2, mod))%mod\n\nans = 0\nfor i in range(K+1):\n    ans += comb(N-1, i)*M*pow((M-1), (N-1-i), mod)%mod\n\nprint(ans%mod)\n","\n\ndef diff_colors(x, m, modp):\n    \"\"\"\n    \u9577\u3055x\u306e\u5217\u3092m\u8272\u3067\u5857\u308b\n    \u3053\u306e\u3068\u304d\u3001\u9023\u7d9a\u3057\u3066\u540c\u3058\u8272\u3092\u4f7f\u308f\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b\n    \"\"\"\n    ans = m\n    x -= 1\n    while x:\n        ans *= (m - 1)\n        ans %= modp\n        x -= 1\n    return ans\n\ndef factorial(x, modp):\n    fact = dict()\n    fact[0] = 1\n    curr = 1\n    while curr <= 2 * x:\n        fact[curr] = fact[curr - 1] * curr\n        fact[curr] %= modp\n        curr += 1\n    return fact\n\n\ndef pow(x, k, modp):\n    ans = 1\n    while k:\n        if k % 2:\n            ans *= x\n            ans %= modp\n        x *= x\n        x %= modp\n        k \/\/= 2\n    return ans\n\n\ndef combi(fact, n, k, modp):\n    ans = fact[n + k - 1]\n    ans *= pow(fact[k], modp - 2, modp)\n    ans %= modp\n    ans *= pow(fact[n - 1], modp - 2, modp)\n    ans %= modp\n    return ans\n\n\ndef submit():\n    n, m, k = map(int, input().split())\n    modp = 998244353\n    fact = factorial(n, modp)\n\n    ans = 0\n    base_pattern = diff_colors(n - k, m, modp)\n    for i in range(k + 1):\n        ans += base_pattern * combi(fact, n - (k - i), k - i, modp)\n        ans %= modp\n        base_pattern *= (m - 1)\n        base_pattern %= modp\n\n    print(ans)\n    \n\nif __name__ == \"__main__\":\n    submit()    ","def gcd(a, b):\n\t'''\u6700\u5927\u516c\u7d04\u6570'''\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\t'''\u6700\u5c0f\u516c\u500d\u6570'''\n\treturn (a * b) \/\/ gcd(a, b)\n\ndef ex_gcd(a, b):\n\t'''\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0'''\n\tx1, x2 = 0, 1\n\ty1, y2 = 1, 0\n\tq = 0\n\twhile b != 0:\n\t\tx1, x2 = x2, x1 - q * x2\n\t\ty1, y2 = y2, y1 - q * y2\n\t\tq = a \/\/ b\n\t\ta, b = b, a % b\n\treturn a, x2, y2\n\ndef gcd_n(a, *numbers):\n\t'''\u8907\u6570\u306e\u6570\u306e\u6700\u5927\u516c\u7d04\u6570'''\n\td = a\n\tfor b in numbers:\n\t\td = gcd(d, b)\n\treturn d\n\ndef lcm_n(a, *numbers):\n\t'''\u8907\u6570\u306e\u6570\u306e\u6700\u5c0f\u516c\u500d\u6570'''\n\tm = a\n\tfor b in numbers:\n\t\tm = lcm(m, b)\n\treturn m\n\ndef factorize(n):\n\t'''\u7d20\u56e0\u6570\u5206\u89e3'''\n\tfactor = 2\n\tfactors = []\n\twhile factor * factor <= n:\n\t\tif n % factor == 0:\n\t\t\tcount = 1\n\t\t\tn \/\/= factor\n\t\t\twhile n % factor == 0:\n\t\t\t\tn \/\/= factor\n\t\t\t\tcount += 1\n\t\t\tfactors.append((factor, count))\n\t\tfactor += 1\n\tif n != 1:\n\t\tfactors.append((n, 1))\n\treturn factors\n\ndef totient(n):\n\t'''\u30aa\u30a4\u30e9\u30fc\u306e\u30c8\u30fc\u30b7\u30a7\u30f3\u30c8\u95a2\u6570'''\n\tphi = 1\n\tfor prime, count in factorize(n):\n\t\tphi *= (prime - 1) * (prime ** (count - 1))\n\treturn phi\n\ndef carmichael(n):\n\t'''\u30ab\u30fc\u30de\u30a4\u30b1\u30eb\u95a2\u6570'''\n\tprime_carmichaels = [1]\n\tfor prime, count in factorize(n):\n\t\tif prime == 2:\n\t\t\tprime_carmichaels.append(count if count <= 2 else (2 ** (count - 2)))\n\t\telse:\n\t\t\tprime_carmichaels.append((prime - 1) * (prime ** (count - 1)))\n\treturn lcm_n(*prime_carmichaels)\n\n\nclass Modulo (object):\n\tdef __init__(self, mod):\n\t\tself.mod = mod\n\t\tself.carmichael = carmichael(mod)\n\t\n\tdef add(self, x, y):\n\t\treturn (x + y) % self.mod\n\t\n\tdef sub(self, x, y):\n\t\treturn (x - y) % self.mod\n\t\n\tdef mul(self, x, y):\n\t\treturn (x * y) % self.mod\n\t\n\tdef div(self, x, y):\n\t\treturn self.mul(x, self.inv(y))\n\t\n\tdef inv(self, x):\n\t\treturn self.pow(x, self.carmichael - 1)\n\t\n\tdef pow(self, x, count):\n\t\treturn pow(x, count, self.mod)\n\n\nfrom functools import reduce\n\n\nMOD = Modulo(998244353)\n\nN, M, K = map(int, input().split())\n\nF = [1] * N\nfor n in range(1, N):\n\tF[n] = MOD.mul(F[n-1], n)\n\nprint(\n\treduce(\n\t\tMOD.add,\n\t\t(\n\t\t\tMOD.mul(\n\t\t\t\tMOD.div(\n\t\t\t\t\tF[N-1],\n\t\t\t\t\tMOD.mul(F[k], F[(N-1)-k])\n\t\t\t\t),\n\t\t\t\tMOD.mul(\n\t\t\t\t\tM,\n\t\t\t\t\tMOD.pow(M-1, (N-k)-1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tfor k in range(K+1)\n\t\t)\n\t)\n)\n","# E - Colorful Blocks\n\nn, m, k = map(int, input().split())\n\nmodulus = 998244353\n\n# n\u30d6\u30ed\u30c3\u30af m\u8272\u3067\u5857\u308b \u2192 m ** n \u901a\u308a\n# \u96a3\u308a\u5408\u3046\u30d6\u30ed\u30c3\u30af\u306e\u7d44 n - 1\u7d44\u306e\u3046\u3061 \u9ad8\u3005k\u7d44\u304c\u540c\u8272\n\n# n\u500b\u3070\u3089\u3070\u3089 == m * (m-1) ** (n-1)\n# k\u7d44\u540c\u8272 == n-k\u500b\u3070\u3089\u3070\u3089 * k\u500b\u3092n-k\u7d44\u306b\u5206\u3051\u308b(choose(n-1, n-k-1))\n\ndef inv(x):\n    return pow(x, modulus - 2, modulus)\n\nchoose = [1]  # choose(n-1, i)\nfor i in range(1, n):\n    choose.append(choose[-1] * (n-1-i+1) * inv(i) % modulus)\n\ndef solve(n, k):\n    x = m * pow(m-1, n-k-1, modulus)\n    return x * choose[n-k-1] % modulus\n\nprint(sum(solve(n, i) for i in range(k+1)) % modulus)\n","# coding: utf-8\nimport sys\nsys.setrecursionlimit(1000000)\nN,M,K=map(int,input().split())\nMOD=998244353\n\n\n#a**n mod p \u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\ndef modPow(a,n,p):\n    if n == 1:\n        #n=1\u306a\u3089a\u3092\u8fd4\u3059\n        return a % p\n\n    elif n % 2 == 1:\n        #n\u304c\u5947\u6570\u306a\u3089\u3070 a * modPow(a,n-1(\u5076\u6570),p)\u3092\u8fd4\u3059\n        return a * modPow(a,n-1,p) % p\n\n    else:\n        #n\u304c\u5076\u6570\u306a\u3089 modPow(a,n\/\/2,p) * modPow(a,n\/\/2,p)\u3068\u3059\u308b\u3068\u901f\u3044\n        t = modPow(a,n\/\/2,p)\n        return t * t % p\n\nfac=[None for i in range(N)]\nfinv=[None for i in range(N)]\ninv=[None for i in range(N)]\n\ndef COMinit(num):\n    global fac\n    global finv\n    global inv\n    fac[0]=1\n    fac[1]=1\n    finv[0]=1\n    finv[1]=1\n    inv[1]=1\n\n    for i in range(2,num):\n        fac[i] = fac[i-1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i-1] * inv[i] % MOD\n\ndef COM(n,k):\n    if n<k:\n        return 0\n    elif n<0 or k<0:\n        return 0\n    else:\n        return int(fac[n] * (finv[k] * finv[n - k] % MOD) % MOD)\n\n\nCOMinit(N)\n\nans=0\n\nfor i in range(K+1):\n    ans+=COM(N-1,N-1-K+i)*M*modPow(M-1,N-1-K+i,MOD)\n    ans=ans%MOD\nprint(ans)","import sys\ninput = sys.stdin.readline\n\nmod = 998244353\nn,m,k = map(int,input().split())\nMAX_N = 10**6\n\nfact = [1]\nfact_inv = [0]*(MAX_N+4)\nfor i in range(MAX_N+3):\n    fact.append(fact[-1]*(i+1)%mod)\n\nfact_inv[-1] = pow(fact[-1],mod-2,mod)\nfor i in range(MAX_N+2,-1,-1):\n    fact_inv[i] = fact_inv[i+1]*(i+1)%mod\n\n\ndef mod_comb_k(n,k,mod):\n    return fact[n] * fact_inv[k] % mod * fact_inv[n-k] %mod\n\n\n\n\nres = 0\n\ntmp = m*pow(m-1,n-k-1,mod)\n\nfor r in range(n-k-1,n):\n    res = (res + tmp*mod_comb_k(n-1,r,mod)%mod)%mod\n    tmp = tmp*(m-1)%mod\n\nprint(res)","# \u4e8c\u9805\u4fc2\u6570\u3092\"\u3084\u308b\u3060\u3051\"\u306b\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom collections import Counter\nMAX = 1000005\nMOD = 998244353\nfactrial = [0]*MAX\ninverse = [0]*MAX\nfactrial_inverse = [0]*MAX\n\n\n# \u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u524d\u51e6\u7406\ndef COMinit():\n    global factrial, inverse, factrial_inverse\n    factrial[0] = 1\n    factrial[1] = 1\n    inverse[1] = 1\n    factrial_inverse[0] = 1\n    factrial_inverse[1] = 1\n    for i in range(2, MAX):\n        factrial[i] = factrial[i-1] * i % MOD\n        inverse[i] = MOD - inverse[MOD % i] * (MOD\/\/i) % MOD\n        factrial_inverse[i] = factrial_inverse[i-1] * inverse[i] % MOD\n\n\n# \u4e8c\u9805\u4fc2\u6570\u8a08\u7b97\ndef COM(n, k):\n    global factrial, inverse, factrial_inverse\n    if n < k:\n        return 0\n    if n < 0 or k < 0:\n        return 0\n    return factrial[n] * (factrial_inverse[k] * factrial_inverse[n-k] % MOD) % MOD\n\n\n# \u524d\u51e6\u7406\u5b8c\u4e86\nCOMinit()\n\nN, M, K = map(int, input().split())\nans = 0\n\nfor i in range(K+1):  # \u3064\u307e\u308a\u6ca1\u3068\u306a\u308b\u30d6\u30ed\u30c3\u30af\u306e\u6570\u304ci\u500b\n    ans += M * pow(M-1, N-(i+1), MOD) % MOD * COM(N-1, i)\nprint(ans % MOD)\n","n,m,k = map(int,input().split())\nmod = 998244353\ndef comb(n,k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return fac[n]*finv[k]%mod*finv[n-k]%mod\nfac = [0]*(n+1)\nfinv = [0]*(n+1)\nfac[0] = finv[0] = 1\nfor i in range(1,n+1):\n    fac[i] = fac[i-1]*i%mod\n    finv[i] = pow(fac[i],mod-2,mod)\n\nans = 0\nfor i in range(k+1):\n    ans = (ans + m*comb(n-1,i)%mod*pow(m-1,n-1-i,mod)%mod)%mod\nprint(ans)","\nN, M, K = map(int, input().split())\n\nans = 0\n\nfor i in range(K+1):\n    ans += M ** (i+1) * (M-1) ** (N-i-1)\n    ans %= MOD\n\nprint(ans)","n, m, k = map(int, input().split())\n\nmod = 998244353\n\nfac = [1, 1]\nfinv = [1, 1]\ninv = [0, 1]\nfor i in range(2, n):\n    fac.append(fac[-1] * i % mod)\n    inv.append(-inv[mod%i] * (mod \/\/ i) % mod)\n    finv.append(finv[-1] * inv[-1] % mod)\n\nans = 0\nfor i in range(n-k-1, n):\n    res = m\n    e = m - 1\n    while i > 0:\n        if i & 1:\n            res = res * e % mod\n        e = e * e % mod\n        i >>= 1\n    com = fac[n-1] * finv[i] * finv[n-i-1] % mod\n    res = res * com % mod\n    ans = (ans + res) % mod\n\nprint(ans)","import math\nN, M, K = map(int, input().split())\nans = 0\nfor k in range(K+1):\n    n = N - k\n    a = M * (M-1)**(n-1)\n    b = n**k \/\/ math.factorial(k)\n    ans += a * b\n    ans %= 998244353\nprint(ans)\n","\nmod = 998244353\n\nclass COM:\n    def __init__(self, n, MOD):\n        self.n = n\n        self.MOD = MOD\n        self.fac = [0] * (n+1)\n        self.finv = [0] * (n+1)\n        self.inv = [0] * (n+1)\n        self.fac[0] = self.fac[1] = 1\n        self.finv[0] = self.finv[1] = 1\n        self.inv[1] = 1\n        for i in range(2, n+1):\n            self.fac[i] = self.fac[i-1] * i % MOD\n            self.inv[i] = MOD - self.inv[MOD % i] * (MOD \/\/ i) % MOD\n            self.finv[i] = self.finv[i-1] * self.inv[i] % MOD\n\n    def calc(self, k):\n        if k < 0:\n            return 0\n        return self.fac[self.n] * (self.finv[k] * self.finv[self.n-k] % self.MOD) % self.MOD\n\ndef main():\n    N, M, K = map(int,input().split())\n\n    # \u96a3\u308a\u5408\u3046\u7d44\u304cK\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u7dcf\u5f53\u305f\u308a\u3057\u3066\u89e3\u304f\n    cmb = COM(N-1, mod)\n    res = 0\n    for i in range(K+1):\n        res += M * cmb.calc(i) % mod * pow(M-1, N-i-1, mod)\n\n    print(res % mod) \n\n\nif __name__ == \"__main__\":\n    main()\n","import sys\nimport os\n\ndef file_input():\n    f = open('ABC167\/input.txt', 'r')\n    sys.stdin = f\n\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1]\n\ndef init_cmb(N,p):\n    for i in range(2, N + 1):\n        fact.append((fact[-1] * i) % p)\n        inv.append((-inv[p % i] * (p \/\/ i)) % p)\n        factinv.append((factinv[-1] * inv[-1]) % p)\n\ndef cmb(n, r, p):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % p\n\ndef main():\n    #file_input()\n    N,M,K=map(int, input().split())\n\n    mod=998244353\n    ans=0\n\n    init_cmb(N,mod)\n    for k in range(K+1):\n        ans+=M*cmb(N-1,k,mod)*pow(M-1,N-1-k,mod)\n\n    print(ans%mod)\n\nif __name__ == '__main__':\n    main()\n","mod = 998244353\nN, M, K = map(int, input().split())\n\nlist_size = 2*10**5 + 4\n\nf_list = [1] * list_size\nf_r_list = [1] * list_size\n \nfor i in range(list_size-1):\n\tf_list[i+1] = (f_list[i] * (i+1)) % mod\n \nf_r_list[-1] = pow(f_list[-1], mod - 2, mod)\n \nfor i in range(list_size-2, -1, -1):\n\tf_r_list[i] = (f_r_list[i+1] * (i+1)) % mod\n \ndef comb(n, r, mod):\n\tif n < r or r < 0:\n\t\treturn 0\n\telif n == 0 or r == 0 or n == r:\n\t\treturn 1\n\telse:\n\t\treturn (f_list[n] * f_r_list[n-r] * f_r_list[r]) % mod\n\nans = 0\nfor k in range(K+1):\n    if N-2*k < 0:\n        continue\n    ans += (comb(N-k, k, mod) * M *pow(M-1, N-k-1, mod))%mod\nans %= mod\nprint(ans)","#import numpy as np\nimport math\n#from decimal import *\n#from numba import njit\n#@njit\ndef main():\n    (N, M, K) = map(int, input().split())\n    MOD = 998244353\n    \n    fact = [1]*(N+1)\n    factinv = [1]*(N+1)\n    for i in range(1,K+1):\n        fact[i] = fact[i-1]*i % MOD\n        factinv[i] = pow(fact[i], MOD-2, MOD)\n    def comb(n, k):\n        return fact[n] * factinv[k] * factinv[n-k] % MOD\n\n    ans = 0\n    for k in range(K+1):\n        ans += (comb(N-1,k)*M*pow(M-1, N-k-1, MOD))%MOD\n\n    print(ans%MOD)\n\nmain()\n","# ABC167e\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**6)\n    # \u518d\u5e30\u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u9650\u308aPypy\u3067\u51fa\u3059\u3053\u3068\n\n    def dump(*args):\n        sys.stderr.write(str(args))\n    n, m, k = map(int, input().split())\n    # dp[i][j][k]=i\u756a\u76ee\u307e\u3067\u306e\u30d6\u30ed\u30c3\u30af\u3092\u8003\u3048\u308b\u3068\u304d\u3001\n\n    MOD = 998244353\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[1][0] = m\n    for i in range(n):\n        for j in range(k+1):\n            dp[i + 1][j] += dp[i][j] * (m - 1) % MOD\n            if j < k:\n                dp[i + 1][j + 1] += dp[i][j] % MOD\n    print(sum(dp[n]) % MOD)\n\n\nif __name__ == '__main__':\n    main()\n","# coding: utf-8\nimport sys\nsys.setrecursionlimit(1000000)\nN,M,K=map(int,input().split())\nMOD=998244353\n\nMAX_N=N+10\n\n#a**n mod p \u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\ndef modPow(a,n,p):\n    if n==0:\n        return 1\n    if n == 1:\n        #n=1\u306a\u3089a\u3092\u8fd4\u3059\n        return a % p\n\n    elif n % 2 == 1:\n        #n\u304c\u5947\u6570\u306a\u3089\u3070 a * modPow(a,n-1(\u5076\u6570),p)\u3092\u8fd4\u3059\n        return a * modPow(a,n-1,p) % p\n\n    else:\n        #n\u304c\u5076\u6570\u306a\u3089 modPow(a,n\/\/2,p) * modPow(a,n\/\/2,p)\u3068\u3059\u308b\u3068\u901f\u3044\n        t = modPow(a,n\/\/2,p)\n        return t * t % p\n\nfac=[None for i in range(MAX_N)]\nfinv=[None for i in range(MAX_N)]\ninv=[None for i in range(MAX_N)]\n\ndef COMinit(num):\n    global fac\n    global finv\n    global inv\n    fac[0]=1\n    fac[1]=1\n    finv[0]=1\n    finv[1]=1\n    inv[1]=1\n\n    for i in range(2,num):\n        fac[i] = fac[i-1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i-1] * inv[i] % MOD\n\ndef COM(n,k):\n    if n<k:\n        return 0\n    elif n<0 or k<0:\n        return 0\n    else:\n        return int(fac[n] * (finv[k] * finv[n - k] % MOD) % MOD)\n\n\nCOMinit(MAX_N)\n\nans=0\n\nfor i in range(K+1):\n    v=COM(N-1,N-1-K+i)%MOD\n    v*=M\n    v=v%MOD\n    v*=modPow(M-1,N-1-K+i,MOD)\n    v=v%MOD\n    ans+=v\n    ans=ans%MOD\nprint(ans)","n,m,k=map(int, input().split())\n\nmod=998244353\n\ndef modinv(a, mod):\n    return pow(a, mod-2, mod)\n\ndef mod_comb_count(n, r, mod):\n    r = min(r, n-r)\n    res = 1\n    for i in range(r):\n        res = res * (n - i) * modinv(i+1, mod) % mod\n    return res\n\nans=0\n\nfor i in range(k+1):\n    ans += mod_comb_count(n-1, i, mod) * m * ((m-1)**(n-1-i)) %mod\nprint(ans%mod)\n","N, M, K = map(int, input().split())\nmod = 998244353\nans = 0\nnCi = [1]\n\nfor i in range(1, N+1):\n    nCi.append(nCi[i-1]*(N-i) * pow(i, mod-2, mod))\n\n\nfor i in range(min(N, K)+1):\n    ans += (M%mod) * pow(M - 1, N-1-i, mod) * nCi[i]\n    ans %= mod\n\nprint(ans)\n","#!\/usr\/bin\/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, M, K = map(int, readline().split())\nMOD = 998244353\n# Combination under a prime modulo: nCk % p\ndef combmod(n, k, p):\n    if k > n:\n        return 0\n    if k > n - k:\n        k = n - k\n    num, den = 1, 1\n    for i in range(k):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    # By Fermat's little theorem,\n    # a^(p-1) \u2261 1 mod p\n    # i.e. a^(p-2) \u2261 a^(-1) mod p\n    inv_dev = pow(den, p - 2, p)\n    return num * inv_dev % p\n\n\ndef solve():\n    ans = 0\n    for i in range(K + 1):\n        ans += combmod(N - 1, i, MOD) * M * pow(M - 1, N - 1 - i, MOD)\n        ans %= MOD\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(solve())\n","n,m,K=map(int,input().split())\nmod=998244353\n\nU=2*10**5\nmod=998244353\n\nfact=[1]*(U+1)\nfact_inv=[1]*(U+1)\n\nfor i in range(1,U+1):\n    fact[i]=(fact[i-1]*i)%mod\nfact_inv[U]=pow(fact[U],mod-2,mod)\n\nfor i in range(U,0,-1):\n\tfact_inv[i-1]=(fact_inv[i]*i)%mod\n\ndef comb(n,k):\n    if k<0 or k>n:\n        return 0\n    x=fact[n]\n    x*=fact_inv[k]\n    x%=mod\n    x*=fact_inv[n-k]\n    x%=mod\n    return x\n\nans=0\nfor k in range(K+1):\n    ans=(ans+comb(n-1,k)*m*pow(m-1,n-k-1,mod)%mod)%mod\nprint(ans)","#E\u554f\u984c\nN, M, K = map(int, input().split())\nMOD = 998244353\n\nP = MOD\nY = max(N, M)\ninv_t = [0]+[1]\nfor i in range(2, Y):\n  inv_t += [inv_t[P % i] * (P - int(P \/ i)) % P]\n#print(inv_t)\n          \nif K == N - 1:\n  ans = 1\n  for i in range(N):\n    ans = ans * M % MOD\n  print(ans % MOD)\n  quit()\n  \nif M == 1:\n  print(\"1\")\n  quit()\n  \n# M * ((M - 1) ** (N - L - 1)) * combination(N-1, L)\u306eL\u30920\u304b\u3089K\u307e\u3067\u8db3\u3057\u305f\u7dcf\u548c\u304c\u7b54\u3048\nB = [1] * N\nans1 = 1\nfor i in range(1, N):\n  ans1 = (ans1 * (M - 1)) % MOD\n  B[i] = (ans1 * M) % MOD\n  \nans = 0\nans2 = 1\n#X = 1\nfor i in range(K + 1):\n  if i == 0:\n    X = 1\n  else:\n    X = (X * (N - i) * inv_t[i]) % MOD\n  ans2 = X * B[N - 1 - i] % MOD \n  ans += ans2\n  ans = ans % MOD\n      \nprint(ans)\n\n","n, m, k = map(int, input().split())\n\nMOD = 998244353\nfact = [1] * (n+1) # \u968e\u4e57\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfactinv = [1] * (n+1) # \u968e\u4e57\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfor i in range(n):\n    fact[i+1] = fact[i] * (i+1) % MOD # \u968e\u4e57\u3092\u8a08\u7b97\n    factinv[i+1] = pow(fact[i+1], MOD-2, MOD)# MOD\u3092\u6cd5\u3068\u3057\u305f\u9006\u5143\uff08\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\uff09\n\ndef nCk(n,k): # \u7d44\u307f\u5408\u308f\u305b(MOD)\u3092\u8fd4\u5374\u3059\u308b\n    return fact[n] * factinv[n-k] * factinv[k] % MOD\n\nans = 0\nfor i in range(k+1):\n    ans += m * pow(m-1, n-1-i, MOD) * nCk(n-1, i) % MOD\n\nprint(ans % MOD)\n","M = 998244353\nn,m,K = map(int,input().split())\nans = 0\nc = 1\nfor k in range(K+1):\n    ans += c * m * pow(m-1,n-k-1,M)\n    c *= (n-k+1) * pow(k+1,M-2,M)\n    ans %= M\n    c %= M\nprint(ans)\n    \n","N,M,K = map(int, input().split())\n\np = 998244353\n\nfactorial = [1]\ncounter = 0\nfor i in range(1,N+1):\n    factorial.append(factorial[i-1]*i%p)\n\n\n\nfor k in range(K+1):\n    counter += factorial[N-1]*pow(factorial[k],p-2,p)*pow(factorial[N-k-1],p-2,p)*M*pow(M-1,N-1-k,p)\nprint(counter%p)\n","import itertools\nimport numpy as np\nfrom scipy.special import comb\n\nmod = 998244353\n\nN,M,K = map(int, input().split())\n\n# DP = [[0]*N for _ in range(N)]\n# DP[0][0] = M\n\n# DP = []\n\n\n# for n in range(1,N):\n# \tfor k in range(N):\n# \t\tif k==0:\n# \t\t\tDP[n][k] = DP[n-1][k]*(M-1) % mod\n# \t\telse:\n# \t\t\tDP[n][k] = (DP[n-1][k]*(M-1) + DP[n][k-1]) % mod\n\n# ans = sum(DP[N-1][:(K+1)]) % mod\n# print(ans)\n\nans = 0\nfor k in range(1,K+1):\n\tans += comb(N, k-1)*(M-1)**(N-k) % mod\n\nprint(int(ans*M) % mod)","from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nmod = 998244353\nclass Combination:\n    \"\"\"\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=998244353):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i % self.mod)\n            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)\n        return fac, facinv\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        modinv = [0] * (n+1)\n        modinv[1] = 1\n        for i in range(2, n+1):\n            modinv[i] = self.mod - self.mod\/\/i * modinv[self.mod%i] % self.mod\n        return modinv\n\nn,m,k = inpl()\nconb = Combination(300010)\nres = 0\nfor i in range(k+1):\n    x = n - i - 1\n    res += conb(n-1,x) * m * pow(m-1,x,mod)\n    res %= mod\nprint(res)","import numpy as np\nn,m,k=map(int,input().split())\nMOD=998244353\ndp = np.zeros(n,dtype='float32')\ndp[0]=m\nfor i in range(2,n+1):\n    bdp=dp\n    dp+=bdp*(m-1)\n    dp[1:]+=bdp[:1]\n    dp%=MOD\nprint(sum(dp[:k+1]))","import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, acos, atan, asin, log, log10, gcd\nfrom itertools import permutations, combinations, product, accumulate, combinations_with_replacement\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\n#from fractions import gcd\ndef debug(*args):\n    if debugmode:\n        print(*args)\ndef input(): return sys.stdin.readline().strip()\ndef STR(): return input()\ndef INT(): return int(input())\ndef FLOAT(): return float(input())\ndef MAP(): return map(int, input().split())\ndef S_MAP(): return map(str, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef S_LIST(): return list(map(str, input().split()))\ndef lcm(a, b): return a * b \/\/ gcd(a, b)\nsys.setrecursionlimit(10 ** 9)\ninf = sys.maxsize\nmod = 998244353\ndx = [0, 1, 0, -1, 1, -1, -1, 1]\ndy = [1, 0, -1, 0, 1, -1, 1, -1]\ndebugmode = True\n\n#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\ndef cmb(n, r):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % mod\n\nN = 3 * (10 ** 5)  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\nfact = [1, 1]  # fact[n] = (n! mod p)\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\n\nfor i in range(2, N + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\nn, m, k = MAP()\n\npascal = [[1, 0]]\nfor i in range(n - k):\n    pascal.append([1])\n    for j in range(i):\n        pascal[i + 1].append(pascal[i][j] + pascal[i][j + 1])\n    pascal[i + 1].append(1)\n    pascal[i + 1].append(0)\n    #debug(i + 1, pascal[i + 1])\n\nans = m * pow(m - 1, n - 1, mod)\nans %= mod\nfor i in range(1, k + 1):\n    tmp = sum(pascal[n - i][1:i + 1])\n    #debug(i, tmp, m * pow(m - 1, n - i - 1, mod) * tmp)\n    ans += m * pow(m - 1, n - i - 1, mod) * tmp\n    ans %= mod\nprint(ans)\n#debug(479519525)","N, M, K = map(int, input().split())\ndp = [0]*(K+1)\nP = 998244353\ndp[0] = pow(M-1, N-1, P) * M % P\n\ninv_t = [0]*(2*10**5+1)\ninv_t[1] = 1\nfor i in range(2,2*10**5+1):\n  inv_t[i] = inv_t[P % i] * (P - int(P \/ i)) % P\n\nif M == 1 and K == N-1:\n    print(1)\nelse:\n    for i in range(1, K+1):\n        temp = dp[i-1]*(N-i)\n        temp %= P\n        temp *= inv_t[i]\n        temp %= P\n        temp *= inv_t[M-1]\n        temp %= P\n        dp[i] = temp\n\n    ans = 0\n    for i in range(K+1):\n        ans += dp[i]\n        ans %= P\n\n    print(ans)\n","n,m,k=map(int,input().split())\nfact,factinv,mod=[1]*n,[1]*n,998244353\nfor i in range(2,n):\n  fact[i]=fact[i-1]*i%mod\nfactinv[n-1]=pow(fact[n-1],mod-2,mod)\nfor i in range(n-2,0,-1):\n  factinv[i]=factinv[i+1]*(i+1)%mod\nncr=lambda n,r:fact[n]*factinv[r]%mod*factinv[n-r]%mod\nans=pow(m,n,mod)\nfor i in range(k+1,n):\n  ans+=mod-m*pow(m-1,n-i-1,mod)*ncr(n-1,i)%mod\nprint(ans%mod)","import sys\nimport math\nfrom decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nfrom collections import deque\nfrom bisect import bisect_left\nfrom itertools import product\ndef I(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI2(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\ndef LSI(): return list(map(int, list(sys.stdin.readline().rstrip())))\n\ndef LSI2(N): return [list(map(int, list(sys.stdin.readline().rstrip()))) for i in range(N)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\ndef LS2(N): return [sys.stdin.readline().split() for i in range(N)]\ndef FILL(i,h): return [i for j in range(h)]\ndef FILL2(i,h,w): return [FILL(i,w) for j in range(h)]\ndef FILL3(i,h,w,d): return [FILL2(i,w,d) for j in range(h)]\ndef FILL4(i,h,w,d,d2): return [FILL3(i,w,d,d2) for j in range(h)]\ndef sisha(num,digit): return Decimal(str(num)).quantize(Decimal(digit),rounding=ROUND_HALF_UP)\n#'0.01'\u3084'1E1''\u306a\u3069\u3067\u6307\u5b9a\u3001\u6574\u6570\u306b\u623b\u3059\u306a\u3089int\u3092\u304b\u307e\u3059\nMOD = 998244353\nINF = float(\"inf\")\nsys.setrecursionlimit(10**6+10)\ninput = sys.stdin.readline\n\n\n\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = MOD #\u51fa\u529b\u306e\u5236\u9650\nN = 5*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\n\nN,M,K = MI()\nans = 0\nfor i in range(0,K+1):\n    ans += (cmb(N-1,i,mod)*M*pow(M-1,N-1-i,mod))%mod\nprint(ans%mod)\n","from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    n, m, k = map(int, input().split())\n    dp = [0 for _ in range(k + 1)]\n\n    dp[0] = m\n\n    for i in range(1, n):\n        tmp_dp = dp\n        for j in range(k + 1):\n            tmp_dp[j] = (m - 1) * dp[j]\n            if j > 0:\n                tmp_dp[j] += dp[j - 1]\n            tmp_dp[j] %= 998244353\n        dp = tmp_dp\n\n    ans = 0\n    for i in range(k + 1):\n        ans += dp[i]\n    print(ans % 998244353)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n","N,M,K=map(int,input().split())\nMOD=998244353\n\n#\u9006\u5143\u3092\u5b9a\u7fa9\u3059\u308b\ndef inv(a):\n  return pow(a,MOD-2,MOD)\n\n#\u300cn!\u300d\u306e\u5270\u4f59\u3092\u6c42\u3081\u308b\nfact=[0,1]\nfor i in range(2,N+1):\n  fact.append((fact[-1]*i)%MOD)\n\n#nCr(MOD)\u3092\u6c42\u3081\u308b\ndef choose(n,r):\n  if r==0 or r==n:\n    return 1\n  else:\n    return fact[n]*inv(fact[r])*inv(fact[n-r])%MOD\n\n#(M-1)**n(MOD)\u3092\u6c42\u3081\u308b\nexp=[1]\nfor i in range(1,N):\n  exp.append((exp[-1]*(M-1))%MOD)  \n  \n\n#\u7b54\u3048\u3092\u8a08\u7b97\u3059\u308b\nans=0\nfor i in range(K+1):\n  ans+=(M*choose(N-1,i)*exp[N-1-i]%MOD)  \n  ans%=MOD\nprint(ans)  ","MOD = 998244353\nn, m, k = map(int, input().split())\n\nfact = [0]*(n+1)\nfact[0] = 1\nfor i in range(1, n+1):\n    fact[i] = fact[i-1]*i % MOD\n\ninvfact = [0]*(n+1)\nfor i in range(n+1):\n    invfact[i] = pow(fact[i], MOD-2, MOD)\n\n\ndef nCk(n, k):\n    return fact[n]*invfact[k]*invfact[n-k]\n\n\nans = 0\nfor i in range(k+1):\n    ans += m*pow(m-1, n-1-i, MOD)*nCk(n-1, i)\n    ans %= MOD\nprint(ans)\n","n,m,k = map(int,input().split())\n\nimport math\ndef comb(n,r):\n    return math.factorial(n) \/\/ (math.factorial(n-r) * math.factorial(r))\n\n\n\nans = 0\n\nfor i in range(k+1):\n    ans += m * ((m-1) ** (n-1-i) ) * comb(n-1 ,i)\n    \nprint(ans %  998244353)\n","n,m,k=map(int,input().split())\na=[0]*(k+1)\na[0]=1\nfor i in range(1,k+1):\n    a[i]=(a[i-1]*(n-i))\/\/(i)\ne=[0]*(k+1)\nmod=998244353\ne[0]=pow(m-1,n-1-k,mod)\nfor i in range(1,k+1):\n    e[i]=((e[i-1])%mod*((m-1)%mod))%mod\nans=0\nfor i in range(k+1):\n    ans+=((e[-1-i])*(a[i]%mod))%mod\n    ans%=mod\nm=m%mod\nprint((ans*m)%mod)","from functools import reduce\n\ndef cin():  return list(map(int,input().split()))\nN, M, K = cin()\nMOD = 998244353\n\nfac = [1] * (N + 1)\ninv = [1] * (N + 1)\n\nfor j in range(1, N + 1):  fac[j] = fac[j - 1] * j % MOD\n\ninv[N] = pow(fac[N], MOD - 2, MOD)\nfor j in range(N - 1, -1, -1):  inv[j] = inv[j + 1] * (j + 1) % MOD\n    \ndef cmb(n, r):\n    if r > n or n < 0 or r < 0:  return 0\n    return fac[n] * inv[n - r] * inv[r] % MOD\n\nans = 0\nfor i in range(K + 1):\n    ans += M * cmb(N - 1, i) * pow(M - 1, N - 1 - i, MOD)\n    ans %= MOD\nprint(ans)","def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\nN = 2*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m,k = map(int,input().split())\n\nif k==n-1:\n  print(m%mod)\n  exit()\n\nans = 0\na= m*pow(m-1,n-1-k-1,mod)\n\nfor i in range(k,-1,-1):\n  a =a*(m-1)%mod\n  \n  ans += a*cmb(n-1,i,mod)\n  ans %= mod\n  \nprint(ans)","# coding: utf-8\n\n\ndef solve(*args: str) -> str:\n    n, m, k = map(int, args[0].split())\n    mod = 998244353\n\n    P = [1]*(k+1)\n    p = pow(m-1, n-2-k, mod)\n    for i in range(k+1):\n        p = p*(m-1) % mod\n        P[-1-i] = p\n\n    ret = m*P[0] % mod\n    ncr = 1\n    for i in range(1, k+1):\n        ncr = ncr*(n-i)\/\/i\n        ret += m*P[i]*ncr % mod\n\n    return str(ret % mod)\n\n\nif __name__ == \"__main__\":\n    print(solve(*(open(0).read().splitlines())))\n","import sys\nsys.setrecursionlimit(2147483647)\nINF = 1 << 60\nMOD = 998244353\ninput = lambda:sys.stdin.readline().rstrip()\n\nclass modfact(object):\n    def __init__(self, n):\n        fact, invfact = [1] * (n + 1), [1] * (n + 1)\n        for i in range(1, n + 1): fact[i] = i * fact[i - 1] % MOD\n        invfact[n] = pow(fact[n], MOD - 2, MOD)\n        for i in range(n - 1, -1, -1): invfact[i] = invfact[i + 1] * (i + 1) % MOD\n        self._fact, self._invfact = fact, invfact\n\n    def inv(self, n):\n        return self._fact[n - 1] * self._invfact[n] % MOD\n\n    def fact(self, n):\n        return self._fact[n]\n\n    def invfact(self, n):\n        return self._invfact[n]\n\n    def comb(self, n, k):\n        if k < 0 or n < k: return 0\n        return self._fact[n] * self._invfact[k] % MOD * self._invfact[n - k] % MOD\n\n    def perm(self, n, k):\n        if k < 0 or n < k: return 0\n        return self._fact[n] * self._invfact[n - k] % MOD\n\ndef resolve():\n    n, m, k = map(int, input().split())\n    mf = modfact(n)\n    res = 0\n    for i in range(k + 1):\n        res += m * pow(m - 1, n - i - 1, MOD) % MOD * mf.comb(n - 1, i)\n        res %= MOD\n    print(res)\nresolve()","n, m, k = map(int, input().split())\nmod = 998244353\n\nkai = [1]*(n+1)\ninv = [1]*(n+1)\nfor i in range(n):\n    kai[i+1] = (kai[i] * (i+1))%mod\n    inv[i+1] = (inv[i] * pow(i+1,mod-2,mod))%mod\n\ncount_all = 0\npre_pow = pow(m-1,n-1,mod)\ninv_m_mai1 = pow(m-1,mod-2,mod)\nfor i in range(k+1):\n    pattern_color = m*pre_pow%mod\n    pattern_place = kai[n-1]*inv[n-1-i]*inv[i]%mod\n    count_all = (count_all+pattern_color*pattern_place)%mod\n    pre_pow = pre_pow * inv_m_mai1 %mod\n\nprint(count_all)","n, m, k = map(int, input().split())\n\nmod = 998244353\n\ndef power(x, y):\n    if   y == 0     : return 1\n    elif y == 1     : return x % mod\n    elif y % 2 == 0 : return power(x, y \/\/ 2) ** 2 % mod\n    else            : return power(x, y \/\/ 2) ** 2 * x % mod\n\nfactorial = [1]\nfor i in range(1, n):\n    factorial.append(factorial[i - 1] * i % mod)\n\ninverseFactorial = [0] * n\ninverseFactorial[n - 1] = power(factorial[n - 1], mod - 2)\nfor i in range(n - 2, -1, -1):\n    inverseFactorial[i] = inverseFactorial[i + 1] * (i + 1) % mod\n\ndef comb(x, y):\n    return factorial[x] * inverseFactorial[y] * inverseFactorial[x - y] % mod\n\n\n\ntmp = [m]\n\nfor i in range(n):\n    t = tmp[-1] * (m - 1) % mod\n    tmp.append(t)\n\n\nans = 0\n\nfor kk in range(k + 1):\n    c = comb(n - 1, kk)\n    c *= tmp[n - kk - 1]\n    ans += c\n    ans %= mod\n\nprint(ans)\n","#dp\u3067\u3067\u304d\u306a\u3044\u304b\u306a\uff1f\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\n#mod = 10**9 + 7\n\nmod=998244353\n\n\nn,m,k=MI()\nbeki=[0 for i in range(n)]\nbeki[0]=m%mod\nfor i in range(n-1):\n    beki[i+1]=(beki[i]*(m-1))%mod\n    \ndef cmod(n, r, p):\n    x,y  = 1, 1\n    for i in range(r):\n        x = x * (n - i) % p\n        y = y * (r - i) % p\n    return (x * pow(y, p - 2, p)) % p\nans=0\n\nfor i in range(k+1):\n    j=n-i-1\n    ans+=(beki[j]*cmod(n-1,i,mod))%mod\n    #print(beki[j]*cmod(n-1,i,mod))\nprint(ans%mod)","n, m, k = map(int, input().split())\n\nMOD = 998244353\n\ndef inv(x, MOD):\n    return pow(x, MOD - 2, MOD)\n\nc = [0 for _ in range(n)]\nc[0] = 1\nfor i in range(1, n):\n    c[i] = c[i - 1] * (n - i)\n    c[i] *= inv(i, MOD)\n    c[i] %= MOD\nans = sum([m * c[i] * pow(m - 1, n - 1 - i, MOD) for i in range(k + 1)]) % MOD\nprint(ans)","from scipy.special import comb\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\nNcom = 0\nfor k in range(K+1):\n  n = M * comb(N-1, k, exact=True) * (M-1)**(N-k-1)\n  Ncom += n % mod\nprint(Ncom % mod)","n,m,k=[int(x) for x in input().split()]\n#TODO Mutiply wih m\nsumi=0\nmod=998244353\nprodi=pow(m-1,n-1,mod)\ninvi=pow(m-1,mod-2,mod)\nfor j in range(n-1,n-1-k-1,-1):\n  sumi+=prodi\n  sumi%=mod\n  prodi*=j\n  prodi%=mod\n  prodi*=pow(n-j,mod-2,mod)\n  prodi%=mod\n  prodi*=invi\n  prodi%=mod \nsumi*=m\nsumi%=mod\nprint(sumi)\n  ","import sys\nreadline = sys.stdin.readline\nMOD = 998244353\n\ndef comb(n, r, mod=MOD):\n    r = min(n - r, r)\n    res = 1\n    fac = 1\n    for i in range(r):\n        res *= n - i\n        res %= mod\n        fac *= i + 1\n        fac %= mod\n    return res * pow(fac, mod-2, mod) % mod\n\ndef main():\n    N, M, K = map(int, readline().rstrip().split())\n    res = 0\n    for k in range(K+1):\n        n = N - k\n        res += comb(N-1, k, MOD) * pow(M-1, n-1, MOD) * M\n        res %= MOD\n    \n    print(res)\n\n\nif __name__ == '__main__':\n    main()","def main():\n\n    N, M, K = map(int, input().split())\n    mod = 998244353\n\n    g1 = [1, 1]\n    g2 = [1, 1]\n    inv = [0, 1]\n\n    for i in range(2, N+1):\n        g1.append((g1[-1] * i) % mod)\n        inv.append( ( -inv[mod % i] * (mod\/\/i)) % mod )\n        g2.append((g2[-1] * inv[-1]) % mod)\n\n    def combi(n, r):\n      r = min(r, n-r)\n      return g1[n]*g2[r]*g2[n-r]%mod\n\n    v = 1\n    base = [1, M]\n    for i in range(N):\n        base.append(base[-1] * (M-1) % mod)\n\n    # print(base)\n\n    ans = 0\n    for j in range(K+1):\n        v = base[N-j]\n        u = combi(N-1, j)\n        ans += (v * u) % mod\n        ans %= mod\n    return ans\n\n\nif __name__ == '__main__':\n    print(main())\n","# E - Colorful Blocks\nimport sys\nsys.setrecursionlimit(10**7)\n\nMOD = 998244353\nN,M,K = map(int,input().split())\ninv_M = pow(M-1,-1,MOD)\nans = 0\ntmp = pow(M-1,N-1,MOD)\ncomb = 1\nfor i in range(K+1):\n    ans = (ans+M*comb*tmp)%MOD\n    if i==K:\n        break\n    tmp = (tmp*inv_M)%MOD\n    comb = (comb*(N-1-i)*pow(i+1,-1,MOD))%MOD\nprint(ans)","def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\nN = 2*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m,k = map(int,input().split())\n\nans = 0\na= m*pow(m-1,n-1-k-1,mod)\n\nfor i in range(k,-1,-1):\n  a =a*(m-1)%mod\n  \n  ans += a*cmb(n-1,i,mod)\n  ans %= mod\n  \nprint(ans)","N,M,K = map(int,input().split())\nmod = 998244353\n\nif M == 1 and K == N-1:\n    print(1)\n    exit()\n\nA = [0]*(K+1)\nA[0] = (M*pow(M-1,N-1,mod)) % mod\n\nfor i in range(K):\n    A[i+1] = (A[i]*(N-1-i)*pow(M-1,mod-2,mod)*pow(i+1,mod-2,mod)) % mod\n\nans = A[0]\nfor i in range(K):\n    ans = (ans + A[i+1]) % mod\n\nprint(ans)","\ndef power_func(a,b,p):\n    if b==0: return 1\n    if b%2==0:\n        d=power_func(a,b\/\/2,p)\n        return d*d %p\n    if b%2==1:\n        return (a*power_func(a,b-1,p ))%p\n\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\n\nn,m,k = map(int,input().split())\n\nfor i in range( 2, n + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\ns = 0\n\nfor x in range(k+1):\n    s += (m * power_func(m-1,n-1-x,998244353) * cmb(n-1,x,998244353)) % 998244353\n    s %= 998244353\nprint(s)","import itertools\nimport numpy as np\nfrom scipy.special import comb\n\nmod = 998244353\n\nN,M,K = map(int, input().split())\n\n# DP = [[0]*N for _ in range(N)]\n# DP[0][0] = M\n\n# DP = []\n\n\n# for n in range(1,N):\n# \tfor k in range(N):\n# \t\tif k==0:\n# \t\t\tDP[n][k] = DP[n-1][k]*(M-1) % mod\n# \t\telse:\n# \t\t\tDP[n][k] = (DP[n-1][k]*(M-1) + DP[n][k-1]) % mod\n\n# ans = sum(DP[N-1][:(K+1)]) % mod\n# print(ans)\n\nans = 0\nfor k in range(K+1):\n\tans += comb(N-1, k)*(M-1)**(N-k-1) % mod\n\nprint(int(ans*M) % mod)","n,m,k=map(int,input().split())\nfactorials=[]\ncurrent=1\nfor i in range(n):\n  factorials.append(current)\n  current=((i+1)*current)%998244353\ninverselist=[]\nfor i in range(n):\n  inverselist.append(pow(factorials[i],998244351,998244353))\nans=0\nfor i in range(0,k+1):\n  ans=(ans+m*pow(m-1,n-i-1,998244353)*factorials[n-1]*inverselist[i]*inverselist[n-1-i])%998244353\nprint(ans)","N,M,K = map(int,input().split())\nmod = 998244353\nn = 200050\nfrac = [1]*(n+1)\nfinv = [1]*(n+1)\nfor i in range(n):\n    frac[i+1] = (i+1)*frac[i]%mod\nfinv[-1] = pow(frac[-1],mod-2,mod)\nfor i in range(1,n+1):\n    finv[n-i] = finv[n-i+1]*(n-i+1)%mod\ndef nCr(n,r):\n    if n<0 or r<0 or n<r: return 0\n    r = min(r,n-r)\n    return frac[n]*finv[n-r]*finv[r]%mod\n\n\n# M* n-1Ck*1^k*(M-1)^(N-1-k)\nans = 0\nfor i in range(K+1):\n    tmp=(M*nCr(N-1,i))%mod\n    tmp*=pow(M-1,N-1-i,mod)\n    ans += tmp%mod\nprint(ans%mod)","from collections import deque\n\ndef main():\n    N,M,K=map(int,input().split())\n    MOD=998244353\n    E=0\n\n    n_=1\n    for i in range(1,N):\n        n_=(n_*i)%MOD\n\n    nr_ = 1\n    nr_array=deque([])\n    for i in range(1,N-1):\n        nr_ = (nr_ * i) % MOD\n        nr_array.append(nr_)\n\n    r_=1\n    for i in range(0,K+1):\n        if i!=0 and i!=N-1:\n            r_ = (r_ * i) % MOD\n            nr_=nr_array.pop()\n            power_r=pow(r_,MOD-2,MOD)\n            power_nr=pow(nr_,MOD-2,MOD)\n        Mk=pow(M-1,N-1-i,MOD)\n\n        if i!=0 and i!=N-1:\n            E+=(n_*power_r*power_nr*Mk)%MOD\n        else:\n            E+=Mk%MOD\n\n    res=(M*E)%MOD\n    print(res)\n\nif __name__==\"__main__\":\n    main()\n\n","class Combination:\n    \"\"\"\n    O(n)\u306e\u524d\u8a08\u7b97\u30921\u56de\u884c\u3046\u3053\u3068\u3067\uff0cO(1)\u3067nCr mod m\u3092\u6c42\u3081\u3089\u308c\u308b\n    n_max = 10**6\u306e\u3068\u304d\u524d\u51e6\u7406\u306f\u7d04950ms (PyPy\u306a\u3089\u7d04340ms, 10**7\u3067\u7d041800ms)\n    \u4f7f\u7528\u4f8b\uff1a\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=998244353):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i % self.mod)\n            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)\n        return fac, facinv\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        modinv = [0] * (n+1)\n        modinv[1] = 1\n        for i in range(2, n+1):\n            modinv[i] = self.mod - self.mod\/\/i * modinv[self.mod%i] % self.mod\n        return modinv\n\ndef power_func(a,n,p):\n  bi=str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n  res=1\n  for i in range(len(bi)):\n    res=(res*res) %p\n    if bi[i]==\"1\":\n      res=(res*a) %p\n  return res\n\n\nn,m,k = map(int, input().split())\nMOD = 998244353\nans = 0\ncomb = Combination(n)\nfor i in range(k + 1):\n    tmp = m*power_func(m - 1, n - i - 1,MOD)%MOD\n    tmp *= comb(n - 1,i)\n    ans += tmp%MOD\nprint(ans%MOD)","# E - Colorful Blocks\n\nMOD = 998244353\nN, M, K = map(int, input().split())\n\n# \u4e88\u3081\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f\nf = [1]\nfor i in range(N):\n    f.append(f[i]*(i+1)%MOD)\n\n# \u7d44\u307f\u5408\u308f\u305b\u95a2\u6570\ndef comb_mod(n, r, p):\n    return f[n] * pow(f[r], p-2, p) * pow(f[n-r], p-2, p)\n\nans = 0\nfor i in range(K+1):\n    ans = (ans + (M*pow(M-1, N-1-i,MOD)) * comb_mod(N-1, i, MOD))%MOD\n\nprint(ans)\n","from functools import reduce\n\nn, m, k = map(int,input().split())\nmodi = 998244353\n\n\ndef ncr(a, b):\n    if b == 0:\n        return 1\n    else:\n        num = reduce(lambda x, y: x * y % modi, range(a, a-b, -1))\n        den = reduce(lambda x, y: x * y % modi, range(1, b+1))\n        return num * pow(den, modi - 2, modi) % modi\n\n\nres = 0\nfor i in range(k + 1):\n    res += m % modi * pow(m - 1, n - i - 1, modi) * ncr(n - 1, i)\n    res %= modi\nprint(res)\n","from collections import deque\nfrom heapq import heapify,heappop,heappush,heappushpop\nfrom copy import copy,deepcopy\nfrom itertools import product,permutations,combinations,combinations_with_replacement\nfrom collections import defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom math import gcd,ceil,floor,factorial\n# from fractions import gcd\nfrom functools import reduce\nfrom pprint import pprint\n\nINF = float(\"inf\")\n\ndef myinput():\n    return map(int,input().split())\n\ndef mylistinput(n):\n    return [ list(myinput()) for _ in range(n) ]\n\ndef mycol(data,col):\n    return [ row[col] for row in data ]\n\ndef mysort(data,col,reverse_flag):\n    data.sort(key=lambda x:x[col],reverse=reverse_flag)\n    return data\n\ndef mymax(data):\n    M = -1*float(\"inf\")\n    for i in range(len(data)):\n        m = max(data[i])\n        M = max(M,m)\n    return M\n\ndef mymin(data):\n    m = float(\"inf\")\n    for i in range(len(data)):\n        M = min(data[i])\n        m = min(m,M)\n    return m\n\ndef mycount(ls,x):\n    # ls\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\n    l = bisect_left(ls,x)\n    r = bisect_right(ls,x)\n    return (r-l)\n\ndef myoutput(ls,space=True):\n    if space:\n        if len(ls)==0:\n            print(\" \")\n        elif type(ls[0])==str:\n            print(\" \".join(ls))\n        elif type(ls[0])==int:\n            print(\" \".join(map(str,ls)))\n        else:\n            print(\"Output Error\")\n    else:\n        if len(ls)==0:\n            print(\"\")\n        elif type(ls[0])==str:\n            print(\"\".join(ls))\n        elif type(ls[0])==int:\n            print(\"\".join(map(str,ls)))\n        else:\n            print(\"Output Error\")\n\ndef comb_mod_faster(n,k,mod):\n    if n<k:\n        return 0\n    if n<0 or k<0:\n        return 0\n    k = min(n-k,k)\n    ans = 1\n    inv = [1]*(k+1)\n    if k>=1:\n        ans *= (n-k+1)%mod\n    for i in range(2,k+1):\n        inv[i] = mod - inv[mod%i]*(mod\/\/i)%mod\n        ans = ans*(n-k+i)*inv[i]%mod\n    return ans\n\ndef power_func(a,n,p):\n    bi = str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n    res = 1\n    for i in range(len(bi)):\n        res = (res*res) % p\n        if bi[i]==\"1\":\n            res = (res*a) % p\n    return res\n\nn,m,k = myinput()\n\nmod = 998244353\n\n# ans = 100*(99**99) % mod\n# print(ans)\n\n# ls = [0]*(k+1)\n# for i in range(k+1):\n#     ls[i] = comb_mod_faster(n,i,mod)\n# print(ls)\n\n# ans = 0\n# for i in range(k+1):\n#     t = ls[i]\n#     ans += ( (m-1)**(n-t) ) * (m**t)\n#     ans %= mod \n# print(ans%mod)\n\nans = 0\nfor i in range(k+1):\n    t = comb_mod_faster(n-1,i,mod)\n    # print(i,t)\n    ans1 = power_func(m-1,n-1-i,mod)\n    # print(ans1)\n    # ans2 = power_func(1,i,mod)\n    # print(ans2)\n    ans += ( m * t * ans1 ) % mod\n    # print(ans)\nprint(ans%mod)","def combi(y,x,p=998244353):\n  s=fac[y]\n  t=fac[x]\n  u=fac[y-x]\n  ans= (s* pow(t,p-2,p)*pow(u,p-2,p))%p\n  return ans\n\n###############################\n\nN,M,K=map(int,input().split())\np=998244353\nfac=[1,1]\nfor i in range(2,N+1):\n  fac.append( (fac[-1]*i)%p )\nR = M*(M-1)**(N-K-2)\n\nans=0\nfor i in range(K,-1,-1):\n  R = (R*(M-1))%p\n  L = combi(N,i)\n  ans = (ans + (R*L)%p)%p\nprint(ans)","import sys\nsys.setrecursionlimit(10**9)\nn, m, k = map(int, input().split())\ncolor = [i for i in range(m)]\nans = 0\ndef dfs(i, daburi, num):\n    global ans\n    if i == n-1:\n        if daburi == k:\n            ans += num % 998244353\n            return \n        elif daburi < k:\n            ans += num % 998244353\n            return\n    if daburi > k:\n        return\n    dfs(i+1, daburi, num*(m-1)% 998244353)\n    dfs(i+1, daburi+1, num% 998244353)\ndfs(0, 0, m)\nprint(ans% 998244353)","MOD = 998244353\nn, m, k = map(int, input().split())\n\nfact = [0]*(n+1)\nfact[0] = 1\nfor i in range(1, n+1):\n    fact[i] = fact[i-1]*i % MOD\n\ninvfact = [0]*(n+1)\ninvfact[n] = pow(fact[n], MOD-2, MOD)\nfor i in reversed(range(n)):\n    invfact[i] = invfact[i+1]*(i+1) % MOD\n\n\ndef nCk(n, k):\n    return fact[n]*invfact[k]*invfact[n-k]\n\n\nans = 0\nfor i in range(k+1):\n    ans += m*pow(m-1, n-1-i, MOD)*nCk(n-1, i)\n    ans %= MOD\nprint(ans)","P = 998244353\n\n\nnn = 200200\n\nfa = [1] * (nn+1)\nfainv = [1] * (nn+1)\nfor i in range(nn):\n    fa[i+1] = fa[i] * (i+1) % P\nfainv[-1] = pow(fa[-1], P-2, P)\nfor i in range(nn)[::-1]:\n    fainv[i] = fainv[i+1] * (i+1) % P\n\n\ndef comb(a, b):\n    return fa[a] * fainv[b] % P * fainv[a-b] % P if 0 <= b <= a else 0\n\n\nN, M, K = map(int, input().split())\n\nif M == 1:\n    if N - K > 1:\n        print(1)\n    else:\n        print(0)\n    exit(0)\n\n\nt = pow(M-1, N-1, P)\nm = pow(M-1, P-2, P)\nans = 0\nfor k in range(K+1):\n    ans = (ans + t * comb(N-1, k)) % P\n    t = t * m % P\nprint(ans * M % P)\n","N,M,K = map(int,input().split())\np = 998244353\nsum_color = 0\nfor k in range(K+1):\n  num1 = pow(N-1,k,p)\n  num2 = M%p\n  num3 = pow(M-1,N-1-k,p)\n  sum_color += (num1*num2*num3)%p\n  sum_color %= p\n  \nprint(sum_color%p)\n  \n","from operator import mul\nfrom functools import reduce\nfrom fractions import gcd\nimport math\nimport bisect\nimport itertools\nimport sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nINF = float(\"inf\")\n\nMOD = 998244353\nclass Combination(object):\n\tdef __init__(self, N, MOD):\n\t\tself.fac = [0] * (N + 1)\n\t\tself.inv = [0] * (N + 1)\n\t\tself.finv = [0] * (N + 1)\n\t\tself.fac[0], self.fac[1] = 1, 1\n\t\tself.inv[1] = 1\n\t\tself.finv[0], self.finv[1] = 1, 1\n \n\t\t# \u524d\u8a08\u7b97\n\t\tfor i in range(2, N + 1):\n\t\t\tself.fac[i] = self.fac[i - 1] * i % MOD\n\t\t\tself.inv[i] = self.inv[MOD % i] * (MOD - (MOD \/\/ i)) % MOD\n\t\t\tself.finv[i] = self.finv[i - 1] * self.inv[i] % MOD\n \n\tdef com(self, N, k):\n\t\treturn (self.fac[N] * self.finv[k] * self.finv[N - k]) % MOD\n\n\ndef main():\n    N, M, K = map(int, input().split())\n\n    if N == 1:\n        print(1)\n        return\n\n    Com = Combination(N-1, MOD)\n    ans = 0\n    for k in reversed(range(K+1)):\n        ans += M * pow(M-1, N-k-1, MOD) * Com.com(N-1, k)\n        ans %= MOD\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","n,m,k = map(int,input().split())\n\ndef cmb(n, r, mod):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u306e\u9ad8\u901f\u8a08\u7b97\u3000\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\nmod = 998244353 #\u51fa\u529b\u306e\u5236\u9650\nN = n #N\u306e\u6700\u5927\u5024\ng1 = [0]*(N+1) #\u5143\u30c6\u30fc\u30d6\u30eb(p(n,r))\ng1[0] = g1[1] = 1\ng2 = [0]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ng2[0] = g2[1] = 1\ninverse = [0]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\ninverse[0],inverse[1] = 0,1\nfor i in range(2,N+1):\n    g1[i] = (g1[i-1] * i) % mod\n    inverse[i] = (-inverse[mod % i] * (mod\/\/i)) % mod\n    g2[i] = (g2[i-1] * inverse[i]) % mod\n\n# i\u7d44\u3000-> m * (n-1)Ci * (m-1)^(n-1-i)\nans = 0\nfor i in range(k+1):\n    ans += m * cmb(n-1,i,mod) * pow(m-1,n-1-i,mod)\n    ans %= mod\nprint(ans)","import sys\ninput=sys.stdin.readline\nn,m,k=map(int,input().split())\nINF=998244353\ndef modinv(a,m):\n    b=m\n    (x,lastx)=(0,1)\n    (y,lasty)=(1,0)\n    while not b==0:\n        q=a\/\/b\n        (a,b)=(b,a%b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return lastx%m\nans=0\nfor i in range(k+1):\n    if i==0:\n        c=1\n        temp=(m*pow(m-1,n-1))%INF\n    else:\n        x=modinv(i,INF)\n        c=(c*x*(n-i))%INF\n        temp=(temp*modinv(m-1,INF))%INF\n    ans=(ans+c*temp)%INF\nprint(ans)\n\n\n\n","import sys, bisect, math, itertools, heapq, collections\nfrom operator import itemgetter\n# a.sort(key=itemgetter(i)) # i\u756a\u76ee\u8981\u7d20\u3067sort\nfrom functools import lru_cache\n# @lru_cache(maxsize=None)\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9 + 7\neps = 10**-7\n\n\ndef inp():\n    '''\n    \u4e00\u3064\u306e\u6574\u6570\n    '''\n    return int(input())\n\n\ndef inpl():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\n    '''\n    return list(map(int, input().split()))\n\n\nclass combination():\n    def __init__(self, mod):\n        '''\n        mod\u3092\u6307\u5b9a\u3057\u3066\u521d\u671f\u5316\n        '''\n        self.mod = mod\n        self.fac = [1, 1]  # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\n        self.ifac = [1, 1]  # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n        self.inv = [0, 1]  # \u9006\u5143\u8a08\u7b97\u7528\n\n    def calc(self, n, k):\n        '''\n        nCk%mod\u3092\u8a08\u7b97\u3059\u308b\n        '''\n        if k < 0 or n < k:\n            return 0\n        self.make_tables(n)  # \u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\n        k = min(k, n - k)\n        return self.fac[n] * (self.ifac[k] * self.ifac[n - k] %\n                              self.mod) % self.mod\n\n    def make_tables(self, n):\n        '''\n        \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\n        '''\n        for i in range(len(self.fac), n + 1):\n            self.fac.append((self.fac[-1] * i) % self.mod)\n            self.inv.append(\n                (-self.inv[self.mod % i] * (self.mod \/\/ i)) % self.mod)\n            self.ifac.append((self.ifac[-1] * self.inv[-1]) % self.mod)\n\n\nmod = 998244353\ncomb = combination(mod)\nn, m, k = inpl()\nif m == 1:\n    if k < n - 1:\n        print(0)\n        exit()\n    else:\n        print(0)\n        exit()\nans = 0\nfor i in range(min(n, k + 1)):\n    ans += m * pow(m - 1, n - 1 - i, mod) * comb.calc(n - 1, i) % mod\n    ans %= mod\nprint(ans)\n","def main():\n    from sys import stdin\n    MOD = 998244353\n    n,m,k = map(int,stdin.readline().rstrip().split())\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    dp[1][0] = m\n    for i in range(1,n):\n        dp[i+1][0] = dp[i][0]*(m-1)%MOD\n\n    for i in range(n):\n        for j in range(k):\n            dp[i+1][j+1] = (dp[i][j+1]*(m-1) + dp[i][j]*m)%MOD\n    \n    print(dp[n][k])\nmain()","N,M,K=map(int,input().split())\nmod= 998244353\n\nFACT=[1]\nfor i in range(1,2*10**5+1):\n    FACT.append(FACT[-1]*i%mod)\n\nFACT_INV=[pow(FACT[-1],mod-2,mod)]\nfor i in range(2*10**5,0,-1):\n    FACT_INV.append(FACT_INV[-1]*i%mod)\n\nFACT_INV.reverse()\n\ndef Combi(a,b):\n    if 0<=b<=a:\n        return FACT[a]*FACT_INV[b]*FACT_INV[a-b]%mod\n    else:\n        return 0\n\nANS=0\nfor i in range(K+1):\n    ANS+=Combi(N-1,i)*pow(M-1,N-1-i,mod)\n    ANS%=mod\nprint(ANS*M%mod)\n","# from math import factorial\nfrom sys import exit\nn,m,k = map(int, input().split())\nif m == 1:\n    if k == n-1:\n        print(1)\n    else:\n        print(0)\n    exit()\nMOD = 998244353\n\nans = tmp = (m * (m-1) ** (n-1)) % MOD\n\nfor i in range(k):\n    tmp *= (n-1-i)\n    tmp %= MOD\n    tmp *= pow((m-1) * (i+1), -1, MOD)\n    ans += tmp\n    ans %= MOD\n\nprint(ans)","M=998244353\nclass Factorial:\n    def __init__(self,n):\n        self.f=f=[0]*(n+1)\n        f[0]=b=1\n        for i in range(1,n+1):f[i]=b=b*i%M\n        self.inv=inv=[0]*(n+1)\n        inv[n]=b=pow(self.f[n],-1,M)\n        for i in range(n,0,-1):inv[i-1]=b=b*i%M\n    def factorial(self,i):\n        return self.f[i]\n    def ifactorial(self,i):\n        return self.inv[i]\n    def comb(self,n,k):\n        if n>=k:return self.f[n]*self.inv[n-k]*self.inv[k]%M\n        else:return 0\ncomb=Factorial(10**5*5).comb\nn,m,k=map(int,input().split())\nprint(sum(m*comb(n-1,i)*pow(m-1,~i+n,M)for i in range(k+1))%M)","N,M,K = map(int,input().split())\n\np = 998244353\n# \u4f55\u500b\u3092\u540c\u3058\u8272\u306e\u7d44\u306b\u3059\u308b\u304b0~K\ncnt = 0\ncom = 1\nfor k in range(K+1):\n    l = N-k\n    # N-1\u500b\u306e\u7d44\u306e\u3046\u3061\u3069\u308c\u3092\u540c\u3058\u8272\u306b\u3059\u308b\u304bN-1Ck\n    # \u305d\u308c\u305e\u308c\u3067\u3001N-k\u500b\u3092\u5225\u306e\u8272\u306e\u9806\u5217\u306b\u3059\u308b\n    # M*(M-1)**(N-k-1)\n    x = pow((M-1),(l-1),p)\n    cnt += M * x * com\n    cnt %= p\n\n    # \u6b21\u306ek\u306enCk\n    com *= N-(k+1)\n    com *= pow(k+1,p-2,p)\n    com %= p\n\n\nprint(cnt)\n","n,m,k=map(int,input().split())\nmod=998244353\nans=0\ndef mfact(n,mod):\n    f=[1]\n    for i in range(1,n+1):\n        f.append(f[-1]*i%mod)\n    return f\nf=mfact(n-1,mod)\nfor i in range(k+1):\n    ans+=(m*pow(m-1,n-i-1,mod)*f[n-1]*pow(f[n-1-i],mod-2,mod)*pow(f[i],mod-2,mod))%mod\nprint(ans%mod)","import sys\nsys.setrecursionlimit(100000)\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\nm = [1, M]\nk = M\nfor _ in range(1, N+1):\n  k = k*(M-1)%mod\n  m.append(k)\nans = []\n\n\ndef solve(now, pairs, colors):\n  if now == N:\n    ans.append(m[colors])\n    return 0\n  elif pairs == K:\n    colors += N - now\n    ans.append(m[colors])\n    return 0\n  else:\n    solve(now+1, pairs+1, colors)\n    solve(now+1, pairs, colors+1)\n\n\nsolve(1, 0, 1)\n\n\n#print(ans)\na = 0\nfor _ in range(len(ans)):\n  a += ans[_]\n  a %= mod\nprint(a)","import numpy as np\n\n\nclass mod_calc():\n    def __init__(self, divisor, max_n):\n        # assume prime\n        self._divisor = divisor\n        # nsq = math.ceil(math.sqrt(max_n))\n        # feature fix_n? max_k?\n        fact = np.empty((max_n+1,), dtype=int)\n        fact[1] = fact[0] = f = 1\n        for i in range(2, len(fact)):\n            f = (f * i) % divisor\n            fact[i] = f\n        self._fact = fact\n        fact_inv = np.empty((max_n+1,), dtype=int)\n        fact_inv[max_n] = fi = pow(int(fact[max_n]), divisor-2, divisor)\n        for i in range(max_n, 2, -1):\n            fi = (fi * i) % divisor\n            fact_inv[i-1] = fi\n        fact_inv[1] = fact_inv[0] = 1\n        self._fact_inv = fact_inv\n\n    def comb(self, n, k):\n        k = min(k, n-k)\n        if k == 0 or k == n:\n            return 1\n        return self.mul(self._fact[n], self._fact_inv[n-k], self._fact_inv[k])\n\n    def pow(self, a, n):\n        return pow(a, n, self._divisor)\n\n    def mul(self, *a):\n        # TODO montogomery\n        # https:\/\/ikatakos.com\/pot\/programming_algorithm\/number_theory\/montgomery_multiplication\n        r = a[0]\n        for m in a[1:]:\n            r = (r * m) % self._divisor\n        return r\n\n    def sum(self, *a):\n        r = a[0]\n        for m in a[1:]:\n            r = (r + m) % self._divisor\n        return r\n\n\ndef main():\n    N, M, K = [int(x) for x in input().split()]\n    if M == 1:\n        return 1\n    if N == 1:\n        return M\n    c = mod_calc(998244353, N-1)\n    count = 0\n    for k in range(K+1):\n        count = c.sum(c.mul(c.comb(N-1,k), M, c.pow(M-1, N-k-1)), count)\n    return count\n\n\nif __name__ == \"__main__\":\n    print(main())\n","n,m,k = map(int,input().split())\nmod = 998244353\ndef inv(x):\n  y = 1\n  while x != 1:\n    y *= mod \/\/ x + 1\n    y %= mod\n    x -= mod % x\n  return y\n#print(inv(2))\nnow = m\nfor _ in range(n-1):\n  now *= m-1\n  now %= mod\nans = int(now)\nfor i in range(k):\n  now *= inv(m-1)\n  now *= n-1-i\n  now *= inv(i+1)\n  now %= mod\n  #print(now)\n  ans += now\n  ans %= mod\nprint(ans)","# \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\nN, M, K = map(int, input().split())\n\nm = 998244353\n\nresult = 0\nn = 1\nk = 1\nfor i in range(K + 1):\n    # result += M * mcomb(N - 1, i) * pow(M - 1, N - 1 - i, 998244353)\n    result += n * pow(k, m - 2, m) * pow(M - 1, N - 1 - i, m)\n    result %= m\n    n *= N - 1 - i\n    n %= m\n    k *= i + 1\n    k %= m\nresult *= M\nresult %= m\nprint(result)\n","import sys\nstdin = sys.stdin\nsys.setrecursionlimit(10**6)\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnn = lambda: list(stdin.readline().split())\nns = lambda: stdin.readline().rstrip()\n\nn,m,k = na()\nmod = 998244353\n\n\nfact = [0] * 220000\ninvfact = [0] * 220000\n \nfact[0] = 1\nfor i in range(1, 220000):\n    fact[i] = fact[i-1] * i % mod\n \ninvfact[220000 - 1] = pow(fact[220000 - 1], mod-2, mod)\n \nfor i in range(220000 - 2, -1, -1):\n    invfact[i] = invfact[i+1] * (i+1) % mod\n \ndef nCk(n, k):\n    if k < 0 or n < k:return 0\n    return fact[n] * invfact[k] * invfact[n-k] % mod\n \nans = 0\n\nfor i in range(k+1):\n    ans += pow(m-1,n-i-1,mod)*nCk(n-1,i)\n\nprint(ans*m%mod)","def cmb(n, r, p):\n    return (fac[n] * pow(fac[r], p - 2, p) * pow(fac[n - r], p - 2, p)) % p\n\n\np = 998244353\nN, M, K = map(int, input().split())\nfac = [1] * (max(N, M) + 1)\nfor i in range(1, max(N, M) + 1):\n    fac[i] = (fac[i - 1] * i) % p\n\nans = 0\nfor k in range(K + 1):\n    ans += M * pow(M - 1, N - k - 1, p) * cmb(N - 1, k, p)\n    ans %= p\nprint(ans)\n","from sys import stdin\ninput = stdin.readline\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\n\nC = [-1] * (N + 1)\n\n\ndef comb(n, r):\n    if r > n - r:\n        C[r] = C[n - r]\n\n    if r == 0:\n        C[0] = 1\n\n    if C[r] != -1:\n        return C[r]\n    else:\n        C[r] = comb(n, r - 1) * (n + 1 - r) * pow(r, mod - 2, mod)\n        C[r] %= mod\n        return C[r]\n\n\nans = 0\n\nfor i in range(K + 1):\n    ans += M * pow(M - 1, N - 1 - i, mod) * comb(N - 1, i)\n    ans %= mod\n\nprint(ans)\n# print(C)\n"],"raw_generations":["import sys\ninput = sys.stdin.readline\nN, M, K = map(int, input().split())\nmod = 998244353\nclass Factorial:\n  def __init__(self, n, mod):\n    self.f = [1]\n    for i in range(1, n + 1):\n      self.f.append(self.f[-1] * i % mod)\n    self.i = [pow(self.f[-1], mod - 2, mod)]\n    for i in range(1, n + 1)[: : -1]:\n      self.i.append(self.i[-1] * i % mod)\n    self.i.reverse()\n  def factorial(self, i):\n    return self.f[i]\n  def ifactorial(self, i):\n    return self.i[i]\n  def combi(self, n, k):\n    return self.f[n] * self.i[n - k] % mod * self.i[k] % mod\n\nf = Factorial(N + M, mod)\n\ndp = [0] * (N + 1)\ndp[1] = M\nfor i in range(1, N):\n  dp[i + 1] = dp[i] * (M - 1)\n  dp[i + 1] %= mod\n#print(dp)\nres = 0\nfor i in range(K + 1):\n  res += dp[N - i] * f.combi(N - 1, i) % mod\n  res %= mod\nprint(res)","N,M,K = map(int,input().split())\nQ = [[0 for i in range(K+1)] for j in range(N)]\nQ[0][0] = M\nfor i in range(1,N):\n  for j in range(K+1):\n    Q[i][j] = Q[i-1][j-1]+(M-1)*Q[i-1][j]\nprint(sum(Q[N])%998244353)","mod = 998244353\ndef comb(n, r):\n    if n < r:return 0\n    if n < 0 or r < 0:return 0\n    return fa[n] * fi[r] % mod * fi[n - r] % mod\nn, m, k = map(int, input().split())\nfa = [1] * (n + 1)\nfi = [1] * (n + 1)\nfor i in range(1, n + 1):\n    fa[i] = fa[i - 1] * i % mod\n    fi[i] = pow(fa[i], mod - 2, mod)\nans = 0\nfor i in range(k + 1):\n    ans += pow(m - 1, n - i - 1, mod) % mod * comb(n - 1, i) * m % mod\n    ans %= mod\nprint(ans)","#n=int(input())\nn,m,k=map(int,input().split())\n#a=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\n\n\n#mod = 10**9+7 #\u5272\u308b\u6570\nmod=998244353 #\u5272\u308b\u6570\nN = 2*10**5 #n\u306e\u4e0a\u9650\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\na=0\nfor i in range(n-k,n+1):\n    a+=m*((m-1)**(i-1))*cmb(n-1,n-i,998244353) #comb(n-1,n-i)\nprint(a%998244353)\n","mod = 998244353\n\n\nN, M, K = map(int, input().split())\n\n\ninvs = {}\n\n\ndef inv(n):\n    if n not in invs:\n        invs[n] = pow(n, mod-2, mod)\n    return invs[n]\n\n\nans = 0\ncomb = 1\ncol = M*pow(M-1, N-1, mod)\nfor i in range(K+1):\n    now = col*comb\n    now %= mod\n    ans += now\n    ans %= mod\n    comb *= ((N-i-1)*inv(i+1))\n    comb %= mod\n    col *= inv(M-1)\n    col %= mod\n\nprint(ans)\n","N,M,K=map(int,input().split())\nP=998244353\nclass FactInv:\n    def __init__(self,N,P):\n        fact=[];ifact=[];fact=[0]*(N+1);ifact=[0]*(N+1);fact[1]=1\n        for i in range(1,N):\n            fact[i+1]=(fact[i]*(i+1))%P\n        ifact[-1]=pow(fact[-1],P-2,P)\n        for i in range(N,0,-1):\n            ifact[i-1]=(ifact[i]*i)%P\n        self.fact=fact;self.ifact=ifact;self.P=P\n    def Comb(self,n,k):\n        return (self.fact[n]*self.ifact[k]*self.ifact[n-k])%self.P\nFI=FactInv(N+10,P)\nans=0\nfor i in range(0,K+1):\n    ans+=(M*FI.Comb(N-1,i)*pow(M-1,N-1-i,P))%P\n    ans%=P\nprint(ans)","# -*- coding:utf-8 -*-\n\ndef solve():\n    import sys\n\n    MOD = 998244353\n    N, M, K = list(map(int, sys.stdin.readline().split()))\n\n    \"\"\"\n    x\u306e\u7d44\u3092\u4f5c\u308b\u3068\u3059\u308b\n    (1) \u30b0\u30eb\u30fc\u30d7\u6570: N-x\n    (2) \u30b0\u30eb\u30fc\u30d7\u306e\u8272\u306e\u5272\u308a\u5f53\u3066\u65b9\uff1aM(M-1)**(N-1)\n    (3) \u30b0\u30eb\u30fc\u30d7\u306e\u5206\u3051\u65b9\uff1a(N-1)C(x)\n    \"\"\"\n\n    bunsi_memo = {}\n    bunbo_memo = {}\n    pow_memo = {}\n    def combination_formula_MOD(n, r, MOD):\n        \"\"\"nCr\u3092 O(min(n-r, r)) \u3067\u9ad8\u901f\u306b\u8a08\u7b97\u3059\u308b\"\"\"\n        def _inv(x, MOD):\n            \"\"\"x\u306e\u9006\u5143\u3092\u8fd4\u3059\"\"\"\n            if not (x, MOD-2) in pow_memo:\n                pow_memo[(x, MOD-2)] = pow(x, MOD-2, MOD)\n            return pow_memo[(x, MOD-2)]\n\n        if n < r: return 0\n\n        r = min(n-r, r)\n        bunsi, bunbo = 1, 1\n        if not r in bunsi_memo:\n            for i in range(r):\n                bunsi = bunsi*(n-i)%MOD\n                bunbo = bunbo*(i+1)%MOD\n            bunsi_memo[r] = bunsi\n            bunbo_memo[r] = bunbo\n        bunsi, bunbo = bunsi_memo[r], bunbo_memo[r]\n        return (bunsi*_inv(bunbo, MOD))%MOD\n\n\n    ans = 0\n    col = M\n    for x in range(N-1, -1, -1):\n        if x <= K:\n            now = col%MOD\n            now = (now * combination_formula_MOD(N-1, x, MOD))%MOD\n            ans += now\n            ans %= MOD\n\n        col *= (M-1)\n        col %= MOD\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    solve()\n","import math\nN,M,K=map(int,input().split())\nmod=998244353\nans=0\nd=[1]+[1]\ne=[0]+[1]\nf=[0]+[1]\n\nfor i in range(2,N+1):\n  d += [d[i-1]*i%mod]\n  e += [ e[mod % i] * (mod - int(mod \/ i)) % mod]\n  f += [ f[i-1]*e[i]%mod]\ndef combinations_count(n, r):\n  if r==n or r==0:\n    return 1\n  return d[n] * f[n-r] * f[r]%mod\n\nfor i in range(K+1):\n  l=M*pow(M-1,N-1-i,mod)%mod\n  ans+=l*combinations_count(N-1,i)%mod\n  ans%=mod\nprint(ans)","n, m, k = map(int, input().split())\n\nmod = 998244353\nfact = [1] * (n + 1)\nifact = [1] * (n + 1)\n\nfor i in range(n):\n    fact[i + 1] = fact[i] * (i + 1) % mod\n    ifact[i + 1] = pow(fact[i + 1], mod - 2, mod)\n\n\ndef comb(x, y):\n    if y < 0 or y > x:\n        return 0\n    return (fact[x] * ifact[x - y] * ifact[y]) % mod\n\n\nmm = [1]\nfor _ in range(n + 1):\n    mm.append(mm[-1] * (m - 1) % mod)\n\nans = 0\nfor i in range(k + 1):\n    ans += m * comb(n - 1, i) * mm[n - 1 - i]\n    ans %= mod\n\nprint(ans)\n","def main():\n    def kaizyo(x):\n        ans = 1\n        for i in range(2, x+1):\n            ans *= i\n        return ans\n\n    n, m, k = map(int, input().split())\n    MAX = 998244353\n    ans = 0\n    kaizyos = [None]*n\n    ki = 1\n    kaizyos[0] = ki\n    for i in range(1, n):\n        ki *= i\n        ki %= MAX\n        kaizyos[i] = ki\n    def comb(a, b):\n        return kaizyos[a]\/\/(kaizyos[b]*kaizyos[a-b])\n    ruizyos = [None]*(k+1)\n    ruizyo = 1\n    for i in range(n-1-k):\n        ruizyo *= m-1\n        ruizyo %= MAX\n    ruizyos[0] = ruizyo\n    for i in range(n-k, n):\n        ruizyo *= m-1\n        ruizyo\n        ruizyos[i-n-k+1] = ruizyo\n    pattern = lambda x: (comb(n-1, x)*m*ruizyos[x])%MAX\n    for i in range(k+1):\n        ans += pattern(i)\n        ans %= MAX\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","def n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\n\nn,m,k=n1()\n\ndef cmb(n, k, mod, fac, ifac):\n    \"\"\"\n    nCk\u3092\u8a08\u7b97\u3059\u308b\n    \"\"\"\n    k = min(k, n-k)\n    return fac[n] * ifac[k] * ifac[n-k] % mod\n\n\ndef make_tables(mod, n):\n    \"\"\"\n    \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u3001\u9006\u5143\u306e\u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\n    \"\"\"\n    fac = [1, 1] # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(1)\n    ifac = [1, 1] #\u9006\u5143\u306e\u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(2)\n    inverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(3)\n\n    for i in range(2, n+1):\n        fac.append((fac[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n        ifac.append((ifac[-1] * inverse[-1]) % mod)\n    return fac, ifac\n\nans=0\na=1\nMOD=998244353\nfac, ifac = make_tables(MOD, n-1)\n        \nfor i in range(k+1):\n    ans+=m*pow(m-1,n-1-i,998244353)*cmb(n-1, i, MOD, fac, ifac)\nprint(ans%998244353)","class comb():\n  F = [1, 1]\n  Fi = [1, 1]\n  I = [0, 1]\n  def __init__(self, num, mod):\n    self.MOD = mod\n    for i in range(2, num + 1):\n      self.F.append((self.F[-1] * i) % mod)\n      self.I.append(mod - self.I[mod % i] * (mod \/\/ i) % mod)\n      self.Fi.append(self.Fi[-1] * self.I[i] % mod)\n  def com(self, n, k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return self.F[n] * (self.Fi[k] * self.Fi[n - k] % self.MOD) % self.MOD\n\n\nN, M, K = list(map(int, input().split()))\nMOD = 998244353\n\nans = 0\n\nP = [M] * (N)\n\nfor i in range(N - 1):\n  P[i + 1] = P[i] * (M - 1) % MOD\n\ncom = comb(N, MOD)\nfor i in range(K + 1):\n  t = P[-1 -i] * com.com(N - 1, i) % MOD\n  ans = (ans + t) % MOD\n\nprint(ans)","import sys\n\nsys.setrecursionlimit(10 ** 7)\nrl = sys.stdin.readline\n\n\nclass Combination:\n    def __init__(self, n: int, mod: int):\n        self.mod = mod\n        self.fact = [0] * (n + 1)\n        self.factinv = [0] * (n + 1)\n        self.inv = [0] * (n + 1)\n        \n        self.fact[0] = self.fact[1] = 1\n        self.factinv[0] = self.factinv[1] = 1\n        self.inv[1] = 1\n        for i in range(2, n + 1):\n            self.fact[i] = (self.fact[i - 1] * i) % mod\n            self.inv[i] = (-self.inv[mod % i] * (mod \/\/ i)) % mod\n            self.factinv[i] = (self.factinv[i - 1] * self.inv[i]) % mod\n    \n    def ncr(self, n: int, r: int):\n        if r < 0 or n < r:\n            return 0\n        r = min(r, n - r)\n        return self.fact[n] * self.factinv[r] % self.mod * self.factinv[n - r] % self.mod\n    \n    def nhr(self, n: int, r: int):\n        return self.ncr(n + r - 1, r)\n    \n    def npr(self, n: int, r: int):\n        if r < 0 or n < r:\n            return 0\n        return self.fact[n] * self.factinv[n - r] % self.mod\n\n\ndef solve():\n    N, M, K = map(int, rl().split())\n    MOD = 998244353\n    \n    com = Combination(N + 10, MOD)\n    \n    ans = 0\n    for x in range(K + 1):\n        ans = (ans + com.ncr(N - 1, x) * M * pow(M - 1, N - 1 - x, MOD)) % MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n","#!\/usr\/bin\/env python3\n\nimport sys\nimport math\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(2147483647)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 998244353\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\ndef comb(n,r):\n    if r >= n:\n        return 1\n    return fact[n]*pow(fact[n-r], mod-2, mod)*pow(fact[r], mod-2, mod) % mod\n\nn,m,k = LI()\nans = 0\nfact = [1]*(max(n,m)+1)\nfor i in range(1,n):\n    fact[i] = i*fact[i-1]\n    fact[i] %= mod\n\nfor i in range(k+1):\n    ans += comb(n-1, i) * m * pow(m-1, n-i-1, mod)\n    ans %= mod\nprint(ans)","MOD = 998244353\n\n\nclass Combination:\n\n    def __init__(self, n, mod):\n        self.mod = mod\n        self.fact = [1] * (n+1)\n        self.ifact = [1] * (n+1)\n\n        for i in range(1, n+1):\n            self.fact[i] = i*self.fact[i-1] % mod\n            self.ifact[i] = pow(i, mod-2, mod) * self.ifact[i-1] % mod\n\n    def get(self, n: int, k: int):\n        if k < 0 or n < k:\n            return 0\n        return self.fact[n] * self.ifact[k] * self.ifact[n-k] % MOD\n\n    def __call__(self, n: int, k: int):\n        return self.get(n, k)\n\n\ndef main():\n    N, M, K = [int(x) for x in input().split()]\n    comb = Combination(N, MOD)\n    ans = 0\n    for i in range(0, K+1):\n        ans += M * pow(M-1, N-i-1, MOD) * comb(N-1, i)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","n, m, k = map(int, input().split())\nmod = 998244353\n\nans = 0\ncomb = 1\nfor i in range(k+1):\n  ans += (((m*pow(m-1,n-i-1,mod))%mod)*comb)%mod\n  ans %= mod\n  comb = (comb*(n-1-i)*pow(i+1, mod-2, mod))%mod\n\nprint(ans)","def main():\n    n, m, k = map(int, input().split())\n    MOD = 998244353\n    ans = 0\n    c = 1\n\n    for i in range(k + 1):\n        ans += (((m * pow(m - 1, n - i - 1, MOD)) % MOD) * c) % MOD\n        ans %= MOD\n        c = (c * (n - 1 - i) * pow(i + 1, MOD - 2, MOD)) % MOD\n        \n        \n    print(ans % MOD)\n    \nif __name__ == '__main__':\n    main()","N, M, K = map(int, input().split())\nmod = 998244353\n\ndef comb(a, b):\n    global mod\n    l, r = 1, 1\n    for i in range(b):\n        l = l*(b-i)%mod\n        r = r*(a-i)%mod\n    return (r*pow(l, mod-2, mod))%mod\n\nans = 0\nfor i in range(K+1):\n    ans += comb(N-1, i)*M*pow((M-1), (N-1-i), mod)%mod\n\nprint(ans%mod)\n","\n\ndef diff_colors(x, m, modp):\n    \"\"\"\n    \u9577\u3055x\u306e\u5217\u3092m\u8272\u3067\u5857\u308b\n    \u3053\u306e\u3068\u304d\u3001\u9023\u7d9a\u3057\u3066\u540c\u3058\u8272\u3092\u4f7f\u308f\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b\n    \"\"\"\n    ans = m\n    x -= 1\n    while x:\n        ans *= (m - 1)\n        ans %= modp\n        x -= 1\n    return ans\n\ndef factorial(x, modp):\n    fact = dict()\n    fact[0] = 1\n    curr = 1\n    while curr <= 2 * x:\n        fact[curr] = fact[curr - 1] * curr\n        fact[curr] %= modp\n        curr += 1\n    return fact\n\n\ndef pow(x, k, modp):\n    ans = 1\n    while k:\n        if k % 2:\n            ans *= x\n            ans %= modp\n        x *= x\n        x %= modp\n        k \/\/= 2\n    return ans\n\n\ndef combi(fact, n, k, modp):\n    ans = fact[n + k - 1]\n    ans *= pow(fact[k], modp - 2, modp)\n    ans %= modp\n    ans *= pow(fact[n - 1], modp - 2, modp)\n    ans %= modp\n    return ans\n\n\ndef submit():\n    n, m, k = map(int, input().split())\n    modp = 998244353\n    fact = factorial(n, modp)\n\n    ans = 0\n    base_pattern = diff_colors(n - k, m, modp)\n    for i in range(k + 1):\n        ans += base_pattern * combi(fact, n - (k - i), k - i, modp)\n        ans %= modp\n        base_pattern *= (m - 1)\n        base_pattern %= modp\n\n    print(ans)\n    \n\nif __name__ == \"__main__\":\n    submit()    ","def gcd(a, b):\n\t'''\u6700\u5927\u516c\u7d04\u6570'''\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\t'''\u6700\u5c0f\u516c\u500d\u6570'''\n\treturn (a * b) \/\/ gcd(a, b)\n\ndef ex_gcd(a, b):\n\t'''\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0'''\n\tx1, x2 = 0, 1\n\ty1, y2 = 1, 0\n\tq = 0\n\twhile b != 0:\n\t\tx1, x2 = x2, x1 - q * x2\n\t\ty1, y2 = y2, y1 - q * y2\n\t\tq = a \/\/ b\n\t\ta, b = b, a % b\n\treturn a, x2, y2\n\ndef gcd_n(a, *numbers):\n\t'''\u8907\u6570\u306e\u6570\u306e\u6700\u5927\u516c\u7d04\u6570'''\n\td = a\n\tfor b in numbers:\n\t\td = gcd(d, b)\n\treturn d\n\ndef lcm_n(a, *numbers):\n\t'''\u8907\u6570\u306e\u6570\u306e\u6700\u5c0f\u516c\u500d\u6570'''\n\tm = a\n\tfor b in numbers:\n\t\tm = lcm(m, b)\n\treturn m\n\ndef factorize(n):\n\t'''\u7d20\u56e0\u6570\u5206\u89e3'''\n\tfactor = 2\n\tfactors = []\n\twhile factor * factor <= n:\n\t\tif n % factor == 0:\n\t\t\tcount = 1\n\t\t\tn \/\/= factor\n\t\t\twhile n % factor == 0:\n\t\t\t\tn \/\/= factor\n\t\t\t\tcount += 1\n\t\t\tfactors.append((factor, count))\n\t\tfactor += 1\n\tif n != 1:\n\t\tfactors.append((n, 1))\n\treturn factors\n\ndef totient(n):\n\t'''\u30aa\u30a4\u30e9\u30fc\u306e\u30c8\u30fc\u30b7\u30a7\u30f3\u30c8\u95a2\u6570'''\n\tphi = 1\n\tfor prime, count in factorize(n):\n\t\tphi *= (prime - 1) * (prime ** (count - 1))\n\treturn phi\n\ndef carmichael(n):\n\t'''\u30ab\u30fc\u30de\u30a4\u30b1\u30eb\u95a2\u6570'''\n\tprime_carmichaels = [1]\n\tfor prime, count in factorize(n):\n\t\tif prime == 2:\n\t\t\tprime_carmichaels.append(count if count <= 2 else (2 ** (count - 2)))\n\t\telse:\n\t\t\tprime_carmichaels.append((prime - 1) * (prime ** (count - 1)))\n\treturn lcm_n(*prime_carmichaels)\n\n\nclass Modulo (object):\n\tdef __init__(self, mod):\n\t\tself.mod = mod\n\t\tself.carmichael = carmichael(mod)\n\t\n\tdef add(self, x, y):\n\t\treturn (x + y) % self.mod\n\t\n\tdef sub(self, x, y):\n\t\treturn (x - y) % self.mod\n\t\n\tdef mul(self, x, y):\n\t\treturn (x * y) % self.mod\n\t\n\tdef div(self, x, y):\n\t\treturn self.mul(x, self.inv(y))\n\t\n\tdef inv(self, x):\n\t\treturn self.pow(x, self.carmichael - 1)\n\t\n\tdef pow(self, x, count):\n\t\treturn pow(x, count, self.mod)\n\n\nfrom functools import reduce\n\n\nMOD = Modulo(998244353)\n\nN, M, K = map(int, input().split())\n\nF = [1] * N\nfor n in range(1, N):\n\tF[n] = MOD.mul(F[n-1], n)\n\nprint(\n\treduce(\n\t\tMOD.add,\n\t\t(\n\t\t\tMOD.mul(\n\t\t\t\tMOD.div(\n\t\t\t\t\tF[N-1],\n\t\t\t\t\tMOD.mul(F[k], F[(N-1)-k])\n\t\t\t\t),\n\t\t\t\tMOD.mul(\n\t\t\t\t\tM,\n\t\t\t\t\tMOD.pow(M-1, (N-k)-1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tfor k in range(K+1)\n\t\t)\n\t)\n)\n","# E - Colorful Blocks\n\nn, m, k = map(int, input().split())\n\nmodulus = 998244353\n\n# n\u30d6\u30ed\u30c3\u30af m\u8272\u3067\u5857\u308b \u2192 m ** n \u901a\u308a\n# \u96a3\u308a\u5408\u3046\u30d6\u30ed\u30c3\u30af\u306e\u7d44 n - 1\u7d44\u306e\u3046\u3061 \u9ad8\u3005k\u7d44\u304c\u540c\u8272\n\n# n\u500b\u3070\u3089\u3070\u3089 == m * (m-1) ** (n-1)\n# k\u7d44\u540c\u8272 == n-k\u500b\u3070\u3089\u3070\u3089 * k\u500b\u3092n-k\u7d44\u306b\u5206\u3051\u308b(choose(n-1, n-k-1))\n\ndef inv(x):\n    return pow(x, modulus - 2, modulus)\n\nchoose = [1]  # choose(n-1, i)\nfor i in range(1, n):\n    choose.append(choose[-1] * (n-1-i+1) * inv(i) % modulus)\n\ndef solve(n, k):\n    x = m * pow(m-1, n-k-1, modulus)\n    return x * choose[n-k-1] % modulus\n\nprint(sum(solve(n, i) for i in range(k+1)) % modulus)\n","# coding: utf-8\nimport sys\nsys.setrecursionlimit(1000000)\nN,M,K=map(int,input().split())\nMOD=998244353\n\n\n#a**n mod p \u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\ndef modPow(a,n,p):\n    if n == 1:\n        #n=1\u306a\u3089a\u3092\u8fd4\u3059\n        return a % p\n\n    elif n % 2 == 1:\n        #n\u304c\u5947\u6570\u306a\u3089\u3070 a * modPow(a,n-1(\u5076\u6570),p)\u3092\u8fd4\u3059\n        return a * modPow(a,n-1,p) % p\n\n    else:\n        #n\u304c\u5076\u6570\u306a\u3089 modPow(a,n\/\/2,p) * modPow(a,n\/\/2,p)\u3068\u3059\u308b\u3068\u901f\u3044\n        t = modPow(a,n\/\/2,p)\n        return t * t % p\n\nfac=[None for i in range(N)]\nfinv=[None for i in range(N)]\ninv=[None for i in range(N)]\n\ndef COMinit(num):\n    global fac\n    global finv\n    global inv\n    fac[0]=1\n    fac[1]=1\n    finv[0]=1\n    finv[1]=1\n    inv[1]=1\n\n    for i in range(2,num):\n        fac[i] = fac[i-1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i-1] * inv[i] % MOD\n\ndef COM(n,k):\n    if n<k:\n        return 0\n    elif n<0 or k<0:\n        return 0\n    else:\n        return int(fac[n] * (finv[k] * finv[n - k] % MOD) % MOD)\n\n\nCOMinit(N)\n\nans=0\n\nfor i in range(K+1):\n    ans+=COM(N-1,N-1-K+i)*M*modPow(M-1,N-1-K+i,MOD)\n    ans=ans%MOD\nprint(ans)","import sys\ninput = sys.stdin.readline\n\nmod = 998244353\nn,m,k = map(int,input().split())\nMAX_N = 10**6\n\nfact = [1]\nfact_inv = [0]*(MAX_N+4)\nfor i in range(MAX_N+3):\n    fact.append(fact[-1]*(i+1)%mod)\n\nfact_inv[-1] = pow(fact[-1],mod-2,mod)\nfor i in range(MAX_N+2,-1,-1):\n    fact_inv[i] = fact_inv[i+1]*(i+1)%mod\n\n\ndef mod_comb_k(n,k,mod):\n    return fact[n] * fact_inv[k] % mod * fact_inv[n-k] %mod\n\n\n\n\nres = 0\n\ntmp = m*pow(m-1,n-k-1,mod)\n\nfor r in range(n-k-1,n):\n    res = (res + tmp*mod_comb_k(n-1,r,mod)%mod)%mod\n    tmp = tmp*(m-1)%mod\n\nprint(res)","# \u4e8c\u9805\u4fc2\u6570\u3092\"\u3084\u308b\u3060\u3051\"\u306b\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom collections import Counter\nMAX = 1000005\nMOD = 998244353\nfactrial = [0]*MAX\ninverse = [0]*MAX\nfactrial_inverse = [0]*MAX\n\n\n# \u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u524d\u51e6\u7406\ndef COMinit():\n    global factrial, inverse, factrial_inverse\n    factrial[0] = 1\n    factrial[1] = 1\n    inverse[1] = 1\n    factrial_inverse[0] = 1\n    factrial_inverse[1] = 1\n    for i in range(2, MAX):\n        factrial[i] = factrial[i-1] * i % MOD\n        inverse[i] = MOD - inverse[MOD % i] * (MOD\/\/i) % MOD\n        factrial_inverse[i] = factrial_inverse[i-1] * inverse[i] % MOD\n\n\n# \u4e8c\u9805\u4fc2\u6570\u8a08\u7b97\ndef COM(n, k):\n    global factrial, inverse, factrial_inverse\n    if n < k:\n        return 0\n    if n < 0 or k < 0:\n        return 0\n    return factrial[n] * (factrial_inverse[k] * factrial_inverse[n-k] % MOD) % MOD\n\n\n# \u524d\u51e6\u7406\u5b8c\u4e86\nCOMinit()\n\nN, M, K = map(int, input().split())\nans = 0\n\nfor i in range(K+1):  # \u3064\u307e\u308a\u6ca1\u3068\u306a\u308b\u30d6\u30ed\u30c3\u30af\u306e\u6570\u304ci\u500b\n    ans += M * pow(M-1, N-(i+1), MOD) % MOD * COM(N-1, i)\nprint(ans % MOD)\n","n,m,k = map(int,input().split())\nmod = 998244353\ndef comb(n,k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return fac[n]*finv[k]%mod*finv[n-k]%mod\nfac = [0]*(n+1)\nfinv = [0]*(n+1)\nfac[0] = finv[0] = 1\nfor i in range(1,n+1):\n    fac[i] = fac[i-1]*i%mod\n    finv[i] = pow(fac[i],mod-2,mod)\n\nans = 0\nfor i in range(k+1):\n    ans = (ans + m*comb(n-1,i)%mod*pow(m-1,n-1-i,mod)%mod)%mod\nprint(ans)","\nN, M, K = map(int, input().split())\n\nans = 0\n\nfor i in range(K+1):\n    ans += M ** (i+1) * (M-1) ** (N-i-1)\n    ans %= MOD\n\nprint(ans)","n, m, k = map(int, input().split())\n\nmod = 998244353\n\nfac = [1, 1]\nfinv = [1, 1]\ninv = [0, 1]\nfor i in range(2, n):\n    fac.append(fac[-1] * i % mod)\n    inv.append(-inv[mod%i] * (mod \/\/ i) % mod)\n    finv.append(finv[-1] * inv[-1] % mod)\n\nans = 0\nfor i in range(n-k-1, n):\n    res = m\n    e = m - 1\n    while i > 0:\n        if i & 1:\n            res = res * e % mod\n        e = e * e % mod\n        i >>= 1\n    com = fac[n-1] * finv[i] * finv[n-i-1] % mod\n    res = res * com % mod\n    ans = (ans + res) % mod\n\nprint(ans)","import math\nN, M, K = map(int, input().split())\nans = 0\nfor k in range(K+1):\n    n = N - k\n    a = M * (M-1)**(n-1)\n    b = n**k \/\/ math.factorial(k)\n    ans += a * b\n    ans %= 998244353\nprint(ans)\n","\nmod = 998244353\n\nclass COM:\n    def __init__(self, n, MOD):\n        self.n = n\n        self.MOD = MOD\n        self.fac = [0] * (n+1)\n        self.finv = [0] * (n+1)\n        self.inv = [0] * (n+1)\n        self.fac[0] = self.fac[1] = 1\n        self.finv[0] = self.finv[1] = 1\n        self.inv[1] = 1\n        for i in range(2, n+1):\n            self.fac[i] = self.fac[i-1] * i % MOD\n            self.inv[i] = MOD - self.inv[MOD % i] * (MOD \/\/ i) % MOD\n            self.finv[i] = self.finv[i-1] * self.inv[i] % MOD\n\n    def calc(self, k):\n        if k < 0:\n            return 0\n        return self.fac[self.n] * (self.finv[k] * self.finv[self.n-k] % self.MOD) % self.MOD\n\ndef main():\n    N, M, K = map(int,input().split())\n\n    # \u96a3\u308a\u5408\u3046\u7d44\u304cK\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u7dcf\u5f53\u305f\u308a\u3057\u3066\u89e3\u304f\n    cmb = COM(N-1, mod)\n    res = 0\n    for i in range(K+1):\n        res += M * cmb.calc(i) % mod * pow(M-1, N-i-1, mod)\n\n    print(res % mod) \n\n\nif __name__ == \"__main__\":\n    main()\n","import sys\nimport os\n\ndef file_input():\n    f = open('ABC167\/input.txt', 'r')\n    sys.stdin = f\n\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1]\n\ndef init_cmb(N,p):\n    for i in range(2, N + 1):\n        fact.append((fact[-1] * i) % p)\n        inv.append((-inv[p % i] * (p \/\/ i)) % p)\n        factinv.append((factinv[-1] * inv[-1]) % p)\n\ndef cmb(n, r, p):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % p\n\ndef main():\n    #file_input()\n    N,M,K=map(int, input().split())\n\n    mod=998244353\n    ans=0\n\n    init_cmb(N,mod)\n    for k in range(K+1):\n        ans+=M*cmb(N-1,k,mod)*pow(M-1,N-1-k,mod)\n\n    print(ans%mod)\n\nif __name__ == '__main__':\n    main()\n","mod = 998244353\nN, M, K = map(int, input().split())\n\nlist_size = 2*10**5 + 4\n\nf_list = [1] * list_size\nf_r_list = [1] * list_size\n \nfor i in range(list_size-1):\n\tf_list[i+1] = (f_list[i] * (i+1)) % mod\n \nf_r_list[-1] = pow(f_list[-1], mod - 2, mod)\n \nfor i in range(list_size-2, -1, -1):\n\tf_r_list[i] = (f_r_list[i+1] * (i+1)) % mod\n \ndef comb(n, r, mod):\n\tif n < r or r < 0:\n\t\treturn 0\n\telif n == 0 or r == 0 or n == r:\n\t\treturn 1\n\telse:\n\t\treturn (f_list[n] * f_r_list[n-r] * f_r_list[r]) % mod\n\nans = 0\nfor k in range(K+1):\n    if N-2*k < 0:\n        continue\n    ans += (comb(N-k, k, mod) * M *pow(M-1, N-k-1, mod))%mod\nans %= mod\nprint(ans)","#import numpy as np\nimport math\n#from decimal import *\n#from numba import njit\n#@njit\ndef main():\n    (N, M, K) = map(int, input().split())\n    MOD = 998244353\n    \n    fact = [1]*(N+1)\n    factinv = [1]*(N+1)\n    for i in range(1,K+1):\n        fact[i] = fact[i-1]*i % MOD\n        factinv[i] = pow(fact[i], MOD-2, MOD)\n    def comb(n, k):\n        return fact[n] * factinv[k] * factinv[n-k] % MOD\n\n    ans = 0\n    for k in range(K+1):\n        ans += (comb(N-1,k)*M*pow(M-1, N-k-1, MOD))%MOD\n\n    print(ans%MOD)\n\nmain()\n","# ABC167e\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**6)\n    # \u518d\u5e30\u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u9650\u308aPypy\u3067\u51fa\u3059\u3053\u3068\n\n    def dump(*args):\n        sys.stderr.write(str(args))\n    n, m, k = map(int, input().split())\n    # dp[i][j][k]=i\u756a\u76ee\u307e\u3067\u306e\u30d6\u30ed\u30c3\u30af\u3092\u8003\u3048\u308b\u3068\u304d\u3001\n\n    MOD = 998244353\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[1][0] = m\n    for i in range(n):\n        for j in range(k+1):\n            dp[i + 1][j] += dp[i][j] * (m - 1) % MOD\n            if j < k:\n                dp[i + 1][j + 1] += dp[i][j] % MOD\n    print(sum(dp[n]) % MOD)\n\n\nif __name__ == '__main__':\n    main()\n","# coding: utf-8\nimport sys\nsys.setrecursionlimit(1000000)\nN,M,K=map(int,input().split())\nMOD=998244353\n\nMAX_N=N+10\n\n#a**n mod p \u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\ndef modPow(a,n,p):\n    if n==0:\n        return 1\n    if n == 1:\n        #n=1\u306a\u3089a\u3092\u8fd4\u3059\n        return a % p\n\n    elif n % 2 == 1:\n        #n\u304c\u5947\u6570\u306a\u3089\u3070 a * modPow(a,n-1(\u5076\u6570),p)\u3092\u8fd4\u3059\n        return a * modPow(a,n-1,p) % p\n\n    else:\n        #n\u304c\u5076\u6570\u306a\u3089 modPow(a,n\/\/2,p) * modPow(a,n\/\/2,p)\u3068\u3059\u308b\u3068\u901f\u3044\n        t = modPow(a,n\/\/2,p)\n        return t * t % p\n\nfac=[None for i in range(MAX_N)]\nfinv=[None for i in range(MAX_N)]\ninv=[None for i in range(MAX_N)]\n\ndef COMinit(num):\n    global fac\n    global finv\n    global inv\n    fac[0]=1\n    fac[1]=1\n    finv[0]=1\n    finv[1]=1\n    inv[1]=1\n\n    for i in range(2,num):\n        fac[i] = fac[i-1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i-1] * inv[i] % MOD\n\ndef COM(n,k):\n    if n<k:\n        return 0\n    elif n<0 or k<0:\n        return 0\n    else:\n        return int(fac[n] * (finv[k] * finv[n - k] % MOD) % MOD)\n\n\nCOMinit(MAX_N)\n\nans=0\n\nfor i in range(K+1):\n    v=COM(N-1,N-1-K+i)%MOD\n    v*=M\n    v=v%MOD\n    v*=modPow(M-1,N-1-K+i,MOD)\n    v=v%MOD\n    ans+=v\n    ans=ans%MOD\nprint(ans)","n,m,k=map(int, input().split())\n\nmod=998244353\n\ndef modinv(a, mod):\n    return pow(a, mod-2, mod)\n\ndef mod_comb_count(n, r, mod):\n    r = min(r, n-r)\n    res = 1\n    for i in range(r):\n        res = res * (n - i) * modinv(i+1, mod) % mod\n    return res\n\nans=0\n\nfor i in range(k+1):\n    ans += mod_comb_count(n-1, i, mod) * m * ((m-1)**(n-1-i)) %mod\nprint(ans%mod)\n","N, M, K = map(int, input().split())\nmod = 998244353\nans = 0\nnCi = [1]\n\nfor i in range(1, N+1):\n    nCi.append(nCi[i-1]*(N-i) * pow(i, mod-2, mod))\n\n\nfor i in range(min(N, K)+1):\n    ans += (M%mod) * pow(M - 1, N-1-i, mod) * nCi[i]\n    ans %= mod\n\nprint(ans)\n","#!\/usr\/bin\/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, M, K = map(int, readline().split())\nMOD = 998244353\n# Combination under a prime modulo: nCk % p\ndef combmod(n, k, p):\n    if k > n:\n        return 0\n    if k > n - k:\n        k = n - k\n    num, den = 1, 1\n    for i in range(k):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    # By Fermat's little theorem,\n    # a^(p-1) \u2261 1 mod p\n    # i.e. a^(p-2) \u2261 a^(-1) mod p\n    inv_dev = pow(den, p - 2, p)\n    return num * inv_dev % p\n\n\ndef solve():\n    ans = 0\n    for i in range(K + 1):\n        ans += combmod(N - 1, i, MOD) * M * pow(M - 1, N - 1 - i, MOD)\n        ans %= MOD\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(solve())\n","n,m,K=map(int,input().split())\nmod=998244353\n\nU=2*10**5\nmod=998244353\n\nfact=[1]*(U+1)\nfact_inv=[1]*(U+1)\n\nfor i in range(1,U+1):\n    fact[i]=(fact[i-1]*i)%mod\nfact_inv[U]=pow(fact[U],mod-2,mod)\n\nfor i in range(U,0,-1):\n\tfact_inv[i-1]=(fact_inv[i]*i)%mod\n\ndef comb(n,k):\n    if k<0 or k>n:\n        return 0\n    x=fact[n]\n    x*=fact_inv[k]\n    x%=mod\n    x*=fact_inv[n-k]\n    x%=mod\n    return x\n\nans=0\nfor k in range(K+1):\n    ans=(ans+comb(n-1,k)*m*pow(m-1,n-k-1,mod)%mod)%mod\nprint(ans)","#E\u554f\u984c\nN, M, K = map(int, input().split())\nMOD = 998244353\n\nP = MOD\nY = max(N, M)\ninv_t = [0]+[1]\nfor i in range(2, Y):\n  inv_t += [inv_t[P % i] * (P - int(P \/ i)) % P]\n#print(inv_t)\n          \nif K == N - 1:\n  ans = 1\n  for i in range(N):\n    ans = ans * M % MOD\n  print(ans % MOD)\n  quit()\n  \nif M == 1:\n  print(\"1\")\n  quit()\n  \n# M * ((M - 1) ** (N - L - 1)) * combination(N-1, L)\u306eL\u30920\u304b\u3089K\u307e\u3067\u8db3\u3057\u305f\u7dcf\u548c\u304c\u7b54\u3048\nB = [1] * N\nans1 = 1\nfor i in range(1, N):\n  ans1 = (ans1 * (M - 1)) % MOD\n  B[i] = (ans1 * M) % MOD\n  \nans = 0\nans2 = 1\n#X = 1\nfor i in range(K + 1):\n  if i == 0:\n    X = 1\n  else:\n    X = (X * (N - i) * inv_t[i]) % MOD\n  ans2 = X * B[N - 1 - i] % MOD \n  ans += ans2\n  ans = ans % MOD\n      \nprint(ans)\n\n","n, m, k = map(int, input().split())\n\nMOD = 998244353\nfact = [1] * (n+1) # \u968e\u4e57\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfactinv = [1] * (n+1) # \u968e\u4e57\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfor i in range(n):\n    fact[i+1] = fact[i] * (i+1) % MOD # \u968e\u4e57\u3092\u8a08\u7b97\n    factinv[i+1] = pow(fact[i+1], MOD-2, MOD)# MOD\u3092\u6cd5\u3068\u3057\u305f\u9006\u5143\uff08\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\uff09\n\ndef nCk(n,k): # \u7d44\u307f\u5408\u308f\u305b(MOD)\u3092\u8fd4\u5374\u3059\u308b\n    return fact[n] * factinv[n-k] * factinv[k] % MOD\n\nans = 0\nfor i in range(k+1):\n    ans += m * pow(m-1, n-1-i, MOD) * nCk(n-1, i) % MOD\n\nprint(ans % MOD)\n","M = 998244353\nn,m,K = map(int,input().split())\nans = 0\nc = 1\nfor k in range(K+1):\n    ans += c * m * pow(m-1,n-k-1,M)\n    c *= (n-k+1) * pow(k+1,M-2,M)\n    ans %= M\n    c %= M\nprint(ans)\n    \n","N,M,K = map(int, input().split())\n\np = 998244353\n\nfactorial = [1]\ncounter = 0\nfor i in range(1,N+1):\n    factorial.append(factorial[i-1]*i%p)\n\n\n\nfor k in range(K+1):\n    counter += factorial[N-1]*pow(factorial[k],p-2,p)*pow(factorial[N-k-1],p-2,p)*M*pow(M-1,N-1-k,p)\nprint(counter%p)\n","import itertools\nimport numpy as np\nfrom scipy.special import comb\n\nmod = 998244353\n\nN,M,K = map(int, input().split())\n\n# DP = [[0]*N for _ in range(N)]\n# DP[0][0] = M\n\n# DP = []\n\n\n# for n in range(1,N):\n# \tfor k in range(N):\n# \t\tif k==0:\n# \t\t\tDP[n][k] = DP[n-1][k]*(M-1) % mod\n# \t\telse:\n# \t\t\tDP[n][k] = (DP[n-1][k]*(M-1) + DP[n][k-1]) % mod\n\n# ans = sum(DP[N-1][:(K+1)]) % mod\n# print(ans)\n\nans = 0\nfor k in range(1,K+1):\n\tans += comb(N, k-1)*(M-1)**(N-k) % mod\n\nprint(int(ans*M) % mod)","from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nmod = 998244353\nclass Combination:\n    \"\"\"\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=998244353):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i % self.mod)\n            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)\n        return fac, facinv\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        modinv = [0] * (n+1)\n        modinv[1] = 1\n        for i in range(2, n+1):\n            modinv[i] = self.mod - self.mod\/\/i * modinv[self.mod%i] % self.mod\n        return modinv\n\nn,m,k = inpl()\nconb = Combination(300010)\nres = 0\nfor i in range(k+1):\n    x = n - i - 1\n    res += conb(n-1,x) * m * pow(m-1,x,mod)\n    res %= mod\nprint(res)","import numpy as np\nn,m,k=map(int,input().split())\nMOD=998244353\ndp = np.zeros(n,dtype='float32')\ndp[0]=m\nfor i in range(2,n+1):\n    bdp=dp\n    dp+=bdp*(m-1)\n    dp[1:]+=bdp[:1]\n    dp%=MOD\nprint(sum(dp[:k+1]))","import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, acos, atan, asin, log, log10, gcd\nfrom itertools import permutations, combinations, product, accumulate, combinations_with_replacement\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\n#from fractions import gcd\ndef debug(*args):\n    if debugmode:\n        print(*args)\ndef input(): return sys.stdin.readline().strip()\ndef STR(): return input()\ndef INT(): return int(input())\ndef FLOAT(): return float(input())\ndef MAP(): return map(int, input().split())\ndef S_MAP(): return map(str, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef S_LIST(): return list(map(str, input().split()))\ndef lcm(a, b): return a * b \/\/ gcd(a, b)\nsys.setrecursionlimit(10 ** 9)\ninf = sys.maxsize\nmod = 998244353\ndx = [0, 1, 0, -1, 1, -1, -1, 1]\ndy = [1, 0, -1, 0, 1, -1, 1, -1]\ndebugmode = True\n\n#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\ndef cmb(n, r):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % mod\n\nN = 3 * (10 ** 5)  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\nfact = [1, 1]  # fact[n] = (n! mod p)\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\n\nfor i in range(2, N + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\nn, m, k = MAP()\n\npascal = [[1, 0]]\nfor i in range(n - k):\n    pascal.append([1])\n    for j in range(i):\n        pascal[i + 1].append(pascal[i][j] + pascal[i][j + 1])\n    pascal[i + 1].append(1)\n    pascal[i + 1].append(0)\n    #debug(i + 1, pascal[i + 1])\n\nans = m * pow(m - 1, n - 1, mod)\nans %= mod\nfor i in range(1, k + 1):\n    tmp = sum(pascal[n - i][1:i + 1])\n    #debug(i, tmp, m * pow(m - 1, n - i - 1, mod) * tmp)\n    ans += m * pow(m - 1, n - i - 1, mod) * tmp\n    ans %= mod\nprint(ans)\n#debug(479519525)","N, M, K = map(int, input().split())\ndp = [0]*(K+1)\nP = 998244353\ndp[0] = pow(M-1, N-1, P) * M % P\n\ninv_t = [0]*(2*10**5+1)\ninv_t[1] = 1\nfor i in range(2,2*10**5+1):\n  inv_t[i] = inv_t[P % i] * (P - int(P \/ i)) % P\n\nif M == 1 and K == N-1:\n    print(1)\nelse:\n    for i in range(1, K+1):\n        temp = dp[i-1]*(N-i)\n        temp %= P\n        temp *= inv_t[i]\n        temp %= P\n        temp *= inv_t[M-1]\n        temp %= P\n        dp[i] = temp\n\n    ans = 0\n    for i in range(K+1):\n        ans += dp[i]\n        ans %= P\n\n    print(ans)\n","n,m,k=map(int,input().split())\nfact,factinv,mod=[1]*n,[1]*n,998244353\nfor i in range(2,n):\n  fact[i]=fact[i-1]*i%mod\nfactinv[n-1]=pow(fact[n-1],mod-2,mod)\nfor i in range(n-2,0,-1):\n  factinv[i]=factinv[i+1]*(i+1)%mod\nncr=lambda n,r:fact[n]*factinv[r]%mod*factinv[n-r]%mod\nans=pow(m,n,mod)\nfor i in range(k+1,n):\n  ans+=mod-m*pow(m-1,n-i-1,mod)*ncr(n-1,i)%mod\nprint(ans%mod)","import sys\nimport math\nfrom decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nfrom collections import deque\nfrom bisect import bisect_left\nfrom itertools import product\ndef I(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI2(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\ndef LSI(): return list(map(int, list(sys.stdin.readline().rstrip())))\n\ndef LSI2(N): return [list(map(int, list(sys.stdin.readline().rstrip()))) for i in range(N)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\ndef LS2(N): return [sys.stdin.readline().split() for i in range(N)]\ndef FILL(i,h): return [i for j in range(h)]\ndef FILL2(i,h,w): return [FILL(i,w) for j in range(h)]\ndef FILL3(i,h,w,d): return [FILL2(i,w,d) for j in range(h)]\ndef FILL4(i,h,w,d,d2): return [FILL3(i,w,d,d2) for j in range(h)]\ndef sisha(num,digit): return Decimal(str(num)).quantize(Decimal(digit),rounding=ROUND_HALF_UP)\n#'0.01'\u3084'1E1''\u306a\u3069\u3067\u6307\u5b9a\u3001\u6574\u6570\u306b\u623b\u3059\u306a\u3089int\u3092\u304b\u307e\u3059\nMOD = 998244353\nINF = float(\"inf\")\nsys.setrecursionlimit(10**6+10)\ninput = sys.stdin.readline\n\n\n\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = MOD #\u51fa\u529b\u306e\u5236\u9650\nN = 5*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\n\nN,M,K = MI()\nans = 0\nfor i in range(0,K+1):\n    ans += (cmb(N-1,i,mod)*M*pow(M-1,N-1-i,mod))%mod\nprint(ans%mod)\n","from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    n, m, k = map(int, input().split())\n    dp = [0 for _ in range(k + 1)]\n\n    dp[0] = m\n\n    for i in range(1, n):\n        tmp_dp = dp\n        for j in range(k + 1):\n            tmp_dp[j] = (m - 1) * dp[j]\n            if j > 0:\n                tmp_dp[j] += dp[j - 1]\n            tmp_dp[j] %= 998244353\n        dp = tmp_dp\n\n    ans = 0\n    for i in range(k + 1):\n        ans += dp[i]\n    print(ans % 998244353)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n","N,M,K=map(int,input().split())\nMOD=998244353\n\n#\u9006\u5143\u3092\u5b9a\u7fa9\u3059\u308b\ndef inv(a):\n  return pow(a,MOD-2,MOD)\n\n#\u300cn!\u300d\u306e\u5270\u4f59\u3092\u6c42\u3081\u308b\nfact=[0,1]\nfor i in range(2,N+1):\n  fact.append((fact[-1]*i)%MOD)\n\n#nCr(MOD)\u3092\u6c42\u3081\u308b\ndef choose(n,r):\n  if r==0 or r==n:\n    return 1\n  else:\n    return fact[n]*inv(fact[r])*inv(fact[n-r])%MOD\n\n#(M-1)**n(MOD)\u3092\u6c42\u3081\u308b\nexp=[1]\nfor i in range(1,N):\n  exp.append((exp[-1]*(M-1))%MOD)  \n  \n\n#\u7b54\u3048\u3092\u8a08\u7b97\u3059\u308b\nans=0\nfor i in range(K+1):\n  ans+=(M*choose(N-1,i)*exp[N-1-i]%MOD)  \n  ans%=MOD\nprint(ans)  ","MOD = 998244353\nn, m, k = map(int, input().split())\n\nfact = [0]*(n+1)\nfact[0] = 1\nfor i in range(1, n+1):\n    fact[i] = fact[i-1]*i % MOD\n\ninvfact = [0]*(n+1)\nfor i in range(n+1):\n    invfact[i] = pow(fact[i], MOD-2, MOD)\n\n\ndef nCk(n, k):\n    return fact[n]*invfact[k]*invfact[n-k]\n\n\nans = 0\nfor i in range(k+1):\n    ans += m*pow(m-1, n-1-i, MOD)*nCk(n-1, i)\n    ans %= MOD\nprint(ans)\n","n,m,k = map(int,input().split())\n\nimport math\ndef comb(n,r):\n    return math.factorial(n) \/\/ (math.factorial(n-r) * math.factorial(r))\n\n\n\nans = 0\n\nfor i in range(k+1):\n    ans += m * ((m-1) ** (n-1-i) ) * comb(n-1 ,i)\n    \nprint(ans %  998244353)\n","n,m,k=map(int,input().split())\na=[0]*(k+1)\na[0]=1\nfor i in range(1,k+1):\n    a[i]=(a[i-1]*(n-i))\/\/(i)\ne=[0]*(k+1)\nmod=998244353\ne[0]=pow(m-1,n-1-k,mod)\nfor i in range(1,k+1):\n    e[i]=((e[i-1])%mod*((m-1)%mod))%mod\nans=0\nfor i in range(k+1):\n    ans+=((e[-1-i])*(a[i]%mod))%mod\n    ans%=mod\nm=m%mod\nprint((ans*m)%mod)","from functools import reduce\n\ndef cin():  return list(map(int,input().split()))\nN, M, K = cin()\nMOD = 998244353\n\nfac = [1] * (N + 1)\ninv = [1] * (N + 1)\n\nfor j in range(1, N + 1):  fac[j] = fac[j - 1] * j % MOD\n\ninv[N] = pow(fac[N], MOD - 2, MOD)\nfor j in range(N - 1, -1, -1):  inv[j] = inv[j + 1] * (j + 1) % MOD\n    \ndef cmb(n, r):\n    if r > n or n < 0 or r < 0:  return 0\n    return fac[n] * inv[n - r] * inv[r] % MOD\n\nans = 0\nfor i in range(K + 1):\n    ans += M * cmb(N - 1, i) * pow(M - 1, N - 1 - i, MOD)\n    ans %= MOD\nprint(ans)","def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\nN = 2*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m,k = map(int,input().split())\n\nif k==n-1:\n  print(m%mod)\n  exit()\n\nans = 0\na= m*pow(m-1,n-1-k-1,mod)\n\nfor i in range(k,-1,-1):\n  a =a*(m-1)%mod\n  \n  ans += a*cmb(n-1,i,mod)\n  ans %= mod\n  \nprint(ans)","# coding: utf-8\n\n\ndef solve(*args: str) -> str:\n    n, m, k = map(int, args[0].split())\n    mod = 998244353\n\n    P = [1]*(k+1)\n    p = pow(m-1, n-2-k, mod)\n    for i in range(k+1):\n        p = p*(m-1) % mod\n        P[-1-i] = p\n\n    ret = m*P[0] % mod\n    ncr = 1\n    for i in range(1, k+1):\n        ncr = ncr*(n-i)\/\/i\n        ret += m*P[i]*ncr % mod\n\n    return str(ret % mod)\n\n\nif __name__ == \"__main__\":\n    print(solve(*(open(0).read().splitlines())))\n","import sys\nsys.setrecursionlimit(2147483647)\nINF = 1 << 60\nMOD = 998244353\ninput = lambda:sys.stdin.readline().rstrip()\n\nclass modfact(object):\n    def __init__(self, n):\n        fact, invfact = [1] * (n + 1), [1] * (n + 1)\n        for i in range(1, n + 1): fact[i] = i * fact[i - 1] % MOD\n        invfact[n] = pow(fact[n], MOD - 2, MOD)\n        for i in range(n - 1, -1, -1): invfact[i] = invfact[i + 1] * (i + 1) % MOD\n        self._fact, self._invfact = fact, invfact\n\n    def inv(self, n):\n        return self._fact[n - 1] * self._invfact[n] % MOD\n\n    def fact(self, n):\n        return self._fact[n]\n\n    def invfact(self, n):\n        return self._invfact[n]\n\n    def comb(self, n, k):\n        if k < 0 or n < k: return 0\n        return self._fact[n] * self._invfact[k] % MOD * self._invfact[n - k] % MOD\n\n    def perm(self, n, k):\n        if k < 0 or n < k: return 0\n        return self._fact[n] * self._invfact[n - k] % MOD\n\ndef resolve():\n    n, m, k = map(int, input().split())\n    mf = modfact(n)\n    res = 0\n    for i in range(k + 1):\n        res += m * pow(m - 1, n - i - 1, MOD) % MOD * mf.comb(n - 1, i)\n        res %= MOD\n    print(res)\nresolve()","n, m, k = map(int, input().split())\nmod = 998244353\n\nkai = [1]*(n+1)\ninv = [1]*(n+1)\nfor i in range(n):\n    kai[i+1] = (kai[i] * (i+1))%mod\n    inv[i+1] = (inv[i] * pow(i+1,mod-2,mod))%mod\n\ncount_all = 0\npre_pow = pow(m-1,n-1,mod)\ninv_m_mai1 = pow(m-1,mod-2,mod)\nfor i in range(k+1):\n    pattern_color = m*pre_pow%mod\n    pattern_place = kai[n-1]*inv[n-1-i]*inv[i]%mod\n    count_all = (count_all+pattern_color*pattern_place)%mod\n    pre_pow = pre_pow * inv_m_mai1 %mod\n\nprint(count_all)","n, m, k = map(int, input().split())\n\nmod = 998244353\n\ndef power(x, y):\n    if   y == 0     : return 1\n    elif y == 1     : return x % mod\n    elif y % 2 == 0 : return power(x, y \/\/ 2) ** 2 % mod\n    else            : return power(x, y \/\/ 2) ** 2 * x % mod\n\nfactorial = [1]\nfor i in range(1, n):\n    factorial.append(factorial[i - 1] * i % mod)\n\ninverseFactorial = [0] * n\ninverseFactorial[n - 1] = power(factorial[n - 1], mod - 2)\nfor i in range(n - 2, -1, -1):\n    inverseFactorial[i] = inverseFactorial[i + 1] * (i + 1) % mod\n\ndef comb(x, y):\n    return factorial[x] * inverseFactorial[y] * inverseFactorial[x - y] % mod\n\n\n\ntmp = [m]\n\nfor i in range(n):\n    t = tmp[-1] * (m - 1) % mod\n    tmp.append(t)\n\n\nans = 0\n\nfor kk in range(k + 1):\n    c = comb(n - 1, kk)\n    c *= tmp[n - kk - 1]\n    ans += c\n    ans %= mod\n\nprint(ans)\n","#dp\u3067\u3067\u304d\u306a\u3044\u304b\u306a\uff1f\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\n#mod = 10**9 + 7\n\nmod=998244353\n\n\nn,m,k=MI()\nbeki=[0 for i in range(n)]\nbeki[0]=m%mod\nfor i in range(n-1):\n    beki[i+1]=(beki[i]*(m-1))%mod\n    \ndef cmod(n, r, p):\n    x,y  = 1, 1\n    for i in range(r):\n        x = x * (n - i) % p\n        y = y * (r - i) % p\n    return (x * pow(y, p - 2, p)) % p\nans=0\n\nfor i in range(k+1):\n    j=n-i-1\n    ans+=(beki[j]*cmod(n-1,i,mod))%mod\n    #print(beki[j]*cmod(n-1,i,mod))\nprint(ans%mod)","n, m, k = map(int, input().split())\n\nMOD = 998244353\n\ndef inv(x, MOD):\n    return pow(x, MOD - 2, MOD)\n\nc = [0 for _ in range(n)]\nc[0] = 1\nfor i in range(1, n):\n    c[i] = c[i - 1] * (n - i)\n    c[i] *= inv(i, MOD)\n    c[i] %= MOD\nans = sum([m * c[i] * pow(m - 1, n - 1 - i, MOD) for i in range(k + 1)]) % MOD\nprint(ans)","from scipy.special import comb\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\nNcom = 0\nfor k in range(K+1):\n  n = M * comb(N-1, k, exact=True) * (M-1)**(N-k-1)\n  Ncom += n % mod\nprint(Ncom % mod)","n,m,k=[int(x) for x in input().split()]\n#TODO Mutiply wih m\nsumi=0\nmod=998244353\nprodi=pow(m-1,n-1,mod)\ninvi=pow(m-1,mod-2,mod)\nfor j in range(n-1,n-1-k-1,-1):\n  sumi+=prodi\n  sumi%=mod\n  prodi*=j\n  prodi%=mod\n  prodi*=pow(n-j,mod-2,mod)\n  prodi%=mod\n  prodi*=invi\n  prodi%=mod \nsumi*=m\nsumi%=mod\nprint(sumi)\n  ","import sys\nreadline = sys.stdin.readline\nMOD = 998244353\n\ndef comb(n, r, mod=MOD):\n    r = min(n - r, r)\n    res = 1\n    fac = 1\n    for i in range(r):\n        res *= n - i\n        res %= mod\n        fac *= i + 1\n        fac %= mod\n    return res * pow(fac, mod-2, mod) % mod\n\ndef main():\n    N, M, K = map(int, readline().rstrip().split())\n    res = 0\n    for k in range(K+1):\n        n = N - k\n        res += comb(N-1, k, MOD) * pow(M-1, n-1, MOD) * M\n        res %= MOD\n    \n    print(res)\n\n\nif __name__ == '__main__':\n    main()","def main():\n\n    N, M, K = map(int, input().split())\n    mod = 998244353\n\n    g1 = [1, 1]\n    g2 = [1, 1]\n    inv = [0, 1]\n\n    for i in range(2, N+1):\n        g1.append((g1[-1] * i) % mod)\n        inv.append( ( -inv[mod % i] * (mod\/\/i)) % mod )\n        g2.append((g2[-1] * inv[-1]) % mod)\n\n    def combi(n, r):\n      r = min(r, n-r)\n      return g1[n]*g2[r]*g2[n-r]%mod\n\n    v = 1\n    base = [1, M]\n    for i in range(N):\n        base.append(base[-1] * (M-1) % mod)\n\n    # print(base)\n\n    ans = 0\n    for j in range(K+1):\n        v = base[N-j]\n        u = combi(N-1, j)\n        ans += (v * u) % mod\n        ans %= mod\n    return ans\n\n\nif __name__ == '__main__':\n    print(main())\n","# E - Colorful Blocks\nimport sys\nsys.setrecursionlimit(10**7)\n\nMOD = 998244353\nN,M,K = map(int,input().split())\ninv_M = pow(M-1,-1,MOD)\nans = 0\ntmp = pow(M-1,N-1,MOD)\ncomb = 1\nfor i in range(K+1):\n    ans = (ans+M*comb*tmp)%MOD\n    if i==K:\n        break\n    tmp = (tmp*inv_M)%MOD\n    comb = (comb*(N-1-i)*pow(i+1,-1,MOD))%MOD\nprint(ans)","def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\nN = 2*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m,k = map(int,input().split())\n\nans = 0\na= m*pow(m-1,n-1-k-1,mod)\n\nfor i in range(k,-1,-1):\n  a =a*(m-1)%mod\n  \n  ans += a*cmb(n-1,i,mod)\n  ans %= mod\n  \nprint(ans)","N,M,K = map(int,input().split())\nmod = 998244353\n\nif M == 1 and K == N-1:\n    print(1)\n    exit()\n\nA = [0]*(K+1)\nA[0] = (M*pow(M-1,N-1,mod)) % mod\n\nfor i in range(K):\n    A[i+1] = (A[i]*(N-1-i)*pow(M-1,mod-2,mod)*pow(i+1,mod-2,mod)) % mod\n\nans = A[0]\nfor i in range(K):\n    ans = (ans + A[i+1]) % mod\n\nprint(ans)","\ndef power_func(a,b,p):\n    if b==0: return 1\n    if b%2==0:\n        d=power_func(a,b\/\/2,p)\n        return d*d %p\n    if b%2==1:\n        return (a*power_func(a,b-1,p ))%p\n\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\n\nn,m,k = map(int,input().split())\n\nfor i in range( 2, n + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\ns = 0\n\nfor x in range(k+1):\n    s += (m * power_func(m-1,n-1-x,998244353) * cmb(n-1,x,998244353)) % 998244353\n    s %= 998244353\nprint(s)","import itertools\nimport numpy as np\nfrom scipy.special import comb\n\nmod = 998244353\n\nN,M,K = map(int, input().split())\n\n# DP = [[0]*N for _ in range(N)]\n# DP[0][0] = M\n\n# DP = []\n\n\n# for n in range(1,N):\n# \tfor k in range(N):\n# \t\tif k==0:\n# \t\t\tDP[n][k] = DP[n-1][k]*(M-1) % mod\n# \t\telse:\n# \t\t\tDP[n][k] = (DP[n-1][k]*(M-1) + DP[n][k-1]) % mod\n\n# ans = sum(DP[N-1][:(K+1)]) % mod\n# print(ans)\n\nans = 0\nfor k in range(K+1):\n\tans += comb(N-1, k)*(M-1)**(N-k-1) % mod\n\nprint(int(ans*M) % mod)","n,m,k=map(int,input().split())\nfactorials=[]\ncurrent=1\nfor i in range(n):\n  factorials.append(current)\n  current=((i+1)*current)%998244353\ninverselist=[]\nfor i in range(n):\n  inverselist.append(pow(factorials[i],998244351,998244353))\nans=0\nfor i in range(0,k+1):\n  ans=(ans+m*pow(m-1,n-i-1,998244353)*factorials[n-1]*inverselist[i]*inverselist[n-1-i])%998244353\nprint(ans)","N,M,K = map(int,input().split())\nmod = 998244353\nn = 200050\nfrac = [1]*(n+1)\nfinv = [1]*(n+1)\nfor i in range(n):\n    frac[i+1] = (i+1)*frac[i]%mod\nfinv[-1] = pow(frac[-1],mod-2,mod)\nfor i in range(1,n+1):\n    finv[n-i] = finv[n-i+1]*(n-i+1)%mod\ndef nCr(n,r):\n    if n<0 or r<0 or n<r: return 0\n    r = min(r,n-r)\n    return frac[n]*finv[n-r]*finv[r]%mod\n\n\n# M* n-1Ck*1^k*(M-1)^(N-1-k)\nans = 0\nfor i in range(K+1):\n    tmp=(M*nCr(N-1,i))%mod\n    tmp*=pow(M-1,N-1-i,mod)\n    ans += tmp%mod\nprint(ans%mod)","from collections import deque\n\ndef main():\n    N,M,K=map(int,input().split())\n    MOD=998244353\n    E=0\n\n    n_=1\n    for i in range(1,N):\n        n_=(n_*i)%MOD\n\n    nr_ = 1\n    nr_array=deque([])\n    for i in range(1,N-1):\n        nr_ = (nr_ * i) % MOD\n        nr_array.append(nr_)\n\n    r_=1\n    for i in range(0,K+1):\n        if i!=0 and i!=N-1:\n            r_ = (r_ * i) % MOD\n            nr_=nr_array.pop()\n            power_r=pow(r_,MOD-2,MOD)\n            power_nr=pow(nr_,MOD-2,MOD)\n        Mk=pow(M-1,N-1-i,MOD)\n\n        if i!=0 and i!=N-1:\n            E+=(n_*power_r*power_nr*Mk)%MOD\n        else:\n            E+=Mk%MOD\n\n    res=(M*E)%MOD\n    print(res)\n\nif __name__==\"__main__\":\n    main()\n\n","class Combination:\n    \"\"\"\n    O(n)\u306e\u524d\u8a08\u7b97\u30921\u56de\u884c\u3046\u3053\u3068\u3067\uff0cO(1)\u3067nCr mod m\u3092\u6c42\u3081\u3089\u308c\u308b\n    n_max = 10**6\u306e\u3068\u304d\u524d\u51e6\u7406\u306f\u7d04950ms (PyPy\u306a\u3089\u7d04340ms, 10**7\u3067\u7d041800ms)\n    \u4f7f\u7528\u4f8b\uff1a\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=998244353):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i % self.mod)\n            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)\n        return fac, facinv\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        modinv = [0] * (n+1)\n        modinv[1] = 1\n        for i in range(2, n+1):\n            modinv[i] = self.mod - self.mod\/\/i * modinv[self.mod%i] % self.mod\n        return modinv\n\ndef power_func(a,n,p):\n  bi=str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n  res=1\n  for i in range(len(bi)):\n    res=(res*res) %p\n    if bi[i]==\"1\":\n      res=(res*a) %p\n  return res\n\n\nn,m,k = map(int, input().split())\nMOD = 998244353\nans = 0\ncomb = Combination(n)\nfor i in range(k + 1):\n    tmp = m*power_func(m - 1, n - i - 1,MOD)%MOD\n    tmp *= comb(n - 1,i)\n    ans += tmp%MOD\nprint(ans%MOD)","# E - Colorful Blocks\n\nMOD = 998244353\nN, M, K = map(int, input().split())\n\n# \u4e88\u3081\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f\nf = [1]\nfor i in range(N):\n    f.append(f[i]*(i+1)%MOD)\n\n# \u7d44\u307f\u5408\u308f\u305b\u95a2\u6570\ndef comb_mod(n, r, p):\n    return f[n] * pow(f[r], p-2, p) * pow(f[n-r], p-2, p)\n\nans = 0\nfor i in range(K+1):\n    ans = (ans + (M*pow(M-1, N-1-i,MOD)) * comb_mod(N-1, i, MOD))%MOD\n\nprint(ans)\n","from functools import reduce\n\nn, m, k = map(int,input().split())\nmodi = 998244353\n\n\ndef ncr(a, b):\n    if b == 0:\n        return 1\n    else:\n        num = reduce(lambda x, y: x * y % modi, range(a, a-b, -1))\n        den = reduce(lambda x, y: x * y % modi, range(1, b+1))\n        return num * pow(den, modi - 2, modi) % modi\n\n\nres = 0\nfor i in range(k + 1):\n    res += m % modi * pow(m - 1, n - i - 1, modi) * ncr(n - 1, i)\n    res %= modi\nprint(res)\n","from collections import deque\nfrom heapq import heapify,heappop,heappush,heappushpop\nfrom copy import copy,deepcopy\nfrom itertools import product,permutations,combinations,combinations_with_replacement\nfrom collections import defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom math import gcd,ceil,floor,factorial\n# from fractions import gcd\nfrom functools import reduce\nfrom pprint import pprint\n\nINF = float(\"inf\")\n\ndef myinput():\n    return map(int,input().split())\n\ndef mylistinput(n):\n    return [ list(myinput()) for _ in range(n) ]\n\ndef mycol(data,col):\n    return [ row[col] for row in data ]\n\ndef mysort(data,col,reverse_flag):\n    data.sort(key=lambda x:x[col],reverse=reverse_flag)\n    return data\n\ndef mymax(data):\n    M = -1*float(\"inf\")\n    for i in range(len(data)):\n        m = max(data[i])\n        M = max(M,m)\n    return M\n\ndef mymin(data):\n    m = float(\"inf\")\n    for i in range(len(data)):\n        M = min(data[i])\n        m = min(m,M)\n    return m\n\ndef mycount(ls,x):\n    # ls\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\n    l = bisect_left(ls,x)\n    r = bisect_right(ls,x)\n    return (r-l)\n\ndef myoutput(ls,space=True):\n    if space:\n        if len(ls)==0:\n            print(\" \")\n        elif type(ls[0])==str:\n            print(\" \".join(ls))\n        elif type(ls[0])==int:\n            print(\" \".join(map(str,ls)))\n        else:\n            print(\"Output Error\")\n    else:\n        if len(ls)==0:\n            print(\"\")\n        elif type(ls[0])==str:\n            print(\"\".join(ls))\n        elif type(ls[0])==int:\n            print(\"\".join(map(str,ls)))\n        else:\n            print(\"Output Error\")\n\ndef comb_mod_faster(n,k,mod):\n    if n<k:\n        return 0\n    if n<0 or k<0:\n        return 0\n    k = min(n-k,k)\n    ans = 1\n    inv = [1]*(k+1)\n    if k>=1:\n        ans *= (n-k+1)%mod\n    for i in range(2,k+1):\n        inv[i] = mod - inv[mod%i]*(mod\/\/i)%mod\n        ans = ans*(n-k+i)*inv[i]%mod\n    return ans\n\ndef power_func(a,n,p):\n    bi = str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n    res = 1\n    for i in range(len(bi)):\n        res = (res*res) % p\n        if bi[i]==\"1\":\n            res = (res*a) % p\n    return res\n\nn,m,k = myinput()\n\nmod = 998244353\n\n# ans = 100*(99**99) % mod\n# print(ans)\n\n# ls = [0]*(k+1)\n# for i in range(k+1):\n#     ls[i] = comb_mod_faster(n,i,mod)\n# print(ls)\n\n# ans = 0\n# for i in range(k+1):\n#     t = ls[i]\n#     ans += ( (m-1)**(n-t) ) * (m**t)\n#     ans %= mod \n# print(ans%mod)\n\nans = 0\nfor i in range(k+1):\n    t = comb_mod_faster(n-1,i,mod)\n    # print(i,t)\n    ans1 = power_func(m-1,n-1-i,mod)\n    # print(ans1)\n    # ans2 = power_func(1,i,mod)\n    # print(ans2)\n    ans += ( m * t * ans1 ) % mod\n    # print(ans)\nprint(ans%mod)","def combi(y,x,p=998244353):\n  s=fac[y]\n  t=fac[x]\n  u=fac[y-x]\n  ans= (s* pow(t,p-2,p)*pow(u,p-2,p))%p\n  return ans\n\n###############################\n\nN,M,K=map(int,input().split())\np=998244353\nfac=[1,1]\nfor i in range(2,N+1):\n  fac.append( (fac[-1]*i)%p )\nR = M*(M-1)**(N-K-2)\n\nans=0\nfor i in range(K,-1,-1):\n  R = (R*(M-1))%p\n  L = combi(N,i)\n  ans = (ans + (R*L)%p)%p\nprint(ans)","import sys\nsys.setrecursionlimit(10**9)\nn, m, k = map(int, input().split())\ncolor = [i for i in range(m)]\nans = 0\ndef dfs(i, daburi, num):\n    global ans\n    if i == n-1:\n        if daburi == k:\n            ans += num % 998244353\n            return \n        elif daburi < k:\n            ans += num % 998244353\n            return\n    if daburi > k:\n        return\n    dfs(i+1, daburi, num*(m-1)% 998244353)\n    dfs(i+1, daburi+1, num% 998244353)\ndfs(0, 0, m)\nprint(ans% 998244353)","MOD = 998244353\nn, m, k = map(int, input().split())\n\nfact = [0]*(n+1)\nfact[0] = 1\nfor i in range(1, n+1):\n    fact[i] = fact[i-1]*i % MOD\n\ninvfact = [0]*(n+1)\ninvfact[n] = pow(fact[n], MOD-2, MOD)\nfor i in reversed(range(n)):\n    invfact[i] = invfact[i+1]*(i+1) % MOD\n\n\ndef nCk(n, k):\n    return fact[n]*invfact[k]*invfact[n-k]\n\n\nans = 0\nfor i in range(k+1):\n    ans += m*pow(m-1, n-1-i, MOD)*nCk(n-1, i)\n    ans %= MOD\nprint(ans)","P = 998244353\n\n\nnn = 200200\n\nfa = [1] * (nn+1)\nfainv = [1] * (nn+1)\nfor i in range(nn):\n    fa[i+1] = fa[i] * (i+1) % P\nfainv[-1] = pow(fa[-1], P-2, P)\nfor i in range(nn)[::-1]:\n    fainv[i] = fainv[i+1] * (i+1) % P\n\n\ndef comb(a, b):\n    return fa[a] * fainv[b] % P * fainv[a-b] % P if 0 <= b <= a else 0\n\n\nN, M, K = map(int, input().split())\n\nif M == 1:\n    if N - K > 1:\n        print(1)\n    else:\n        print(0)\n    exit(0)\n\n\nt = pow(M-1, N-1, P)\nm = pow(M-1, P-2, P)\nans = 0\nfor k in range(K+1):\n    ans = (ans + t * comb(N-1, k)) % P\n    t = t * m % P\nprint(ans * M % P)\n","N,M,K = map(int,input().split())\np = 998244353\nsum_color = 0\nfor k in range(K+1):\n  num1 = pow(N-1,k,p)\n  num2 = M%p\n  num3 = pow(M-1,N-1-k,p)\n  sum_color += (num1*num2*num3)%p\n  sum_color %= p\n  \nprint(sum_color%p)\n  \n","from operator import mul\nfrom functools import reduce\nfrom fractions import gcd\nimport math\nimport bisect\nimport itertools\nimport sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nINF = float(\"inf\")\n\nMOD = 998244353\nclass Combination(object):\n\tdef __init__(self, N, MOD):\n\t\tself.fac = [0] * (N + 1)\n\t\tself.inv = [0] * (N + 1)\n\t\tself.finv = [0] * (N + 1)\n\t\tself.fac[0], self.fac[1] = 1, 1\n\t\tself.inv[1] = 1\n\t\tself.finv[0], self.finv[1] = 1, 1\n \n\t\t# \u524d\u8a08\u7b97\n\t\tfor i in range(2, N + 1):\n\t\t\tself.fac[i] = self.fac[i - 1] * i % MOD\n\t\t\tself.inv[i] = self.inv[MOD % i] * (MOD - (MOD \/\/ i)) % MOD\n\t\t\tself.finv[i] = self.finv[i - 1] * self.inv[i] % MOD\n \n\tdef com(self, N, k):\n\t\treturn (self.fac[N] * self.finv[k] * self.finv[N - k]) % MOD\n\n\ndef main():\n    N, M, K = map(int, input().split())\n\n    if N == 1:\n        print(1)\n        return\n\n    Com = Combination(N-1, MOD)\n    ans = 0\n    for k in reversed(range(K+1)):\n        ans += M * pow(M-1, N-k-1, MOD) * Com.com(N-1, k)\n        ans %= MOD\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","n,m,k = map(int,input().split())\n\ndef cmb(n, r, mod):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u306e\u9ad8\u901f\u8a08\u7b97\u3000\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\nmod = 998244353 #\u51fa\u529b\u306e\u5236\u9650\nN = n #N\u306e\u6700\u5927\u5024\ng1 = [0]*(N+1) #\u5143\u30c6\u30fc\u30d6\u30eb(p(n,r))\ng1[0] = g1[1] = 1\ng2 = [0]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ng2[0] = g2[1] = 1\ninverse = [0]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\ninverse[0],inverse[1] = 0,1\nfor i in range(2,N+1):\n    g1[i] = (g1[i-1] * i) % mod\n    inverse[i] = (-inverse[mod % i] * (mod\/\/i)) % mod\n    g2[i] = (g2[i-1] * inverse[i]) % mod\n\n# i\u7d44\u3000-> m * (n-1)Ci * (m-1)^(n-1-i)\nans = 0\nfor i in range(k+1):\n    ans += m * cmb(n-1,i,mod) * pow(m-1,n-1-i,mod)\n    ans %= mod\nprint(ans)","import sys\ninput=sys.stdin.readline\nn,m,k=map(int,input().split())\nINF=998244353\ndef modinv(a,m):\n    b=m\n    (x,lastx)=(0,1)\n    (y,lasty)=(1,0)\n    while not b==0:\n        q=a\/\/b\n        (a,b)=(b,a%b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return lastx%m\nans=0\nfor i in range(k+1):\n    if i==0:\n        c=1\n        temp=(m*pow(m-1,n-1))%INF\n    else:\n        x=modinv(i,INF)\n        c=(c*x*(n-i))%INF\n        temp=(temp*modinv(m-1,INF))%INF\n    ans=(ans+c*temp)%INF\nprint(ans)\n\n\n\n","import sys, bisect, math, itertools, heapq, collections\nfrom operator import itemgetter\n# a.sort(key=itemgetter(i)) # i\u756a\u76ee\u8981\u7d20\u3067sort\nfrom functools import lru_cache\n# @lru_cache(maxsize=None)\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9 + 7\neps = 10**-7\n\n\ndef inp():\n    '''\n    \u4e00\u3064\u306e\u6574\u6570\n    '''\n    return int(input())\n\n\ndef inpl():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\n    '''\n    return list(map(int, input().split()))\n\n\nclass combination():\n    def __init__(self, mod):\n        '''\n        mod\u3092\u6307\u5b9a\u3057\u3066\u521d\u671f\u5316\n        '''\n        self.mod = mod\n        self.fac = [1, 1]  # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\n        self.ifac = [1, 1]  # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n        self.inv = [0, 1]  # \u9006\u5143\u8a08\u7b97\u7528\n\n    def calc(self, n, k):\n        '''\n        nCk%mod\u3092\u8a08\u7b97\u3059\u308b\n        '''\n        if k < 0 or n < k:\n            return 0\n        self.make_tables(n)  # \u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\n        k = min(k, n - k)\n        return self.fac[n] * (self.ifac[k] * self.ifac[n - k] %\n                              self.mod) % self.mod\n\n    def make_tables(self, n):\n        '''\n        \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\n        '''\n        for i in range(len(self.fac), n + 1):\n            self.fac.append((self.fac[-1] * i) % self.mod)\n            self.inv.append(\n                (-self.inv[self.mod % i] * (self.mod \/\/ i)) % self.mod)\n            self.ifac.append((self.ifac[-1] * self.inv[-1]) % self.mod)\n\n\nmod = 998244353\ncomb = combination(mod)\nn, m, k = inpl()\nif m == 1:\n    if k < n - 1:\n        print(0)\n        exit()\n    else:\n        print(0)\n        exit()\nans = 0\nfor i in range(min(n, k + 1)):\n    ans += m * pow(m - 1, n - 1 - i, mod) * comb.calc(n - 1, i) % mod\n    ans %= mod\nprint(ans)\n","def main():\n    from sys import stdin\n    MOD = 998244353\n    n,m,k = map(int,stdin.readline().rstrip().split())\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    dp[1][0] = m\n    for i in range(1,n):\n        dp[i+1][0] = dp[i][0]*(m-1)%MOD\n\n    for i in range(n):\n        for j in range(k):\n            dp[i+1][j+1] = (dp[i][j+1]*(m-1) + dp[i][j]*m)%MOD\n    \n    print(dp[n][k])\nmain()","N,M,K=map(int,input().split())\nmod= 998244353\n\nFACT=[1]\nfor i in range(1,2*10**5+1):\n    FACT.append(FACT[-1]*i%mod)\n\nFACT_INV=[pow(FACT[-1],mod-2,mod)]\nfor i in range(2*10**5,0,-1):\n    FACT_INV.append(FACT_INV[-1]*i%mod)\n\nFACT_INV.reverse()\n\ndef Combi(a,b):\n    if 0<=b<=a:\n        return FACT[a]*FACT_INV[b]*FACT_INV[a-b]%mod\n    else:\n        return 0\n\nANS=0\nfor i in range(K+1):\n    ANS+=Combi(N-1,i)*pow(M-1,N-1-i,mod)\n    ANS%=mod\nprint(ANS*M%mod)\n","# from math import factorial\nfrom sys import exit\nn,m,k = map(int, input().split())\nif m == 1:\n    if k == n-1:\n        print(1)\n    else:\n        print(0)\n    exit()\nMOD = 998244353\n\nans = tmp = (m * (m-1) ** (n-1)) % MOD\n\nfor i in range(k):\n    tmp *= (n-1-i)\n    tmp %= MOD\n    tmp *= pow((m-1) * (i+1), -1, MOD)\n    ans += tmp\n    ans %= MOD\n\nprint(ans)","M=998244353\nclass Factorial:\n    def __init__(self,n):\n        self.f=f=[0]*(n+1)\n        f[0]=b=1\n        for i in range(1,n+1):f[i]=b=b*i%M\n        self.inv=inv=[0]*(n+1)\n        inv[n]=b=pow(self.f[n],-1,M)\n        for i in range(n,0,-1):inv[i-1]=b=b*i%M\n    def factorial(self,i):\n        return self.f[i]\n    def ifactorial(self,i):\n        return self.inv[i]\n    def comb(self,n,k):\n        if n>=k:return self.f[n]*self.inv[n-k]*self.inv[k]%M\n        else:return 0\ncomb=Factorial(10**5*5).comb\nn,m,k=map(int,input().split())\nprint(sum(m*comb(n-1,i)*pow(m-1,~i+n,M)for i in range(k+1))%M)","N,M,K = map(int,input().split())\n\np = 998244353\n# \u4f55\u500b\u3092\u540c\u3058\u8272\u306e\u7d44\u306b\u3059\u308b\u304b0~K\ncnt = 0\ncom = 1\nfor k in range(K+1):\n    l = N-k\n    # N-1\u500b\u306e\u7d44\u306e\u3046\u3061\u3069\u308c\u3092\u540c\u3058\u8272\u306b\u3059\u308b\u304bN-1Ck\n    # \u305d\u308c\u305e\u308c\u3067\u3001N-k\u500b\u3092\u5225\u306e\u8272\u306e\u9806\u5217\u306b\u3059\u308b\n    # M*(M-1)**(N-k-1)\n    x = pow((M-1),(l-1),p)\n    cnt += M * x * com\n    cnt %= p\n\n    # \u6b21\u306ek\u306enCk\n    com *= N-(k+1)\n    com *= pow(k+1,p-2,p)\n    com %= p\n\n\nprint(cnt)\n","n,m,k=map(int,input().split())\nmod=998244353\nans=0\ndef mfact(n,mod):\n    f=[1]\n    for i in range(1,n+1):\n        f.append(f[-1]*i%mod)\n    return f\nf=mfact(n-1,mod)\nfor i in range(k+1):\n    ans+=(m*pow(m-1,n-i-1,mod)*f[n-1]*pow(f[n-1-i],mod-2,mod)*pow(f[i],mod-2,mod))%mod\nprint(ans%mod)","import sys\nsys.setrecursionlimit(100000)\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\nm = [1, M]\nk = M\nfor _ in range(1, N+1):\n  k = k*(M-1)%mod\n  m.append(k)\nans = []\n\n\ndef solve(now, pairs, colors):\n  if now == N:\n    ans.append(m[colors])\n    return 0\n  elif pairs == K:\n    colors += N - now\n    ans.append(m[colors])\n    return 0\n  else:\n    solve(now+1, pairs+1, colors)\n    solve(now+1, pairs, colors+1)\n\n\nsolve(1, 0, 1)\n\n\n#print(ans)\na = 0\nfor _ in range(len(ans)):\n  a += ans[_]\n  a %= mod\nprint(a)","import numpy as np\n\n\nclass mod_calc():\n    def __init__(self, divisor, max_n):\n        # assume prime\n        self._divisor = divisor\n        # nsq = math.ceil(math.sqrt(max_n))\n        # feature fix_n? max_k?\n        fact = np.empty((max_n+1,), dtype=int)\n        fact[1] = fact[0] = f = 1\n        for i in range(2, len(fact)):\n            f = (f * i) % divisor\n            fact[i] = f\n        self._fact = fact\n        fact_inv = np.empty((max_n+1,), dtype=int)\n        fact_inv[max_n] = fi = pow(int(fact[max_n]), divisor-2, divisor)\n        for i in range(max_n, 2, -1):\n            fi = (fi * i) % divisor\n            fact_inv[i-1] = fi\n        fact_inv[1] = fact_inv[0] = 1\n        self._fact_inv = fact_inv\n\n    def comb(self, n, k):\n        k = min(k, n-k)\n        if k == 0 or k == n:\n            return 1\n        return self.mul(self._fact[n], self._fact_inv[n-k], self._fact_inv[k])\n\n    def pow(self, a, n):\n        return pow(a, n, self._divisor)\n\n    def mul(self, *a):\n        # TODO montogomery\n        # https:\/\/ikatakos.com\/pot\/programming_algorithm\/number_theory\/montgomery_multiplication\n        r = a[0]\n        for m in a[1:]:\n            r = (r * m) % self._divisor\n        return r\n\n    def sum(self, *a):\n        r = a[0]\n        for m in a[1:]:\n            r = (r + m) % self._divisor\n        return r\n\n\ndef main():\n    N, M, K = [int(x) for x in input().split()]\n    if M == 1:\n        return 1\n    if N == 1:\n        return M\n    c = mod_calc(998244353, N-1)\n    count = 0\n    for k in range(K+1):\n        count = c.sum(c.mul(c.comb(N-1,k), M, c.pow(M-1, N-k-1)), count)\n    return count\n\n\nif __name__ == \"__main__\":\n    print(main())\n","n,m,k = map(int,input().split())\nmod = 998244353\ndef inv(x):\n  y = 1\n  while x != 1:\n    y *= mod \/\/ x + 1\n    y %= mod\n    x -= mod % x\n  return y\n#print(inv(2))\nnow = m\nfor _ in range(n-1):\n  now *= m-1\n  now %= mod\nans = int(now)\nfor i in range(k):\n  now *= inv(m-1)\n  now *= n-1-i\n  now *= inv(i+1)\n  now %= mod\n  #print(now)\n  ans += now\n  ans %= mod\nprint(ans)","# \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\nN, M, K = map(int, input().split())\n\nm = 998244353\n\nresult = 0\nn = 1\nk = 1\nfor i in range(K + 1):\n    # result += M * mcomb(N - 1, i) * pow(M - 1, N - 1 - i, 998244353)\n    result += n * pow(k, m - 2, m) * pow(M - 1, N - 1 - i, m)\n    result %= m\n    n *= N - 1 - i\n    n %= m\n    k *= i + 1\n    k %= m\nresult *= M\nresult %= m\nprint(result)\n","import sys\nstdin = sys.stdin\nsys.setrecursionlimit(10**6)\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnn = lambda: list(stdin.readline().split())\nns = lambda: stdin.readline().rstrip()\n\nn,m,k = na()\nmod = 998244353\n\n\nfact = [0] * 220000\ninvfact = [0] * 220000\n \nfact[0] = 1\nfor i in range(1, 220000):\n    fact[i] = fact[i-1] * i % mod\n \ninvfact[220000 - 1] = pow(fact[220000 - 1], mod-2, mod)\n \nfor i in range(220000 - 2, -1, -1):\n    invfact[i] = invfact[i+1] * (i+1) % mod\n \ndef nCk(n, k):\n    if k < 0 or n < k:return 0\n    return fact[n] * invfact[k] * invfact[n-k] % mod\n \nans = 0\n\nfor i in range(k+1):\n    ans += pow(m-1,n-i-1,mod)*nCk(n-1,i)\n\nprint(ans*m%mod)","def cmb(n, r, p):\n    return (fac[n] * pow(fac[r], p - 2, p) * pow(fac[n - r], p - 2, p)) % p\n\n\np = 998244353\nN, M, K = map(int, input().split())\nfac = [1] * (max(N, M) + 1)\nfor i in range(1, max(N, M) + 1):\n    fac[i] = (fac[i - 1] * i) % p\n\nans = 0\nfor k in range(K + 1):\n    ans += M * pow(M - 1, N - k - 1, p) * cmb(N - 1, k, p)\n    ans %= p\nprint(ans)\n","from sys import stdin\ninput = stdin.readline\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\n\nC = [-1] * (N + 1)\n\n\ndef comb(n, r):\n    if r > n - r:\n        C[r] = C[n - r]\n\n    if r == 0:\n        C[0] = 1\n\n    if C[r] != -1:\n        return C[r]\n    else:\n        C[r] = comb(n, r - 1) * (n + 1 - r) * pow(r, mod - 2, mod)\n        C[r] %= mod\n        return C[r]\n\n\nans = 0\n\nfor i in range(K + 1):\n    ans += M * pow(M - 1, N - 1 - i, mod) * comb(N - 1, i)\n    ans %= mod\n\nprint(ans)\n# print(C)\n"],"formatted_programs":["import sys\ninput = sys.stdin.readline\nN, M, K = map(int, input().split())\nmod = 998244353\nclass Factorial:\n  def __init__(self, n, mod):\n    self.f = [1]\n    for i in range(1, n + 1):\n      self.f.append(self.f[-1] * i % mod)\n    self.i = [pow(self.f[-1], mod - 2, mod)]\n    for i in range(1, n + 1)[: : -1]:\n      self.i.append(self.i[-1] * i % mod)\n    self.i.reverse()\n  def factorial(self, i):\n    return self.f[i]\n  def ifactorial(self, i):\n    return self.i[i]\n  def combi(self, n, k):\n    return self.f[n] * self.i[n - k] % mod * self.i[k] % mod\n\nf = Factorial(N + M, mod)\n\ndp = [0] * (N + 1)\ndp[1] = M\nfor i in range(1, N):\n  dp[i + 1] = dp[i] * (M - 1)\n  dp[i + 1] %= mod\n#print(dp)\nres = 0\nfor i in range(K + 1):\n  res += dp[N - i] * f.combi(N - 1, i) % mod\n  res %= mod\nprint(res)","N,M,K = map(int,input().split())\nQ = [[0 for i in range(K+1)] for j in range(N)]\nQ[0][0] = M\nfor i in range(1,N):\n  for j in range(K+1):\n    Q[i][j] = Q[i-1][j-1]+(M-1)*Q[i-1][j]\nprint(sum(Q[N])%998244353)","mod = 998244353\ndef comb(n, r):\n    if n < r:return 0\n    if n < 0 or r < 0:return 0\n    return fa[n] * fi[r] % mod * fi[n - r] % mod\nn, m, k = map(int, input().split())\nfa = [1] * (n + 1)\nfi = [1] * (n + 1)\nfor i in range(1, n + 1):\n    fa[i] = fa[i - 1] * i % mod\n    fi[i] = pow(fa[i], mod - 2, mod)\nans = 0\nfor i in range(k + 1):\n    ans += pow(m - 1, n - i - 1, mod) % mod * comb(n - 1, i) * m % mod\n    ans %= mod\nprint(ans)","#n=int(input())\nn,m,k=map(int,input().split())\n#a=list(map(int,input().split()))\n#l=[list(map(int,input().split())) for i in range(n)]\n\n\n\n#mod = 10**9+7 #\u5272\u308b\u6570\nmod=998244353 #\u5272\u308b\u6570\nN = 2*10**5 #n\u306e\u4e0a\u9650\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\na=0\nfor i in range(n-k,n+1):\n    a+=m*((m-1)**(i-1))*cmb(n-1,n-i,998244353) #comb(n-1,n-i)\nprint(a%998244353)\n","mod = 998244353\n\n\nN, M, K = map(int, input().split())\n\n\ninvs = {}\n\n\ndef inv(n):\n    if n not in invs:\n        invs[n] = pow(n, mod-2, mod)\n    return invs[n]\n\n\nans = 0\ncomb = 1\ncol = M*pow(M-1, N-1, mod)\nfor i in range(K+1):\n    now = col*comb\n    now %= mod\n    ans += now\n    ans %= mod\n    comb *= ((N-i-1)*inv(i+1))\n    comb %= mod\n    col *= inv(M-1)\n    col %= mod\n\nprint(ans)\n","N,M,K=map(int,input().split())\nP=998244353\nclass FactInv:\n    def __init__(self,N,P):\n        fact=[];ifact=[];fact=[0]*(N+1);ifact=[0]*(N+1);fact[1]=1\n        for i in range(1,N):\n            fact[i+1]=(fact[i]*(i+1))%P\n        ifact[-1]=pow(fact[-1],P-2,P)\n        for i in range(N,0,-1):\n            ifact[i-1]=(ifact[i]*i)%P\n        self.fact=fact;self.ifact=ifact;self.P=P\n    def Comb(self,n,k):\n        return (self.fact[n]*self.ifact[k]*self.ifact[n-k])%self.P\nFI=FactInv(N+10,P)\nans=0\nfor i in range(0,K+1):\n    ans+=(M*FI.Comb(N-1,i)*pow(M-1,N-1-i,P))%P\n    ans%=P\nprint(ans)","# -*- coding:utf-8 -*-\n\ndef solve():\n    import sys\n\n    MOD = 998244353\n    N, M, K = list(map(int, sys.stdin.readline().split()))\n\n    \"\"\"\n    x\u306e\u7d44\u3092\u4f5c\u308b\u3068\u3059\u308b\n    (1) \u30b0\u30eb\u30fc\u30d7\u6570: N-x\n    (2) \u30b0\u30eb\u30fc\u30d7\u306e\u8272\u306e\u5272\u308a\u5f53\u3066\u65b9\uff1aM(M-1)**(N-1)\n    (3) \u30b0\u30eb\u30fc\u30d7\u306e\u5206\u3051\u65b9\uff1a(N-1)C(x)\n    \"\"\"\n\n    bunsi_memo = {}\n    bunbo_memo = {}\n    pow_memo = {}\n    def combination_formula_MOD(n, r, MOD):\n        \"\"\"nCr\u3092 O(min(n-r, r)) \u3067\u9ad8\u901f\u306b\u8a08\u7b97\u3059\u308b\"\"\"\n        def _inv(x, MOD):\n            \"\"\"x\u306e\u9006\u5143\u3092\u8fd4\u3059\"\"\"\n            if not (x, MOD-2) in pow_memo:\n                pow_memo[(x, MOD-2)] = pow(x, MOD-2, MOD)\n            return pow_memo[(x, MOD-2)]\n\n        if n < r: return 0\n\n        r = min(n-r, r)\n        bunsi, bunbo = 1, 1\n        if not r in bunsi_memo:\n            for i in range(r):\n                bunsi = bunsi*(n-i)%MOD\n                bunbo = bunbo*(i+1)%MOD\n            bunsi_memo[r] = bunsi\n            bunbo_memo[r] = bunbo\n        bunsi, bunbo = bunsi_memo[r], bunbo_memo[r]\n        return (bunsi*_inv(bunbo, MOD))%MOD\n\n\n    ans = 0\n    col = M\n    for x in range(N-1, -1, -1):\n        if x <= K:\n            now = col%MOD\n            now = (now * combination_formula_MOD(N-1, x, MOD))%MOD\n            ans += now\n            ans %= MOD\n\n        col *= (M-1)\n        col %= MOD\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    solve()\n","import math\nN,M,K=map(int,input().split())\nmod=998244353\nans=0\nd=[1]+[1]\ne=[0]+[1]\nf=[0]+[1]\n\nfor i in range(2,N+1):\n  d += [d[i-1]*i%mod]\n  e += [ e[mod % i] * (mod - int(mod \/ i)) % mod]\n  f += [ f[i-1]*e[i]%mod]\ndef combinations_count(n, r):\n  if r==n or r==0:\n    return 1\n  return d[n] * f[n-r] * f[r]%mod\n\nfor i in range(K+1):\n  l=M*pow(M-1,N-1-i,mod)%mod\n  ans+=l*combinations_count(N-1,i)%mod\n  ans%=mod\nprint(ans)","n, m, k = map(int, input().split())\n\nmod = 998244353\nfact = [1] * (n + 1)\nifact = [1] * (n + 1)\n\nfor i in range(n):\n    fact[i + 1] = fact[i] * (i + 1) % mod\n    ifact[i + 1] = pow(fact[i + 1], mod - 2, mod)\n\n\ndef comb(x, y):\n    if y < 0 or y > x:\n        return 0\n    return (fact[x] * ifact[x - y] * ifact[y]) % mod\n\n\nmm = [1]\nfor _ in range(n + 1):\n    mm.append(mm[-1] * (m - 1) % mod)\n\nans = 0\nfor i in range(k + 1):\n    ans += m * comb(n - 1, i) * mm[n - 1 - i]\n    ans %= mod\n\nprint(ans)\n","def main():\n    def kaizyo(x):\n        ans = 1\n        for i in range(2, x+1):\n            ans *= i\n        return ans\n\n    n, m, k = map(int, input().split())\n    MAX = 998244353\n    ans = 0\n    kaizyos = [None]*n\n    ki = 1\n    kaizyos[0] = ki\n    for i in range(1, n):\n        ki *= i\n        ki %= MAX\n        kaizyos[i] = ki\n    def comb(a, b):\n        return kaizyos[a]\/\/(kaizyos[b]*kaizyos[a-b])\n    ruizyos = [None]*(k+1)\n    ruizyo = 1\n    for i in range(n-1-k):\n        ruizyo *= m-1\n        ruizyo %= MAX\n    ruizyos[0] = ruizyo\n    for i in range(n-k, n):\n        ruizyo *= m-1\n        ruizyo\n        ruizyos[i-n-k+1] = ruizyo\n    pattern = lambda x: (comb(n-1, x)*m*ruizyos[x])%MAX\n    for i in range(k+1):\n        ans += pattern(i)\n        ans %= MAX\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","def n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\n\nn,m,k=n1()\n\ndef cmb(n, k, mod, fac, ifac):\n    \"\"\"\n    nCk\u3092\u8a08\u7b97\u3059\u308b\n    \"\"\"\n    k = min(k, n-k)\n    return fac[n] * ifac[k] * ifac[n-k] % mod\n\n\ndef make_tables(mod, n):\n    \"\"\"\n    \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u3001\u9006\u5143\u306e\u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3059\u308b\n    \"\"\"\n    fac = [1, 1] # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(1)\n    ifac = [1, 1] #\u9006\u5143\u306e\u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(2)\n    inverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u30fb\u30fb\u30fb(3)\n\n    for i in range(2, n+1):\n        fac.append((fac[-1] * i) % mod)\n        inverse.append((-inverse[mod % i] * (mod\/\/i)) % mod)\n        ifac.append((ifac[-1] * inverse[-1]) % mod)\n    return fac, ifac\n\nans=0\na=1\nMOD=998244353\nfac, ifac = make_tables(MOD, n-1)\n        \nfor i in range(k+1):\n    ans+=m*pow(m-1,n-1-i,998244353)*cmb(n-1, i, MOD, fac, ifac)\nprint(ans%998244353)","class comb():\n  F = [1, 1]\n  Fi = [1, 1]\n  I = [0, 1]\n  def __init__(self, num, mod):\n    self.MOD = mod\n    for i in range(2, num + 1):\n      self.F.append((self.F[-1] * i) % mod)\n      self.I.append(mod - self.I[mod % i] * (mod \/\/ i) % mod)\n      self.Fi.append(self.Fi[-1] * self.I[i] % mod)\n  def com(self, n, k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return self.F[n] * (self.Fi[k] * self.Fi[n - k] % self.MOD) % self.MOD\n\n\nN, M, K = list(map(int, input().split()))\nMOD = 998244353\n\nans = 0\n\nP = [M] * (N)\n\nfor i in range(N - 1):\n  P[i + 1] = P[i] * (M - 1) % MOD\n\ncom = comb(N, MOD)\nfor i in range(K + 1):\n  t = P[-1 -i] * com.com(N - 1, i) % MOD\n  ans = (ans + t) % MOD\n\nprint(ans)","import sys\n\nsys.setrecursionlimit(10 ** 7)\nrl = sys.stdin.readline\n\n\nclass Combination:\n    def __init__(self, n: int, mod: int):\n        self.mod = mod\n        self.fact = [0] * (n + 1)\n        self.factinv = [0] * (n + 1)\n        self.inv = [0] * (n + 1)\n        \n        self.fact[0] = self.fact[1] = 1\n        self.factinv[0] = self.factinv[1] = 1\n        self.inv[1] = 1\n        for i in range(2, n + 1):\n            self.fact[i] = (self.fact[i - 1] * i) % mod\n            self.inv[i] = (-self.inv[mod % i] * (mod \/\/ i)) % mod\n            self.factinv[i] = (self.factinv[i - 1] * self.inv[i]) % mod\n    \n    def ncr(self, n: int, r: int):\n        if r < 0 or n < r:\n            return 0\n        r = min(r, n - r)\n        return self.fact[n] * self.factinv[r] % self.mod * self.factinv[n - r] % self.mod\n    \n    def nhr(self, n: int, r: int):\n        return self.ncr(n + r - 1, r)\n    \n    def npr(self, n: int, r: int):\n        if r < 0 or n < r:\n            return 0\n        return self.fact[n] * self.factinv[n - r] % self.mod\n\n\ndef solve():\n    N, M, K = map(int, rl().split())\n    MOD = 998244353\n    \n    com = Combination(N + 10, MOD)\n    \n    ans = 0\n    for x in range(K + 1):\n        ans = (ans + com.ncr(N - 1, x) * M * pow(M - 1, N - 1 - x, MOD)) % MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    solve()\n","#!\/usr\/bin\/env python3\n\nimport sys\nimport math\nfrom bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nsys.setrecursionlimit(2147483647)\nfrom heapq import heappush, heappop,heappushpop\nfrom collections import defaultdict\nfrom itertools import accumulate\nfrom collections import Counter\nfrom collections import deque\nfrom operator import itemgetter\nfrom itertools import permutations\nmod = 998244353\ninf = float('inf')\ndef I(): return int(sys.stdin.readline())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\n\ndef comb(n,r):\n    if r >= n:\n        return 1\n    return fact[n]*pow(fact[n-r], mod-2, mod)*pow(fact[r], mod-2, mod) % mod\n\nn,m,k = LI()\nans = 0\nfact = [1]*(max(n,m)+1)\nfor i in range(1,n):\n    fact[i] = i*fact[i-1]\n    fact[i] %= mod\n\nfor i in range(k+1):\n    ans += comb(n-1, i) * m * pow(m-1, n-i-1, mod)\n    ans %= mod\nprint(ans)","MOD = 998244353\n\n\nclass Combination:\n\n    def __init__(self, n, mod):\n        self.mod = mod\n        self.fact = [1] * (n+1)\n        self.ifact = [1] * (n+1)\n\n        for i in range(1, n+1):\n            self.fact[i] = i*self.fact[i-1] % mod\n            self.ifact[i] = pow(i, mod-2, mod) * self.ifact[i-1] % mod\n\n    def get(self, n: int, k: int):\n        if k < 0 or n < k:\n            return 0\n        return self.fact[n] * self.ifact[k] * self.ifact[n-k] % MOD\n\n    def __call__(self, n: int, k: int):\n        return self.get(n, k)\n\n\ndef main():\n    N, M, K = [int(x) for x in input().split()]\n    comb = Combination(N, MOD)\n    ans = 0\n    for i in range(0, K+1):\n        ans += M * pow(M-1, N-i-1, MOD) * comb(N-1, i)\n        ans %= MOD\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","n, m, k = map(int, input().split())\nmod = 998244353\n\nans = 0\ncomb = 1\nfor i in range(k+1):\n  ans += (((m*pow(m-1,n-i-1,mod))%mod)*comb)%mod\n  ans %= mod\n  comb = (comb*(n-1-i)*pow(i+1, mod-2, mod))%mod\n\nprint(ans)","def main():\n    n, m, k = map(int, input().split())\n    MOD = 998244353\n    ans = 0\n    c = 1\n\n    for i in range(k + 1):\n        ans += (((m * pow(m - 1, n - i - 1, MOD)) % MOD) * c) % MOD\n        ans %= MOD\n        c = (c * (n - 1 - i) * pow(i + 1, MOD - 2, MOD)) % MOD\n        \n        \n    print(ans % MOD)\n    \nif __name__ == '__main__':\n    main()","N, M, K = map(int, input().split())\nmod = 998244353\n\ndef comb(a, b):\n    global mod\n    l, r = 1, 1\n    for i in range(b):\n        l = l*(b-i)%mod\n        r = r*(a-i)%mod\n    return (r*pow(l, mod-2, mod))%mod\n\nans = 0\nfor i in range(K+1):\n    ans += comb(N-1, i)*M*pow((M-1), (N-1-i), mod)%mod\n\nprint(ans%mod)\n","\n\ndef diff_colors(x, m, modp):\n    \"\"\"\n    \u9577\u3055x\u306e\u5217\u3092m\u8272\u3067\u5857\u308b\n    \u3053\u306e\u3068\u304d\u3001\u9023\u7d9a\u3057\u3066\u540c\u3058\u8272\u3092\u4f7f\u308f\u306a\u3044\u30d1\u30bf\u30fc\u30f3\u6570\u3092\u6570\u3048\u308b\n    \"\"\"\n    ans = m\n    x -= 1\n    while x:\n        ans *= (m - 1)\n        ans %= modp\n        x -= 1\n    return ans\n\ndef factorial(x, modp):\n    fact = dict()\n    fact[0] = 1\n    curr = 1\n    while curr <= 2 * x:\n        fact[curr] = fact[curr - 1] * curr\n        fact[curr] %= modp\n        curr += 1\n    return fact\n\n\ndef pow(x, k, modp):\n    ans = 1\n    while k:\n        if k % 2:\n            ans *= x\n            ans %= modp\n        x *= x\n        x %= modp\n        k \/\/= 2\n    return ans\n\n\ndef combi(fact, n, k, modp):\n    ans = fact[n + k - 1]\n    ans *= pow(fact[k], modp - 2, modp)\n    ans %= modp\n    ans *= pow(fact[n - 1], modp - 2, modp)\n    ans %= modp\n    return ans\n\n\ndef submit():\n    n, m, k = map(int, input().split())\n    modp = 998244353\n    fact = factorial(n, modp)\n\n    ans = 0\n    base_pattern = diff_colors(n - k, m, modp)\n    for i in range(k + 1):\n        ans += base_pattern * combi(fact, n - (k - i), k - i, modp)\n        ans %= modp\n        base_pattern *= (m - 1)\n        base_pattern %= modp\n\n    print(ans)\n    \n\nif __name__ == \"__main__\":\n    submit()    ","def gcd(a, b):\n\t'''\u6700\u5927\u516c\u7d04\u6570'''\n\twhile b != 0:\n\t\ta, b = b, a % b\n\treturn a\n\ndef lcm(a, b):\n\t'''\u6700\u5c0f\u516c\u500d\u6570'''\n\treturn (a * b) \/\/ gcd(a, b)\n\ndef ex_gcd(a, b):\n\t'''\u62e1\u5f35\u30e6\u30fc\u30af\u30ea\u30c3\u30c9\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0'''\n\tx1, x2 = 0, 1\n\ty1, y2 = 1, 0\n\tq = 0\n\twhile b != 0:\n\t\tx1, x2 = x2, x1 - q * x2\n\t\ty1, y2 = y2, y1 - q * y2\n\t\tq = a \/\/ b\n\t\ta, b = b, a % b\n\treturn a, x2, y2\n\ndef gcd_n(a, *numbers):\n\t'''\u8907\u6570\u306e\u6570\u306e\u6700\u5927\u516c\u7d04\u6570'''\n\td = a\n\tfor b in numbers:\n\t\td = gcd(d, b)\n\treturn d\n\ndef lcm_n(a, *numbers):\n\t'''\u8907\u6570\u306e\u6570\u306e\u6700\u5c0f\u516c\u500d\u6570'''\n\tm = a\n\tfor b in numbers:\n\t\tm = lcm(m, b)\n\treturn m\n\ndef factorize(n):\n\t'''\u7d20\u56e0\u6570\u5206\u89e3'''\n\tfactor = 2\n\tfactors = []\n\twhile factor * factor <= n:\n\t\tif n % factor == 0:\n\t\t\tcount = 1\n\t\t\tn \/\/= factor\n\t\t\twhile n % factor == 0:\n\t\t\t\tn \/\/= factor\n\t\t\t\tcount += 1\n\t\t\tfactors.append((factor, count))\n\t\tfactor += 1\n\tif n != 1:\n\t\tfactors.append((n, 1))\n\treturn factors\n\ndef totient(n):\n\t'''\u30aa\u30a4\u30e9\u30fc\u306e\u30c8\u30fc\u30b7\u30a7\u30f3\u30c8\u95a2\u6570'''\n\tphi = 1\n\tfor prime, count in factorize(n):\n\t\tphi *= (prime - 1) * (prime ** (count - 1))\n\treturn phi\n\ndef carmichael(n):\n\t'''\u30ab\u30fc\u30de\u30a4\u30b1\u30eb\u95a2\u6570'''\n\tprime_carmichaels = [1]\n\tfor prime, count in factorize(n):\n\t\tif prime == 2:\n\t\t\tprime_carmichaels.append(count if count <= 2 else (2 ** (count - 2)))\n\t\telse:\n\t\t\tprime_carmichaels.append((prime - 1) * (prime ** (count - 1)))\n\treturn lcm_n(*prime_carmichaels)\n\n\nclass Modulo (object):\n\tdef __init__(self, mod):\n\t\tself.mod = mod\n\t\tself.carmichael = carmichael(mod)\n\t\n\tdef add(self, x, y):\n\t\treturn (x + y) % self.mod\n\t\n\tdef sub(self, x, y):\n\t\treturn (x - y) % self.mod\n\t\n\tdef mul(self, x, y):\n\t\treturn (x * y) % self.mod\n\t\n\tdef div(self, x, y):\n\t\treturn self.mul(x, self.inv(y))\n\t\n\tdef inv(self, x):\n\t\treturn self.pow(x, self.carmichael - 1)\n\t\n\tdef pow(self, x, count):\n\t\treturn pow(x, count, self.mod)\n\n\nfrom functools import reduce\n\n\nMOD = Modulo(998244353)\n\nN, M, K = map(int, input().split())\n\nF = [1] * N\nfor n in range(1, N):\n\tF[n] = MOD.mul(F[n-1], n)\n\nprint(\n\treduce(\n\t\tMOD.add,\n\t\t(\n\t\t\tMOD.mul(\n\t\t\t\tMOD.div(\n\t\t\t\t\tF[N-1],\n\t\t\t\t\tMOD.mul(F[k], F[(N-1)-k])\n\t\t\t\t),\n\t\t\t\tMOD.mul(\n\t\t\t\t\tM,\n\t\t\t\t\tMOD.pow(M-1, (N-k)-1)\n\t\t\t\t)\n\t\t\t)\n\t\t\tfor k in range(K+1)\n\t\t)\n\t)\n)\n","# E - Colorful Blocks\n\nn, m, k = map(int, input().split())\n\nmodulus = 998244353\n\n# n\u30d6\u30ed\u30c3\u30af m\u8272\u3067\u5857\u308b \u2192 m ** n \u901a\u308a\n# \u96a3\u308a\u5408\u3046\u30d6\u30ed\u30c3\u30af\u306e\u7d44 n - 1\u7d44\u306e\u3046\u3061 \u9ad8\u3005k\u7d44\u304c\u540c\u8272\n\n# n\u500b\u3070\u3089\u3070\u3089 == m * (m-1) ** (n-1)\n# k\u7d44\u540c\u8272 == n-k\u500b\u3070\u3089\u3070\u3089 * k\u500b\u3092n-k\u7d44\u306b\u5206\u3051\u308b(choose(n-1, n-k-1))\n\ndef inv(x):\n    return pow(x, modulus - 2, modulus)\n\nchoose = [1]  # choose(n-1, i)\nfor i in range(1, n):\n    choose.append(choose[-1] * (n-1-i+1) * inv(i) % modulus)\n\ndef solve(n, k):\n    x = m * pow(m-1, n-k-1, modulus)\n    return x * choose[n-k-1] % modulus\n\nprint(sum(solve(n, i) for i in range(k+1)) % modulus)\n","# coding: utf-8\nimport sys\nsys.setrecursionlimit(1000000)\nN,M,K=map(int,input().split())\nMOD=998244353\n\n\n#a**n mod p \u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\ndef modPow(a,n,p):\n    if n == 1:\n        #n=1\u306a\u3089a\u3092\u8fd4\u3059\n        return a % p\n\n    elif n % 2 == 1:\n        #n\u304c\u5947\u6570\u306a\u3089\u3070 a * modPow(a,n-1(\u5076\u6570),p)\u3092\u8fd4\u3059\n        return a * modPow(a,n-1,p) % p\n\n    else:\n        #n\u304c\u5076\u6570\u306a\u3089 modPow(a,n\/\/2,p) * modPow(a,n\/\/2,p)\u3068\u3059\u308b\u3068\u901f\u3044\n        t = modPow(a,n\/\/2,p)\n        return t * t % p\n\nfac=[None for i in range(N)]\nfinv=[None for i in range(N)]\ninv=[None for i in range(N)]\n\ndef COMinit(num):\n    global fac\n    global finv\n    global inv\n    fac[0]=1\n    fac[1]=1\n    finv[0]=1\n    finv[1]=1\n    inv[1]=1\n\n    for i in range(2,num):\n        fac[i] = fac[i-1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i-1] * inv[i] % MOD\n\ndef COM(n,k):\n    if n<k:\n        return 0\n    elif n<0 or k<0:\n        return 0\n    else:\n        return int(fac[n] * (finv[k] * finv[n - k] % MOD) % MOD)\n\n\nCOMinit(N)\n\nans=0\n\nfor i in range(K+1):\n    ans+=COM(N-1,N-1-K+i)*M*modPow(M-1,N-1-K+i,MOD)\n    ans=ans%MOD\nprint(ans)","import sys\ninput = sys.stdin.readline\n\nmod = 998244353\nn,m,k = map(int,input().split())\nMAX_N = 10**6\n\nfact = [1]\nfact_inv = [0]*(MAX_N+4)\nfor i in range(MAX_N+3):\n    fact.append(fact[-1]*(i+1)%mod)\n\nfact_inv[-1] = pow(fact[-1],mod-2,mod)\nfor i in range(MAX_N+2,-1,-1):\n    fact_inv[i] = fact_inv[i+1]*(i+1)%mod\n\n\ndef mod_comb_k(n,k,mod):\n    return fact[n] * fact_inv[k] % mod * fact_inv[n-k] %mod\n\n\n\n\nres = 0\n\ntmp = m*pow(m-1,n-k-1,mod)\n\nfor r in range(n-k-1,n):\n    res = (res + tmp*mod_comb_k(n-1,r,mod)%mod)%mod\n    tmp = tmp*(m-1)%mod\n\nprint(res)","# \u4e8c\u9805\u4fc2\u6570\u3092\"\u3084\u308b\u3060\u3051\"\u306b\u3057\u3066\u304f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom collections import Counter\nMAX = 1000005\nMOD = 998244353\nfactrial = [0]*MAX\ninverse = [0]*MAX\nfactrial_inverse = [0]*MAX\n\n\n# \u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u524d\u51e6\u7406\ndef COMinit():\n    global factrial, inverse, factrial_inverse\n    factrial[0] = 1\n    factrial[1] = 1\n    inverse[1] = 1\n    factrial_inverse[0] = 1\n    factrial_inverse[1] = 1\n    for i in range(2, MAX):\n        factrial[i] = factrial[i-1] * i % MOD\n        inverse[i] = MOD - inverse[MOD % i] * (MOD\/\/i) % MOD\n        factrial_inverse[i] = factrial_inverse[i-1] * inverse[i] % MOD\n\n\n# \u4e8c\u9805\u4fc2\u6570\u8a08\u7b97\ndef COM(n, k):\n    global factrial, inverse, factrial_inverse\n    if n < k:\n        return 0\n    if n < 0 or k < 0:\n        return 0\n    return factrial[n] * (factrial_inverse[k] * factrial_inverse[n-k] % MOD) % MOD\n\n\n# \u524d\u51e6\u7406\u5b8c\u4e86\nCOMinit()\n\nN, M, K = map(int, input().split())\nans = 0\n\nfor i in range(K+1):  # \u3064\u307e\u308a\u6ca1\u3068\u306a\u308b\u30d6\u30ed\u30c3\u30af\u306e\u6570\u304ci\u500b\n    ans += M * pow(M-1, N-(i+1), MOD) % MOD * COM(N-1, i)\nprint(ans % MOD)\n","n,m,k = map(int,input().split())\nmod = 998244353\ndef comb(n,k):\n    if n < k: return 0\n    if n < 0 or k < 0: return 0\n    return fac[n]*finv[k]%mod*finv[n-k]%mod\nfac = [0]*(n+1)\nfinv = [0]*(n+1)\nfac[0] = finv[0] = 1\nfor i in range(1,n+1):\n    fac[i] = fac[i-1]*i%mod\n    finv[i] = pow(fac[i],mod-2,mod)\n\nans = 0\nfor i in range(k+1):\n    ans = (ans + m*comb(n-1,i)%mod*pow(m-1,n-1-i,mod)%mod)%mod\nprint(ans)","\nN, M, K = map(int, input().split())\n\nans = 0\n\nfor i in range(K+1):\n    ans += M ** (i+1) * (M-1) ** (N-i-1)\n    ans %= MOD\n\nprint(ans)","n, m, k = map(int, input().split())\n\nmod = 998244353\n\nfac = [1, 1]\nfinv = [1, 1]\ninv = [0, 1]\nfor i in range(2, n):\n    fac.append(fac[-1] * i % mod)\n    inv.append(-inv[mod%i] * (mod \/\/ i) % mod)\n    finv.append(finv[-1] * inv[-1] % mod)\n\nans = 0\nfor i in range(n-k-1, n):\n    res = m\n    e = m - 1\n    while i > 0:\n        if i & 1:\n            res = res * e % mod\n        e = e * e % mod\n        i >>= 1\n    com = fac[n-1] * finv[i] * finv[n-i-1] % mod\n    res = res * com % mod\n    ans = (ans + res) % mod\n\nprint(ans)","import math\nN, M, K = map(int, input().split())\nans = 0\nfor k in range(K+1):\n    n = N - k\n    a = M * (M-1)**(n-1)\n    b = n**k \/\/ math.factorial(k)\n    ans += a * b\n    ans %= 998244353\nprint(ans)\n","\nmod = 998244353\n\nclass COM:\n    def __init__(self, n, MOD):\n        self.n = n\n        self.MOD = MOD\n        self.fac = [0] * (n+1)\n        self.finv = [0] * (n+1)\n        self.inv = [0] * (n+1)\n        self.fac[0] = self.fac[1] = 1\n        self.finv[0] = self.finv[1] = 1\n        self.inv[1] = 1\n        for i in range(2, n+1):\n            self.fac[i] = self.fac[i-1] * i % MOD\n            self.inv[i] = MOD - self.inv[MOD % i] * (MOD \/\/ i) % MOD\n            self.finv[i] = self.finv[i-1] * self.inv[i] % MOD\n\n    def calc(self, k):\n        if k < 0:\n            return 0\n        return self.fac[self.n] * (self.finv[k] * self.finv[self.n-k] % self.MOD) % self.MOD\n\ndef main():\n    N, M, K = map(int,input().split())\n\n    # \u96a3\u308a\u5408\u3046\u7d44\u304cK\u4ee5\u4e0b\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u7dcf\u5f53\u305f\u308a\u3057\u3066\u89e3\u304f\n    cmb = COM(N-1, mod)\n    res = 0\n    for i in range(K+1):\n        res += M * cmb.calc(i) % mod * pow(M-1, N-i-1, mod)\n\n    print(res % mod) \n\n\nif __name__ == \"__main__\":\n    main()\n","import sys\nimport os\n\ndef file_input():\n    f = open('ABC167\/input.txt', 'r')\n    sys.stdin = f\n\nfact = [1, 1]\nfactinv = [1, 1]\ninv = [0, 1]\n\ndef init_cmb(N,p):\n    for i in range(2, N + 1):\n        fact.append((fact[-1] * i) % p)\n        inv.append((-inv[p % i] * (p \/\/ i)) % p)\n        factinv.append((factinv[-1] * inv[-1]) % p)\n\ndef cmb(n, r, p):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % p\n\ndef main():\n    #file_input()\n    N,M,K=map(int, input().split())\n\n    mod=998244353\n    ans=0\n\n    init_cmb(N,mod)\n    for k in range(K+1):\n        ans+=M*cmb(N-1,k,mod)*pow(M-1,N-1-k,mod)\n\n    print(ans%mod)\n\nif __name__ == '__main__':\n    main()\n","mod = 998244353\nN, M, K = map(int, input().split())\n\nlist_size = 2*10**5 + 4\n\nf_list = [1] * list_size\nf_r_list = [1] * list_size\n \nfor i in range(list_size-1):\n\tf_list[i+1] = (f_list[i] * (i+1)) % mod\n \nf_r_list[-1] = pow(f_list[-1], mod - 2, mod)\n \nfor i in range(list_size-2, -1, -1):\n\tf_r_list[i] = (f_r_list[i+1] * (i+1)) % mod\n \ndef comb(n, r, mod):\n\tif n < r or r < 0:\n\t\treturn 0\n\telif n == 0 or r == 0 or n == r:\n\t\treturn 1\n\telse:\n\t\treturn (f_list[n] * f_r_list[n-r] * f_r_list[r]) % mod\n\nans = 0\nfor k in range(K+1):\n    if N-2*k < 0:\n        continue\n    ans += (comb(N-k, k, mod) * M *pow(M-1, N-k-1, mod))%mod\nans %= mod\nprint(ans)","#import numpy as np\nimport math\n#from decimal import *\n#from numba import njit\n#@njit\ndef main():\n    (N, M, K) = map(int, input().split())\n    MOD = 998244353\n    \n    fact = [1]*(N+1)\n    factinv = [1]*(N+1)\n    for i in range(1,K+1):\n        fact[i] = fact[i-1]*i % MOD\n        factinv[i] = pow(fact[i], MOD-2, MOD)\n    def comb(n, k):\n        return fact[n] * factinv[k] * factinv[n-k] % MOD\n\n    ans = 0\n    for k in range(K+1):\n        ans += (comb(N-1,k)*M*pow(M-1, N-k-1, MOD))%MOD\n\n    print(ans%MOD)\n\nmain()\n","# ABC167e\n\n\ndef main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**6)\n    # \u518d\u5e30\u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u9650\u308aPypy\u3067\u51fa\u3059\u3053\u3068\n\n    def dump(*args):\n        sys.stderr.write(str(args))\n    n, m, k = map(int, input().split())\n    # dp[i][j][k]=i\u756a\u76ee\u307e\u3067\u306e\u30d6\u30ed\u30c3\u30af\u3092\u8003\u3048\u308b\u3068\u304d\u3001\n\n    MOD = 998244353\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[1][0] = m\n    for i in range(n):\n        for j in range(k+1):\n            dp[i + 1][j] += dp[i][j] * (m - 1) % MOD\n            if j < k:\n                dp[i + 1][j + 1] += dp[i][j] % MOD\n    print(sum(dp[n]) % MOD)\n\n\nif __name__ == '__main__':\n    main()\n","# coding: utf-8\nimport sys\nsys.setrecursionlimit(1000000)\nN,M,K=map(int,input().split())\nMOD=998244353\n\nMAX_N=N+10\n\n#a**n mod p \u3092\u518d\u5e30\u7684\u306b\u6c42\u3081\u308b\ndef modPow(a,n,p):\n    if n==0:\n        return 1\n    if n == 1:\n        #n=1\u306a\u3089a\u3092\u8fd4\u3059\n        return a % p\n\n    elif n % 2 == 1:\n        #n\u304c\u5947\u6570\u306a\u3089\u3070 a * modPow(a,n-1(\u5076\u6570),p)\u3092\u8fd4\u3059\n        return a * modPow(a,n-1,p) % p\n\n    else:\n        #n\u304c\u5076\u6570\u306a\u3089 modPow(a,n\/\/2,p) * modPow(a,n\/\/2,p)\u3068\u3059\u308b\u3068\u901f\u3044\n        t = modPow(a,n\/\/2,p)\n        return t * t % p\n\nfac=[None for i in range(MAX_N)]\nfinv=[None for i in range(MAX_N)]\ninv=[None for i in range(MAX_N)]\n\ndef COMinit(num):\n    global fac\n    global finv\n    global inv\n    fac[0]=1\n    fac[1]=1\n    finv[0]=1\n    finv[1]=1\n    inv[1]=1\n\n    for i in range(2,num):\n        fac[i] = fac[i-1] * i % MOD\n        inv[i] = MOD - inv[MOD%i] * (MOD \/\/ i) % MOD\n        finv[i] = finv[i-1] * inv[i] % MOD\n\ndef COM(n,k):\n    if n<k:\n        return 0\n    elif n<0 or k<0:\n        return 0\n    else:\n        return int(fac[n] * (finv[k] * finv[n - k] % MOD) % MOD)\n\n\nCOMinit(MAX_N)\n\nans=0\n\nfor i in range(K+1):\n    v=COM(N-1,N-1-K+i)%MOD\n    v*=M\n    v=v%MOD\n    v*=modPow(M-1,N-1-K+i,MOD)\n    v=v%MOD\n    ans+=v\n    ans=ans%MOD\nprint(ans)","n,m,k=map(int, input().split())\n\nmod=998244353\n\ndef modinv(a, mod):\n    return pow(a, mod-2, mod)\n\ndef mod_comb_count(n, r, mod):\n    r = min(r, n-r)\n    res = 1\n    for i in range(r):\n        res = res * (n - i) * modinv(i+1, mod) % mod\n    return res\n\nans=0\n\nfor i in range(k+1):\n    ans += mod_comb_count(n-1, i, mod) * m * ((m-1)**(n-1-i)) %mod\nprint(ans%mod)\n","N, M, K = map(int, input().split())\nmod = 998244353\nans = 0\nnCi = [1]\n\nfor i in range(1, N+1):\n    nCi.append(nCi[i-1]*(N-i) * pow(i, mod-2, mod))\n\n\nfor i in range(min(N, K)+1):\n    ans += (M%mod) * pow(M - 1, N-1-i, mod) * nCi[i]\n    ans %= mod\n\nprint(ans)\n","#!\/usr\/bin\/env python3\nimport sys\n\nsys.setrecursionlimit(10 ** 8)\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nN, M, K = map(int, readline().split())\nMOD = 998244353\n# Combination under a prime modulo: nCk % p\ndef combmod(n, k, p):\n    if k > n:\n        return 0\n    if k > n - k:\n        k = n - k\n    num, den = 1, 1\n    for i in range(k):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    # By Fermat's little theorem,\n    # a^(p-1) \u2261 1 mod p\n    # i.e. a^(p-2) \u2261 a^(-1) mod p\n    inv_dev = pow(den, p - 2, p)\n    return num * inv_dev % p\n\n\ndef solve():\n    ans = 0\n    for i in range(K + 1):\n        ans += combmod(N - 1, i, MOD) * M * pow(M - 1, N - 1 - i, MOD)\n        ans %= MOD\n    return ans\n\n\nif __name__ == \"__main__\":\n    print(solve())\n","n,m,K=map(int,input().split())\nmod=998244353\n\nU=2*10**5\nmod=998244353\n\nfact=[1]*(U+1)\nfact_inv=[1]*(U+1)\n\nfor i in range(1,U+1):\n    fact[i]=(fact[i-1]*i)%mod\nfact_inv[U]=pow(fact[U],mod-2,mod)\n\nfor i in range(U,0,-1):\n\tfact_inv[i-1]=(fact_inv[i]*i)%mod\n\ndef comb(n,k):\n    if k<0 or k>n:\n        return 0\n    x=fact[n]\n    x*=fact_inv[k]\n    x%=mod\n    x*=fact_inv[n-k]\n    x%=mod\n    return x\n\nans=0\nfor k in range(K+1):\n    ans=(ans+comb(n-1,k)*m*pow(m-1,n-k-1,mod)%mod)%mod\nprint(ans)","#E\u554f\u984c\nN, M, K = map(int, input().split())\nMOD = 998244353\n\nP = MOD\nY = max(N, M)\ninv_t = [0]+[1]\nfor i in range(2, Y):\n  inv_t += [inv_t[P % i] * (P - int(P \/ i)) % P]\n#print(inv_t)\n          \nif K == N - 1:\n  ans = 1\n  for i in range(N):\n    ans = ans * M % MOD\n  print(ans % MOD)\n  quit()\n  \nif M == 1:\n  print(\"1\")\n  quit()\n  \n# M * ((M - 1) ** (N - L - 1)) * combination(N-1, L)\u306eL\u30920\u304b\u3089K\u307e\u3067\u8db3\u3057\u305f\u7dcf\u548c\u304c\u7b54\u3048\nB = [1] * N\nans1 = 1\nfor i in range(1, N):\n  ans1 = (ans1 * (M - 1)) % MOD\n  B[i] = (ans1 * M) % MOD\n  \nans = 0\nans2 = 1\n#X = 1\nfor i in range(K + 1):\n  if i == 0:\n    X = 1\n  else:\n    X = (X * (N - i) * inv_t[i]) % MOD\n  ans2 = X * B[N - 1 - i] % MOD \n  ans += ans2\n  ans = ans % MOD\n      \nprint(ans)\n\n","n, m, k = map(int, input().split())\n\nMOD = 998244353\nfact = [1] * (n+1) # \u968e\u4e57\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfactinv = [1] * (n+1) # \u968e\u4e57\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nfor i in range(n):\n    fact[i+1] = fact[i] * (i+1) % MOD # \u968e\u4e57\u3092\u8a08\u7b97\n    factinv[i+1] = pow(fact[i+1], MOD-2, MOD)# MOD\u3092\u6cd5\u3068\u3057\u305f\u9006\u5143\uff08\u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\uff09\n\ndef nCk(n,k): # \u7d44\u307f\u5408\u308f\u305b(MOD)\u3092\u8fd4\u5374\u3059\u308b\n    return fact[n] * factinv[n-k] * factinv[k] % MOD\n\nans = 0\nfor i in range(k+1):\n    ans += m * pow(m-1, n-1-i, MOD) * nCk(n-1, i) % MOD\n\nprint(ans % MOD)\n","M = 998244353\nn,m,K = map(int,input().split())\nans = 0\nc = 1\nfor k in range(K+1):\n    ans += c * m * pow(m-1,n-k-1,M)\n    c *= (n-k+1) * pow(k+1,M-2,M)\n    ans %= M\n    c %= M\nprint(ans)\n    \n","N,M,K = map(int, input().split())\n\np = 998244353\n\nfactorial = [1]\ncounter = 0\nfor i in range(1,N+1):\n    factorial.append(factorial[i-1]*i%p)\n\n\n\nfor k in range(K+1):\n    counter += factorial[N-1]*pow(factorial[k],p-2,p)*pow(factorial[N-k-1],p-2,p)*M*pow(M-1,N-1-k,p)\nprint(counter%p)\n","import itertools\nimport numpy as np\nfrom scipy.special import comb\n\nmod = 998244353\n\nN,M,K = map(int, input().split())\n\n# DP = [[0]*N for _ in range(N)]\n# DP[0][0] = M\n\n# DP = []\n\n\n# for n in range(1,N):\n# \tfor k in range(N):\n# \t\tif k==0:\n# \t\t\tDP[n][k] = DP[n-1][k]*(M-1) % mod\n# \t\telse:\n# \t\t\tDP[n][k] = (DP[n-1][k]*(M-1) + DP[n][k-1]) % mod\n\n# ans = sum(DP[N-1][:(K+1)]) % mod\n# print(ans)\n\nans = 0\nfor k in range(1,K+1):\n\tans += comb(N, k-1)*(M-1)**(N-k) % mod\n\nprint(int(ans*M) % mod)","from collections import Counter,defaultdict,deque\nfrom heapq import heappop,heappush,heapify\nfrom bisect import bisect_left,bisect_right \nimport sys,math,itertools,fractions,pprint\nsys.setrecursionlimit(10**8)\nmod = 10**9+7\nINF = float('inf')\ndef inp(): return int(sys.stdin.readline())\ndef inpl(): return list(map(int, sys.stdin.readline().split()))\n\nmod = 998244353\nclass Combination:\n    \"\"\"\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=998244353):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i % self.mod)\n            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)\n        return fac, facinv\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        modinv = [0] * (n+1)\n        modinv[1] = 1\n        for i in range(2, n+1):\n            modinv[i] = self.mod - self.mod\/\/i * modinv[self.mod%i] % self.mod\n        return modinv\n\nn,m,k = inpl()\nconb = Combination(300010)\nres = 0\nfor i in range(k+1):\n    x = n - i - 1\n    res += conb(n-1,x) * m * pow(m-1,x,mod)\n    res %= mod\nprint(res)","import numpy as np\nn,m,k=map(int,input().split())\nMOD=998244353\ndp = np.zeros(n,dtype='float32')\ndp[0]=m\nfor i in range(2,n+1):\n    bdp=dp\n    dp+=bdp*(m-1)\n    dp[1:]+=bdp[:1]\n    dp%=MOD\nprint(sum(dp[:k+1]))","import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians, acos, atan, asin, log, log10, gcd\nfrom itertools import permutations, combinations, product, accumulate, combinations_with_replacement\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\n#from fractions import gcd\ndef debug(*args):\n    if debugmode:\n        print(*args)\ndef input(): return sys.stdin.readline().strip()\ndef STR(): return input()\ndef INT(): return int(input())\ndef FLOAT(): return float(input())\ndef MAP(): return map(int, input().split())\ndef S_MAP(): return map(str, input().split())\ndef LIST(): return list(map(int, input().split()))\ndef S_LIST(): return list(map(str, input().split()))\ndef lcm(a, b): return a * b \/\/ gcd(a, b)\nsys.setrecursionlimit(10 ** 9)\ninf = sys.maxsize\nmod = 998244353\ndx = [0, 1, 0, -1, 1, -1, -1, 1]\ndy = [1, 0, -1, 0, 1, -1, 1, -1]\ndebugmode = True\n\n#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\ndef cmb(n, r):\n    if (r < 0) or (n < r):\n        return 0\n    r = min(r, n - r)\n    return fact[n] * factinv[r] * factinv[n-r] % mod\n\nN = 3 * (10 ** 5)  # N \u306f\u5fc5\u8981\u5206\u3060\u3051\u7528\u610f\u3059\u308b\nfact = [1, 1]  # fact[n] = (n! mod p)\nfactinv = [1, 1]  # factinv[n] = ((n!)^(-1) mod p)\ninv = [0, 1]  # factinv \u8a08\u7b97\u7528\n\nfor i in range(2, N + 1):\n    fact.append((fact[-1] * i) % mod)\n    inv.append((-inv[mod % i] * (mod \/\/ i)) % mod)\n    factinv.append((factinv[-1] * inv[-1]) % mod)\n\nn, m, k = MAP()\n\npascal = [[1, 0]]\nfor i in range(n - k):\n    pascal.append([1])\n    for j in range(i):\n        pascal[i + 1].append(pascal[i][j] + pascal[i][j + 1])\n    pascal[i + 1].append(1)\n    pascal[i + 1].append(0)\n    #debug(i + 1, pascal[i + 1])\n\nans = m * pow(m - 1, n - 1, mod)\nans %= mod\nfor i in range(1, k + 1):\n    tmp = sum(pascal[n - i][1:i + 1])\n    #debug(i, tmp, m * pow(m - 1, n - i - 1, mod) * tmp)\n    ans += m * pow(m - 1, n - i - 1, mod) * tmp\n    ans %= mod\nprint(ans)\n#debug(479519525)","N, M, K = map(int, input().split())\ndp = [0]*(K+1)\nP = 998244353\ndp[0] = pow(M-1, N-1, P) * M % P\n\ninv_t = [0]*(2*10**5+1)\ninv_t[1] = 1\nfor i in range(2,2*10**5+1):\n  inv_t[i] = inv_t[P % i] * (P - int(P \/ i)) % P\n\nif M == 1 and K == N-1:\n    print(1)\nelse:\n    for i in range(1, K+1):\n        temp = dp[i-1]*(N-i)\n        temp %= P\n        temp *= inv_t[i]\n        temp %= P\n        temp *= inv_t[M-1]\n        temp %= P\n        dp[i] = temp\n\n    ans = 0\n    for i in range(K+1):\n        ans += dp[i]\n        ans %= P\n\n    print(ans)\n","n,m,k=map(int,input().split())\nfact,factinv,mod=[1]*n,[1]*n,998244353\nfor i in range(2,n):\n  fact[i]=fact[i-1]*i%mod\nfactinv[n-1]=pow(fact[n-1],mod-2,mod)\nfor i in range(n-2,0,-1):\n  factinv[i]=factinv[i+1]*(i+1)%mod\nncr=lambda n,r:fact[n]*factinv[r]%mod*factinv[n-r]%mod\nans=pow(m,n,mod)\nfor i in range(k+1,n):\n  ans+=mod-m*pow(m-1,n-i-1,mod)*ncr(n-1,i)%mod\nprint(ans%mod)","import sys\nimport math\nfrom decimal import Decimal, ROUND_HALF_UP, ROUND_HALF_EVEN\nfrom collections import deque\nfrom bisect import bisect_left\nfrom itertools import product\ndef I(): return int(sys.stdin.readline())\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LI2(N): return [list(map(int, sys.stdin.readline().split())) for i in range(N)]\ndef LSI(): return list(map(int, list(sys.stdin.readline().rstrip())))\n\ndef LSI2(N): return [list(map(int, list(sys.stdin.readline().rstrip()))) for i in range(N)]\ndef S(): return sys.stdin.readline().rstrip()\ndef LS(): return sys.stdin.readline().split()\ndef LS2(N): return [sys.stdin.readline().split() for i in range(N)]\ndef FILL(i,h): return [i for j in range(h)]\ndef FILL2(i,h,w): return [FILL(i,w) for j in range(h)]\ndef FILL3(i,h,w,d): return [FILL2(i,w,d) for j in range(h)]\ndef FILL4(i,h,w,d,d2): return [FILL3(i,w,d,d2) for j in range(h)]\ndef sisha(num,digit): return Decimal(str(num)).quantize(Decimal(digit),rounding=ROUND_HALF_UP)\n#'0.01'\u3084'1E1''\u306a\u3069\u3067\u6307\u5b9a\u3001\u6574\u6570\u306b\u623b\u3059\u306a\u3089int\u3092\u304b\u307e\u3059\nMOD = 998244353\nINF = float(\"inf\")\nsys.setrecursionlimit(10**6+10)\ninput = sys.stdin.readline\n\n\n\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = MOD #\u51fa\u529b\u306e\u5236\u9650\nN = 5*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\n\nN,M,K = MI()\nans = 0\nfor i in range(0,K+1):\n    ans += (cmb(N-1,i,mod)*M*pow(M-1,N-1-i,mod))%mod\nprint(ans%mod)\n","from sys import stdin, setrecursionlimit\n\n\ndef main():\n    input = stdin.buffer.readline\n    n, m, k = map(int, input().split())\n    dp = [0 for _ in range(k + 1)]\n\n    dp[0] = m\n\n    for i in range(1, n):\n        tmp_dp = dp\n        for j in range(k + 1):\n            tmp_dp[j] = (m - 1) * dp[j]\n            if j > 0:\n                tmp_dp[j] += dp[j - 1]\n            tmp_dp[j] %= 998244353\n        dp = tmp_dp\n\n    ans = 0\n    for i in range(k + 1):\n        ans += dp[i]\n    print(ans % 998244353)\n\n\nif __name__ == \"__main__\":\n    setrecursionlimit(10000)\n    main()\n","N,M,K=map(int,input().split())\nMOD=998244353\n\n#\u9006\u5143\u3092\u5b9a\u7fa9\u3059\u308b\ndef inv(a):\n  return pow(a,MOD-2,MOD)\n\n#\u300cn!\u300d\u306e\u5270\u4f59\u3092\u6c42\u3081\u308b\nfact=[0,1]\nfor i in range(2,N+1):\n  fact.append((fact[-1]*i)%MOD)\n\n#nCr(MOD)\u3092\u6c42\u3081\u308b\ndef choose(n,r):\n  if r==0 or r==n:\n    return 1\n  else:\n    return fact[n]*inv(fact[r])*inv(fact[n-r])%MOD\n\n#(M-1)**n(MOD)\u3092\u6c42\u3081\u308b\nexp=[1]\nfor i in range(1,N):\n  exp.append((exp[-1]*(M-1))%MOD)  \n  \n\n#\u7b54\u3048\u3092\u8a08\u7b97\u3059\u308b\nans=0\nfor i in range(K+1):\n  ans+=(M*choose(N-1,i)*exp[N-1-i]%MOD)  \n  ans%=MOD\nprint(ans)  ","MOD = 998244353\nn, m, k = map(int, input().split())\n\nfact = [0]*(n+1)\nfact[0] = 1\nfor i in range(1, n+1):\n    fact[i] = fact[i-1]*i % MOD\n\ninvfact = [0]*(n+1)\nfor i in range(n+1):\n    invfact[i] = pow(fact[i], MOD-2, MOD)\n\n\ndef nCk(n, k):\n    return fact[n]*invfact[k]*invfact[n-k]\n\n\nans = 0\nfor i in range(k+1):\n    ans += m*pow(m-1, n-1-i, MOD)*nCk(n-1, i)\n    ans %= MOD\nprint(ans)\n","n,m,k = map(int,input().split())\n\nimport math\ndef comb(n,r):\n    return math.factorial(n) \/\/ (math.factorial(n-r) * math.factorial(r))\n\n\n\nans = 0\n\nfor i in range(k+1):\n    ans += m * ((m-1) ** (n-1-i) ) * comb(n-1 ,i)\n    \nprint(ans %  998244353)\n","n,m,k=map(int,input().split())\na=[0]*(k+1)\na[0]=1\nfor i in range(1,k+1):\n    a[i]=(a[i-1]*(n-i))\/\/(i)\ne=[0]*(k+1)\nmod=998244353\ne[0]=pow(m-1,n-1-k,mod)\nfor i in range(1,k+1):\n    e[i]=((e[i-1])%mod*((m-1)%mod))%mod\nans=0\nfor i in range(k+1):\n    ans+=((e[-1-i])*(a[i]%mod))%mod\n    ans%=mod\nm=m%mod\nprint((ans*m)%mod)","from functools import reduce\n\ndef cin():  return list(map(int,input().split()))\nN, M, K = cin()\nMOD = 998244353\n\nfac = [1] * (N + 1)\ninv = [1] * (N + 1)\n\nfor j in range(1, N + 1):  fac[j] = fac[j - 1] * j % MOD\n\ninv[N] = pow(fac[N], MOD - 2, MOD)\nfor j in range(N - 1, -1, -1):  inv[j] = inv[j + 1] * (j + 1) % MOD\n    \ndef cmb(n, r):\n    if r > n or n < 0 or r < 0:  return 0\n    return fac[n] * inv[n - r] * inv[r] % MOD\n\nans = 0\nfor i in range(K + 1):\n    ans += M * cmb(N - 1, i) * pow(M - 1, N - 1 - i, MOD)\n    ans %= MOD\nprint(ans)","def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\nN = 2*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m,k = map(int,input().split())\n\nif k==n-1:\n  print(m%mod)\n  exit()\n\nans = 0\na= m*pow(m-1,n-1-k-1,mod)\n\nfor i in range(k,-1,-1):\n  a =a*(m-1)%mod\n  \n  ans += a*cmb(n-1,i,mod)\n  ans %= mod\n  \nprint(ans)","# coding: utf-8\n\n\ndef solve(*args: str) -> str:\n    n, m, k = map(int, args[0].split())\n    mod = 998244353\n\n    P = [1]*(k+1)\n    p = pow(m-1, n-2-k, mod)\n    for i in range(k+1):\n        p = p*(m-1) % mod\n        P[-1-i] = p\n\n    ret = m*P[0] % mod\n    ncr = 1\n    for i in range(1, k+1):\n        ncr = ncr*(n-i)\/\/i\n        ret += m*P[i]*ncr % mod\n\n    return str(ret % mod)\n\n\nif __name__ == \"__main__\":\n    print(solve(*(open(0).read().splitlines())))\n","import sys\nsys.setrecursionlimit(2147483647)\nINF = 1 << 60\nMOD = 998244353\ninput = lambda:sys.stdin.readline().rstrip()\n\nclass modfact(object):\n    def __init__(self, n):\n        fact, invfact = [1] * (n + 1), [1] * (n + 1)\n        for i in range(1, n + 1): fact[i] = i * fact[i - 1] % MOD\n        invfact[n] = pow(fact[n], MOD - 2, MOD)\n        for i in range(n - 1, -1, -1): invfact[i] = invfact[i + 1] * (i + 1) % MOD\n        self._fact, self._invfact = fact, invfact\n\n    def inv(self, n):\n        return self._fact[n - 1] * self._invfact[n] % MOD\n\n    def fact(self, n):\n        return self._fact[n]\n\n    def invfact(self, n):\n        return self._invfact[n]\n\n    def comb(self, n, k):\n        if k < 0 or n < k: return 0\n        return self._fact[n] * self._invfact[k] % MOD * self._invfact[n - k] % MOD\n\n    def perm(self, n, k):\n        if k < 0 or n < k: return 0\n        return self._fact[n] * self._invfact[n - k] % MOD\n\ndef resolve():\n    n, m, k = map(int, input().split())\n    mf = modfact(n)\n    res = 0\n    for i in range(k + 1):\n        res += m * pow(m - 1, n - i - 1, MOD) % MOD * mf.comb(n - 1, i)\n        res %= MOD\n    print(res)\nresolve()","n, m, k = map(int, input().split())\nmod = 998244353\n\nkai = [1]*(n+1)\ninv = [1]*(n+1)\nfor i in range(n):\n    kai[i+1] = (kai[i] * (i+1))%mod\n    inv[i+1] = (inv[i] * pow(i+1,mod-2,mod))%mod\n\ncount_all = 0\npre_pow = pow(m-1,n-1,mod)\ninv_m_mai1 = pow(m-1,mod-2,mod)\nfor i in range(k+1):\n    pattern_color = m*pre_pow%mod\n    pattern_place = kai[n-1]*inv[n-1-i]*inv[i]%mod\n    count_all = (count_all+pattern_color*pattern_place)%mod\n    pre_pow = pre_pow * inv_m_mai1 %mod\n\nprint(count_all)","n, m, k = map(int, input().split())\n\nmod = 998244353\n\ndef power(x, y):\n    if   y == 0     : return 1\n    elif y == 1     : return x % mod\n    elif y % 2 == 0 : return power(x, y \/\/ 2) ** 2 % mod\n    else            : return power(x, y \/\/ 2) ** 2 * x % mod\n\nfactorial = [1]\nfor i in range(1, n):\n    factorial.append(factorial[i - 1] * i % mod)\n\ninverseFactorial = [0] * n\ninverseFactorial[n - 1] = power(factorial[n - 1], mod - 2)\nfor i in range(n - 2, -1, -1):\n    inverseFactorial[i] = inverseFactorial[i + 1] * (i + 1) % mod\n\ndef comb(x, y):\n    return factorial[x] * inverseFactorial[y] * inverseFactorial[x - y] % mod\n\n\n\ntmp = [m]\n\nfor i in range(n):\n    t = tmp[-1] * (m - 1) % mod\n    tmp.append(t)\n\n\nans = 0\n\nfor kk in range(k + 1):\n    c = comb(n - 1, kk)\n    c *= tmp[n - kk - 1]\n    ans += c\n    ans %= mod\n\nprint(ans)\n","#dp\u3067\u3067\u304d\u306a\u3044\u304b\u306a\uff1f\nimport sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**7)\nfrom collections import Counter, deque\nfrom collections import defaultdict\nfrom itertools import combinations, permutations, accumulate, groupby, product\nfrom bisect import bisect_left,bisect_right\nfrom heapq import heapify, heappop, heappush\nfrom math import floor, ceil,pi\nfrom operator import itemgetter\ndef I(): return int(input())\ndef MI(): return map(int, input().split())\ndef LI(): return list(map(int, input().split()))\ndef LI2(): return [int(input()) for i in range(n)]\ndef MXI(): return [[LI()]for i in range(n)]\ndef SI(): return input().rstrip()\ndef printns(x): print('\\n'.join(x))\ndef printni(x): print('\\n'.join(list(map(str,x))))\ninf = 10**17\n#mod = 10**9 + 7\n\nmod=998244353\n\n\nn,m,k=MI()\nbeki=[0 for i in range(n)]\nbeki[0]=m%mod\nfor i in range(n-1):\n    beki[i+1]=(beki[i]*(m-1))%mod\n    \ndef cmod(n, r, p):\n    x,y  = 1, 1\n    for i in range(r):\n        x = x * (n - i) % p\n        y = y * (r - i) % p\n    return (x * pow(y, p - 2, p)) % p\nans=0\n\nfor i in range(k+1):\n    j=n-i-1\n    ans+=(beki[j]*cmod(n-1,i,mod))%mod\n    #print(beki[j]*cmod(n-1,i,mod))\nprint(ans%mod)","n, m, k = map(int, input().split())\n\nMOD = 998244353\n\ndef inv(x, MOD):\n    return pow(x, MOD - 2, MOD)\n\nc = [0 for _ in range(n)]\nc[0] = 1\nfor i in range(1, n):\n    c[i] = c[i - 1] * (n - i)\n    c[i] *= inv(i, MOD)\n    c[i] %= MOD\nans = sum([m * c[i] * pow(m - 1, n - 1 - i, MOD) for i in range(k + 1)]) % MOD\nprint(ans)","from scipy.special import comb\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\nNcom = 0\nfor k in range(K+1):\n  n = M * comb(N-1, k, exact=True) * (M-1)**(N-k-1)\n  Ncom += n % mod\nprint(Ncom % mod)","n,m,k=[int(x) for x in input().split()]\n#TODO Mutiply wih m\nsumi=0\nmod=998244353\nprodi=pow(m-1,n-1,mod)\ninvi=pow(m-1,mod-2,mod)\nfor j in range(n-1,n-1-k-1,-1):\n  sumi+=prodi\n  sumi%=mod\n  prodi*=j\n  prodi%=mod\n  prodi*=pow(n-j,mod-2,mod)\n  prodi%=mod\n  prodi*=invi\n  prodi%=mod \nsumi*=m\nsumi%=mod\nprint(sumi)\n  ","import sys\nreadline = sys.stdin.readline\nMOD = 998244353\n\ndef comb(n, r, mod=MOD):\n    r = min(n - r, r)\n    res = 1\n    fac = 1\n    for i in range(r):\n        res *= n - i\n        res %= mod\n        fac *= i + 1\n        fac %= mod\n    return res * pow(fac, mod-2, mod) % mod\n\ndef main():\n    N, M, K = map(int, readline().rstrip().split())\n    res = 0\n    for k in range(K+1):\n        n = N - k\n        res += comb(N-1, k, MOD) * pow(M-1, n-1, MOD) * M\n        res %= MOD\n    \n    print(res)\n\n\nif __name__ == '__main__':\n    main()","def main():\n\n    N, M, K = map(int, input().split())\n    mod = 998244353\n\n    g1 = [1, 1]\n    g2 = [1, 1]\n    inv = [0, 1]\n\n    for i in range(2, N+1):\n        g1.append((g1[-1] * i) % mod)\n        inv.append( ( -inv[mod % i] * (mod\/\/i)) % mod )\n        g2.append((g2[-1] * inv[-1]) % mod)\n\n    def combi(n, r):\n      r = min(r, n-r)\n      return g1[n]*g2[r]*g2[n-r]%mod\n\n    v = 1\n    base = [1, M]\n    for i in range(N):\n        base.append(base[-1] * (M-1) % mod)\n\n    # print(base)\n\n    ans = 0\n    for j in range(K+1):\n        v = base[N-j]\n        u = combi(N-1, j)\n        ans += (v * u) % mod\n        ans %= mod\n    return ans\n\n\nif __name__ == '__main__':\n    print(main())\n","# E - Colorful Blocks\nimport sys\nsys.setrecursionlimit(10**7)\n\nMOD = 998244353\nN,M,K = map(int,input().split())\ninv_M = pow(M-1,-1,MOD)\nans = 0\ntmp = pow(M-1,N-1,MOD)\ncomb = 1\nfor i in range(K+1):\n    ans = (ans+M*comb*tmp)%MOD\n    if i==K:\n        break\n    tmp = (tmp*inv_M)%MOD\n    comb = (comb*(N-1-i)*pow(i+1,-1,MOD))%MOD\nprint(ans)","def cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\nN = 2*10**5\ng1 = [1, 1] # \u5143\u30c6\u30fc\u30d6\u30eb\ng2 = [1, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ninverse = [0, 1] #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\n\nfor i in range( 2, N + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\nn,m,k = map(int,input().split())\n\nans = 0\na= m*pow(m-1,n-1-k-1,mod)\n\nfor i in range(k,-1,-1):\n  a =a*(m-1)%mod\n  \n  ans += a*cmb(n-1,i,mod)\n  ans %= mod\n  \nprint(ans)","N,M,K = map(int,input().split())\nmod = 998244353\n\nif M == 1 and K == N-1:\n    print(1)\n    exit()\n\nA = [0]*(K+1)\nA[0] = (M*pow(M-1,N-1,mod)) % mod\n\nfor i in range(K):\n    A[i+1] = (A[i]*(N-1-i)*pow(M-1,mod-2,mod)*pow(i+1,mod-2,mod)) % mod\n\nans = A[0]\nfor i in range(K):\n    ans = (ans + A[i+1]) % mod\n\nprint(ans)","\ndef power_func(a,b,p):\n    if b==0: return 1\n    if b%2==0:\n        d=power_func(a,b\/\/2,p)\n        return d*d %p\n    if b%2==1:\n        return (a*power_func(a,b-1,p ))%p\n\n\ndef cmb(n, r, mod):\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\n\nmod = 998244353\ng1 = [1, 1]\ng2 = [1, 1]\ninverse = [0, 1]\n\nn,m,k = map(int,input().split())\n\nfor i in range( 2, n + 1 ):\n    g1.append( ( g1[-1] * i ) % mod )\n    inverse.append( ( -inverse[mod % i] * (mod\/\/i) ) % mod )\n    g2.append( (g2[-1] * inverse[-1]) % mod )\n\ns = 0\n\nfor x in range(k+1):\n    s += (m * power_func(m-1,n-1-x,998244353) * cmb(n-1,x,998244353)) % 998244353\n    s %= 998244353\nprint(s)","import itertools\nimport numpy as np\nfrom scipy.special import comb\n\nmod = 998244353\n\nN,M,K = map(int, input().split())\n\n# DP = [[0]*N for _ in range(N)]\n# DP[0][0] = M\n\n# DP = []\n\n\n# for n in range(1,N):\n# \tfor k in range(N):\n# \t\tif k==0:\n# \t\t\tDP[n][k] = DP[n-1][k]*(M-1) % mod\n# \t\telse:\n# \t\t\tDP[n][k] = (DP[n-1][k]*(M-1) + DP[n][k-1]) % mod\n\n# ans = sum(DP[N-1][:(K+1)]) % mod\n# print(ans)\n\nans = 0\nfor k in range(K+1):\n\tans += comb(N-1, k)*(M-1)**(N-k-1) % mod\n\nprint(int(ans*M) % mod)","n,m,k=map(int,input().split())\nfactorials=[]\ncurrent=1\nfor i in range(n):\n  factorials.append(current)\n  current=((i+1)*current)%998244353\ninverselist=[]\nfor i in range(n):\n  inverselist.append(pow(factorials[i],998244351,998244353))\nans=0\nfor i in range(0,k+1):\n  ans=(ans+m*pow(m-1,n-i-1,998244353)*factorials[n-1]*inverselist[i]*inverselist[n-1-i])%998244353\nprint(ans)","N,M,K = map(int,input().split())\nmod = 998244353\nn = 200050\nfrac = [1]*(n+1)\nfinv = [1]*(n+1)\nfor i in range(n):\n    frac[i+1] = (i+1)*frac[i]%mod\nfinv[-1] = pow(frac[-1],mod-2,mod)\nfor i in range(1,n+1):\n    finv[n-i] = finv[n-i+1]*(n-i+1)%mod\ndef nCr(n,r):\n    if n<0 or r<0 or n<r: return 0\n    r = min(r,n-r)\n    return frac[n]*finv[n-r]*finv[r]%mod\n\n\n# M* n-1Ck*1^k*(M-1)^(N-1-k)\nans = 0\nfor i in range(K+1):\n    tmp=(M*nCr(N-1,i))%mod\n    tmp*=pow(M-1,N-1-i,mod)\n    ans += tmp%mod\nprint(ans%mod)","from collections import deque\n\ndef main():\n    N,M,K=map(int,input().split())\n    MOD=998244353\n    E=0\n\n    n_=1\n    for i in range(1,N):\n        n_=(n_*i)%MOD\n\n    nr_ = 1\n    nr_array=deque([])\n    for i in range(1,N-1):\n        nr_ = (nr_ * i) % MOD\n        nr_array.append(nr_)\n\n    r_=1\n    for i in range(0,K+1):\n        if i!=0 and i!=N-1:\n            r_ = (r_ * i) % MOD\n            nr_=nr_array.pop()\n            power_r=pow(r_,MOD-2,MOD)\n            power_nr=pow(nr_,MOD-2,MOD)\n        Mk=pow(M-1,N-1-i,MOD)\n\n        if i!=0 and i!=N-1:\n            E+=(n_*power_r*power_nr*Mk)%MOD\n        else:\n            E+=Mk%MOD\n\n    res=(M*E)%MOD\n    print(res)\n\nif __name__==\"__main__\":\n    main()\n\n","class Combination:\n    \"\"\"\n    O(n)\u306e\u524d\u8a08\u7b97\u30921\u56de\u884c\u3046\u3053\u3068\u3067\uff0cO(1)\u3067nCr mod m\u3092\u6c42\u3081\u3089\u308c\u308b\n    n_max = 10**6\u306e\u3068\u304d\u524d\u51e6\u7406\u306f\u7d04950ms (PyPy\u306a\u3089\u7d04340ms, 10**7\u3067\u7d041800ms)\n    \u4f7f\u7528\u4f8b\uff1a\n    comb = Combination(1000000)\n    print(comb(5, 3))  # 10\n    \"\"\"\n    def __init__(self, n_max, mod=998244353):\n        self.mod = mod\n        self.modinv = self.make_modinv_list(n_max)\n        self.fac, self.facinv = self.make_factorial_list(n_max)\n\n    def __call__(self, n, r):\n        return self.fac[n] * self.facinv[r] % self.mod * self.facinv[n-r] % self.mod\n\n    def make_factorial_list(self, n):\n        # \u968e\u4e57\u306e\u30ea\u30b9\u30c8\u3068\u968e\u4e57\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        # self.make_modinv_list()\u304c\u5148\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\n        fac = [1]\n        facinv = [1]\n        for i in range(1, n+1):\n            fac.append(fac[i-1] * i % self.mod)\n            facinv.append(facinv[i-1] * self.modinv[i] % self.mod)\n        return fac, facinv\n\n    def make_modinv_list(self, n):\n        # 0\u304b\u3089n\u307e\u3067\u306emod\u9006\u5143\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059 O(n)\n        modinv = [0] * (n+1)\n        modinv[1] = 1\n        for i in range(2, n+1):\n            modinv[i] = self.mod - self.mod\/\/i * modinv[self.mod%i] % self.mod\n        return modinv\n\ndef power_func(a,n,p):\n  bi=str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n  res=1\n  for i in range(len(bi)):\n    res=(res*res) %p\n    if bi[i]==\"1\":\n      res=(res*a) %p\n  return res\n\n\nn,m,k = map(int, input().split())\nMOD = 998244353\nans = 0\ncomb = Combination(n)\nfor i in range(k + 1):\n    tmp = m*power_func(m - 1, n - i - 1,MOD)%MOD\n    tmp *= comb(n - 1,i)\n    ans += tmp%MOD\nprint(ans%MOD)","# E - Colorful Blocks\n\nMOD = 998244353\nN, M, K = map(int, input().split())\n\n# \u4e88\u3081\u968e\u4e57\u3092\u8a08\u7b97\u3057\u3066\u304a\u304f\nf = [1]\nfor i in range(N):\n    f.append(f[i]*(i+1)%MOD)\n\n# \u7d44\u307f\u5408\u308f\u305b\u95a2\u6570\ndef comb_mod(n, r, p):\n    return f[n] * pow(f[r], p-2, p) * pow(f[n-r], p-2, p)\n\nans = 0\nfor i in range(K+1):\n    ans = (ans + (M*pow(M-1, N-1-i,MOD)) * comb_mod(N-1, i, MOD))%MOD\n\nprint(ans)\n","from functools import reduce\n\nn, m, k = map(int,input().split())\nmodi = 998244353\n\n\ndef ncr(a, b):\n    if b == 0:\n        return 1\n    else:\n        num = reduce(lambda x, y: x * y % modi, range(a, a-b, -1))\n        den = reduce(lambda x, y: x * y % modi, range(1, b+1))\n        return num * pow(den, modi - 2, modi) % modi\n\n\nres = 0\nfor i in range(k + 1):\n    res += m % modi * pow(m - 1, n - i - 1, modi) * ncr(n - 1, i)\n    res %= modi\nprint(res)\n","from collections import deque\nfrom heapq import heapify,heappop,heappush,heappushpop\nfrom copy import copy,deepcopy\nfrom itertools import product,permutations,combinations,combinations_with_replacement\nfrom collections import defaultdict,Counter\nfrom bisect import bisect_left,bisect_right\nfrom math import gcd,ceil,floor,factorial\n# from fractions import gcd\nfrom functools import reduce\nfrom pprint import pprint\n\nINF = float(\"inf\")\n\ndef myinput():\n    return map(int,input().split())\n\ndef mylistinput(n):\n    return [ list(myinput()) for _ in range(n) ]\n\ndef mycol(data,col):\n    return [ row[col] for row in data ]\n\ndef mysort(data,col,reverse_flag):\n    data.sort(key=lambda x:x[col],reverse=reverse_flag)\n    return data\n\ndef mymax(data):\n    M = -1*float(\"inf\")\n    for i in range(len(data)):\n        m = max(data[i])\n        M = max(M,m)\n    return M\n\ndef mymin(data):\n    m = float(\"inf\")\n    for i in range(len(data)):\n        M = min(data[i])\n        m = min(m,M)\n    return m\n\ndef mycount(ls,x):\n    # ls\u306f\u30bd\u30fc\u30c8\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\n    l = bisect_left(ls,x)\n    r = bisect_right(ls,x)\n    return (r-l)\n\ndef myoutput(ls,space=True):\n    if space:\n        if len(ls)==0:\n            print(\" \")\n        elif type(ls[0])==str:\n            print(\" \".join(ls))\n        elif type(ls[0])==int:\n            print(\" \".join(map(str,ls)))\n        else:\n            print(\"Output Error\")\n    else:\n        if len(ls)==0:\n            print(\"\")\n        elif type(ls[0])==str:\n            print(\"\".join(ls))\n        elif type(ls[0])==int:\n            print(\"\".join(map(str,ls)))\n        else:\n            print(\"Output Error\")\n\ndef comb_mod_faster(n,k,mod):\n    if n<k:\n        return 0\n    if n<0 or k<0:\n        return 0\n    k = min(n-k,k)\n    ans = 1\n    inv = [1]*(k+1)\n    if k>=1:\n        ans *= (n-k+1)%mod\n    for i in range(2,k+1):\n        inv[i] = mod - inv[mod%i]*(mod\/\/i)%mod\n        ans = ans*(n-k+i)*inv[i]%mod\n    return ans\n\ndef power_func(a,n,p):\n    bi = str(format(n,\"b\"))#2\u9032\u8868\u73fe\u306b\n    res = 1\n    for i in range(len(bi)):\n        res = (res*res) % p\n        if bi[i]==\"1\":\n            res = (res*a) % p\n    return res\n\nn,m,k = myinput()\n\nmod = 998244353\n\n# ans = 100*(99**99) % mod\n# print(ans)\n\n# ls = [0]*(k+1)\n# for i in range(k+1):\n#     ls[i] = comb_mod_faster(n,i,mod)\n# print(ls)\n\n# ans = 0\n# for i in range(k+1):\n#     t = ls[i]\n#     ans += ( (m-1)**(n-t) ) * (m**t)\n#     ans %= mod \n# print(ans%mod)\n\nans = 0\nfor i in range(k+1):\n    t = comb_mod_faster(n-1,i,mod)\n    # print(i,t)\n    ans1 = power_func(m-1,n-1-i,mod)\n    # print(ans1)\n    # ans2 = power_func(1,i,mod)\n    # print(ans2)\n    ans += ( m * t * ans1 ) % mod\n    # print(ans)\nprint(ans%mod)","def combi(y,x,p=998244353):\n  s=fac[y]\n  t=fac[x]\n  u=fac[y-x]\n  ans= (s* pow(t,p-2,p)*pow(u,p-2,p))%p\n  return ans\n\n###############################\n\nN,M,K=map(int,input().split())\np=998244353\nfac=[1,1]\nfor i in range(2,N+1):\n  fac.append( (fac[-1]*i)%p )\nR = M*(M-1)**(N-K-2)\n\nans=0\nfor i in range(K,-1,-1):\n  R = (R*(M-1))%p\n  L = combi(N,i)\n  ans = (ans + (R*L)%p)%p\nprint(ans)","import sys\nsys.setrecursionlimit(10**9)\nn, m, k = map(int, input().split())\ncolor = [i for i in range(m)]\nans = 0\ndef dfs(i, daburi, num):\n    global ans\n    if i == n-1:\n        if daburi == k:\n            ans += num % 998244353\n            return \n        elif daburi < k:\n            ans += num % 998244353\n            return\n    if daburi > k:\n        return\n    dfs(i+1, daburi, num*(m-1)% 998244353)\n    dfs(i+1, daburi+1, num% 998244353)\ndfs(0, 0, m)\nprint(ans% 998244353)","MOD = 998244353\nn, m, k = map(int, input().split())\n\nfact = [0]*(n+1)\nfact[0] = 1\nfor i in range(1, n+1):\n    fact[i] = fact[i-1]*i % MOD\n\ninvfact = [0]*(n+1)\ninvfact[n] = pow(fact[n], MOD-2, MOD)\nfor i in reversed(range(n)):\n    invfact[i] = invfact[i+1]*(i+1) % MOD\n\n\ndef nCk(n, k):\n    return fact[n]*invfact[k]*invfact[n-k]\n\n\nans = 0\nfor i in range(k+1):\n    ans += m*pow(m-1, n-1-i, MOD)*nCk(n-1, i)\n    ans %= MOD\nprint(ans)","P = 998244353\n\n\nnn = 200200\n\nfa = [1] * (nn+1)\nfainv = [1] * (nn+1)\nfor i in range(nn):\n    fa[i+1] = fa[i] * (i+1) % P\nfainv[-1] = pow(fa[-1], P-2, P)\nfor i in range(nn)[::-1]:\n    fainv[i] = fainv[i+1] * (i+1) % P\n\n\ndef comb(a, b):\n    return fa[a] * fainv[b] % P * fainv[a-b] % P if 0 <= b <= a else 0\n\n\nN, M, K = map(int, input().split())\n\nif M == 1:\n    if N - K > 1:\n        print(1)\n    else:\n        print(0)\n    exit(0)\n\n\nt = pow(M-1, N-1, P)\nm = pow(M-1, P-2, P)\nans = 0\nfor k in range(K+1):\n    ans = (ans + t * comb(N-1, k)) % P\n    t = t * m % P\nprint(ans * M % P)\n","N,M,K = map(int,input().split())\np = 998244353\nsum_color = 0\nfor k in range(K+1):\n  num1 = pow(N-1,k,p)\n  num2 = M%p\n  num3 = pow(M-1,N-1-k,p)\n  sum_color += (num1*num2*num3)%p\n  sum_color %= p\n  \nprint(sum_color%p)\n  \n","from operator import mul\nfrom functools import reduce\nfrom fractions import gcd\nimport math\nimport bisect\nimport itertools\nimport sys\nsys.setrecursionlimit(10**7)\ninput = sys.stdin.readline\nINF = float(\"inf\")\n\nMOD = 998244353\nclass Combination(object):\n\tdef __init__(self, N, MOD):\n\t\tself.fac = [0] * (N + 1)\n\t\tself.inv = [0] * (N + 1)\n\t\tself.finv = [0] * (N + 1)\n\t\tself.fac[0], self.fac[1] = 1, 1\n\t\tself.inv[1] = 1\n\t\tself.finv[0], self.finv[1] = 1, 1\n \n\t\t# \u524d\u8a08\u7b97\n\t\tfor i in range(2, N + 1):\n\t\t\tself.fac[i] = self.fac[i - 1] * i % MOD\n\t\t\tself.inv[i] = self.inv[MOD % i] * (MOD - (MOD \/\/ i)) % MOD\n\t\t\tself.finv[i] = self.finv[i - 1] * self.inv[i] % MOD\n \n\tdef com(self, N, k):\n\t\treturn (self.fac[N] * self.finv[k] * self.finv[N - k]) % MOD\n\n\ndef main():\n    N, M, K = map(int, input().split())\n\n    if N == 1:\n        print(1)\n        return\n\n    Com = Combination(N-1, MOD)\n    ans = 0\n    for k in reversed(range(K+1)):\n        ans += M * pow(M-1, N-k-1, MOD) * Com.com(N-1, k)\n        ans %= MOD\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","n,m,k = map(int,input().split())\n\ndef cmb(n, r, mod):#\u30b3\u30f3\u30d3\u30cd\u30fc\u30b7\u30e7\u30f3\u306e\u9ad8\u901f\u8a08\u7b97\u3000\n    if ( r<0 or r>n ):\n        return 0\n    r = min(r, n-r)\n    return g1[n] * g2[r] * g2[n-r] % mod\nmod = 998244353 #\u51fa\u529b\u306e\u5236\u9650\nN = n #N\u306e\u6700\u5927\u5024\ng1 = [0]*(N+1) #\u5143\u30c6\u30fc\u30d6\u30eb(p(n,r))\ng1[0] = g1[1] = 1\ng2 = [0]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\ng2[0] = g2[1] = 1\ninverse = [0]*(N+1) #\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u8a08\u7b97\u7528\u30c6\u30fc\u30d6\u30eb\ninverse[0],inverse[1] = 0,1\nfor i in range(2,N+1):\n    g1[i] = (g1[i-1] * i) % mod\n    inverse[i] = (-inverse[mod % i] * (mod\/\/i)) % mod\n    g2[i] = (g2[i-1] * inverse[i]) % mod\n\n# i\u7d44\u3000-> m * (n-1)Ci * (m-1)^(n-1-i)\nans = 0\nfor i in range(k+1):\n    ans += m * cmb(n-1,i,mod) * pow(m-1,n-1-i,mod)\n    ans %= mod\nprint(ans)","import sys\ninput=sys.stdin.readline\nn,m,k=map(int,input().split())\nINF=998244353\ndef modinv(a,m):\n    b=m\n    (x,lastx)=(0,1)\n    (y,lasty)=(1,0)\n    while not b==0:\n        q=a\/\/b\n        (a,b)=(b,a%b)\n        (x, lastx) = (lastx - q * x, x)\n        (y, lasty) = (lasty - q * y, y)\n    return lastx%m\nans=0\nfor i in range(k+1):\n    if i==0:\n        c=1\n        temp=(m*pow(m-1,n-1))%INF\n    else:\n        x=modinv(i,INF)\n        c=(c*x*(n-i))%INF\n        temp=(temp*modinv(m-1,INF))%INF\n    ans=(ans+c*temp)%INF\nprint(ans)\n\n\n\n","import sys, bisect, math, itertools, heapq, collections\nfrom operator import itemgetter\n# a.sort(key=itemgetter(i)) # i\u756a\u76ee\u8981\u7d20\u3067sort\nfrom functools import lru_cache\n# @lru_cache(maxsize=None)\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9 + 7\neps = 10**-7\n\n\ndef inp():\n    '''\n    \u4e00\u3064\u306e\u6574\u6570\n    '''\n    return int(input())\n\n\ndef inpl():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\n    '''\n    return list(map(int, input().split()))\n\n\nclass combination():\n    def __init__(self, mod):\n        '''\n        mod\u3092\u6307\u5b9a\u3057\u3066\u521d\u671f\u5316\n        '''\n        self.mod = mod\n        self.fac = [1, 1]  # \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\n        self.ifac = [1, 1]  # \u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\n        self.inv = [0, 1]  # \u9006\u5143\u8a08\u7b97\u7528\n\n    def calc(self, n, k):\n        '''\n        nCk%mod\u3092\u8a08\u7b97\u3059\u308b\n        '''\n        if k < 0 or n < k:\n            return 0\n        self.make_tables(n)  # \u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\n        k = min(k, n - k)\n        return self.fac[n] * (self.ifac[k] * self.ifac[n - k] %\n                              self.mod) % self.mod\n\n    def make_tables(self, n):\n        '''\n        \u968e\u4e57\u30c6\u30fc\u30d6\u30eb\u30fb\u968e\u4e57\u306e\u9006\u5143\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\n        '''\n        for i in range(len(self.fac), n + 1):\n            self.fac.append((self.fac[-1] * i) % self.mod)\n            self.inv.append(\n                (-self.inv[self.mod % i] * (self.mod \/\/ i)) % self.mod)\n            self.ifac.append((self.ifac[-1] * self.inv[-1]) % self.mod)\n\n\nmod = 998244353\ncomb = combination(mod)\nn, m, k = inpl()\nif m == 1:\n    if k < n - 1:\n        print(0)\n        exit()\n    else:\n        print(0)\n        exit()\nans = 0\nfor i in range(min(n, k + 1)):\n    ans += m * pow(m - 1, n - 1 - i, mod) * comb.calc(n - 1, i) % mod\n    ans %= mod\nprint(ans)\n","def main():\n    from sys import stdin\n    MOD = 998244353\n    n,m,k = map(int,stdin.readline().rstrip().split())\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    dp[1][0] = m\n    for i in range(1,n):\n        dp[i+1][0] = dp[i][0]*(m-1)%MOD\n\n    for i in range(n):\n        for j in range(k):\n            dp[i+1][j+1] = (dp[i][j+1]*(m-1) + dp[i][j]*m)%MOD\n    \n    print(dp[n][k])\nmain()","N,M,K=map(int,input().split())\nmod= 998244353\n\nFACT=[1]\nfor i in range(1,2*10**5+1):\n    FACT.append(FACT[-1]*i%mod)\n\nFACT_INV=[pow(FACT[-1],mod-2,mod)]\nfor i in range(2*10**5,0,-1):\n    FACT_INV.append(FACT_INV[-1]*i%mod)\n\nFACT_INV.reverse()\n\ndef Combi(a,b):\n    if 0<=b<=a:\n        return FACT[a]*FACT_INV[b]*FACT_INV[a-b]%mod\n    else:\n        return 0\n\nANS=0\nfor i in range(K+1):\n    ANS+=Combi(N-1,i)*pow(M-1,N-1-i,mod)\n    ANS%=mod\nprint(ANS*M%mod)\n","# from math import factorial\nfrom sys import exit\nn,m,k = map(int, input().split())\nif m == 1:\n    if k == n-1:\n        print(1)\n    else:\n        print(0)\n    exit()\nMOD = 998244353\n\nans = tmp = (m * (m-1) ** (n-1)) % MOD\n\nfor i in range(k):\n    tmp *= (n-1-i)\n    tmp %= MOD\n    tmp *= pow((m-1) * (i+1), -1, MOD)\n    ans += tmp\n    ans %= MOD\n\nprint(ans)","M=998244353\nclass Factorial:\n    def __init__(self,n):\n        self.f=f=[0]*(n+1)\n        f[0]=b=1\n        for i in range(1,n+1):f[i]=b=b*i%M\n        self.inv=inv=[0]*(n+1)\n        inv[n]=b=pow(self.f[n],-1,M)\n        for i in range(n,0,-1):inv[i-1]=b=b*i%M\n    def factorial(self,i):\n        return self.f[i]\n    def ifactorial(self,i):\n        return self.inv[i]\n    def comb(self,n,k):\n        if n>=k:return self.f[n]*self.inv[n-k]*self.inv[k]%M\n        else:return 0\ncomb=Factorial(10**5*5).comb\nn,m,k=map(int,input().split())\nprint(sum(m*comb(n-1,i)*pow(m-1,~i+n,M)for i in range(k+1))%M)","N,M,K = map(int,input().split())\n\np = 998244353\n# \u4f55\u500b\u3092\u540c\u3058\u8272\u306e\u7d44\u306b\u3059\u308b\u304b0~K\ncnt = 0\ncom = 1\nfor k in range(K+1):\n    l = N-k\n    # N-1\u500b\u306e\u7d44\u306e\u3046\u3061\u3069\u308c\u3092\u540c\u3058\u8272\u306b\u3059\u308b\u304bN-1Ck\n    # \u305d\u308c\u305e\u308c\u3067\u3001N-k\u500b\u3092\u5225\u306e\u8272\u306e\u9806\u5217\u306b\u3059\u308b\n    # M*(M-1)**(N-k-1)\n    x = pow((M-1),(l-1),p)\n    cnt += M * x * com\n    cnt %= p\n\n    # \u6b21\u306ek\u306enCk\n    com *= N-(k+1)\n    com *= pow(k+1,p-2,p)\n    com %= p\n\n\nprint(cnt)\n","n,m,k=map(int,input().split())\nmod=998244353\nans=0\ndef mfact(n,mod):\n    f=[1]\n    for i in range(1,n+1):\n        f.append(f[-1]*i%mod)\n    return f\nf=mfact(n-1,mod)\nfor i in range(k+1):\n    ans+=(m*pow(m-1,n-i-1,mod)*f[n-1]*pow(f[n-1-i],mod-2,mod)*pow(f[i],mod-2,mod))%mod\nprint(ans%mod)","import sys\nsys.setrecursionlimit(100000)\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\nm = [1, M]\nk = M\nfor _ in range(1, N+1):\n  k = k*(M-1)%mod\n  m.append(k)\nans = []\n\n\ndef solve(now, pairs, colors):\n  if now == N:\n    ans.append(m[colors])\n    return 0\n  elif pairs == K:\n    colors += N - now\n    ans.append(m[colors])\n    return 0\n  else:\n    solve(now+1, pairs+1, colors)\n    solve(now+1, pairs, colors+1)\n\n\nsolve(1, 0, 1)\n\n\n#print(ans)\na = 0\nfor _ in range(len(ans)):\n  a += ans[_]\n  a %= mod\nprint(a)","import numpy as np\n\n\nclass mod_calc():\n    def __init__(self, divisor, max_n):\n        # assume prime\n        self._divisor = divisor\n        # nsq = math.ceil(math.sqrt(max_n))\n        # feature fix_n? max_k?\n        fact = np.empty((max_n+1,), dtype=int)\n        fact[1] = fact[0] = f = 1\n        for i in range(2, len(fact)):\n            f = (f * i) % divisor\n            fact[i] = f\n        self._fact = fact\n        fact_inv = np.empty((max_n+1,), dtype=int)\n        fact_inv[max_n] = fi = pow(int(fact[max_n]), divisor-2, divisor)\n        for i in range(max_n, 2, -1):\n            fi = (fi * i) % divisor\n            fact_inv[i-1] = fi\n        fact_inv[1] = fact_inv[0] = 1\n        self._fact_inv = fact_inv\n\n    def comb(self, n, k):\n        k = min(k, n-k)\n        if k == 0 or k == n:\n            return 1\n        return self.mul(self._fact[n], self._fact_inv[n-k], self._fact_inv[k])\n\n    def pow(self, a, n):\n        return pow(a, n, self._divisor)\n\n    def mul(self, *a):\n        # TODO montogomery\n        # https:\/\/ikatakos.com\/pot\/programming_algorithm\/number_theory\/montgomery_multiplication\n        r = a[0]\n        for m in a[1:]:\n            r = (r * m) % self._divisor\n        return r\n\n    def sum(self, *a):\n        r = a[0]\n        for m in a[1:]:\n            r = (r + m) % self._divisor\n        return r\n\n\ndef main():\n    N, M, K = [int(x) for x in input().split()]\n    if M == 1:\n        return 1\n    if N == 1:\n        return M\n    c = mod_calc(998244353, N-1)\n    count = 0\n    for k in range(K+1):\n        count = c.sum(c.mul(c.comb(N-1,k), M, c.pow(M-1, N-k-1)), count)\n    return count\n\n\nif __name__ == \"__main__\":\n    print(main())\n","n,m,k = map(int,input().split())\nmod = 998244353\ndef inv(x):\n  y = 1\n  while x != 1:\n    y *= mod \/\/ x + 1\n    y %= mod\n    x -= mod % x\n  return y\n#print(inv(2))\nnow = m\nfor _ in range(n-1):\n  now *= m-1\n  now %= mod\nans = int(now)\nfor i in range(k):\n  now *= inv(m-1)\n  now *= n-1-i\n  now *= inv(i+1)\n  now %= mod\n  #print(now)\n  ans += now\n  ans %= mod\nprint(ans)","# \u30d5\u30a7\u30eb\u30de\u30fc\u306e\u5c0f\u5b9a\u7406\nN, M, K = map(int, input().split())\n\nm = 998244353\n\nresult = 0\nn = 1\nk = 1\nfor i in range(K + 1):\n    # result += M * mcomb(N - 1, i) * pow(M - 1, N - 1 - i, 998244353)\n    result += n * pow(k, m - 2, m) * pow(M - 1, N - 1 - i, m)\n    result %= m\n    n *= N - 1 - i\n    n %= m\n    k *= i + 1\n    k %= m\nresult *= M\nresult %= m\nprint(result)\n","import sys\nstdin = sys.stdin\nsys.setrecursionlimit(10**6)\nni = lambda: int(ns())\nna = lambda: list(map(int, stdin.readline().split()))\nnn = lambda: list(stdin.readline().split())\nns = lambda: stdin.readline().rstrip()\n\nn,m,k = na()\nmod = 998244353\n\n\nfact = [0] * 220000\ninvfact = [0] * 220000\n \nfact[0] = 1\nfor i in range(1, 220000):\n    fact[i] = fact[i-1] * i % mod\n \ninvfact[220000 - 1] = pow(fact[220000 - 1], mod-2, mod)\n \nfor i in range(220000 - 2, -1, -1):\n    invfact[i] = invfact[i+1] * (i+1) % mod\n \ndef nCk(n, k):\n    if k < 0 or n < k:return 0\n    return fact[n] * invfact[k] * invfact[n-k] % mod\n \nans = 0\n\nfor i in range(k+1):\n    ans += pow(m-1,n-i-1,mod)*nCk(n-1,i)\n\nprint(ans*m%mod)","def cmb(n, r, p):\n    return (fac[n] * pow(fac[r], p - 2, p) * pow(fac[n - r], p - 2, p)) % p\n\n\np = 998244353\nN, M, K = map(int, input().split())\nfac = [1] * (max(N, M) + 1)\nfor i in range(1, max(N, M) + 1):\n    fac[i] = (fac[i - 1] * i) % p\n\nans = 0\nfor k in range(K + 1):\n    ans += M * pow(M - 1, N - k - 1, p) * cmb(N - 1, k, p)\n    ans %= p\nprint(ans)\n","from sys import stdin\ninput = stdin.readline\n\nN, M, K = map(int, input().split())\nmod = 998244353\n\n\nC = [-1] * (N + 1)\n\n\ndef comb(n, r):\n    if r > n - r:\n        C[r] = C[n - r]\n\n    if r == 0:\n        C[0] = 1\n\n    if C[r] != -1:\n        return C[r]\n    else:\n        C[r] = comb(n, r - 1) * (n + 1 - r) * pow(r, mod - 2, mod)\n        C[r] %= mod\n        return C[r]\n\n\nans = 0\n\nfor i in range(K + 1):\n    ans += M * pow(M - 1, N - 1 - i, mod) * comb(N - 1, i)\n    ans %= mod\n\nprint(ans)\n# print(C)\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> observatories in AtCoder Hill, called Obs. <var>1<\/var>, Obs. <var>2<\/var>, <var>...<\/var>, Obs. <var>N<\/var>. The elevation of Obs. <var>i<\/var> is <var>H_i<\/var>.\nThere are also <var>M<\/var> roads, each connecting two different observatories. Road <var>j<\/var> connects Obs. <var>A_j<\/var> and Obs. <var>B_j<\/var>.<\/p>\n<p>Obs. <var>i<\/var> is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. <var>i<\/var> using just one road.\nNote that Obs. <var>i<\/var> is also good when no observatory can be reached from Obs. <var>i<\/var> using just one road.<\/p>\n<p>How many good observatories are there?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>2 \\leq N \\leq 10^5<\/var><\/li>\n<li><var>1 \\leq M \\leq 10^5<\/var><\/li>\n<li><var>1 \\leq H_i \\leq 10^9<\/var><\/li>\n<li><var>1 \\leq A_i,B_i \\leq N<\/var><\/li>\n<li><var>A_i \\neq B_i<\/var><\/li>\n<li>Multiple roads may connect the same pair of observatories.<\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>M<\/var>\n<var>H_1<\/var> <var>H_2<\/var> <var>...<\/var> <var>H_N<\/var>\n<var>A_1<\/var> <var>B_1<\/var>\n<var>A_2<\/var> <var>B_2<\/var>\n<var>:<\/var>\n<var>A_M<\/var> <var>B_M<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of good observatories.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>4 3\n1 2 3 4\n1 3\n2 3\n2 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<ul>\n<li>\n<p>From Obs. <var>1<\/var>, you can reach Obs. <var>3<\/var> using just one road. The elevation of Obs. <var>1<\/var> is not higher than that of Obs. <var>3<\/var>, so Obs. <var>1<\/var> is not good.<\/p>\n<\/li>\n<li>\n<p>From Obs. <var>2<\/var>, you can reach Obs. <var>3<\/var> and <var>4<\/var> using just one road. The elevation of Obs. <var>2<\/var> is not higher than that of Obs. <var>3<\/var>, so Obs. <var>2<\/var> is not good.<\/p>\n<\/li>\n<li>\n<p>From Obs. <var>3<\/var>, you can reach Obs. <var>1<\/var> and <var>2<\/var> using just one road. The elevation of Obs. <var>3<\/var> is higher than those of Obs. <var>1<\/var> and <var>2<\/var>, so Obs. <var>3<\/var> is good.<\/p>\n<\/li>\n<li>\n<p>From Obs. <var>4<\/var>, you can reach Obs. <var>2<\/var> using just one road. The elevation of Obs. <var>4<\/var> is higher than that of Obs. <var>2<\/var>, so Obs. <var>4<\/var> is good.<\/p>\n<\/li>\n<\/ul>\n<p>Thus, the good observatories are Obs. <var>3<\/var> and <var>4<\/var>, so there are two good observatories.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>3\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 300 points\n\n\nProblem StatementThere are N observatories in AtCoder Hill, called Obs. 1, Obs. 2, ..., Obs. N. The elevation of Obs. i is H_i.\nThere are also M roads, each connecting two different observatories. Road j connects Obs. A_j and Obs. B_j.\nObs. i is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. i using just one road.\nNote that Obs. i is also good when no observatory can be reached from Obs. i using just one road.\nHow many good observatories are there?\n\n\n\n\nConstraints\n2 \\leq N \\leq 10^5\n1 \\leq M \\leq 10^5\n1 \\leq H_i \\leq 10^9\n1 \\leq A_i,B_i \\leq N\nA_i \\neq B_i\nMultiple roads may connect the same pair of observatories.\nAll values in input are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN M\nH_1 H_2 ... H_N\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n\n\n\n\n\nOutputPrint the number of good observatories.\n\n\n\n\n\n\nSample Input 14 3\n1 2 3 4\n1 3\n2 3\n2 4\n\n\n\n\n\nSample Output 12\n\n\n\nFrom Obs. 1, you can reach Obs. 3 using just one road. The elevation of Obs. 1 is not higher than that of Obs. 3, so Obs. 1 is not good.\n\n\nFrom Obs. 2, you can reach Obs. 3 and 4 using just one road. The elevation of Obs. 2 is not higher than that of Obs. 3, so Obs. 2 is not good.\n\n\nFrom Obs. 3, you can reach Obs. 1 and 2 using just one road. The elevation of Obs. 3 is higher than those of Obs. 1 and 2, so Obs. 3 is good.\n\n\nFrom Obs. 4, you can reach Obs. 2 using just one road. The elevation of Obs. 4 is higher than that of Obs. 2, so Obs. 4 is good.\n\n\nThus, the good observatories are Obs. 3 and 4, so there are two good observatories.\n\n\n\n\n\nSample Input 26 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6\n\n\n\n\n\nSample Output 23\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>There are <var>N<\/var> observatories in AtCoder Hill, called Obs. <var>1<\/var>, Obs. <var>2<\/var>, <var>...<\/var>, Obs. <var>N<\/var>. The elevation of Obs. <var>i<\/var> is <var>H_i<\/var>.\nThere are also <var>M<\/var> roads, each connecting two different observatories. Road <var>j<\/var> connects Obs. <var>A_j<\/var> and Obs. <var>B_j<\/var>.<\/p>\n<p>Obs. <var>i<\/var> is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. <var>i<\/var> using just one road.\nNote that Obs. <var>i<\/var> is also good when no observatory can be reached from Obs. <var>i<\/var> using just one road.<\/p>\n<p>How many good observatories are there?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>2 \\leq N \\leq 10^5<\/var><\/li>\n<li><var>1 \\leq M \\leq 10^5<\/var><\/li>\n<li><var>1 \\leq H_i \\leq 10^9<\/var><\/li>\n<li><var>1 \\leq A_i,B_i \\leq N<\/var><\/li>\n<li><var>A_i \\neq B_i<\/var><\/li>\n<li>Multiple roads may connect the same pair of observatories.<\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var> <var>M<\/var>\n<var>H_1<\/var> <var>H_2<\/var> <var>...<\/var> <var>H_N<\/var>\n<var>A_1<\/var> <var>B_1<\/var>\n<var>A_2<\/var> <var>B_2<\/var>\n<var>:<\/var>\n<var>A_M<\/var> <var>B_M<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of good observatories.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>4 3\n1 2 3 4\n1 3\n2 3\n2 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<ul>\n<li>\n<p>From Obs. <var>1<\/var>, you can reach Obs. <var>3<\/var> using just one road. The elevation of Obs. <var>1<\/var> is not higher than that of Obs. <var>3<\/var>, so Obs. <var>1<\/var> is not good.<\/p>\n<\/li>\n<li>\n<p>From Obs. <var>2<\/var>, you can reach Obs. <var>3<\/var> and <var>4<\/var> using just one road. The elevation of Obs. <var>2<\/var> is not higher than that of Obs. <var>3<\/var>, so Obs. <var>2<\/var> is not good.<\/p>\n<\/li>\n<li>\n<p>From Obs. <var>3<\/var>, you can reach Obs. <var>1<\/var> and <var>2<\/var> using just one road. The elevation of Obs. <var>3<\/var> is higher than those of Obs. <var>1<\/var> and <var>2<\/var>, so Obs. <var>3<\/var> is good.<\/p>\n<\/li>\n<li>\n<p>From Obs. <var>4<\/var>, you can reach Obs. <var>2<\/var> using just one road. The elevation of Obs. <var>4<\/var> is higher than that of Obs. <var>2<\/var>, so Obs. <var>4<\/var> is good.<\/p>\n<\/li>\n<\/ul>\n<p>Thus, the good observatories are Obs. <var>3<\/var> and <var>4<\/var>, so there are two good observatories.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>3\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 300 points\n\n\nProblem StatementThere are N observatories in AtCoder Hill, called Obs. 1, Obs. 2, ..., Obs. N. The elevation of Obs. i is H_i.\nThere are also M roads, each connecting two different observatories. Road j connects Obs. A_j and Obs. B_j.\nObs. i is said to be good when its elevation is higher than those of all observatories that can be reached from Obs. i using just one road.\nNote that Obs. i is also good when no observatory can be reached from Obs. i using just one road.\nHow many good observatories are there?\n\n\n\n\nConstraints\n2 \\leq N \\leq 10^5\n1 \\leq M \\leq 10^5\n1 \\leq H_i \\leq 10^9\n1 \\leq A_i,B_i \\leq N\nA_i \\neq B_i\nMultiple roads may connect the same pair of observatories.\nAll values in input are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN M\nH_1 H_2 ... H_N\nA_1 B_1\nA_2 B_2\n:\nA_M B_M\n\n\n\n\n\nOutputPrint the number of good observatories.\n\n\n\n\n\n\nSample Input 14 3\n1 2 3 4\n1 3\n2 3\n2 4\n\n\n\n\n\nSample Output 12\n\n\n\nFrom Obs. 1, you can reach Obs. 3 using just one road. The elevation of Obs. 1 is not higher than that of Obs. 3, so Obs. 1 is not good.\n\n\nFrom Obs. 2, you can reach Obs. 3 and 4 using just one road. The elevation of Obs. 2 is not higher than that of Obs. 3, so Obs. 2 is not good.\n\n\nFrom Obs. 3, you can reach Obs. 1 and 2 using just one road. The elevation of Obs. 3 is higher than those of Obs. 1 and 2, so Obs. 3 is good.\n\n\nFrom Obs. 4, you can reach Obs. 2 using just one road. The elevation of Obs. 4 is higher than that of Obs. 2, so Obs. 4 is good.\n\n\nThus, the good observatories are Obs. 3 and 4, so there are two good observatories.\n\n\n\n\n\nSample Input 26 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6\n\n\n\n\n\nSample Output 23\n\n\n","solve_rate":0.5292106013,"codenet_problem_id":"p02689","input_testcases":{"56":"4 2\n2 4 3 4\n1 3\n1 1\n2 1","14":"6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n5 6\n4 6","85":"6 5\n8 6 9 1 1 1\n1 3\n4 1\n4 1\n4 2\n4 6","80":"4 2\n2 4 3 5\n1 3\n4 3\n0 4","54":"4 3\n1 4 3 3\n1 3\n2 3\n2 4","83":"6 5\n8 6 9 1 3 1\n1 3\n4 2\n4 3\n5 6\n1 6","45":"4 3\n1 4 3 5\n1 3\n4 3\n2 4","29":"4 2\n2 4 3 8\n1 3\n1 1\n2 1","63":"4 2\n2 4 3 8\n1 2\n1 1\n2 1","8":"4 3\n1 2 3 5\n1 3\n3 3\n2 4","100":"6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6","40":"6 5\n8 6 6 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6","27":"4 3\n1 4 3 3\n1 3\n3 3\n2 1","69":"4 2\n2 7 2 5\n1 4\n3 1\n0 4","1":"4 3\n1 2 3 4\n1 3\n3 3\n2 4","78":"4 3\n1 3 3 5\n1 3\n4 3\n2 4","6":"4 3\n1 6 3 3\n1 3\n2 2\n3 4","79":"4 2\n2 7 3 5\n1 3\n3 3\n0 4","10":"4 3\n1 4 3 5\n1 3\n3 3\n2 4","11":"4 3\n2 4 3 5\n1 3\n3 3\n2 4","97":"6 5\n8 6 6 1 2 1\n1 3\n1 2\n4 3\n4 6\n6 6","42":"4 3\n1 2 3 4\n1 3\n3 3\n1 4","44":"4 3\n1 3 3 5\n1 3\n3 3\n2 4","84":"6 5\n1 6 9 1 4 1\n1 3\n4 2\n4 1\n4 6\n4 6","50":"6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n5 6\n1 6","91":"4 2\n2 4 3 8\n1 2\n2 1\n2 1","94":"4 2\n4 7 2 5\n1 4\n3 1\n0 4","75":"4 3\n1 2 3 4\n1 1\n3 3\n1 4","102":"4 3\n1 2 3 4\n1 3\n2 3\n2 4","93":"4 1\n1 4 3 8\n1 3\n1 0\n2 1","34":"4 1\n2 4 3 8\n1 3\n1 1\n2 1","22":"4 2\n2 4 3 5\n1 3\n1 1\n2 1","58":"4 3\n2 1 3 4\n1 3\n2 2\n2 4","67":"4 1\n1 4 3 8\n1 3\n1 1\n2 1","17":"4 3\n1 2 6 4\n1 3\n3 3\n2 4","15":"4 3\n1 1 3 4\n1 3\n2 3\n2 4","52":"4 3\n1 2 1 4\n1 3\n3 3\n2 4","73":"6 5\n8 6 6 1 2 1\n1 3\n1 2\n4 3\n4 6\n4 6","19":"4 3\n1 4 3 3\n1 3\n3 3\n2 4","101":"4 3\n1 2 3 4\n1 3\n2 3\n2 4","77":"4 3\n1 3 3 5\n1 3\n3 4\n2 4","24":"4 3\n2 1 3 4\n1 3\n2 3\n2 4","51":"6 5\n8 6 9 1 4 1\n1 3\n4 2\n4 1\n4 6\n4 6"},"output_testcases":{"56":"3\n","14":"3\n","85":"3\n","80":"2\n","54":"1\n","83":"3\n","45":"1\n","29":"3\n","63":"3\n","8":"1\n","100":"3\n","40":"3\n","27":"2\n","69":"2\n","1":"1\n","78":"1\n","6":"0\n","79":"2\n","10":"1\n","11":"1\n","97":"2\n","42":"2\n","44":"1\n","84":"3\n","50":"3\n","91":"3\n","94":"2\n","75":"2\n","102":"2\n","93":"3\n","34":"3\n","22":"3\n","58":"2\n","67":"3\n","17":"1\n","15":"2\n","52":"1\n","73":"2\n","19":"1\n","101":"2\n","77":"1\n","24":"2\n","51":"3\n"},"n_missing":60,"programs":["n, m = map(int,input().split())\n\nh = list(map(int,input().split()))\n\ntemp_h = h.copy()\n\nmax_h = max(h)\n\nfor _ in range(m):\n    x1, x2 = map(int,input().split())\n\n    if h[x1 - 1] == h[x2 - 1]:\n        temp_h[x1 - 1] = max_h + 1\n        temp_h[x2 - 1] = max_h + 1\n        continue\n\n    temp_h[x1 - 1] = max([temp_h[x1 - 1], h[x2 - 1]])\n    temp_h[x2 - 1] = max([h[x1 - 1], temp_h[x2 - 1]])\n\nres = [1 if x - y else 0 for x, y in zip(h, temp_h)]\n\nprint(sum(res))","n, m = map(int, input().split())\nhs = list(map(int, input().split()))[:n]\n\nobservatory_list = [{i: hs[i-1]} for i in range(n)]\nbads = set()\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    \n    for i, observatory in enumerate(observatory_list):\n        if not observatory:\n            continue\n            \n        val = max(observatory.values())\n        if a in observatory:\n            if hs[b-1] > val:\n                observatory_list[i] = None\n                continue            \n            observatory[b] = hs[b-1]\n            \n        if b in observatory:\n            if hs[a-1] > val:\n                observatory_list[i] = None\n                continue\n            observatory[a] = hs[a-1]\n        \nprint(sum([_ for d in observatory_list if d]))\n","N, M = map(int, input().split())\nH_ = list(map(int,input().split()))\nH = [0]\nH.extend(H_)\nD = dict()\nfor i in range(M):\n    t_ = list(map(int,input().split()))\n    if t_[0] not in D.keys():\n        D[t_[0]] = [t_[1]]\n    else:\n        D[t_[0]].append(t_[1])\n    if t_[1] not in D.keys():\n        D[t_[1]] = [t_[0]]\n    else:\n        D[t_[1]].append(t_[0])\nret = list()\nfor v in D.keys():\n    L = D[v]\n    for i in range(len(L)):\n        if H[v] <= H[L[i]]:\n            break\n        if i == len(L) - 1:\n            ret.append(v)\nnum = N - len(D.keys()) + len(ret)\nprint(num)","n,m=list(map(int, input().split()))\nh=list(map(int, input().split()))\naa = []\nab = []\nfor j in range(m):\n    a1,b1=[int(j) for j in input().split()]\n    aa.append(a1)\n    ab.append(b1)\nd=[1]*n\nfor i in range (m):\n    x=aa[i]-1\n    y=ab[i]-1\n    if h[x]>h[y]:\n        d[y]=0\n    elif h[x]==h[y]:\n        d[x]=0\n        d[y]=0\n    else:\n        d[x]=0\nsu=0\nfor f in range(n):\n    su+=d[f]\nprint(su)\n","import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    n,m=map(int,input().split())\n    H=[int(_) for _ in input().split()]\n    HH= [[0]*2 for _ in range(n)] \n\n    for i in range(m):\n        a,b=map(int,input().split())\n        if HH[a-1][0]==0:\n            HH[a-1][0]=H[b-1]\n        else:\n            HH[a-1][1]=H[b-1]\n        if HH[b-1][0]==0:\n            HH[b-1][0]=H[a-1]\n        else:\n            HH[b-1][1]=H[a-1]\n    ans=0\n    for i,hh in enumerate(HH):\n        if H[i]>max(hh):\n            ans+=1\n    print(ans)\n\nif __name__=='__main__':\n    main()","n, m = map(int, input().split())\nhyoko = list(map(int, input().split()))\nmichi = []\nresult = [0 for x in range(0, n)]\ncount = 0\n\nfor i in range(0, m):\n  \tmichi = list(map(int, input().split()))\n  \tif hyoko[michi[0]-1] < hyoko[michi[1]-1]:\n  \t    if result[michi[1]-1] == 0:\n  \t        count += 1\n  \t    result[michi[1]-1] += 1\n  \telse:\n  \t    if result[michi[0]-1] == 0:\n  \t        count += 1\n  \t    result[michi[0]-1] += 1\n\nprint(count)","N,M = map(int, input().split())\nH = list(map(int, input().split()))\n\nx = list(range(N+1))\n\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    if H[a-1] > H[b-1]:\n        x[b] = 0\n    elif H[a-1] < H[b-1]:\n        x[a] = 0\n    else:\n        x[a] = 0\n        x[b] = 0\n\nx = set(x)\nprint(len(x)-1)\n","N,M = map(int,input().split())\nH= list(map(int,input().split()))\n\nX = [1]*N\nfor i in range(M):\n    a,b = map(int,input().split())\n    x1 = H[a-1]\n    x2 = H[b-1]\n    if x1 < x2:\n        X[a-1] = False\n        if X[b-1] != False:\n            X[b-1] = True\n\n    else:\n        X[b-1] = False\n        if X[a-1] != False:\n            X[a-1] = True\nprint(X.count(True))    ","n, m = map(int, input().split())\nh = list(map(int, input().split()))\nway = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    way[a-1].append(b-1)\n    way[b-1].append(a-1)\nans = 0\nfor i in range(n):\n    ans += 1\n    for j in range(len(way[i])):\n        if h[i] <= h[way[i][j]]:\n            ans -= 1\n            break\nprint(ans)","point = [0]*n\napp = [0]*n\ncnt = []\n\nfor i in ab:\n    app[i[0]-1] += 1\n    app[i[1]-1] += 1\n    if h[i[0]-1] > h[i[1]-1]:\n        point[i[0]-1] += 1\n    elif h[i[0]-1] < h[i[1]-1]:\n        point[i[1]-1] += 1\nfor i in range(n):\n    if app[i] == point[i]:\n        cnt.append(i+1)\nprint(cnt)","n,m=map(int,input().split())\na=[int(i) for i in input().split()]\ns=0\nb=[]\nfor i in range(m):\n  b.append([])\nfor i in range(m):\n  p1,p2=map(int,input().split())\n  if a[p1-1]>a[p2-1]:\n    b[p1-1].append(1)\n    b[p2-1].append(0)\n  else:\n    b[p2-1].append(0)\n    b[p1-1].append(1)\nfor i in b:\n  if sum(i)==len(i):\n    s+=1\nprint(s)\n  \n  ","import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(100000)\n\n\ndef main():\n    N, M = [int(i) for i in input().strip().split()]\n    hights = [int(i) for i in input().strip().split()]\n    routes = [[int(i) for i in input().strip().split()] for _ in range(M)]\n\n    counter = 0\n    ans_table = [1] * N\n\n    for route in routes:\n        idx_0 = route[0] - 1\n        idx_1 = route[1] - 1\n        if hights[idx_0] > hights[idx_1]:\n            ans_table[idx_1] = 0\n        elif hights[idx_0] < hights[idx_1]:\n            ans_table[idx_0] = 0\n        else:\n            ans_table[idx_0] = 0\n            ans_table[idx_1] = 0\n\n    return sum(ans_table)\n\n\nif __name__ == \"__main__\":\n    print(main())\n","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0]*n\nans = n\nfor i in range(m):\n  b, c = map(int, input().split())\n  b -= 1\n  c -= 1\n  a[b] += 1\n  a[c] += 1\n  if h[b] == h[c]:\n    if a[b] == 1 and a[c] == 1:\n      ans -= 2\n    elif a[b] == 1 and a[c] != 1:\n      ans -= 1\n    elif a[b] != 1 and a[c] == 1:\n      ans -= 1\n  if h[b] > h[c]:\n    if a[c] == 1:\n      ans -= 1\n  if h[b] < h[c]:\n    if a[b] == 1:\n      ans -= 1\nprint(ans)","import sys\nsys.setrecursionlimit(10000000)\nfrom collections import defaultdict\n\nN, M = map(int, input().split())\nh = list(map(int, input().split()))\nflg = [1]*N\nfor i in range(M):\n    a, b = map(lambda x : int(x)-1, input().split())\n    if h[a] <= h[b]:\n        flg[a] = 0\n    if h[b] <= h[a]:\n        flg[b] = 0\nprint(sum(flg))","n,m=map(int,input().split())\nlis=list(map(int,input().split()))\npath=[1 for i in range(n)]\nfor i in range(m):\n  a,b=map(int,input().split())\n  if lis[a-1] >= lis[b-1]:\n    path[b-1] =0\n  if lis[a-1] <= lis[b-1]:\n    path[a-1] =0\n    \nprint(path.count(1))","import sys\ninput = sys.stdin.readline\nN,M = map(int,input().split())\n#\u4f4e\u3044\u3084\u3064\u3092\u5f15\u3044\u3066\u3044\u304f\u611f\u3058\nHlist = list(int(x) for x in input().split())\n\nflag = [1]*N\n\nfor i in range(M):\n    A,B = map(int, input().split())\n    A -= 1\n    B -= 1\n    if(Hlist[A] == Hlist[B]) :\n        flag[A] = 0\n        flag[B] = 0\n    elif(Hlist[A] > Hlist[B]) :\n        flag[B] = 0\n    else:\n        flag[A] = 0\nprint(sum(flag))\n","from collections import defaultdict\n\nn, m= list(map(int,input().split()))\nh = list(map(int,input().split()))\nh = [0] + h\n\ngood = [False] + [True]*n\n\nwhile m:\n    m -= 1\n    a, b = list(map(int,input().split()))\n    if h[a] < h[b]:\n        good[a] = False\n    elif h[a]==h[b]:\n        good[a] = good[b] = False\n    else:\n        good[b] = False\n\nprint(good.count(True))\n\n    \n","n,m=map(int,input().split())\narr=[0]+list(map(int,input().split()))\ng=[[] for _ in range(n+1)]\nfor _ in range(m):\n a,b=map(int,input().split())\n g[a].append(b)\n g[b].append(a)\nans=0\nfor v in range(1,n+1):\n for u in g[v]: #i\u756a\u76ee\u306e\u5c55\u671b\u53f0\u304b\u30891\u672c\u306e\u9053\u3092\u901a\u3063\u3066\u3044\u3051\u308b\u3059\u3079\u3066\u306e\u5c55\u671b\u53f0\u3068\u9ad8\u3055\u3092\u6bd4\u8f03\u3059\u308b\n   if arr[u]>=arr[v]:\n     break\n else: #i\u756a\u76ee\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u304c\u4ed6\u306e\u3059\u3079\u3066\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u3088\u308a\u771f\u306b\u5927\u304d\u3051\u308c\u3070\u7b54\u3048\u30921\u5897\u3084\u3059\n   ans+=1\nprint(ans)","#C\u554f\u984c\nN,M = map(int, input().split())\nH = input().split()\nresult = [True] * N\nH_i = [int(s) for s in H]\nbothCount = 0\nfor i in range(M):\n    A,B = map(int, input().split())\n    if(H_i[A-1] > H_i[B-1]):\n        #A\u304cB\u3088\u308a\u3082\u9ad8\u304b\u3063\u305f\u3089A\u304c\u3044\u3044\u5c55\u671b\u53f0\n        if(result[B-1] == True):\n            result[B-1] = False\n        result[A-1] = True\n    elif(H_i[A-1] < H_i[B-1]):\n        if(result[A-1] == True):\n            result[A-1] = False\n        result[B-1] = True\n    else:\n        result[A-1] = False\n        result[B-1] = False\nCount = 0\nCount = result.count(True)\nprint(Count)","n ,m = map(int,input().split())\n#h\u306fi\u756a\u76ee\u306bi+1\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u304c\u3042\u308b\nh = []\nx = input().split()\nfor i in range(len(x)):\n    h.append(int(x[i]))\n#(a,b)\u306e\u7d44\u307f\u3092tuple\u3067\u5165\u529b\nroad = []\nfor i in range(m):\n    a,b = map(int,input().split())\n    road.append((a,b))\n\ntotal = 0\n\nfor i in range(n):\n    max_value = h[i]\n    for j in range(m):\n        if i+1 in road[j] :\n            if max_value < max(h[road[j][0]-1],h[road[j][1]-1])\n                max_value = -1\n            elif h[road[j][0]-1] == h[road[j][1]-1]: \n                max_value = -1\n        else:\n            pass\n    if max_value >0:\n        total += 1\n\nprint(total)","n,m=map(int,input().split())\nh=[0]+list(map(int,input().split()))\ngood=[1]*(n+1)\ngood[0]=0\nfor i in range(m):\n  a,b=map(int,input().split())\n  if h[a]<h[b]:\n    good[a]=0\n  elif h[a]>h[b]:\n    good[b]=0\n  else:\n    good[a]=0\n    good[b]=0\nprint(sum(good))","n, m = map(int, input().split())\nh_list = [[int(h), []] for h in input().split()]\nfor i in range(m):\n    a, b = map(int, input().split())\n    h_list[a - 1][1].append(b - 1)\n    h_list[b - 1][1].append(a - 1)\nans = 0\nfor h in h_list:\n    if all([h[0] > h_list[h_][0] for h_ in h[1]]):\n        ans += 1\nprint(ans)","N,M = map(int,input().split(' '))\nH = [int(i) for i in input().split(' ')]\nAB = []\nfor i in range(M):\n    A,B = map(int,input().split(' '))\n    if H[A-1] == H[B-1]:\n        continue\n    elif max(H[A-1],H[B-1]) == H[A-1]:\n        AB.append(A)\n    else:\n        AB.append(B)\n        \nprint(len(set(AB)))","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nAB = []\n\n\ngood = [0] * N\n\nfor i in range(M):\n  ab = sorted(list(map(int,input().split())))\n  if ab not in AB and ab[0] != ab[1]:\n    AB.append(ab)\n\nyet = list(set(sum(AB,[])))\nyetnot = [i for i in range(1,N + 1) if i not in yet]\n\nfor i in range(len(AB)):\n  A = AB[i][0] - 1\n  B = AB[i][1] - 1\n  if H[A] > H[B]:\n    good[A] = 1\n    good[B] = 0\n  elif H[A] < H[B]:\n    good[A] = 0\n    good[B] = 1\n  else:\n    good[A] = 0\n    good[B] = 0\n  \ngood = [i for i in good if i == 1]\n  \nans = len(good) + len(yetnot)\nprint(ans)","import numpy as np\n\ninputs = []\nwhile True:\n  try:\n    inputs.append(input())\n  except EOFError:\n    break\n\n# print(inputs)\n\nobsv = eval(inputs[0].split(\" \")[0])\npathway = eval(inputs[0].split(\" \")[1])\nheights = [eval(a) for a in inputs[1].split(\" \")]\nways = sorted(set([tuple([eval(b) for b in a.split(\" \")]) for a in inputs[2:]]))\n\nadj_matrix = np.zeros((obsv, obsv))\nfor i in range(1, obsv+1):\n  for j in range(1, obsv+1):\n    if (i,j) in ways:\n      adj_matrix[i-1,j-1]=1\n      adj_matrix[j-1,i-1]=1\n\n# print(adj_matrix)\n\nno_conn = len(np.where(np.sum(adj_matrix, axis=0)==0)[0])\n# print(no_conn)\n\nways_inv = [(j,i) for (i,j) in ways]\nways.extend(ways_inv)\nways = sorted(ways)\n\n# print(ways)\n\ncount = no_conn\nstart = 1\nis_good = []\nfor w in ways:\n  is_good.append(heights[start-1] > heights[w[1]-1])\n  if start != w[0]:\n    if np.all(is_good):\n        count += 1\n    start = w[0]\n    is_good = []\nif np.all(is_good):\n  count += 1\n  \nprint(count)","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nmemo = [[] for _ in range(N+1)]\nfor i in range(M):\n    a,b = map(int,input().split())\n    memo[a].append(b)\n    memo[b].append(a)\n    \ncount = 0\nfor i in range(1,N+1):\n    #print(memo[i])\n    if len(memo[i]) > 0:\n        for j in memo[i]:\n            if H[j-1] > H[i-1]:\n                break\n        else:\n            #print(i)\n            count += 1\n\nprint(count)\n#print(memo)","N, M = map(int, input().split(' '))\nH = list(map(int, input().split(' ')))\ntable = [1 for _ in range(N)]\n\nfor _ in range(M):\n    A, B = map(int, input().split(' '))\n    Ah, Bh = H[A - 1], H[B - 1]\n\n    if Ah >= Bh:\n        table[B - 1] = 0\n    if Ah <= Bh:\n        table[A - 1] = 0\n\nans = table.count(1)\n\nprint(ans)","N,M = map(int,input().split())\nH = [int(i) for i in input().split()]\nAB = [list(map(int,input().split())) for _ in range(M)]\nlist_N = list(range(1,N+1))\nfor j in range(M):\n    if H[AB[j][0]-1]<H[AB[j][1]-1]:\n        if AB[j][0] in list_N:\n            list_N.remove(AB[j][0])\n    elif H[AB[j][0]-1]>H[AB[j][1]-1]:\n        if AB[j][1] in list_N:\n            list_N.remove(AB[j][1])\n    else:\n        if AB[j][0] in list_N:\n            list_N.remove(AB[j][0])\n        if AB[j][1] in list_N:\n            list_N.remove(AB[j][1])\nprint(len(list_N))","n, m = map(int, input().split())\n\nh = list(map(int, input().split()))\n\nflags = [True] * n\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if h[a-1] > h[b-1]:\n        flags[b-1] = False\n    if h[b-1] > h[a-1]:\n        flags[a-1] = False\n    else:\n        flags[a-1] = False\n        flags[b-1] = False\n\nprint(flags.count(True))\n","n,m=map(int, input().split())\nh=list(map(int,input().split()))\nnl=[0]*(n+1)\n\nfor i in range(m):\n  a,b=map(int, input().split())\n  if h[a-1]<=h[b-1]:\n    nl[b-1]=1\n    nl[a-1]=0\n  else:\n    nl[a-1]=1\n    nl[b-1]=0\n#print(nl)\nprint(sum(nl))","import sys\nfrom math import factorial\nfrom collections import Counter\nfrom fractions import Fraction\nimport heapq, bisect, fractions\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nMOD = 10**9 + 7\n\nn, m = MAP()\nH = LIST()\nlow = [0]*m\nfor i in range(m):\n    a, b= MAP()\n    if H[a-1] == H[b-1]:\n        low.append(a-1)\n        low.append(b-1)\n    elif H[a-1] < H[b-1]:\n        low.append(a-1)\n    else:\n        low.append(b-1)\n\nprint(n-len(set(low)))","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\ncount = 0\nfor i in range(m):\n    a[i], b[i] = map(int, input().split())\nfor i in range(n):\n    flg = 0 \n    for j in range(m):\n        if a[j] == i + 1:\n            if h[i] < h[b[j]-1]:\n                flg = 1\n        if b[j] == i + 1:\n            if h[i] < h[a[j]-1]:\n                flg = 1\n    if flg == 0:\n        count += 1\nprint(count)","#C\nn, m = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\n\nresult = [1 for _ in range(n)]\nfor _ in range(m):\n    a, b = list(map(int, input().split()))\n    if h[a-1] < h[b-1]:\n        result[b-1] = 1\n        result[a-1] = 0\n    elif h[a-1] > h[b-1]:\n        result[b-1] = 0\n        result[a-1] = 1\n    else:\n        result[b-1] = 0\n        result[a-1] = 0\n    \nprint(result.count(1))\n","def solve(edges, h):\n    neighbors = [set() for x in range(len(h)+1)]\n    for edge in edges:\n        neighbors[edge[0]].add(edge[1])\n        neighbors[edge[1]].add(edge[0])\n    result = -1\n    for i, node in enumerate(neighbors):\n        height = h[i-1]\n        good = True\n        for neighbor in node:\n            if height <= h[neighbor-1]:\n                good = False\n                break\n        if good:\n            result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    edges = [[int(x) for x in input().split()] for y in range(m)]\n    print(solve(edges, h))","n,m = map(int,input().split())\nh = list(map(int,input().split())\njudge = [True] * n\n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if h[a-1] >= h[b-1]:\n        judge[b-1] = False\n    else:\n        judge[a-1] = False\n        \nprint(judge.count(True))","N, M = map(int, input().split())\n\nH = list(map(int, input().split()))\n\ngood_H = [1] * N\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    if H[A-1] < H[B-1]:\n        good_H[A-1] = 0\n    elif H[A-1] > H[B-1]:\n        good_H[B-1] = 0\n    elif H[A-1] == H[B-1] and good_H[A-1] == 0 or good_H[B-1] == 0:\n        good_H[A-1] = 0\n        good_H[B-1] = 0\n\nprint(good_H.count(1))","from heapq import heappush, heappop\n\nN, M = [int(v) for v in input().split()]\n\nq = []\nfor i, h in enumerate([int(v) for v in input().split()]):\n    heappush(q, (h, i))\n\nnet = [[] for _ in range(N)]\n\nfor _ in range(M):\n    a, b = [int(v) - 1 for v in input().split()]\n    net[a].append(b)\n    net[b].append(a)\n\ncount = 0\nclosed = 0\nwhile q:\n    h, i = heappop(q)\n\n    if closed & (1 << i):\n        continue\n\n    count += 1\n    closed |= (1 << i)\n\n    for j in net[i]:\n        closed |= (1 << j)\n\nprint(count)\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nma = [0]*N\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    ma[a-1] = max(ma[a-1], H[b-1])\n    ma[b-1] = max(ma[b-1], H[a-1])\nans = 0\nfor i in range(1, N):\n    if ma[i] < H[i]:\n        ans += 1\nprint(ans)\n","n,k=map(int,input().split(\" \"))\nl=list(map(int,input().split(\" \")))\nd={}\nfor i in l:\n    d[i]=[]\ncount=0\nfor i in range(k):\n    a,b=map(int,input().split(\" \"))\n    d[a].append(b)\n    d[b].append(a)\n#print(d)\nfor key,val in d.items():\n    if len(val)==0:\n        count+=1\n    for i in val:\n       if l[key] > l[i]:\n           count+=1\n    \n\n   \nprint(count)","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\nfor i in range(m):\n    a[i], b[i] = map(int, input().split())\n\ncnt = 0\n\nlose_flag = [0] * n\nfor j in range(m):\n    if h[a[j]-1] < h[b[j]-1]:\n        lose_flag[a[j]-1] = 1\n    elif h[a[j]-1] > h[b[j]-1]:\n        lose_flag[b[j]-1] = 1\n    elif h[a[j]-1] == h[b[j]-1]:\n        lose_flag[a[j]-1] = 1\n        lose_flag[b[j]-1] = 1\n\ncnt += lose_flag.count(0)\n\nprint(cnt)","n, m = map(int, input().split())\n\nl = set()\nfor i in range(n):\n    l.add(i+1)\n\nh = list(map(int, input().split()))\n\ns = set()\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    if h[a-1] == h[b-1]:\n        s.add(a)\n        s.add(b)\n    if h[a-1] < h[b-1]:\n        s.add(a)\n    if h[a-1] > h[b-1]:\n        s.add(b)\n\n#    print(s)\n\nans = list(l - s)\n#print(ans)\nprint(len(ans))\n\n\n\n\n\n\n\n","N, M = map(int,input().split())\nlistH = list(map(int, input().split()))\n\nlistM = [list(map(int, input().split())) for i in range(M)]\n\nlistC = [1 for i in range(N)]\n\nfor pair in listM:\n    if listH[pair[0]-1] > listH[pair[1]-1]:\n        listC[pair[1]-1] -= 1\n    elif listH[pair[0]-1] < listH[pair[1]-1]:\n        listC[pair[0]-1] -= 1\n    else:\n        listC[pair[1]-1] -= 1\n        listC[pair[0]-1] -= 1\n        \ncnt = 0\n\nfor i in listC:\n    if i == 1:\n        cnt += 1\n        \nprint(cnt)","import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprl = lambda x: print(*x ,sep='\\n')\n\nn,m = nm()\nh = nl()\npath = [[False]*n for _ in range(n)]\n\nfor i in range(n):\n    path[i][i] = True \n\nfor i in range(m):\n    a,b = nm()\n    path[a-1][b-1] = path[b-1][a-1] = True\n\nres = 0\nfor i,j in enumerate(path):\n    temp = []\n    for k,l in enumerate(j):\n        if l:\n            temp.append(h[k])\n    ma = max(temp)\n    if temp.count(ma) == 1 and  ma == h[i]:\n        res += 1\n\nprint(res)","number=list(map(int,input().split()))\nn,m=number[0],number[1]\nheight=list(map(int,input().split()))\nload=[[] for i in range(n+1)]\nfor i in range(m):\n    tmp=list(map(int,input().split()))\n    if tmp[1] not in load[tmp[0]]:\n        load[tmp[0]].append(tmp[1])\n    if tmp[0] not in load[tmp[1]]:\n        load[tmp[1]].append(tmp[0])\n\n\nanswer=0\n\nfor i in range(1,n+1):\n    while load[i] != []:\n        if height[i-1]<height[load[i][-1]-1]:\n            break\n        load[i].pop()\n        if load[i] == []:\n            answer+=1\n        \nprint(answer)\n            ","x = list(map(int,input().split(\" \")))\nn,m = x\nh = list(map(int,input().split(\" \")))\nlowerlist = [1] * n\nprint(h)\n\nfor i in range(m):\n    ab = list(map(int,input().split(\" \")))\n    a,b = ab\n    print(a)\n    print(b)\n    # print(ab)\n    if h[a-1] >= h[b-1]:\n        lowerlist[b-1] = 0\n    if h[b-1] >= h[a-1]:\n        lowerlist[a-1] = 0\n    print(lowerlist)\n\nprint(sum(lowerlist))","N,M=map(int,input().split(' '))\nH=list(map(int,input().split(' ')))\n\ndata=[]\nfor n1 in range(N):\n  data.append([])\n  for n2 in range(N):\n    data[n1].append(0)\n    \nfor m in M:\n  a,b=map(int,input().split(' '))\n  data[a-1][b-1]=H[b-1]\n  data[b-1][a-1]=H[a-1]\nans=0\nfor n in N:\n  if H[n-1]>max(data[n-1]):\n    ans+=1\nprint(ans)","n_m=list(map(int, input().split()))\nh=list(map(int, input().split()))\nroads=[None for i in range(n_m[1])]\ncount=0\nfor i in range(n_m[1]):\n    a_b=list(map(int, input().split()))\n    roads[i]=a_b\nfor i in range(n_m[0]):\n    flag = 1\n    height=h[i]\n    for j in roads:\n        if(j.count(i+1)>0):\n           higher=max(h[j[0]-1],h[j[1]-1])\n           if(higher!=h[i]):\n            flag=0\n            break\n    if(flag==1):\n        count+=1\nfor i in roads:\n    if(roads.count(i)>1):\n        count-=(roads.count(i))+(roads.count(i)-1)\nprint(count)\n\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\ng = [1]*n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if h[a-1] >= h[b-1]:\n        g[b-1] = 0\n    if h[b-1] >= h[a-1]:\n        g[a-1] = 0\nprint(sum(g))","def solve():\n    N,M = [int(i) for i in input().split()]\n    H = [int(i) for i in input().split()]\n    ans = set([i for i in range(1, N+1)])\n    for i in range(M):\n        A,B = [int(i) for i in input().split()]\n        if H[A-1] < H[B-1]:\n            if A in ans:\n                ans.remove(A)\n        elif H[B-1] < H[A-1]:\n            if B in ans:\n                ans.remove(B)\n        else:\n            if A in ans:\n                ans.remove(A)\n            if B in ans:\n                ans.remove(B)\n    print(len(ans))\n\nif __name__ == \"__main__\":\n    solve()","i = input()\ni = i.split(' ')\nl = []\nwhile len(l)<int(i[0]):\n  l += [0]\n\nlim = int(i[1])\n\ni = input()\ni = i.split(' ')\nfor j in list(range(len(l))):\n    i[j]=int(i[j])\n\n\ncount=0\nwhile count<lim:\n    count += 1\n    k = input()\n    k = k.split(' ')\n    if i[int(k[0])-1]==i[int(k[1])-1]:\n        l[int(k[1])-1] = 1\n        l[int(k[0])-1] = 1\n    elif i[int(k[0])-1]>i[int(k[1])-1]:\n        l[int(k[1])-1] = 1\n    else:\n        l[int(k[0])-1] = 1\n\ncount = 0\nfor j in l:\n    if j==0:\n        count += 1\nprint(count)\n  \n","import collections\nN, M = map(int, input().split())\n\nH = list(map(int, input().split()))\n\nA = [0] * M\nB = [0] * M\ncount = 0\nfor i in range(M):\n    A[i], B[i] = map(int, input().split())\n\nfor i in range(1, N+1):\n    if not (i in A) and not (i in B):\n        count += 1\n# print(count)\ntaller = []\nsmaller = []\nfor i in range(M):\n    taller.append(max([H[A[i]-1], H[B[i]-1]]))\n    smaller.append(min([H[A[i]-1], H[B[i]-1]]))\n\nlist(set(taller) & set(smaller))\n\nc = collections.Counter(taller)\ncount = count + len(c)\nprint(count - len(list(set(taller) & set(smaller))))","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nL = [1 for _ in range(N)]\n\nfor i in range(M):\n    A,B = map(int,input().split())\n    ma = H[A-1]\n    mb = H[B-1]\n    if (ma > mb):\n        L[B-1] = 0\n    elif (ma == mb):\n        L[B-1] = 0\n        L[A-1] = 0\n    else:\n        L[A-1] = 0\nprint(sum(L))","n,m = map(int,input().split())\nh=[]\nh.extend(input().split())\nh=list(map(int,h))\ncnt = [0]*n\ncnt2 = [0]*n\nans = 0\n\nfor i in range(m):\n  a,b = map(int,input().split())\n  if h[a-1] > h[b-1]:\n    cnt[a-1] += 1  \n  if h[a-1] < h[b-1]:\n    cnt[b-1] +=1\n  cnt2[a-1] +=1\n  cnt2[b-1] +=1\n\nfor p in range(n):\n  if cnt[p]==cnt2[p]:\n    ans += 1\nprint(ans)\n","import math\nimport pprint\nimport fractions\nimport collections\nimport itertools\nN,M=map(int,input().split())\nH=list(map(int,input().split()))\ntree=[[] for _ in range(N)]\nfor i in range(M):\n    a,b=map(int,input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\nl=[1]*N\nfor i in range(N):\n    flag=1\n    for j in tree[i]:\n        if H[i]<=H[j]:\n            flag=0\n    l[i]=flag\nprint(sum(l))\n\n\n\n\n","N , M = map ( int , input().strip().split(\" \") ) ;\nL0 = list ( map ( int , input().strip().split(\" \") ) ) ;\nL1 = [ 1 for x in range ( N ) ] ;\n\nfor x in range ( M ) :\n\ta , b  = map ( int , input().strip().split(\" \") ) ;\n\t\n\tif  L0[a-1] > 0 and L0[a-1] <= L0[b-1] :\n\t\tL1[a-1] = 0 ;\n\n\tif  L0[b-1] > 0 and L0[b-1] <= L0[a-1] :\n\t\tL1[b-1] = 0 ;\nprint ( sum(L1 ) ) ;\n","# -*- coding: utf-8 -*-\n\nN,M = map(int, input().split())\nh_l = list(map(int, input().split()))\n\nall_l = list(range(1,N+1))\nlose_l = []\nwhile M > 0:\n    a,b = map(int, input().split())\n    if h_l[a-1] > h_l[b-1]:\n        lose_l.append(b)\n    if h_l[a-1] < h_l[b-1]:\n        lose_l.append(a)\n    else:\n        lose_l.append(a)\n        lose_l.append(b)\n    M -= 1\n\nresult = list(set(all_l) - set(lose_l))\nprint(len(result))","N,M=map(int,input().split())\nH=list(map(int,input().split()))\nln=[i for i in range(N)]\nx=0\nfor i in range(M):\n    a,b=map(int,input().split())\n    a=a-1\n    b=b-1\n    if H[a]==H[b]:\n        if a in ln:\n            ln[a]=N\n            x+=1\n        if b in ln:\n            ln[b]=N\n            x+=1\n    elif H[a]>H[b]:\n        if b in ln:\n            ln[b]=N\n            x+=1\n    else:\n        if a in ln:\n            ln[a]=N\n            x+=1\nprint(x)\n","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nAB = []\nfor _ in range(M):\n    AB.append(list(map(int,input().split())))\n\nans = [1] * N\nfor i in range(M):\n    if H[AB[i][0]-1] < H[AB[i][1]-1]:\n        ans[AB[i][0]-1] = 0\n    elif H[AB[i][0]-1] > H[AB[i][1]-1]:\n        ans[AB[i][1]-1] = 0\n    else:\n        ans[AB[i][0]-1] = 0\n        ans[AB[i][1]-1] = 0\n\nprint(sum(ans))","N,M = map(int, input().split())\n\ngoodObservatory = [1]*N\nH = []\nH = input()\n\nfor i in range(M):\n\tA,B = map(int, input().split())\n\tif H[A-1] > H[B-1]:\n\t\tgoodObservatory[B-1] = 0\n\telif H[A-1] < H[B-1]:\n\t\tgoodObservatory[A-1] = 0\n\telif H[A-1] == H[B-1]:\n\t\tgoodObservatory[A-1] = 0\n\t\tgoodObservatory[B-1] = 0\n\nprint(sum(goodObservatory))","N,M = map(int,input().split())\nH=list(map(int,input().split()))\nABmap=[[] for i in range(N)]\ncount=0\nfor i in range(M):\n    A,B=map(lambda x:x-1,map(int,input().split()))\n    ABmap[A].append(H[B])\n    ABmap[B].append(H[A])\n        \nfor i in range(N):\n    if len(ABmap[i])==0:\n        count+=1\n    elif max(ABmap[i])<H[i]:\n        count+=1\n   # print(ABmap[i])\n    #print(count)\n        \n    ","n, m = map(int, input().split())\nh = list(map(int, input().split()))\nab = [list(map(int, input().split())) for i in range(m)]\nfor i in range(m):\n  h[min(ab[i][0]-1, ab[i][1])-1] = 0\nh = [i for i in h if i != 0]\nprint(len(h))","import sys\nN,M=map(int,input().split())\nH=list(map(int,input().split()))\n\n#print(N,M,H)\n\nbad=set()\nfor ln in sys.stdin:\n    A,B=map(int,ln.split())\n    x,y=H[A-1],H[B-1]\n    if x>y:\n        bad.add(y)\n    elif x<y:\n        bad.add(x)\n    else:\n        bad.add(x)\n        bad.add(y)\n\nprint(N-len(bad))\n","class Observatory:\n    def __init__(self, height):\n        self.height = height\n        self.around = []\n\n    def is_good(self, li, di):\n        flag = True\n        for i in self.around:\n            oo = li[i - 1]\n            if oo.height >= self.height:\n                flag = False\n            else:\n                di[i - 1] = False\n        return flag\n\n\nn, m = map(int, input().split())\nh = [int(i) for i in input().split()]\nobservatories = [Observatory(h[i]) for i in range(n)]\ndic = {}\nfor i in range(n):\n    dic[i] = True\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    observatories[a - 1].around.append(b)\n    observatories[b - 1].around.append(a)\n\nans = 0\n\nfor i in range(n):\n    o = observatories[i]\n    if dic[i]:\n        if o.is_good(observatories, dic):\n            ans += 1\n\nprint(ans)\n","n,m = list(map(int,input().strip().split()))\nh = list(map(int,input().split()))\ntemp = [1] * n\nans = int(0)\nfor i in range(m):\n    a,b = list(map(int,input().strip().split()))\n    if h[a-1] > h[b-1]:\n        temp[b-1] *= 0\n    elif h[a-1] == h[b-1]:\n        temp[a-1] *= 0\n        temp[b-1] *= 0\n    else:\n        temp[a-1] *= 0\nans += temp.count(1)\nprint(ans)","#n = int(input())\nn, m = map(int, input().split())\nhl = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\n\nisgood = [True for _ in range(n)]\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    if hl[a-1] <= hl[b-1]:\n        isgood[a-1] = False\n    if hl[b-1] <= hl[a-1]:\n        isgood[b-1] = False\nprint(isgood.count(True))\n","n,m=map(int,input().split())\nheights=list(map(int,input().split()))\nheights_w=sorted([(h,i+1) for i,h in enumerate(heights)])[::-1]\ncons={i+1:set() for i in range(n)}\nfor _ in range(m):\n  a,b=map(int,input().split())\n  cons[a].add(b)\n  cons[b].add(a)\n\ndebug=False\nwatched=set()\nres=0\nif debug: res_m=set()\nfor h,i in heights_w:\n  if i in watched:\n    continue\n  watched.add(i)\n  flg=True\n  for con in cons[i]:\n    if debug: print(h,heights[con-1],i,con)\n    flg=(flg and h>heights[con-1])\n    watched.add(con)\n  if debug: print(i,h,flg)\n  if flg:\n    if debug: res_m.add(i)\n    res+=1\nif debug: print(heights_w,cons,res_m)\nprint(res)\n\n","n,m=map(int,input().split())\nh1=list(map(int,input().split()))\nh2=[0]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    if h1[a-1] == h1[b-1]:\n        h2[a-1]=1\n        h2[b-1]=1\n    elif h1[a-1] < h1[b-1]:\n        h2[a-1]=1\n    else:\n        h2[b-1]=1\nprint(h2.count(0))","## import\n\n## function definition \n\n## main process\nif __name__ == '__main__':\n    \n    N, M = map(int,input().split())\n    HEIGHT_LIST = list(map(int,input().split())) \n    \n    ans = [1] * N\n    for j in range(M):\n        a, b = map(int,input().split())\n        a -= 1\n        b -= 1\n        height_a = HEIGHT_LIST[a]\n        height_b = HEIGHT_LIST[b]\n\n        if height_a < height_b:\n            ans[point_a] = 0\n        elif height_a > height_b:\n            ans[point_b] = 0\n        else:\n            ans[point_a] = 0\n            ans[point_b] = 0\n    print(sum(ans))","import numpy as np\n\nN,M   = list(map(int,input().split()))\nHlist = list(map(int,input().split()))\nHdict = {i:Hlist[i] for i in range(len(Hlist))}\n# adj = [[0 for _ in range(N)] for _ in range(N)]\n\n# for line in Mlist:\nbad_set = set()\nfor _ in range(M):\n    line = list(map(int,input().split()))\n    if Hdict[line[0]-1] <= Hdict[line[1]-1]:\n        bad_set.add(line[0])\n    if Hdict[line[1]-1] <= Hdict[line[0]-1]:\n        bad_set.add(line[1])\nprint(N-len(bad_set))","n,m = map(lambda x:int(x),input().split())\nheights = list(map(lambda x:int(x),input().split()))\ngood = 0\nobscon = {}\nfor i in range(n):\n  obscon[i] = [-1]\nfor i in range(m):\n  a,b = map(lambda x:int(x)-1,input().split())\n  obscon[a].append(b)\n  obscon[b].append(a)\nfor i in range(n):\n  if obscon[i] == [-1]:\n    good += 1\n  else:\n    obscon[i].remove(-1)\n    tall = 1\n    for j in obscon[i]:\n      if heights[i]>heights[j]:\n        tall = min(tall,1)\n      else:\n        tall = min(tall,0)\n    if tall == 1:\n      good += 1\nprint(good)","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nab = [[] for i in range(n)]\n\nfor i in range(m):\n    x1, y1 = [int(i) for i in input().split()]\n    ab[x1-1].append(y1-1)\n    ab[y1-1].append(x1-1)\n\nans = 0\n\nfor i in range(n):\n    ok = 1\n    for j in range(len(ab[i])):\n        #print(i)\n        if h[i] >h[ab[i][j]]:\n            continue\n        else:\n            ok = 0\n            break\n\n    if ok == 1:\n        #print(i)\n        ans += 1\n\nprint(ans)\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nx = [[10**6+l] for l in range(n)] \ncnt = 0\nfor _ in range(m):\n    w,q = map(int,input().split())\n    if w not in x[q-1]:\n        x[q-1].append(w)\n    if q not in x[w-1]:\n        x[w-1].append(q)\nfor i in range(n):\n        cnt += 1\n        for j in range(1,len(x[i])):\n            if h[i] <= h[x[i][j]-1]:\n                cnt -= 1\n                break\nprint(cnt)\n","n,m = map(int, input().split())\nh = list(map(int, input().split()))\nroad_list = [list(map(int, input().split()))]\nfor _ in range(m-1):\n    road_list.append(list(map(int,input().split())))\n\nlower_set = set()\nfor road in road_list:\n    \n    if h[road[0]-1] > h[road[1]-1]:\n        lower_set.add(road[1]-1)\n        \n    elif h[road[0]-1] < h[road[1]-1]:\n        lower_set.add(road[0]-1)\n\ncount = 0\nfor i in range(n):\n    if not i in lower_set:\n        count += 1\nprint(count)\n","n, m = map(int,input().split())\nh = list(map(int,input().split()))\nn_ans=[1]*n\n\nfor i in range(m):\n    a, b = map(int,input().split())\n    if h[a-1] <= h[b-1] and n_ans[a-1] == 1:\n        n_ans[a-1] = 0\n    if h[a-1] <= h[a-1] and n_ans[b-1] == 1:\n        n_ans[b-1] = 0\nprint(sum(n_ans))\n\n","import copy\n\ndef main():\n  n,m = map(int,input().split())\n  s = [int(n) for n in input().split()]\n  cs = copy.copy(s)\n  for i in range(m):\n    a,b = map(int,input().split())\n    a-=1\n    b-=1\n    if(s[a] < s[b]):\n      cs[a] = -1\n    elif(s[a] == s[b]):\n      cs[a] = -1\n      cs[b] = -1\n    elif(s[b] < s[a]):\n      cs[b] = -1\n  print(cs)\n  print()\n  print(len(cs)-cs.count(-1))\n      \nif __name__ == '__main__':\n  main()","n,m=map(int,input().split())\nh=list(map(int,input().split()))\nx=[1]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    if h[a-1]>=h[b-1]:\n        x[b-1]=0\n    if h[a-1]<=h[b-1]:\n        x[a-1]=0\nprint(sum(x))","#c\nimport numpy as np\nn, m = map(int, input().split())\nhlist = list(map(int, input().split()))\nmlist = []\n\nfor i in range(m):\n    ml = list(map(int, input().split()))\n    mlist.append(ml)    \n    \n# n=6\n# m=5\n# hlist=[8, 6, 9, 1, 2, 1]\n# m1=[1, 3]\n# m2=[4,2]\n# m3=[4,3]\n# m4=[4,6]\n# m5=[4,6]\n\n# mlist = [m1,m2,m3,m4,m5]\n# print(mlist)\n\ntest = np.array(np.zeros(n**2).reshape(n,n))\ncounter = 0\n\nfor mlist_x in mlist:\n    test[[mlist_x[0]-1], [mlist_x[1]-1]] = hlist[mlist_x[1]-1]\n    test[[mlist_x[1]-1], [mlist_x[0]-1]] = hlist[mlist_x[0]-1]\n\nfor i in range(n):\n    test[[i],[i]] = hlist[i]\n\nfor i in range(n):\n    if (max(test[i])==test[i][i]) and (len(np.where(test[i]==test[i].max())[0])==1):\n        counter += 1\n    else:\n        pass\nprint(test)\nprint(counter)","N,M=map(int,input().split())\nH=list(map(int,input().split()))\n\nlabel=[-1]*N\nEdge=[[] for _ in range(N)]\nfor i in range(M):\n    A,B=map(int,input().split())\n    Edge[A-1].append(B-1)\n    Edge[B-1].append(A-1)\n\nout=0\nfor i in range(N):\n    if label[i]==-1:\n        S=0\n        CN=0\n        stack=[i]\n        while stack:\n            T=stack.pop()\n            label[T]=0\n            for ii in Edge[i]:\n                if label[ii]==-1:\n                    stack.append(ii)\n            if S<H[T]:\n                S=H[T]\n                CN=1\n            else:\n                CN=0\n        out+=CN\nprint(out)","def getInts():\n    return [ int(x) for x in input().split() ]\n\n[N,M] = getInts()\nH = getInts()\nG = {}\nfor i in range(1,N+1):\n    G[i] = set()\nAs = []\nBs = []\nfor i in range(M):\n    [A,B] = getInts()\n    G[A].add(B)\n    G[B].add(A)\n\ngoodCount = 0\nfor i in range(1,N+1):\n    if all([ H[nei-1] < H[i-1] for nei in G[i] ]):\n        goodCount += 1\nprint(goodCount)\n","N,M = map(int,input().split(\" \"))\nh_list = list(map(int,input().split(\" \")))\nroad = [[] for i in range(N)]\nfor i in range(M):\n    a,b = map(int,input().split(\" \"))\n    road[a-1].append(b-1)\n    road[b-1].append(a-1)\ngood_obs = [0 for i in range(N)]\nfor i in range(N):\n    if len(road[i]) == 0:\n        good_obs[i] = 1\n    else:\n        h_max = 0\n        for j in road[i]:\n            h_max = max(h_max,h_list[j])\n        if h_max < h_list[i]:\n            good_obs[i] = 1\nprint(good_obs.count(1))\n","N, M = map(int, input().split())\nH_list = list(map(int, input().split()))\nAB = []\n\nfor i in range(M):\n    ab = list(map(int, input().split()))\n    AB.append(ab)\n\nl = [1 for i in range(N)]\nfor ab in AB:\n    a = ab[0]-1\n    b = ab[1]-1\n\n    if H_list[a] < H_list[b]:\n        l[a] = 0\n    else:\n        l[b] = 0\n\nprint(sum(l))\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nv = [0 for i in range(N)]\nab = []\nfor i in range(M):\n  l = list(map(int, input().split()))\n  ab.append(l)\n  \nfor val in ab:\n  if H[val[0] - 1] == H[val[1] - 1]:\n    v[val[0] - 1] = 1\n    v[val[1] - 1] = 1\n  elif H[val[0] - 1] < H[val[1] - 1]:\n    v[val[0] - 1] = 1\n  else:\n    v[val[1] - 1] = 1\n    \nans = v.count(0)\nprint(ans)","def solve(way, height, n):\n  ss = set()\n  for a,b in way:\n    if height[a-1] == height[b-1]:\n      ss = ss | {a,b}\n    else:\n      remove_idx = a if height[a-1] < height[b-1] else b\n      ss = ss | {remove_idx}\n  return n - len(ss)\n\n\nif __name__ == \"__main__\":\n  n,m = map(int, input().split())\n  height = [int(i) for i in input().split()]\n  way = [tuple(map(int, input().split())) for i in range(m)]\n  print(way)\n  print(solve(way, height, n))\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nla = [0] * n\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    la[a] = max(la[a],h[b])\n    la[b] = max(la[b],h[a])\n\nans = 0\n    \nfor i in range(n):\n    if la[i] < h[i]:\n        ans += 1\n        \nprint(ans)","def LI():return list(map(int,input().split()))\nn,m=LI()\nh=LI()\nedge=[[] for i in range(n)]\nfor i in range(m):\n  a,b=LI()\n  edge[a-1].append(b-1)\n  edge[b-1].append(a-1)\nans=0\nfor i in range(n):\n  if all([h[i]>h[j] for j in edge[i]]):\n    ans+=1\nprint(ans)","#n=int(input())\n#n,m=list(map(int,input().split()))\n#a=list(map(int,input().split()))\nimport math\nimport itertools\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\n\nimport heapq\n\ndef bfs(c,nu,di,node,val):\n    c[nu]=True\n    di[val[nu]]+=1\n    for each in node[nu]:\n        if c[each]:\n            continue\n        di=bfs(c,each,di,node,val)\n    return di\n\n\n\n\n\nn,k=list(map(int,input().split()))\nh=list(map(int,input().split()))\n#node=[i for i in h]\nnode=[defaultdict(int) for _ in range(n) ]\nfor _ in range(k):\n    i,v=list(map(int,input().split()))\n    i-=1\n    v-=1\n    \"\"\"\n    if node[i]>node[v]:\n        node[v]=node[i]\n    elif node[i]<node[v]:\n        node[i]=node[v]\n    \"\"\"\n    #node[i]=max(node[i],h[v])\n    #node[v]=max(node[v],h[i])\n    #node[i].append(v)\n    #node[v].append(i)\n    node[i][h[v]]+=1\n    node[v][h[i]]+=1\n\n#print(node)\ncheck=[False for _ in range(n)]\nans=0\nfor i in range(n):\n    t=node[i]\n    if len(t)==0:\n        ans+=1\n        continue\n    if max(t.keys())<h[i]:\n        #print(i)\n        ans+=1\nprint(ans)\n    \n","n,m=map(int,input().split())\narr=[0]+list(map(int,input().split()))\ng=[[] for _ in range(n+1)]\nfor _ in range(m):\n  a,b=map(int,input().split())\n  g[a].append(b)\n  g[b].append(a)\nans=0\nfor v in range(1,n+1):\n  for u in g[v]:\n    if arr[u]>=arr[v]:\n      break\n  else:\n    ans+=1\nprint(ans)","# coding: utf-8\n# Your code here!\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(m):\n        a, b = map(int, input().split())\n        d[a].append(h_list[b-1])\n        d[b].append(h_list[a-1])\n    \n    count = 0\n    for i, h in enumerate(h_list):\n        if len(d[i+1]) == 0:\n            count += 1\n            continue\n        max_h = max(d[i+1])\n        if max_h < h:\n            count += 1\n    \n    print(count)\n    \nmain()\n","# C - Peaks\ndef main():\n    N, M, *HAB = map(int, open(0).read().split())\n    H, AB = [0] + HAB[:N], HAB[N:]\n    good_observatories = set(range(1, N + 1))\n    for a, b in zip(*[iter(AB)] * 2):\n        if H[a] >= H[b]:\n            good_observatories.discard(b)\n        if H[b] >= H[a]:\n            good_observatories.discard(a)\n    print(len(good_observatories))\n\n\nif __name__ == \"__main__\":\n    main()\n","def main():\n    N, M = map(int, input().split())\n    H = [int(h) for h in input().split()]\n    is_Good = [True for i in range(N)]\n\n    for i in range(M):\n        A, B = map(int, input().split())\n        if H[A-1] <= H[B-1]:\n            is_Good[A-1] = False\n        if H[B-1] <= H[A-1]:\n            is_Good[B-1] = False\n\n    cnt = 0\n    for i in range(N):\n        if is_Good[i] == True:\n            cnt += 1\n\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()","N, M = map(int, input().split()) \nHEIGHT = list(map(int, input().split()))\ntenbou = list(range(1,N+1))\nfor i in range(M):\n    hasi1, hasi2 = map(int, input().split())\n    if HEIGHT[hasi1-1] > HEIGHT[hasi2-1]:\n        try:\n            tenbou.remove(hasi2)\n        except:\n            pass\n        #print(tenbou)\n    if HEIGHT[hasi1-1] < HEIGHT[hasi2-1]:\n        try:\n            tenbou.remove(hasi1)\n        except:\n            pass\n       #print(tenbou)\n    if HEIGHT[hasi1-1] == HEIGHT[hasi2-1]:\n        if hasi1 in tenbou:\n            tenbou.remove(hasi1)\n        if hasi2 in tenbou:\n            tenbou.remove(hasi2)\n        #print(tenbou)\nprint(len(tenbou))","def main():\n    N, M = map(int, input().split())\n    HN = list(map(int, input().split()))\n\n    temp = [True for _ in range(N)]\n    for _ in range(M):\n        A, B = map(int, input().split())\n\n        if HN[A - 1] < HN[B - 1]:\n            temp[A - 1] = False\n        if HN[B - 1] < HN[A - 1]:\n            temp[B - 1] = False\n        else:\n            temp[A - 1] = False\n            temp[B - 1] = False\n\n    print(sum([1 for a in temp if a]))\n\n\nmain()\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\ngood = [True] * N\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    a = a - 1\n    b = b - 1\n    if not H[a] > H[b]:\n        good[a] = False\n    if not H[a] < H[b]:\n        good[b] = False\n\nprint(sum([1 if good[i] else 0 for i in range(N)]))","n,m = map(int,input().split())\n\nh = list(map(int,input().split()))\n\na = [list(map(int,input().split())) for i in range(m)]\n\ngood = [1] * (n+1)\n\n\nfor i in a:\n    if h[i[0]-1] < h[i[1]-1]:\n        good[i[0]] = 0\n    elif h[i[0]-1] > h[i[1]-1]:\n        good[i[1]] = 0\n    else:\n        continue\n\nprint(good.count(1)-1)\n","import collections\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\ndef main():\n    N,M = map(int,input().split())\n    H_list = sorted(list(map(int,input().split())))\n    ab_list = [map(int,input().split()) for _ in range(M)]\n\n    min_set = set()\n    for a,b in ab_list:\n        min_set.add(min(a,b))\n    c = collections.Counter(H_list)\n\n    ans = 0\n    for i in min_set:\n        ans += c[i]\n    print(ans)\n\nmain()\n","n,m = list(map(int, input().split()))\nh = list(map(int, input().split())) \nab =  [[int(_) for _ in input().split()] for __ in range(m)]\n\nn_list =[x for x in range(1,n+1)]\nze = dict(zip(n_list, [0 for i in range(len(n_list))]))\n\nfor i in ab:\n    if (h[i[0]-1]  > h[i[1]-1]):\n        ze[i[1]] += 1\n    elif (h[i[0]-1]  < h[i[1]-1]) :\n        ze[i[0]] += 1\n    elif h[i[0]-1]  == h[i[1]-1]:\n        ze[i[0]] += 1\n        ze[i[1]] += 1\n\nres = 0\nfor k, v in ze.items():\n    if v == 0:\n        res += 1\nprint(res)","from sys import stdin\n\nn, m = list(map(int, input().split()))\nh_n = list(map(int, input().split()))\na_b_m = stdin.readlines()\n\nres = 0\nfor i in range(1, n+1):\n    count = 0\n    count_higher = 0\n    for j in range(m):\n        a, b = [int(x) for x in a_b_m[j].rstrip().split()]\n        if a == i:\n            count = 1\n            if h_n[b-1] >= h_n[a-1]:\n                count_higher = 1\n                break\n        elif b == i:\n            count = 1\n            if h_n[a-1] >= h_n[b-1]:\n                count_higher = 1\n                break\n    if count == 1 and count_higher == 0:\n        res += 1\n    elif count == 0:\n        res += 1\nprint(res)\n","N, M = map(int,input().split())\nH = list(map(int,input().split()))\nans = [1] * N\nfor i in range(M):\n  A, B = map(int, input().split())\n  if H[A - 1] <= H[B -1]:\n    ans[B - 1] = 0\n  elif H[A - 1] >= H[B - 1]:\n    ans[B - 1] = 0\n\n\nprint(sum(ans))","N, M = map(int , input().split())\nH  = list(map(int , input().split()))\nfor i in range(M):\n  A, B = map(int , input().split())\np = 0\nfor i in range(1 , N+1):\n  q = 0\n  C = [0]\n  for j in range(M):\n    if(A == i):\n      b = H[B-1]\n      C.append(b)\n      q += 1\n    elif(B == i):\n      a = H[A-1]\n      C.append(a)\n      q += 1\n    else:\n      C.append(0) \n  G = max(C)\n  if(H[i-1] > G or G==0):\n    p += 1\nprint(p-1)\n","import sys\n\ndef main():\n    N, M = map(int, input().split())\n    H_list = list(map(int, input().split()))\n    AB_list = [[int(_) for _ in input().split()] for i in range(M)]\n\n    tree = [[] for _ in range(N)]\n\n    for a, b in AB_list:\n        tree[a-1].append(b-1)\n        tree[b-1].append(a-1)\n\n    good_observatory = 0\n\n    for i_obs in range(N):\n        if len(tree[i_obs]) == 0:\n            good_observatory += 1\n            continue\n\n        now_height = H_list[i_obs]\n        good_flag = True\n        for i_tree in tree[i_obs]:\n            if now_height <= H_list[i_tree]:\n                good_flag = False\n        if good_flag:\n            good_observatory += 1\n\n    print(good_observatory)\n    return\n\n\n    if a:\n        print('Yes')\n    else:\n        print('No')\n\n    return\n\nif __name__ == '__main__':\n    main()\n    sys.exit(0)"],"raw_generations":["n, m = map(int,input().split())\n\nh = list(map(int,input().split()))\n\ntemp_h = h.copy()\n\nmax_h = max(h)\n\nfor _ in range(m):\n    x1, x2 = map(int,input().split())\n\n    if h[x1 - 1] == h[x2 - 1]:\n        temp_h[x1 - 1] = max_h + 1\n        temp_h[x2 - 1] = max_h + 1\n        continue\n\n    temp_h[x1 - 1] = max([temp_h[x1 - 1], h[x2 - 1]])\n    temp_h[x2 - 1] = max([h[x1 - 1], temp_h[x2 - 1]])\n\nres = [1 if x - y else 0 for x, y in zip(h, temp_h)]\n\nprint(sum(res))","n, m = map(int, input().split())\nhs = list(map(int, input().split()))[:n]\n\nobservatory_list = [{i: hs[i-1]} for i in range(n)]\nbads = set()\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    \n    for i, observatory in enumerate(observatory_list):\n        if not observatory:\n            continue\n            \n        val = max(observatory.values())\n        if a in observatory:\n            if hs[b-1] > val:\n                observatory_list[i] = None\n                continue            \n            observatory[b] = hs[b-1]\n            \n        if b in observatory:\n            if hs[a-1] > val:\n                observatory_list[i] = None\n                continue\n            observatory[a] = hs[a-1]\n        \nprint(sum([_ for d in observatory_list if d]))\n","N, M = map(int, input().split())\nH_ = list(map(int,input().split()))\nH = [0]\nH.extend(H_)\nD = dict()\nfor i in range(M):\n    t_ = list(map(int,input().split()))\n    if t_[0] not in D.keys():\n        D[t_[0]] = [t_[1]]\n    else:\n        D[t_[0]].append(t_[1])\n    if t_[1] not in D.keys():\n        D[t_[1]] = [t_[0]]\n    else:\n        D[t_[1]].append(t_[0])\nret = list()\nfor v in D.keys():\n    L = D[v]\n    for i in range(len(L)):\n        if H[v] <= H[L[i]]:\n            break\n        if i == len(L) - 1:\n            ret.append(v)\nnum = N - len(D.keys()) + len(ret)\nprint(num)","n,m=list(map(int, input().split()))\nh=list(map(int, input().split()))\naa = []\nab = []\nfor j in range(m):\n    a1,b1=[int(j) for j in input().split()]\n    aa.append(a1)\n    ab.append(b1)\nd=[1]*n\nfor i in range (m):\n    x=aa[i]-1\n    y=ab[i]-1\n    if h[x]>h[y]:\n        d[y]=0\n    elif h[x]==h[y]:\n        d[x]=0\n        d[y]=0\n    else:\n        d[x]=0\nsu=0\nfor f in range(n):\n    su+=d[f]\nprint(su)\n","import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    n,m=map(int,input().split())\n    H=[int(_) for _ in input().split()]\n    HH= [[0]*2 for _ in range(n)] \n\n    for i in range(m):\n        a,b=map(int,input().split())\n        if HH[a-1][0]==0:\n            HH[a-1][0]=H[b-1]\n        else:\n            HH[a-1][1]=H[b-1]\n        if HH[b-1][0]==0:\n            HH[b-1][0]=H[a-1]\n        else:\n            HH[b-1][1]=H[a-1]\n    ans=0\n    for i,hh in enumerate(HH):\n        if H[i]>max(hh):\n            ans+=1\n    print(ans)\n\nif __name__=='__main__':\n    main()","n, m = map(int, input().split())\nhyoko = list(map(int, input().split()))\nmichi = []\nresult = [0 for x in range(0, n)]\ncount = 0\n\nfor i in range(0, m):\n  \tmichi = list(map(int, input().split()))\n  \tif hyoko[michi[0]-1] < hyoko[michi[1]-1]:\n  \t    if result[michi[1]-1] == 0:\n  \t        count += 1\n  \t    result[michi[1]-1] += 1\n  \telse:\n  \t    if result[michi[0]-1] == 0:\n  \t        count += 1\n  \t    result[michi[0]-1] += 1\n\nprint(count)","N,M = map(int, input().split())\nH = list(map(int, input().split()))\n\nx = list(range(N+1))\n\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    if H[a-1] > H[b-1]:\n        x[b] = 0\n    elif H[a-1] < H[b-1]:\n        x[a] = 0\n    else:\n        x[a] = 0\n        x[b] = 0\n\nx = set(x)\nprint(len(x)-1)\n","N,M = map(int,input().split())\nH= list(map(int,input().split()))\n\nX = [1]*N\nfor i in range(M):\n    a,b = map(int,input().split())\n    x1 = H[a-1]\n    x2 = H[b-1]\n    if x1 < x2:\n        X[a-1] = False\n        if X[b-1] != False:\n            X[b-1] = True\n\n    else:\n        X[b-1] = False\n        if X[a-1] != False:\n            X[a-1] = True\nprint(X.count(True))    ","n, m = map(int, input().split())\nh = list(map(int, input().split()))\nway = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    way[a-1].append(b-1)\n    way[b-1].append(a-1)\nans = 0\nfor i in range(n):\n    ans += 1\n    for j in range(len(way[i])):\n        if h[i] <= h[way[i][j]]:\n            ans -= 1\n            break\nprint(ans)","point = [0]*n\napp = [0]*n\ncnt = []\n\nfor i in ab:\n    app[i[0]-1] += 1\n    app[i[1]-1] += 1\n    if h[i[0]-1] > h[i[1]-1]:\n        point[i[0]-1] += 1\n    elif h[i[0]-1] < h[i[1]-1]:\n        point[i[1]-1] += 1\nfor i in range(n):\n    if app[i] == point[i]:\n        cnt.append(i+1)\nprint(cnt)","n,m=map(int,input().split())\na=[int(i) for i in input().split()]\ns=0\nb=[]\nfor i in range(m):\n  b.append([])\nfor i in range(m):\n  p1,p2=map(int,input().split())\n  if a[p1-1]>a[p2-1]:\n    b[p1-1].append(1)\n    b[p2-1].append(0)\n  else:\n    b[p2-1].append(0)\n    b[p1-1].append(1)\nfor i in b:\n  if sum(i)==len(i):\n    s+=1\nprint(s)\n  \n  ","import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(100000)\n\n\ndef main():\n    N, M = [int(i) for i in input().strip().split()]\n    hights = [int(i) for i in input().strip().split()]\n    routes = [[int(i) for i in input().strip().split()] for _ in range(M)]\n\n    counter = 0\n    ans_table = [1] * N\n\n    for route in routes:\n        idx_0 = route[0] - 1\n        idx_1 = route[1] - 1\n        if hights[idx_0] > hights[idx_1]:\n            ans_table[idx_1] = 0\n        elif hights[idx_0] < hights[idx_1]:\n            ans_table[idx_0] = 0\n        else:\n            ans_table[idx_0] = 0\n            ans_table[idx_1] = 0\n\n    return sum(ans_table)\n\n\nif __name__ == \"__main__\":\n    print(main())\n","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0]*n\nans = n\nfor i in range(m):\n  b, c = map(int, input().split())\n  b -= 1\n  c -= 1\n  a[b] += 1\n  a[c] += 1\n  if h[b] == h[c]:\n    if a[b] == 1 and a[c] == 1:\n      ans -= 2\n    elif a[b] == 1 and a[c] != 1:\n      ans -= 1\n    elif a[b] != 1 and a[c] == 1:\n      ans -= 1\n  if h[b] > h[c]:\n    if a[c] == 1:\n      ans -= 1\n  if h[b] < h[c]:\n    if a[b] == 1:\n      ans -= 1\nprint(ans)","import sys\nsys.setrecursionlimit(10000000)\nfrom collections import defaultdict\n\nN, M = map(int, input().split())\nh = list(map(int, input().split()))\nflg = [1]*N\nfor i in range(M):\n    a, b = map(lambda x : int(x)-1, input().split())\n    if h[a] <= h[b]:\n        flg[a] = 0\n    if h[b] <= h[a]:\n        flg[b] = 0\nprint(sum(flg))","n,m=map(int,input().split())\nlis=list(map(int,input().split()))\npath=[1 for i in range(n)]\nfor i in range(m):\n  a,b=map(int,input().split())\n  if lis[a-1] >= lis[b-1]:\n    path[b-1] =0\n  if lis[a-1] <= lis[b-1]:\n    path[a-1] =0\n    \nprint(path.count(1))","import sys\ninput = sys.stdin.readline\nN,M = map(int,input().split())\n#\u4f4e\u3044\u3084\u3064\u3092\u5f15\u3044\u3066\u3044\u304f\u611f\u3058\nHlist = list(int(x) for x in input().split())\n\nflag = [1]*N\n\nfor i in range(M):\n    A,B = map(int, input().split())\n    A -= 1\n    B -= 1\n    if(Hlist[A] == Hlist[B]) :\n        flag[A] = 0\n        flag[B] = 0\n    elif(Hlist[A] > Hlist[B]) :\n        flag[B] = 0\n    else:\n        flag[A] = 0\nprint(sum(flag))\n","from collections import defaultdict\n\nn, m= list(map(int,input().split()))\nh = list(map(int,input().split()))\nh = [0] + h\n\ngood = [False] + [True]*n\n\nwhile m:\n    m -= 1\n    a, b = list(map(int,input().split()))\n    if h[a] < h[b]:\n        good[a] = False\n    elif h[a]==h[b]:\n        good[a] = good[b] = False\n    else:\n        good[b] = False\n\nprint(good.count(True))\n\n    \n","n,m=map(int,input().split())\narr=[0]+list(map(int,input().split()))\ng=[[] for _ in range(n+1)]\nfor _ in range(m):\n a,b=map(int,input().split())\n g[a].append(b)\n g[b].append(a)\nans=0\nfor v in range(1,n+1):\n for u in g[v]: #i\u756a\u76ee\u306e\u5c55\u671b\u53f0\u304b\u30891\u672c\u306e\u9053\u3092\u901a\u3063\u3066\u3044\u3051\u308b\u3059\u3079\u3066\u306e\u5c55\u671b\u53f0\u3068\u9ad8\u3055\u3092\u6bd4\u8f03\u3059\u308b\n   if arr[u]>=arr[v]:\n     break\n else: #i\u756a\u76ee\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u304c\u4ed6\u306e\u3059\u3079\u3066\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u3088\u308a\u771f\u306b\u5927\u304d\u3051\u308c\u3070\u7b54\u3048\u30921\u5897\u3084\u3059\n   ans+=1\nprint(ans)","#C\u554f\u984c\nN,M = map(int, input().split())\nH = input().split()\nresult = [True] * N\nH_i = [int(s) for s in H]\nbothCount = 0\nfor i in range(M):\n    A,B = map(int, input().split())\n    if(H_i[A-1] > H_i[B-1]):\n        #A\u304cB\u3088\u308a\u3082\u9ad8\u304b\u3063\u305f\u3089A\u304c\u3044\u3044\u5c55\u671b\u53f0\n        if(result[B-1] == True):\n            result[B-1] = False\n        result[A-1] = True\n    elif(H_i[A-1] < H_i[B-1]):\n        if(result[A-1] == True):\n            result[A-1] = False\n        result[B-1] = True\n    else:\n        result[A-1] = False\n        result[B-1] = False\nCount = 0\nCount = result.count(True)\nprint(Count)","n ,m = map(int,input().split())\n#h\u306fi\u756a\u76ee\u306bi+1\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u304c\u3042\u308b\nh = []\nx = input().split()\nfor i in range(len(x)):\n    h.append(int(x[i]))\n#(a,b)\u306e\u7d44\u307f\u3092tuple\u3067\u5165\u529b\nroad = []\nfor i in range(m):\n    a,b = map(int,input().split())\n    road.append((a,b))\n\ntotal = 0\n\nfor i in range(n):\n    max_value = h[i]\n    for j in range(m):\n        if i+1 in road[j] :\n            if max_value < max(h[road[j][0]-1],h[road[j][1]-1])\n                max_value = -1\n            elif h[road[j][0]-1] == h[road[j][1]-1]: \n                max_value = -1\n        else:\n            pass\n    if max_value >0:\n        total += 1\n\nprint(total)","n,m=map(int,input().split())\nh=[0]+list(map(int,input().split()))\ngood=[1]*(n+1)\ngood[0]=0\nfor i in range(m):\n  a,b=map(int,input().split())\n  if h[a]<h[b]:\n    good[a]=0\n  elif h[a]>h[b]:\n    good[b]=0\n  else:\n    good[a]=0\n    good[b]=0\nprint(sum(good))","n, m = map(int, input().split())\nh_list = [[int(h), []] for h in input().split()]\nfor i in range(m):\n    a, b = map(int, input().split())\n    h_list[a - 1][1].append(b - 1)\n    h_list[b - 1][1].append(a - 1)\nans = 0\nfor h in h_list:\n    if all([h[0] > h_list[h_][0] for h_ in h[1]]):\n        ans += 1\nprint(ans)","N,M = map(int,input().split(' '))\nH = [int(i) for i in input().split(' ')]\nAB = []\nfor i in range(M):\n    A,B = map(int,input().split(' '))\n    if H[A-1] == H[B-1]:\n        continue\n    elif max(H[A-1],H[B-1]) == H[A-1]:\n        AB.append(A)\n    else:\n        AB.append(B)\n        \nprint(len(set(AB)))","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nAB = []\n\n\ngood = [0] * N\n\nfor i in range(M):\n  ab = sorted(list(map(int,input().split())))\n  if ab not in AB and ab[0] != ab[1]:\n    AB.append(ab)\n\nyet = list(set(sum(AB,[])))\nyetnot = [i for i in range(1,N + 1) if i not in yet]\n\nfor i in range(len(AB)):\n  A = AB[i][0] - 1\n  B = AB[i][1] - 1\n  if H[A] > H[B]:\n    good[A] = 1\n    good[B] = 0\n  elif H[A] < H[B]:\n    good[A] = 0\n    good[B] = 1\n  else:\n    good[A] = 0\n    good[B] = 0\n  \ngood = [i for i in good if i == 1]\n  \nans = len(good) + len(yetnot)\nprint(ans)","import numpy as np\n\ninputs = []\nwhile True:\n  try:\n    inputs.append(input())\n  except EOFError:\n    break\n\n# print(inputs)\n\nobsv = eval(inputs[0].split(\" \")[0])\npathway = eval(inputs[0].split(\" \")[1])\nheights = [eval(a) for a in inputs[1].split(\" \")]\nways = sorted(set([tuple([eval(b) for b in a.split(\" \")]) for a in inputs[2:]]))\n\nadj_matrix = np.zeros((obsv, obsv))\nfor i in range(1, obsv+1):\n  for j in range(1, obsv+1):\n    if (i,j) in ways:\n      adj_matrix[i-1,j-1]=1\n      adj_matrix[j-1,i-1]=1\n\n# print(adj_matrix)\n\nno_conn = len(np.where(np.sum(adj_matrix, axis=0)==0)[0])\n# print(no_conn)\n\nways_inv = [(j,i) for (i,j) in ways]\nways.extend(ways_inv)\nways = sorted(ways)\n\n# print(ways)\n\ncount = no_conn\nstart = 1\nis_good = []\nfor w in ways:\n  is_good.append(heights[start-1] > heights[w[1]-1])\n  if start != w[0]:\n    if np.all(is_good):\n        count += 1\n    start = w[0]\n    is_good = []\nif np.all(is_good):\n  count += 1\n  \nprint(count)","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nmemo = [[] for _ in range(N+1)]\nfor i in range(M):\n    a,b = map(int,input().split())\n    memo[a].append(b)\n    memo[b].append(a)\n    \ncount = 0\nfor i in range(1,N+1):\n    #print(memo[i])\n    if len(memo[i]) > 0:\n        for j in memo[i]:\n            if H[j-1] > H[i-1]:\n                break\n        else:\n            #print(i)\n            count += 1\n\nprint(count)\n#print(memo)","N, M = map(int, input().split(' '))\nH = list(map(int, input().split(' ')))\ntable = [1 for _ in range(N)]\n\nfor _ in range(M):\n    A, B = map(int, input().split(' '))\n    Ah, Bh = H[A - 1], H[B - 1]\n\n    if Ah >= Bh:\n        table[B - 1] = 0\n    if Ah <= Bh:\n        table[A - 1] = 0\n\nans = table.count(1)\n\nprint(ans)","N,M = map(int,input().split())\nH = [int(i) for i in input().split()]\nAB = [list(map(int,input().split())) for _ in range(M)]\nlist_N = list(range(1,N+1))\nfor j in range(M):\n    if H[AB[j][0]-1]<H[AB[j][1]-1]:\n        if AB[j][0] in list_N:\n            list_N.remove(AB[j][0])\n    elif H[AB[j][0]-1]>H[AB[j][1]-1]:\n        if AB[j][1] in list_N:\n            list_N.remove(AB[j][1])\n    else:\n        if AB[j][0] in list_N:\n            list_N.remove(AB[j][0])\n        if AB[j][1] in list_N:\n            list_N.remove(AB[j][1])\nprint(len(list_N))","n, m = map(int, input().split())\n\nh = list(map(int, input().split()))\n\nflags = [True] * n\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if h[a-1] > h[b-1]:\n        flags[b-1] = False\n    if h[b-1] > h[a-1]:\n        flags[a-1] = False\n    else:\n        flags[a-1] = False\n        flags[b-1] = False\n\nprint(flags.count(True))\n","n,m=map(int, input().split())\nh=list(map(int,input().split()))\nnl=[0]*(n+1)\n\nfor i in range(m):\n  a,b=map(int, input().split())\n  if h[a-1]<=h[b-1]:\n    nl[b-1]=1\n    nl[a-1]=0\n  else:\n    nl[a-1]=1\n    nl[b-1]=0\n#print(nl)\nprint(sum(nl))","import sys\nfrom math import factorial\nfrom collections import Counter\nfrom fractions import Fraction\nimport heapq, bisect, fractions\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nMOD = 10**9 + 7\n\nn, m = MAP()\nH = LIST()\nlow = [0]*m\nfor i in range(m):\n    a, b= MAP()\n    if H[a-1] == H[b-1]:\n        low.append(a-1)\n        low.append(b-1)\n    elif H[a-1] < H[b-1]:\n        low.append(a-1)\n    else:\n        low.append(b-1)\n\nprint(n-len(set(low)))","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\ncount = 0\nfor i in range(m):\n    a[i], b[i] = map(int, input().split())\nfor i in range(n):\n    flg = 0 \n    for j in range(m):\n        if a[j] == i + 1:\n            if h[i] < h[b[j]-1]:\n                flg = 1\n        if b[j] == i + 1:\n            if h[i] < h[a[j]-1]:\n                flg = 1\n    if flg == 0:\n        count += 1\nprint(count)","#C\nn, m = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\n\nresult = [1 for _ in range(n)]\nfor _ in range(m):\n    a, b = list(map(int, input().split()))\n    if h[a-1] < h[b-1]:\n        result[b-1] = 1\n        result[a-1] = 0\n    elif h[a-1] > h[b-1]:\n        result[b-1] = 0\n        result[a-1] = 1\n    else:\n        result[b-1] = 0\n        result[a-1] = 0\n    \nprint(result.count(1))\n","def solve(edges, h):\n    neighbors = [set() for x in range(len(h)+1)]\n    for edge in edges:\n        neighbors[edge[0]].add(edge[1])\n        neighbors[edge[1]].add(edge[0])\n    result = -1\n    for i, node in enumerate(neighbors):\n        height = h[i-1]\n        good = True\n        for neighbor in node:\n            if height <= h[neighbor-1]:\n                good = False\n                break\n        if good:\n            result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    edges = [[int(x) for x in input().split()] for y in range(m)]\n    print(solve(edges, h))","n,m = map(int,input().split())\nh = list(map(int,input().split())\njudge = [True] * n\n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if h[a-1] >= h[b-1]:\n        judge[b-1] = False\n    else:\n        judge[a-1] = False\n        \nprint(judge.count(True))","N, M = map(int, input().split())\n\nH = list(map(int, input().split()))\n\ngood_H = [1] * N\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    if H[A-1] < H[B-1]:\n        good_H[A-1] = 0\n    elif H[A-1] > H[B-1]:\n        good_H[B-1] = 0\n    elif H[A-1] == H[B-1] and good_H[A-1] == 0 or good_H[B-1] == 0:\n        good_H[A-1] = 0\n        good_H[B-1] = 0\n\nprint(good_H.count(1))","from heapq import heappush, heappop\n\nN, M = [int(v) for v in input().split()]\n\nq = []\nfor i, h in enumerate([int(v) for v in input().split()]):\n    heappush(q, (h, i))\n\nnet = [[] for _ in range(N)]\n\nfor _ in range(M):\n    a, b = [int(v) - 1 for v in input().split()]\n    net[a].append(b)\n    net[b].append(a)\n\ncount = 0\nclosed = 0\nwhile q:\n    h, i = heappop(q)\n\n    if closed & (1 << i):\n        continue\n\n    count += 1\n    closed |= (1 << i)\n\n    for j in net[i]:\n        closed |= (1 << j)\n\nprint(count)\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nma = [0]*N\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    ma[a-1] = max(ma[a-1], H[b-1])\n    ma[b-1] = max(ma[b-1], H[a-1])\nans = 0\nfor i in range(1, N):\n    if ma[i] < H[i]:\n        ans += 1\nprint(ans)\n","n,k=map(int,input().split(\" \"))\nl=list(map(int,input().split(\" \")))\nd={}\nfor i in l:\n    d[i]=[]\ncount=0\nfor i in range(k):\n    a,b=map(int,input().split(\" \"))\n    d[a].append(b)\n    d[b].append(a)\n#print(d)\nfor key,val in d.items():\n    if len(val)==0:\n        count+=1\n    for i in val:\n       if l[key] > l[i]:\n           count+=1\n    \n\n   \nprint(count)","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\nfor i in range(m):\n    a[i], b[i] = map(int, input().split())\n\ncnt = 0\n\nlose_flag = [0] * n\nfor j in range(m):\n    if h[a[j]-1] < h[b[j]-1]:\n        lose_flag[a[j]-1] = 1\n    elif h[a[j]-1] > h[b[j]-1]:\n        lose_flag[b[j]-1] = 1\n    elif h[a[j]-1] == h[b[j]-1]:\n        lose_flag[a[j]-1] = 1\n        lose_flag[b[j]-1] = 1\n\ncnt += lose_flag.count(0)\n\nprint(cnt)","n, m = map(int, input().split())\n\nl = set()\nfor i in range(n):\n    l.add(i+1)\n\nh = list(map(int, input().split()))\n\ns = set()\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    if h[a-1] == h[b-1]:\n        s.add(a)\n        s.add(b)\n    if h[a-1] < h[b-1]:\n        s.add(a)\n    if h[a-1] > h[b-1]:\n        s.add(b)\n\n#    print(s)\n\nans = list(l - s)\n#print(ans)\nprint(len(ans))\n\n\n\n\n\n\n\n","N, M = map(int,input().split())\nlistH = list(map(int, input().split()))\n\nlistM = [list(map(int, input().split())) for i in range(M)]\n\nlistC = [1 for i in range(N)]\n\nfor pair in listM:\n    if listH[pair[0]-1] > listH[pair[1]-1]:\n        listC[pair[1]-1] -= 1\n    elif listH[pair[0]-1] < listH[pair[1]-1]:\n        listC[pair[0]-1] -= 1\n    else:\n        listC[pair[1]-1] -= 1\n        listC[pair[0]-1] -= 1\n        \ncnt = 0\n\nfor i in listC:\n    if i == 1:\n        cnt += 1\n        \nprint(cnt)","import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprl = lambda x: print(*x ,sep='\\n')\n\nn,m = nm()\nh = nl()\npath = [[False]*n for _ in range(n)]\n\nfor i in range(n):\n    path[i][i] = True \n\nfor i in range(m):\n    a,b = nm()\n    path[a-1][b-1] = path[b-1][a-1] = True\n\nres = 0\nfor i,j in enumerate(path):\n    temp = []\n    for k,l in enumerate(j):\n        if l:\n            temp.append(h[k])\n    ma = max(temp)\n    if temp.count(ma) == 1 and  ma == h[i]:\n        res += 1\n\nprint(res)","number=list(map(int,input().split()))\nn,m=number[0],number[1]\nheight=list(map(int,input().split()))\nload=[[] for i in range(n+1)]\nfor i in range(m):\n    tmp=list(map(int,input().split()))\n    if tmp[1] not in load[tmp[0]]:\n        load[tmp[0]].append(tmp[1])\n    if tmp[0] not in load[tmp[1]]:\n        load[tmp[1]].append(tmp[0])\n\n\nanswer=0\n\nfor i in range(1,n+1):\n    while load[i] != []:\n        if height[i-1]<height[load[i][-1]-1]:\n            break\n        load[i].pop()\n        if load[i] == []:\n            answer+=1\n        \nprint(answer)\n            ","x = list(map(int,input().split(\" \")))\nn,m = x\nh = list(map(int,input().split(\" \")))\nlowerlist = [1] * n\nprint(h)\n\nfor i in range(m):\n    ab = list(map(int,input().split(\" \")))\n    a,b = ab\n    print(a)\n    print(b)\n    # print(ab)\n    if h[a-1] >= h[b-1]:\n        lowerlist[b-1] = 0\n    if h[b-1] >= h[a-1]:\n        lowerlist[a-1] = 0\n    print(lowerlist)\n\nprint(sum(lowerlist))","N,M=map(int,input().split(' '))\nH=list(map(int,input().split(' ')))\n\ndata=[]\nfor n1 in range(N):\n  data.append([])\n  for n2 in range(N):\n    data[n1].append(0)\n    \nfor m in M:\n  a,b=map(int,input().split(' '))\n  data[a-1][b-1]=H[b-1]\n  data[b-1][a-1]=H[a-1]\nans=0\nfor n in N:\n  if H[n-1]>max(data[n-1]):\n    ans+=1\nprint(ans)","n_m=list(map(int, input().split()))\nh=list(map(int, input().split()))\nroads=[None for i in range(n_m[1])]\ncount=0\nfor i in range(n_m[1]):\n    a_b=list(map(int, input().split()))\n    roads[i]=a_b\nfor i in range(n_m[0]):\n    flag = 1\n    height=h[i]\n    for j in roads:\n        if(j.count(i+1)>0):\n           higher=max(h[j[0]-1],h[j[1]-1])\n           if(higher!=h[i]):\n            flag=0\n            break\n    if(flag==1):\n        count+=1\nfor i in roads:\n    if(roads.count(i)>1):\n        count-=(roads.count(i))+(roads.count(i)-1)\nprint(count)\n\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\ng = [1]*n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if h[a-1] >= h[b-1]:\n        g[b-1] = 0\n    if h[b-1] >= h[a-1]:\n        g[a-1] = 0\nprint(sum(g))","def solve():\n    N,M = [int(i) for i in input().split()]\n    H = [int(i) for i in input().split()]\n    ans = set([i for i in range(1, N+1)])\n    for i in range(M):\n        A,B = [int(i) for i in input().split()]\n        if H[A-1] < H[B-1]:\n            if A in ans:\n                ans.remove(A)\n        elif H[B-1] < H[A-1]:\n            if B in ans:\n                ans.remove(B)\n        else:\n            if A in ans:\n                ans.remove(A)\n            if B in ans:\n                ans.remove(B)\n    print(len(ans))\n\nif __name__ == \"__main__\":\n    solve()","i = input()\ni = i.split(' ')\nl = []\nwhile len(l)<int(i[0]):\n  l += [0]\n\nlim = int(i[1])\n\ni = input()\ni = i.split(' ')\nfor j in list(range(len(l))):\n    i[j]=int(i[j])\n\n\ncount=0\nwhile count<lim:\n    count += 1\n    k = input()\n    k = k.split(' ')\n    if i[int(k[0])-1]==i[int(k[1])-1]:\n        l[int(k[1])-1] = 1\n        l[int(k[0])-1] = 1\n    elif i[int(k[0])-1]>i[int(k[1])-1]:\n        l[int(k[1])-1] = 1\n    else:\n        l[int(k[0])-1] = 1\n\ncount = 0\nfor j in l:\n    if j==0:\n        count += 1\nprint(count)\n  \n","import collections\nN, M = map(int, input().split())\n\nH = list(map(int, input().split()))\n\nA = [0] * M\nB = [0] * M\ncount = 0\nfor i in range(M):\n    A[i], B[i] = map(int, input().split())\n\nfor i in range(1, N+1):\n    if not (i in A) and not (i in B):\n        count += 1\n# print(count)\ntaller = []\nsmaller = []\nfor i in range(M):\n    taller.append(max([H[A[i]-1], H[B[i]-1]]))\n    smaller.append(min([H[A[i]-1], H[B[i]-1]]))\n\nlist(set(taller) & set(smaller))\n\nc = collections.Counter(taller)\ncount = count + len(c)\nprint(count - len(list(set(taller) & set(smaller))))","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nL = [1 for _ in range(N)]\n\nfor i in range(M):\n    A,B = map(int,input().split())\n    ma = H[A-1]\n    mb = H[B-1]\n    if (ma > mb):\n        L[B-1] = 0\n    elif (ma == mb):\n        L[B-1] = 0\n        L[A-1] = 0\n    else:\n        L[A-1] = 0\nprint(sum(L))","n,m = map(int,input().split())\nh=[]\nh.extend(input().split())\nh=list(map(int,h))\ncnt = [0]*n\ncnt2 = [0]*n\nans = 0\n\nfor i in range(m):\n  a,b = map(int,input().split())\n  if h[a-1] > h[b-1]:\n    cnt[a-1] += 1  \n  if h[a-1] < h[b-1]:\n    cnt[b-1] +=1\n  cnt2[a-1] +=1\n  cnt2[b-1] +=1\n\nfor p in range(n):\n  if cnt[p]==cnt2[p]:\n    ans += 1\nprint(ans)\n","import math\nimport pprint\nimport fractions\nimport collections\nimport itertools\nN,M=map(int,input().split())\nH=list(map(int,input().split()))\ntree=[[] for _ in range(N)]\nfor i in range(M):\n    a,b=map(int,input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\nl=[1]*N\nfor i in range(N):\n    flag=1\n    for j in tree[i]:\n        if H[i]<=H[j]:\n            flag=0\n    l[i]=flag\nprint(sum(l))\n\n\n\n\n","N , M = map ( int , input().strip().split(\" \") ) ;\nL0 = list ( map ( int , input().strip().split(\" \") ) ) ;\nL1 = [ 1 for x in range ( N ) ] ;\n\nfor x in range ( M ) :\n\ta , b  = map ( int , input().strip().split(\" \") ) ;\n\t\n\tif  L0[a-1] > 0 and L0[a-1] <= L0[b-1] :\n\t\tL1[a-1] = 0 ;\n\n\tif  L0[b-1] > 0 and L0[b-1] <= L0[a-1] :\n\t\tL1[b-1] = 0 ;\nprint ( sum(L1 ) ) ;\n","# -*- coding: utf-8 -*-\n\nN,M = map(int, input().split())\nh_l = list(map(int, input().split()))\n\nall_l = list(range(1,N+1))\nlose_l = []\nwhile M > 0:\n    a,b = map(int, input().split())\n    if h_l[a-1] > h_l[b-1]:\n        lose_l.append(b)\n    if h_l[a-1] < h_l[b-1]:\n        lose_l.append(a)\n    else:\n        lose_l.append(a)\n        lose_l.append(b)\n    M -= 1\n\nresult = list(set(all_l) - set(lose_l))\nprint(len(result))","N,M=map(int,input().split())\nH=list(map(int,input().split()))\nln=[i for i in range(N)]\nx=0\nfor i in range(M):\n    a,b=map(int,input().split())\n    a=a-1\n    b=b-1\n    if H[a]==H[b]:\n        if a in ln:\n            ln[a]=N\n            x+=1\n        if b in ln:\n            ln[b]=N\n            x+=1\n    elif H[a]>H[b]:\n        if b in ln:\n            ln[b]=N\n            x+=1\n    else:\n        if a in ln:\n            ln[a]=N\n            x+=1\nprint(x)\n","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nAB = []\nfor _ in range(M):\n    AB.append(list(map(int,input().split())))\n\nans = [1] * N\nfor i in range(M):\n    if H[AB[i][0]-1] < H[AB[i][1]-1]:\n        ans[AB[i][0]-1] = 0\n    elif H[AB[i][0]-1] > H[AB[i][1]-1]:\n        ans[AB[i][1]-1] = 0\n    else:\n        ans[AB[i][0]-1] = 0\n        ans[AB[i][1]-1] = 0\n\nprint(sum(ans))","N,M = map(int, input().split())\n\ngoodObservatory = [1]*N\nH = []\nH = input()\n\nfor i in range(M):\n\tA,B = map(int, input().split())\n\tif H[A-1] > H[B-1]:\n\t\tgoodObservatory[B-1] = 0\n\telif H[A-1] < H[B-1]:\n\t\tgoodObservatory[A-1] = 0\n\telif H[A-1] == H[B-1]:\n\t\tgoodObservatory[A-1] = 0\n\t\tgoodObservatory[B-1] = 0\n\nprint(sum(goodObservatory))","N,M = map(int,input().split())\nH=list(map(int,input().split()))\nABmap=[[] for i in range(N)]\ncount=0\nfor i in range(M):\n    A,B=map(lambda x:x-1,map(int,input().split()))\n    ABmap[A].append(H[B])\n    ABmap[B].append(H[A])\n        \nfor i in range(N):\n    if len(ABmap[i])==0:\n        count+=1\n    elif max(ABmap[i])<H[i]:\n        count+=1\n   # print(ABmap[i])\n    #print(count)\n        \n    ","n, m = map(int, input().split())\nh = list(map(int, input().split()))\nab = [list(map(int, input().split())) for i in range(m)]\nfor i in range(m):\n  h[min(ab[i][0]-1, ab[i][1])-1] = 0\nh = [i for i in h if i != 0]\nprint(len(h))","import sys\nN,M=map(int,input().split())\nH=list(map(int,input().split()))\n\n#print(N,M,H)\n\nbad=set()\nfor ln in sys.stdin:\n    A,B=map(int,ln.split())\n    x,y=H[A-1],H[B-1]\n    if x>y:\n        bad.add(y)\n    elif x<y:\n        bad.add(x)\n    else:\n        bad.add(x)\n        bad.add(y)\n\nprint(N-len(bad))\n","class Observatory:\n    def __init__(self, height):\n        self.height = height\n        self.around = []\n\n    def is_good(self, li, di):\n        flag = True\n        for i in self.around:\n            oo = li[i - 1]\n            if oo.height >= self.height:\n                flag = False\n            else:\n                di[i - 1] = False\n        return flag\n\n\nn, m = map(int, input().split())\nh = [int(i) for i in input().split()]\nobservatories = [Observatory(h[i]) for i in range(n)]\ndic = {}\nfor i in range(n):\n    dic[i] = True\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    observatories[a - 1].around.append(b)\n    observatories[b - 1].around.append(a)\n\nans = 0\n\nfor i in range(n):\n    o = observatories[i]\n    if dic[i]:\n        if o.is_good(observatories, dic):\n            ans += 1\n\nprint(ans)\n","n,m = list(map(int,input().strip().split()))\nh = list(map(int,input().split()))\ntemp = [1] * n\nans = int(0)\nfor i in range(m):\n    a,b = list(map(int,input().strip().split()))\n    if h[a-1] > h[b-1]:\n        temp[b-1] *= 0\n    elif h[a-1] == h[b-1]:\n        temp[a-1] *= 0\n        temp[b-1] *= 0\n    else:\n        temp[a-1] *= 0\nans += temp.count(1)\nprint(ans)","#n = int(input())\nn, m = map(int, input().split())\nhl = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\n\nisgood = [True for _ in range(n)]\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    if hl[a-1] <= hl[b-1]:\n        isgood[a-1] = False\n    if hl[b-1] <= hl[a-1]:\n        isgood[b-1] = False\nprint(isgood.count(True))\n","n,m=map(int,input().split())\nheights=list(map(int,input().split()))\nheights_w=sorted([(h,i+1) for i,h in enumerate(heights)])[::-1]\ncons={i+1:set() for i in range(n)}\nfor _ in range(m):\n  a,b=map(int,input().split())\n  cons[a].add(b)\n  cons[b].add(a)\n\ndebug=False\nwatched=set()\nres=0\nif debug: res_m=set()\nfor h,i in heights_w:\n  if i in watched:\n    continue\n  watched.add(i)\n  flg=True\n  for con in cons[i]:\n    if debug: print(h,heights[con-1],i,con)\n    flg=(flg and h>heights[con-1])\n    watched.add(con)\n  if debug: print(i,h,flg)\n  if flg:\n    if debug: res_m.add(i)\n    res+=1\nif debug: print(heights_w,cons,res_m)\nprint(res)\n\n","n,m=map(int,input().split())\nh1=list(map(int,input().split()))\nh2=[0]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    if h1[a-1] == h1[b-1]:\n        h2[a-1]=1\n        h2[b-1]=1\n    elif h1[a-1] < h1[b-1]:\n        h2[a-1]=1\n    else:\n        h2[b-1]=1\nprint(h2.count(0))","## import\n\n## function definition \n\n## main process\nif __name__ == '__main__':\n    \n    N, M = map(int,input().split())\n    HEIGHT_LIST = list(map(int,input().split())) \n    \n    ans = [1] * N\n    for j in range(M):\n        a, b = map(int,input().split())\n        a -= 1\n        b -= 1\n        height_a = HEIGHT_LIST[a]\n        height_b = HEIGHT_LIST[b]\n\n        if height_a < height_b:\n            ans[point_a] = 0\n        elif height_a > height_b:\n            ans[point_b] = 0\n        else:\n            ans[point_a] = 0\n            ans[point_b] = 0\n    print(sum(ans))","import numpy as np\n\nN,M   = list(map(int,input().split()))\nHlist = list(map(int,input().split()))\nHdict = {i:Hlist[i] for i in range(len(Hlist))}\n# adj = [[0 for _ in range(N)] for _ in range(N)]\n\n# for line in Mlist:\nbad_set = set()\nfor _ in range(M):\n    line = list(map(int,input().split()))\n    if Hdict[line[0]-1] <= Hdict[line[1]-1]:\n        bad_set.add(line[0])\n    if Hdict[line[1]-1] <= Hdict[line[0]-1]:\n        bad_set.add(line[1])\nprint(N-len(bad_set))","n,m = map(lambda x:int(x),input().split())\nheights = list(map(lambda x:int(x),input().split()))\ngood = 0\nobscon = {}\nfor i in range(n):\n  obscon[i] = [-1]\nfor i in range(m):\n  a,b = map(lambda x:int(x)-1,input().split())\n  obscon[a].append(b)\n  obscon[b].append(a)\nfor i in range(n):\n  if obscon[i] == [-1]:\n    good += 1\n  else:\n    obscon[i].remove(-1)\n    tall = 1\n    for j in obscon[i]:\n      if heights[i]>heights[j]:\n        tall = min(tall,1)\n      else:\n        tall = min(tall,0)\n    if tall == 1:\n      good += 1\nprint(good)","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nab = [[] for i in range(n)]\n\nfor i in range(m):\n    x1, y1 = [int(i) for i in input().split()]\n    ab[x1-1].append(y1-1)\n    ab[y1-1].append(x1-1)\n\nans = 0\n\nfor i in range(n):\n    ok = 1\n    for j in range(len(ab[i])):\n        #print(i)\n        if h[i] >h[ab[i][j]]:\n            continue\n        else:\n            ok = 0\n            break\n\n    if ok == 1:\n        #print(i)\n        ans += 1\n\nprint(ans)\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nx = [[10**6+l] for l in range(n)] \ncnt = 0\nfor _ in range(m):\n    w,q = map(int,input().split())\n    if w not in x[q-1]:\n        x[q-1].append(w)\n    if q not in x[w-1]:\n        x[w-1].append(q)\nfor i in range(n):\n        cnt += 1\n        for j in range(1,len(x[i])):\n            if h[i] <= h[x[i][j]-1]:\n                cnt -= 1\n                break\nprint(cnt)\n","n,m = map(int, input().split())\nh = list(map(int, input().split()))\nroad_list = [list(map(int, input().split()))]\nfor _ in range(m-1):\n    road_list.append(list(map(int,input().split())))\n\nlower_set = set()\nfor road in road_list:\n    \n    if h[road[0]-1] > h[road[1]-1]:\n        lower_set.add(road[1]-1)\n        \n    elif h[road[0]-1] < h[road[1]-1]:\n        lower_set.add(road[0]-1)\n\ncount = 0\nfor i in range(n):\n    if not i in lower_set:\n        count += 1\nprint(count)\n","n, m = map(int,input().split())\nh = list(map(int,input().split()))\nn_ans=[1]*n\n\nfor i in range(m):\n    a, b = map(int,input().split())\n    if h[a-1] <= h[b-1] and n_ans[a-1] == 1:\n        n_ans[a-1] = 0\n    if h[a-1] <= h[a-1] and n_ans[b-1] == 1:\n        n_ans[b-1] = 0\nprint(sum(n_ans))\n\n","import copy\n\ndef main():\n  n,m = map(int,input().split())\n  s = [int(n) for n in input().split()]\n  cs = copy.copy(s)\n  for i in range(m):\n    a,b = map(int,input().split())\n    a-=1\n    b-=1\n    if(s[a] < s[b]):\n      cs[a] = -1\n    elif(s[a] == s[b]):\n      cs[a] = -1\n      cs[b] = -1\n    elif(s[b] < s[a]):\n      cs[b] = -1\n  print(cs)\n  print()\n  print(len(cs)-cs.count(-1))\n      \nif __name__ == '__main__':\n  main()","n,m=map(int,input().split())\nh=list(map(int,input().split()))\nx=[1]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    if h[a-1]>=h[b-1]:\n        x[b-1]=0\n    if h[a-1]<=h[b-1]:\n        x[a-1]=0\nprint(sum(x))","#c\nimport numpy as np\nn, m = map(int, input().split())\nhlist = list(map(int, input().split()))\nmlist = []\n\nfor i in range(m):\n    ml = list(map(int, input().split()))\n    mlist.append(ml)    \n    \n# n=6\n# m=5\n# hlist=[8, 6, 9, 1, 2, 1]\n# m1=[1, 3]\n# m2=[4,2]\n# m3=[4,3]\n# m4=[4,6]\n# m5=[4,6]\n\n# mlist = [m1,m2,m3,m4,m5]\n# print(mlist)\n\ntest = np.array(np.zeros(n**2).reshape(n,n))\ncounter = 0\n\nfor mlist_x in mlist:\n    test[[mlist_x[0]-1], [mlist_x[1]-1]] = hlist[mlist_x[1]-1]\n    test[[mlist_x[1]-1], [mlist_x[0]-1]] = hlist[mlist_x[0]-1]\n\nfor i in range(n):\n    test[[i],[i]] = hlist[i]\n\nfor i in range(n):\n    if (max(test[i])==test[i][i]) and (len(np.where(test[i]==test[i].max())[0])==1):\n        counter += 1\n    else:\n        pass\nprint(test)\nprint(counter)","N,M=map(int,input().split())\nH=list(map(int,input().split()))\n\nlabel=[-1]*N\nEdge=[[] for _ in range(N)]\nfor i in range(M):\n    A,B=map(int,input().split())\n    Edge[A-1].append(B-1)\n    Edge[B-1].append(A-1)\n\nout=0\nfor i in range(N):\n    if label[i]==-1:\n        S=0\n        CN=0\n        stack=[i]\n        while stack:\n            T=stack.pop()\n            label[T]=0\n            for ii in Edge[i]:\n                if label[ii]==-1:\n                    stack.append(ii)\n            if S<H[T]:\n                S=H[T]\n                CN=1\n            else:\n                CN=0\n        out+=CN\nprint(out)","def getInts():\n    return [ int(x) for x in input().split() ]\n\n[N,M] = getInts()\nH = getInts()\nG = {}\nfor i in range(1,N+1):\n    G[i] = set()\nAs = []\nBs = []\nfor i in range(M):\n    [A,B] = getInts()\n    G[A].add(B)\n    G[B].add(A)\n\ngoodCount = 0\nfor i in range(1,N+1):\n    if all([ H[nei-1] < H[i-1] for nei in G[i] ]):\n        goodCount += 1\nprint(goodCount)\n","N,M = map(int,input().split(\" \"))\nh_list = list(map(int,input().split(\" \")))\nroad = [[] for i in range(N)]\nfor i in range(M):\n    a,b = map(int,input().split(\" \"))\n    road[a-1].append(b-1)\n    road[b-1].append(a-1)\ngood_obs = [0 for i in range(N)]\nfor i in range(N):\n    if len(road[i]) == 0:\n        good_obs[i] = 1\n    else:\n        h_max = 0\n        for j in road[i]:\n            h_max = max(h_max,h_list[j])\n        if h_max < h_list[i]:\n            good_obs[i] = 1\nprint(good_obs.count(1))\n","N, M = map(int, input().split())\nH_list = list(map(int, input().split()))\nAB = []\n\nfor i in range(M):\n    ab = list(map(int, input().split()))\n    AB.append(ab)\n\nl = [1 for i in range(N)]\nfor ab in AB:\n    a = ab[0]-1\n    b = ab[1]-1\n\n    if H_list[a] < H_list[b]:\n        l[a] = 0\n    else:\n        l[b] = 0\n\nprint(sum(l))\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nv = [0 for i in range(N)]\nab = []\nfor i in range(M):\n  l = list(map(int, input().split()))\n  ab.append(l)\n  \nfor val in ab:\n  if H[val[0] - 1] == H[val[1] - 1]:\n    v[val[0] - 1] = 1\n    v[val[1] - 1] = 1\n  elif H[val[0] - 1] < H[val[1] - 1]:\n    v[val[0] - 1] = 1\n  else:\n    v[val[1] - 1] = 1\n    \nans = v.count(0)\nprint(ans)","def solve(way, height, n):\n  ss = set()\n  for a,b in way:\n    if height[a-1] == height[b-1]:\n      ss = ss | {a,b}\n    else:\n      remove_idx = a if height[a-1] < height[b-1] else b\n      ss = ss | {remove_idx}\n  return n - len(ss)\n\n\nif __name__ == \"__main__\":\n  n,m = map(int, input().split())\n  height = [int(i) for i in input().split()]\n  way = [tuple(map(int, input().split())) for i in range(m)]\n  print(way)\n  print(solve(way, height, n))\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nla = [0] * n\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    la[a] = max(la[a],h[b])\n    la[b] = max(la[b],h[a])\n\nans = 0\n    \nfor i in range(n):\n    if la[i] < h[i]:\n        ans += 1\n        \nprint(ans)","def LI():return list(map(int,input().split()))\nn,m=LI()\nh=LI()\nedge=[[] for i in range(n)]\nfor i in range(m):\n  a,b=LI()\n  edge[a-1].append(b-1)\n  edge[b-1].append(a-1)\nans=0\nfor i in range(n):\n  if all([h[i]>h[j] for j in edge[i]]):\n    ans+=1\nprint(ans)","#n=int(input())\n#n,m=list(map(int,input().split()))\n#a=list(map(int,input().split()))\nimport math\nimport itertools\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\n\nimport heapq\n\ndef bfs(c,nu,di,node,val):\n    c[nu]=True\n    di[val[nu]]+=1\n    for each in node[nu]:\n        if c[each]:\n            continue\n        di=bfs(c,each,di,node,val)\n    return di\n\n\n\n\n\nn,k=list(map(int,input().split()))\nh=list(map(int,input().split()))\n#node=[i for i in h]\nnode=[defaultdict(int) for _ in range(n) ]\nfor _ in range(k):\n    i,v=list(map(int,input().split()))\n    i-=1\n    v-=1\n    \"\"\"\n    if node[i]>node[v]:\n        node[v]=node[i]\n    elif node[i]<node[v]:\n        node[i]=node[v]\n    \"\"\"\n    #node[i]=max(node[i],h[v])\n    #node[v]=max(node[v],h[i])\n    #node[i].append(v)\n    #node[v].append(i)\n    node[i][h[v]]+=1\n    node[v][h[i]]+=1\n\n#print(node)\ncheck=[False for _ in range(n)]\nans=0\nfor i in range(n):\n    t=node[i]\n    if len(t)==0:\n        ans+=1\n        continue\n    if max(t.keys())<h[i]:\n        #print(i)\n        ans+=1\nprint(ans)\n    \n","n,m=map(int,input().split())\narr=[0]+list(map(int,input().split()))\ng=[[] for _ in range(n+1)]\nfor _ in range(m):\n  a,b=map(int,input().split())\n  g[a].append(b)\n  g[b].append(a)\nans=0\nfor v in range(1,n+1):\n  for u in g[v]:\n    if arr[u]>=arr[v]:\n      break\n  else:\n    ans+=1\nprint(ans)","# coding: utf-8\n# Your code here!\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(m):\n        a, b = map(int, input().split())\n        d[a].append(h_list[b-1])\n        d[b].append(h_list[a-1])\n    \n    count = 0\n    for i, h in enumerate(h_list):\n        if len(d[i+1]) == 0:\n            count += 1\n            continue\n        max_h = max(d[i+1])\n        if max_h < h:\n            count += 1\n    \n    print(count)\n    \nmain()\n","# C - Peaks\ndef main():\n    N, M, *HAB = map(int, open(0).read().split())\n    H, AB = [0] + HAB[:N], HAB[N:]\n    good_observatories = set(range(1, N + 1))\n    for a, b in zip(*[iter(AB)] * 2):\n        if H[a] >= H[b]:\n            good_observatories.discard(b)\n        if H[b] >= H[a]:\n            good_observatories.discard(a)\n    print(len(good_observatories))\n\n\nif __name__ == \"__main__\":\n    main()\n","def main():\n    N, M = map(int, input().split())\n    H = [int(h) for h in input().split()]\n    is_Good = [True for i in range(N)]\n\n    for i in range(M):\n        A, B = map(int, input().split())\n        if H[A-1] <= H[B-1]:\n            is_Good[A-1] = False\n        if H[B-1] <= H[A-1]:\n            is_Good[B-1] = False\n\n    cnt = 0\n    for i in range(N):\n        if is_Good[i] == True:\n            cnt += 1\n\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()","N, M = map(int, input().split()) \nHEIGHT = list(map(int, input().split()))\ntenbou = list(range(1,N+1))\nfor i in range(M):\n    hasi1, hasi2 = map(int, input().split())\n    if HEIGHT[hasi1-1] > HEIGHT[hasi2-1]:\n        try:\n            tenbou.remove(hasi2)\n        except:\n            pass\n        #print(tenbou)\n    if HEIGHT[hasi1-1] < HEIGHT[hasi2-1]:\n        try:\n            tenbou.remove(hasi1)\n        except:\n            pass\n       #print(tenbou)\n    if HEIGHT[hasi1-1] == HEIGHT[hasi2-1]:\n        if hasi1 in tenbou:\n            tenbou.remove(hasi1)\n        if hasi2 in tenbou:\n            tenbou.remove(hasi2)\n        #print(tenbou)\nprint(len(tenbou))","def main():\n    N, M = map(int, input().split())\n    HN = list(map(int, input().split()))\n\n    temp = [True for _ in range(N)]\n    for _ in range(M):\n        A, B = map(int, input().split())\n\n        if HN[A - 1] < HN[B - 1]:\n            temp[A - 1] = False\n        if HN[B - 1] < HN[A - 1]:\n            temp[B - 1] = False\n        else:\n            temp[A - 1] = False\n            temp[B - 1] = False\n\n    print(sum([1 for a in temp if a]))\n\n\nmain()\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\ngood = [True] * N\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    a = a - 1\n    b = b - 1\n    if not H[a] > H[b]:\n        good[a] = False\n    if not H[a] < H[b]:\n        good[b] = False\n\nprint(sum([1 if good[i] else 0 for i in range(N)]))","n,m = map(int,input().split())\n\nh = list(map(int,input().split()))\n\na = [list(map(int,input().split())) for i in range(m)]\n\ngood = [1] * (n+1)\n\n\nfor i in a:\n    if h[i[0]-1] < h[i[1]-1]:\n        good[i[0]] = 0\n    elif h[i[0]-1] > h[i[1]-1]:\n        good[i[1]] = 0\n    else:\n        continue\n\nprint(good.count(1)-1)\n","import collections\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\ndef main():\n    N,M = map(int,input().split())\n    H_list = sorted(list(map(int,input().split())))\n    ab_list = [map(int,input().split()) for _ in range(M)]\n\n    min_set = set()\n    for a,b in ab_list:\n        min_set.add(min(a,b))\n    c = collections.Counter(H_list)\n\n    ans = 0\n    for i in min_set:\n        ans += c[i]\n    print(ans)\n\nmain()\n","n,m = list(map(int, input().split()))\nh = list(map(int, input().split())) \nab =  [[int(_) for _ in input().split()] for __ in range(m)]\n\nn_list =[x for x in range(1,n+1)]\nze = dict(zip(n_list, [0 for i in range(len(n_list))]))\n\nfor i in ab:\n    if (h[i[0]-1]  > h[i[1]-1]):\n        ze[i[1]] += 1\n    elif (h[i[0]-1]  < h[i[1]-1]) :\n        ze[i[0]] += 1\n    elif h[i[0]-1]  == h[i[1]-1]:\n        ze[i[0]] += 1\n        ze[i[1]] += 1\n\nres = 0\nfor k, v in ze.items():\n    if v == 0:\n        res += 1\nprint(res)","from sys import stdin\n\nn, m = list(map(int, input().split()))\nh_n = list(map(int, input().split()))\na_b_m = stdin.readlines()\n\nres = 0\nfor i in range(1, n+1):\n    count = 0\n    count_higher = 0\n    for j in range(m):\n        a, b = [int(x) for x in a_b_m[j].rstrip().split()]\n        if a == i:\n            count = 1\n            if h_n[b-1] >= h_n[a-1]:\n                count_higher = 1\n                break\n        elif b == i:\n            count = 1\n            if h_n[a-1] >= h_n[b-1]:\n                count_higher = 1\n                break\n    if count == 1 and count_higher == 0:\n        res += 1\n    elif count == 0:\n        res += 1\nprint(res)\n","N, M = map(int,input().split())\nH = list(map(int,input().split()))\nans = [1] * N\nfor i in range(M):\n  A, B = map(int, input().split())\n  if H[A - 1] <= H[B -1]:\n    ans[B - 1] = 0\n  elif H[A - 1] >= H[B - 1]:\n    ans[B - 1] = 0\n\n\nprint(sum(ans))","N, M = map(int , input().split())\nH  = list(map(int , input().split()))\nfor i in range(M):\n  A, B = map(int , input().split())\np = 0\nfor i in range(1 , N+1):\n  q = 0\n  C = [0]\n  for j in range(M):\n    if(A == i):\n      b = H[B-1]\n      C.append(b)\n      q += 1\n    elif(B == i):\n      a = H[A-1]\n      C.append(a)\n      q += 1\n    else:\n      C.append(0) \n  G = max(C)\n  if(H[i-1] > G or G==0):\n    p += 1\nprint(p-1)\n","import sys\n\ndef main():\n    N, M = map(int, input().split())\n    H_list = list(map(int, input().split()))\n    AB_list = [[int(_) for _ in input().split()] for i in range(M)]\n\n    tree = [[] for _ in range(N)]\n\n    for a, b in AB_list:\n        tree[a-1].append(b-1)\n        tree[b-1].append(a-1)\n\n    good_observatory = 0\n\n    for i_obs in range(N):\n        if len(tree[i_obs]) == 0:\n            good_observatory += 1\n            continue\n\n        now_height = H_list[i_obs]\n        good_flag = True\n        for i_tree in tree[i_obs]:\n            if now_height <= H_list[i_tree]:\n                good_flag = False\n        if good_flag:\n            good_observatory += 1\n\n    print(good_observatory)\n    return\n\n\n    if a:\n        print('Yes')\n    else:\n        print('No')\n\n    return\n\nif __name__ == '__main__':\n    main()\n    sys.exit(0)"],"formatted_programs":["n, m = map(int,input().split())\n\nh = list(map(int,input().split()))\n\ntemp_h = h.copy()\n\nmax_h = max(h)\n\nfor _ in range(m):\n    x1, x2 = map(int,input().split())\n\n    if h[x1 - 1] == h[x2 - 1]:\n        temp_h[x1 - 1] = max_h + 1\n        temp_h[x2 - 1] = max_h + 1\n        continue\n\n    temp_h[x1 - 1] = max([temp_h[x1 - 1], h[x2 - 1]])\n    temp_h[x2 - 1] = max([h[x1 - 1], temp_h[x2 - 1]])\n\nres = [1 if x - y else 0 for x, y in zip(h, temp_h)]\n\nprint(sum(res))","n, m = map(int, input().split())\nhs = list(map(int, input().split()))[:n]\n\nobservatory_list = [{i: hs[i-1]} for i in range(n)]\nbads = set()\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    \n    for i, observatory in enumerate(observatory_list):\n        if not observatory:\n            continue\n            \n        val = max(observatory.values())\n        if a in observatory:\n            if hs[b-1] > val:\n                observatory_list[i] = None\n                continue            \n            observatory[b] = hs[b-1]\n            \n        if b in observatory:\n            if hs[a-1] > val:\n                observatory_list[i] = None\n                continue\n            observatory[a] = hs[a-1]\n        \nprint(sum([_ for d in observatory_list if d]))\n","N, M = map(int, input().split())\nH_ = list(map(int,input().split()))\nH = [0]\nH.extend(H_)\nD = dict()\nfor i in range(M):\n    t_ = list(map(int,input().split()))\n    if t_[0] not in D.keys():\n        D[t_[0]] = [t_[1]]\n    else:\n        D[t_[0]].append(t_[1])\n    if t_[1] not in D.keys():\n        D[t_[1]] = [t_[0]]\n    else:\n        D[t_[1]].append(t_[0])\nret = list()\nfor v in D.keys():\n    L = D[v]\n    for i in range(len(L)):\n        if H[v] <= H[L[i]]:\n            break\n        if i == len(L) - 1:\n            ret.append(v)\nnum = N - len(D.keys()) + len(ret)\nprint(num)","n,m=list(map(int, input().split()))\nh=list(map(int, input().split()))\naa = []\nab = []\nfor j in range(m):\n    a1,b1=[int(j) for j in input().split()]\n    aa.append(a1)\n    ab.append(b1)\nd=[1]*n\nfor i in range (m):\n    x=aa[i]-1\n    y=ab[i]-1\n    if h[x]>h[y]:\n        d[y]=0\n    elif h[x]==h[y]:\n        d[x]=0\n        d[y]=0\n    else:\n        d[x]=0\nsu=0\nfor f in range(n):\n    su+=d[f]\nprint(su)\n","import sys\ndef input(): return sys.stdin.readline().rstrip()\ndef main():\n    n,m=map(int,input().split())\n    H=[int(_) for _ in input().split()]\n    HH= [[0]*2 for _ in range(n)] \n\n    for i in range(m):\n        a,b=map(int,input().split())\n        if HH[a-1][0]==0:\n            HH[a-1][0]=H[b-1]\n        else:\n            HH[a-1][1]=H[b-1]\n        if HH[b-1][0]==0:\n            HH[b-1][0]=H[a-1]\n        else:\n            HH[b-1][1]=H[a-1]\n    ans=0\n    for i,hh in enumerate(HH):\n        if H[i]>max(hh):\n            ans+=1\n    print(ans)\n\nif __name__=='__main__':\n    main()","n, m = map(int, input().split())\nhyoko = list(map(int, input().split()))\nmichi = []\nresult = [0 for x in range(0, n)]\ncount = 0\n\nfor i in range(0, m):\n  \tmichi = list(map(int, input().split()))\n  \tif hyoko[michi[0]-1] < hyoko[michi[1]-1]:\n  \t    if result[michi[1]-1] == 0:\n  \t        count += 1\n  \t    result[michi[1]-1] += 1\n  \telse:\n  \t    if result[michi[0]-1] == 0:\n  \t        count += 1\n  \t    result[michi[0]-1] += 1\n\nprint(count)","N,M = map(int, input().split())\nH = list(map(int, input().split()))\n\nx = list(range(N+1))\n\nfor i in range(N-1):\n    a,b = map(int, input().split())\n    if H[a-1] > H[b-1]:\n        x[b] = 0\n    elif H[a-1] < H[b-1]:\n        x[a] = 0\n    else:\n        x[a] = 0\n        x[b] = 0\n\nx = set(x)\nprint(len(x)-1)\n","N,M = map(int,input().split())\nH= list(map(int,input().split()))\n\nX = [1]*N\nfor i in range(M):\n    a,b = map(int,input().split())\n    x1 = H[a-1]\n    x2 = H[b-1]\n    if x1 < x2:\n        X[a-1] = False\n        if X[b-1] != False:\n            X[b-1] = True\n\n    else:\n        X[b-1] = False\n        if X[a-1] != False:\n            X[a-1] = True\nprint(X.count(True))    ","n, m = map(int, input().split())\nh = list(map(int, input().split()))\nway = [[] for _ in range(n)]\nfor _ in range(m):\n    a, b = map(int, input().split())\n    way[a-1].append(b-1)\n    way[b-1].append(a-1)\nans = 0\nfor i in range(n):\n    ans += 1\n    for j in range(len(way[i])):\n        if h[i] <= h[way[i][j]]:\n            ans -= 1\n            break\nprint(ans)","point = [0]*n\napp = [0]*n\ncnt = []\n\nfor i in ab:\n    app[i[0]-1] += 1\n    app[i[1]-1] += 1\n    if h[i[0]-1] > h[i[1]-1]:\n        point[i[0]-1] += 1\n    elif h[i[0]-1] < h[i[1]-1]:\n        point[i[1]-1] += 1\nfor i in range(n):\n    if app[i] == point[i]:\n        cnt.append(i+1)\nprint(cnt)","n,m=map(int,input().split())\na=[int(i) for i in input().split()]\ns=0\nb=[]\nfor i in range(m):\n  b.append([])\nfor i in range(m):\n  p1,p2=map(int,input().split())\n  if a[p1-1]>a[p2-1]:\n    b[p1-1].append(1)\n    b[p2-1].append(0)\n  else:\n    b[p2-1].append(0)\n    b[p1-1].append(1)\nfor i in b:\n  if sum(i)==len(i):\n    s+=1\nprint(s)\n  \n  ","import sys\ninput = sys.stdin.readline\n# sys.setrecursionlimit(100000)\n\n\ndef main():\n    N, M = [int(i) for i in input().strip().split()]\n    hights = [int(i) for i in input().strip().split()]\n    routes = [[int(i) for i in input().strip().split()] for _ in range(M)]\n\n    counter = 0\n    ans_table = [1] * N\n\n    for route in routes:\n        idx_0 = route[0] - 1\n        idx_1 = route[1] - 1\n        if hights[idx_0] > hights[idx_1]:\n            ans_table[idx_1] = 0\n        elif hights[idx_0] < hights[idx_1]:\n            ans_table[idx_0] = 0\n        else:\n            ans_table[idx_0] = 0\n            ans_table[idx_1] = 0\n\n    return sum(ans_table)\n\n\nif __name__ == \"__main__\":\n    print(main())\n","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0]*n\nans = n\nfor i in range(m):\n  b, c = map(int, input().split())\n  b -= 1\n  c -= 1\n  a[b] += 1\n  a[c] += 1\n  if h[b] == h[c]:\n    if a[b] == 1 and a[c] == 1:\n      ans -= 2\n    elif a[b] == 1 and a[c] != 1:\n      ans -= 1\n    elif a[b] != 1 and a[c] == 1:\n      ans -= 1\n  if h[b] > h[c]:\n    if a[c] == 1:\n      ans -= 1\n  if h[b] < h[c]:\n    if a[b] == 1:\n      ans -= 1\nprint(ans)","import sys\nsys.setrecursionlimit(10000000)\nfrom collections import defaultdict\n\nN, M = map(int, input().split())\nh = list(map(int, input().split()))\nflg = [1]*N\nfor i in range(M):\n    a, b = map(lambda x : int(x)-1, input().split())\n    if h[a] <= h[b]:\n        flg[a] = 0\n    if h[b] <= h[a]:\n        flg[b] = 0\nprint(sum(flg))","n,m=map(int,input().split())\nlis=list(map(int,input().split()))\npath=[1 for i in range(n)]\nfor i in range(m):\n  a,b=map(int,input().split())\n  if lis[a-1] >= lis[b-1]:\n    path[b-1] =0\n  if lis[a-1] <= lis[b-1]:\n    path[a-1] =0\n    \nprint(path.count(1))","import sys\ninput = sys.stdin.readline\nN,M = map(int,input().split())\n#\u4f4e\u3044\u3084\u3064\u3092\u5f15\u3044\u3066\u3044\u304f\u611f\u3058\nHlist = list(int(x) for x in input().split())\n\nflag = [1]*N\n\nfor i in range(M):\n    A,B = map(int, input().split())\n    A -= 1\n    B -= 1\n    if(Hlist[A] == Hlist[B]) :\n        flag[A] = 0\n        flag[B] = 0\n    elif(Hlist[A] > Hlist[B]) :\n        flag[B] = 0\n    else:\n        flag[A] = 0\nprint(sum(flag))\n","from collections import defaultdict\n\nn, m= list(map(int,input().split()))\nh = list(map(int,input().split()))\nh = [0] + h\n\ngood = [False] + [True]*n\n\nwhile m:\n    m -= 1\n    a, b = list(map(int,input().split()))\n    if h[a] < h[b]:\n        good[a] = False\n    elif h[a]==h[b]:\n        good[a] = good[b] = False\n    else:\n        good[b] = False\n\nprint(good.count(True))\n\n    \n","n,m=map(int,input().split())\narr=[0]+list(map(int,input().split()))\ng=[[] for _ in range(n+1)]\nfor _ in range(m):\n a,b=map(int,input().split())\n g[a].append(b)\n g[b].append(a)\nans=0\nfor v in range(1,n+1):\n for u in g[v]: #i\u756a\u76ee\u306e\u5c55\u671b\u53f0\u304b\u30891\u672c\u306e\u9053\u3092\u901a\u3063\u3066\u3044\u3051\u308b\u3059\u3079\u3066\u306e\u5c55\u671b\u53f0\u3068\u9ad8\u3055\u3092\u6bd4\u8f03\u3059\u308b\n   if arr[u]>=arr[v]:\n     break\n else: #i\u756a\u76ee\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u304c\u4ed6\u306e\u3059\u3079\u3066\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u3088\u308a\u771f\u306b\u5927\u304d\u3051\u308c\u3070\u7b54\u3048\u30921\u5897\u3084\u3059\n   ans+=1\nprint(ans)","#C\u554f\u984c\nN,M = map(int, input().split())\nH = input().split()\nresult = [True] * N\nH_i = [int(s) for s in H]\nbothCount = 0\nfor i in range(M):\n    A,B = map(int, input().split())\n    if(H_i[A-1] > H_i[B-1]):\n        #A\u304cB\u3088\u308a\u3082\u9ad8\u304b\u3063\u305f\u3089A\u304c\u3044\u3044\u5c55\u671b\u53f0\n        if(result[B-1] == True):\n            result[B-1] = False\n        result[A-1] = True\n    elif(H_i[A-1] < H_i[B-1]):\n        if(result[A-1] == True):\n            result[A-1] = False\n        result[B-1] = True\n    else:\n        result[A-1] = False\n        result[B-1] = False\nCount = 0\nCount = result.count(True)\nprint(Count)","n ,m = map(int,input().split())\n#h\u306fi\u756a\u76ee\u306bi+1\u306e\u5c55\u671b\u53f0\u306e\u9ad8\u3055\u304c\u3042\u308b\nh = []\nx = input().split()\nfor i in range(len(x)):\n    h.append(int(x[i]))\n#(a,b)\u306e\u7d44\u307f\u3092tuple\u3067\u5165\u529b\nroad = []\nfor i in range(m):\n    a,b = map(int,input().split())\n    road.append((a,b))\n\ntotal = 0\n\nfor i in range(n):\n    max_value = h[i]\n    for j in range(m):\n        if i+1 in road[j] :\n            if max_value < max(h[road[j][0]-1],h[road[j][1]-1])\n                max_value = -1\n            elif h[road[j][0]-1] == h[road[j][1]-1]: \n                max_value = -1\n        else:\n            pass\n    if max_value >0:\n        total += 1\n\nprint(total)","n,m=map(int,input().split())\nh=[0]+list(map(int,input().split()))\ngood=[1]*(n+1)\ngood[0]=0\nfor i in range(m):\n  a,b=map(int,input().split())\n  if h[a]<h[b]:\n    good[a]=0\n  elif h[a]>h[b]:\n    good[b]=0\n  else:\n    good[a]=0\n    good[b]=0\nprint(sum(good))","n, m = map(int, input().split())\nh_list = [[int(h), []] for h in input().split()]\nfor i in range(m):\n    a, b = map(int, input().split())\n    h_list[a - 1][1].append(b - 1)\n    h_list[b - 1][1].append(a - 1)\nans = 0\nfor h in h_list:\n    if all([h[0] > h_list[h_][0] for h_ in h[1]]):\n        ans += 1\nprint(ans)","N,M = map(int,input().split(' '))\nH = [int(i) for i in input().split(' ')]\nAB = []\nfor i in range(M):\n    A,B = map(int,input().split(' '))\n    if H[A-1] == H[B-1]:\n        continue\n    elif max(H[A-1],H[B-1]) == H[A-1]:\n        AB.append(A)\n    else:\n        AB.append(B)\n        \nprint(len(set(AB)))","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nAB = []\n\n\ngood = [0] * N\n\nfor i in range(M):\n  ab = sorted(list(map(int,input().split())))\n  if ab not in AB and ab[0] != ab[1]:\n    AB.append(ab)\n\nyet = list(set(sum(AB,[])))\nyetnot = [i for i in range(1,N + 1) if i not in yet]\n\nfor i in range(len(AB)):\n  A = AB[i][0] - 1\n  B = AB[i][1] - 1\n  if H[A] > H[B]:\n    good[A] = 1\n    good[B] = 0\n  elif H[A] < H[B]:\n    good[A] = 0\n    good[B] = 1\n  else:\n    good[A] = 0\n    good[B] = 0\n  \ngood = [i for i in good if i == 1]\n  \nans = len(good) + len(yetnot)\nprint(ans)","import numpy as np\n\ninputs = []\nwhile True:\n  try:\n    inputs.append(input())\n  except EOFError:\n    break\n\n# print(inputs)\n\nobsv = eval(inputs[0].split(\" \")[0])\npathway = eval(inputs[0].split(\" \")[1])\nheights = [eval(a) for a in inputs[1].split(\" \")]\nways = sorted(set([tuple([eval(b) for b in a.split(\" \")]) for a in inputs[2:]]))\n\nadj_matrix = np.zeros((obsv, obsv))\nfor i in range(1, obsv+1):\n  for j in range(1, obsv+1):\n    if (i,j) in ways:\n      adj_matrix[i-1,j-1]=1\n      adj_matrix[j-1,i-1]=1\n\n# print(adj_matrix)\n\nno_conn = len(np.where(np.sum(adj_matrix, axis=0)==0)[0])\n# print(no_conn)\n\nways_inv = [(j,i) for (i,j) in ways]\nways.extend(ways_inv)\nways = sorted(ways)\n\n# print(ways)\n\ncount = no_conn\nstart = 1\nis_good = []\nfor w in ways:\n  is_good.append(heights[start-1] > heights[w[1]-1])\n  if start != w[0]:\n    if np.all(is_good):\n        count += 1\n    start = w[0]\n    is_good = []\nif np.all(is_good):\n  count += 1\n  \nprint(count)","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nmemo = [[] for _ in range(N+1)]\nfor i in range(M):\n    a,b = map(int,input().split())\n    memo[a].append(b)\n    memo[b].append(a)\n    \ncount = 0\nfor i in range(1,N+1):\n    #print(memo[i])\n    if len(memo[i]) > 0:\n        for j in memo[i]:\n            if H[j-1] > H[i-1]:\n                break\n        else:\n            #print(i)\n            count += 1\n\nprint(count)\n#print(memo)","N, M = map(int, input().split(' '))\nH = list(map(int, input().split(' ')))\ntable = [1 for _ in range(N)]\n\nfor _ in range(M):\n    A, B = map(int, input().split(' '))\n    Ah, Bh = H[A - 1], H[B - 1]\n\n    if Ah >= Bh:\n        table[B - 1] = 0\n    if Ah <= Bh:\n        table[A - 1] = 0\n\nans = table.count(1)\n\nprint(ans)","N,M = map(int,input().split())\nH = [int(i) for i in input().split()]\nAB = [list(map(int,input().split())) for _ in range(M)]\nlist_N = list(range(1,N+1))\nfor j in range(M):\n    if H[AB[j][0]-1]<H[AB[j][1]-1]:\n        if AB[j][0] in list_N:\n            list_N.remove(AB[j][0])\n    elif H[AB[j][0]-1]>H[AB[j][1]-1]:\n        if AB[j][1] in list_N:\n            list_N.remove(AB[j][1])\n    else:\n        if AB[j][0] in list_N:\n            list_N.remove(AB[j][0])\n        if AB[j][1] in list_N:\n            list_N.remove(AB[j][1])\nprint(len(list_N))","n, m = map(int, input().split())\n\nh = list(map(int, input().split()))\n\nflags = [True] * n\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    if h[a-1] > h[b-1]:\n        flags[b-1] = False\n    if h[b-1] > h[a-1]:\n        flags[a-1] = False\n    else:\n        flags[a-1] = False\n        flags[b-1] = False\n\nprint(flags.count(True))\n","n,m=map(int, input().split())\nh=list(map(int,input().split()))\nnl=[0]*(n+1)\n\nfor i in range(m):\n  a,b=map(int, input().split())\n  if h[a-1]<=h[b-1]:\n    nl[b-1]=1\n    nl[a-1]=0\n  else:\n    nl[a-1]=1\n    nl[b-1]=0\n#print(nl)\nprint(sum(nl))","import sys\nfrom math import factorial\nfrom collections import Counter\nfrom fractions import Fraction\nimport heapq, bisect, fractions\nimport math\nimport itertools\nsys.setrecursionlimit(10 ** 5 + 10)\nINF = 10**15 +5\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef MAP(): return map(int, input().split())\ndef LIST(): return list(map(int, input().split()))\nMOD = 10**9 + 7\n\nn, m = MAP()\nH = LIST()\nlow = [0]*m\nfor i in range(m):\n    a, b= MAP()\n    if H[a-1] == H[b-1]:\n        low.append(a-1)\n        low.append(b-1)\n    elif H[a-1] < H[b-1]:\n        low.append(a-1)\n    else:\n        low.append(b-1)\n\nprint(n-len(set(low)))","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\ncount = 0\nfor i in range(m):\n    a[i], b[i] = map(int, input().split())\nfor i in range(n):\n    flg = 0 \n    for j in range(m):\n        if a[j] == i + 1:\n            if h[i] < h[b[j]-1]:\n                flg = 1\n        if b[j] == i + 1:\n            if h[i] < h[a[j]-1]:\n                flg = 1\n    if flg == 0:\n        count += 1\nprint(count)","#C\nn, m = list(map(int, input().split()))\nh = list(map(int, input().split()))\n\n\nresult = [1 for _ in range(n)]\nfor _ in range(m):\n    a, b = list(map(int, input().split()))\n    if h[a-1] < h[b-1]:\n        result[b-1] = 1\n        result[a-1] = 0\n    elif h[a-1] > h[b-1]:\n        result[b-1] = 0\n        result[a-1] = 1\n    else:\n        result[b-1] = 0\n        result[a-1] = 0\n    \nprint(result.count(1))\n","def solve(edges, h):\n    neighbors = [set() for x in range(len(h)+1)]\n    for edge in edges:\n        neighbors[edge[0]].add(edge[1])\n        neighbors[edge[1]].add(edge[0])\n    result = -1\n    for i, node in enumerate(neighbors):\n        height = h[i-1]\n        good = True\n        for neighbor in node:\n            if height <= h[neighbor-1]:\n                good = False\n                break\n        if good:\n            result += 1\n    return result\n\n\nif __name__ == \"__main__\":\n    n, m = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    edges = [[int(x) for x in input().split()] for y in range(m)]\n    print(solve(edges, h))","n,m = map(int,input().split())\nh = list(map(int,input().split())\njudge = [True] * n\n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if h[a-1] >= h[b-1]:\n        judge[b-1] = False\n    else:\n        judge[a-1] = False\n        \nprint(judge.count(True))","N, M = map(int, input().split())\n\nH = list(map(int, input().split()))\n\ngood_H = [1] * N\n\nfor i in range(M):\n    A, B = map(int, input().split())\n    if H[A-1] < H[B-1]:\n        good_H[A-1] = 0\n    elif H[A-1] > H[B-1]:\n        good_H[B-1] = 0\n    elif H[A-1] == H[B-1] and good_H[A-1] == 0 or good_H[B-1] == 0:\n        good_H[A-1] = 0\n        good_H[B-1] = 0\n\nprint(good_H.count(1))","from heapq import heappush, heappop\n\nN, M = [int(v) for v in input().split()]\n\nq = []\nfor i, h in enumerate([int(v) for v in input().split()]):\n    heappush(q, (h, i))\n\nnet = [[] for _ in range(N)]\n\nfor _ in range(M):\n    a, b = [int(v) - 1 for v in input().split()]\n    net[a].append(b)\n    net[b].append(a)\n\ncount = 0\nclosed = 0\nwhile q:\n    h, i = heappop(q)\n\n    if closed & (1 << i):\n        continue\n\n    count += 1\n    closed |= (1 << i)\n\n    for j in net[i]:\n        closed |= (1 << j)\n\nprint(count)\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nma = [0]*N\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    ma[a-1] = max(ma[a-1], H[b-1])\n    ma[b-1] = max(ma[b-1], H[a-1])\nans = 0\nfor i in range(1, N):\n    if ma[i] < H[i]:\n        ans += 1\nprint(ans)\n","n,k=map(int,input().split(\" \"))\nl=list(map(int,input().split(\" \")))\nd={}\nfor i in l:\n    d[i]=[]\ncount=0\nfor i in range(k):\n    a,b=map(int,input().split(\" \"))\n    d[a].append(b)\n    d[b].append(a)\n#print(d)\nfor key,val in d.items():\n    if len(val)==0:\n        count+=1\n    for i in val:\n       if l[key] > l[i]:\n           count+=1\n    \n\n   \nprint(count)","n, m = map(int, input().split())\nh = list(map(int, input().split()))\na = [0] * m\nb = [0] * m\nfor i in range(m):\n    a[i], b[i] = map(int, input().split())\n\ncnt = 0\n\nlose_flag = [0] * n\nfor j in range(m):\n    if h[a[j]-1] < h[b[j]-1]:\n        lose_flag[a[j]-1] = 1\n    elif h[a[j]-1] > h[b[j]-1]:\n        lose_flag[b[j]-1] = 1\n    elif h[a[j]-1] == h[b[j]-1]:\n        lose_flag[a[j]-1] = 1\n        lose_flag[b[j]-1] = 1\n\ncnt += lose_flag.count(0)\n\nprint(cnt)","n, m = map(int, input().split())\n\nl = set()\nfor i in range(n):\n    l.add(i+1)\n\nh = list(map(int, input().split()))\n\ns = set()\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    if h[a-1] == h[b-1]:\n        s.add(a)\n        s.add(b)\n    if h[a-1] < h[b-1]:\n        s.add(a)\n    if h[a-1] > h[b-1]:\n        s.add(b)\n\n#    print(s)\n\nans = list(l - s)\n#print(ans)\nprint(len(ans))\n\n\n\n\n\n\n\n","N, M = map(int,input().split())\nlistH = list(map(int, input().split()))\n\nlistM = [list(map(int, input().split())) for i in range(M)]\n\nlistC = [1 for i in range(N)]\n\nfor pair in listM:\n    if listH[pair[0]-1] > listH[pair[1]-1]:\n        listC[pair[1]-1] -= 1\n    elif listH[pair[0]-1] < listH[pair[1]-1]:\n        listC[pair[0]-1] -= 1\n    else:\n        listC[pair[1]-1] -= 1\n        listC[pair[0]-1] -= 1\n        \ncnt = 0\n\nfor i in listC:\n    if i == 1:\n        cnt += 1\n        \nprint(cnt)","import sys\n\nreadline = sys.stdin.readline\nreadall = sys.stdin.read\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\nprl = lambda x: print(*x ,sep='\\n')\n\nn,m = nm()\nh = nl()\npath = [[False]*n for _ in range(n)]\n\nfor i in range(n):\n    path[i][i] = True \n\nfor i in range(m):\n    a,b = nm()\n    path[a-1][b-1] = path[b-1][a-1] = True\n\nres = 0\nfor i,j in enumerate(path):\n    temp = []\n    for k,l in enumerate(j):\n        if l:\n            temp.append(h[k])\n    ma = max(temp)\n    if temp.count(ma) == 1 and  ma == h[i]:\n        res += 1\n\nprint(res)","number=list(map(int,input().split()))\nn,m=number[0],number[1]\nheight=list(map(int,input().split()))\nload=[[] for i in range(n+1)]\nfor i in range(m):\n    tmp=list(map(int,input().split()))\n    if tmp[1] not in load[tmp[0]]:\n        load[tmp[0]].append(tmp[1])\n    if tmp[0] not in load[tmp[1]]:\n        load[tmp[1]].append(tmp[0])\n\n\nanswer=0\n\nfor i in range(1,n+1):\n    while load[i] != []:\n        if height[i-1]<height[load[i][-1]-1]:\n            break\n        load[i].pop()\n        if load[i] == []:\n            answer+=1\n        \nprint(answer)\n            ","x = list(map(int,input().split(\" \")))\nn,m = x\nh = list(map(int,input().split(\" \")))\nlowerlist = [1] * n\nprint(h)\n\nfor i in range(m):\n    ab = list(map(int,input().split(\" \")))\n    a,b = ab\n    print(a)\n    print(b)\n    # print(ab)\n    if h[a-1] >= h[b-1]:\n        lowerlist[b-1] = 0\n    if h[b-1] >= h[a-1]:\n        lowerlist[a-1] = 0\n    print(lowerlist)\n\nprint(sum(lowerlist))","N,M=map(int,input().split(' '))\nH=list(map(int,input().split(' ')))\n\ndata=[]\nfor n1 in range(N):\n  data.append([])\n  for n2 in range(N):\n    data[n1].append(0)\n    \nfor m in M:\n  a,b=map(int,input().split(' '))\n  data[a-1][b-1]=H[b-1]\n  data[b-1][a-1]=H[a-1]\nans=0\nfor n in N:\n  if H[n-1]>max(data[n-1]):\n    ans+=1\nprint(ans)","n_m=list(map(int, input().split()))\nh=list(map(int, input().split()))\nroads=[None for i in range(n_m[1])]\ncount=0\nfor i in range(n_m[1]):\n    a_b=list(map(int, input().split()))\n    roads[i]=a_b\nfor i in range(n_m[0]):\n    flag = 1\n    height=h[i]\n    for j in roads:\n        if(j.count(i+1)>0):\n           higher=max(h[j[0]-1],h[j[1]-1])\n           if(higher!=h[i]):\n            flag=0\n            break\n    if(flag==1):\n        count+=1\nfor i in roads:\n    if(roads.count(i)>1):\n        count-=(roads.count(i))+(roads.count(i)-1)\nprint(count)\n\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\ng = [1]*n\nfor i in range(m):\n    a,b = map(int,input().split())\n    if h[a-1] >= h[b-1]:\n        g[b-1] = 0\n    if h[b-1] >= h[a-1]:\n        g[a-1] = 0\nprint(sum(g))","def solve():\n    N,M = [int(i) for i in input().split()]\n    H = [int(i) for i in input().split()]\n    ans = set([i for i in range(1, N+1)])\n    for i in range(M):\n        A,B = [int(i) for i in input().split()]\n        if H[A-1] < H[B-1]:\n            if A in ans:\n                ans.remove(A)\n        elif H[B-1] < H[A-1]:\n            if B in ans:\n                ans.remove(B)\n        else:\n            if A in ans:\n                ans.remove(A)\n            if B in ans:\n                ans.remove(B)\n    print(len(ans))\n\nif __name__ == \"__main__\":\n    solve()","i = input()\ni = i.split(' ')\nl = []\nwhile len(l)<int(i[0]):\n  l += [0]\n\nlim = int(i[1])\n\ni = input()\ni = i.split(' ')\nfor j in list(range(len(l))):\n    i[j]=int(i[j])\n\n\ncount=0\nwhile count<lim:\n    count += 1\n    k = input()\n    k = k.split(' ')\n    if i[int(k[0])-1]==i[int(k[1])-1]:\n        l[int(k[1])-1] = 1\n        l[int(k[0])-1] = 1\n    elif i[int(k[0])-1]>i[int(k[1])-1]:\n        l[int(k[1])-1] = 1\n    else:\n        l[int(k[0])-1] = 1\n\ncount = 0\nfor j in l:\n    if j==0:\n        count += 1\nprint(count)\n  \n","import collections\nN, M = map(int, input().split())\n\nH = list(map(int, input().split()))\n\nA = [0] * M\nB = [0] * M\ncount = 0\nfor i in range(M):\n    A[i], B[i] = map(int, input().split())\n\nfor i in range(1, N+1):\n    if not (i in A) and not (i in B):\n        count += 1\n# print(count)\ntaller = []\nsmaller = []\nfor i in range(M):\n    taller.append(max([H[A[i]-1], H[B[i]-1]]))\n    smaller.append(min([H[A[i]-1], H[B[i]-1]]))\n\nlist(set(taller) & set(smaller))\n\nc = collections.Counter(taller)\ncount = count + len(c)\nprint(count - len(list(set(taller) & set(smaller))))","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nL = [1 for _ in range(N)]\n\nfor i in range(M):\n    A,B = map(int,input().split())\n    ma = H[A-1]\n    mb = H[B-1]\n    if (ma > mb):\n        L[B-1] = 0\n    elif (ma == mb):\n        L[B-1] = 0\n        L[A-1] = 0\n    else:\n        L[A-1] = 0\nprint(sum(L))","n,m = map(int,input().split())\nh=[]\nh.extend(input().split())\nh=list(map(int,h))\ncnt = [0]*n\ncnt2 = [0]*n\nans = 0\n\nfor i in range(m):\n  a,b = map(int,input().split())\n  if h[a-1] > h[b-1]:\n    cnt[a-1] += 1  \n  if h[a-1] < h[b-1]:\n    cnt[b-1] +=1\n  cnt2[a-1] +=1\n  cnt2[b-1] +=1\n\nfor p in range(n):\n  if cnt[p]==cnt2[p]:\n    ans += 1\nprint(ans)\n","import math\nimport pprint\nimport fractions\nimport collections\nimport itertools\nN,M=map(int,input().split())\nH=list(map(int,input().split()))\ntree=[[] for _ in range(N)]\nfor i in range(M):\n    a,b=map(int,input().split())\n    tree[a-1].append(b-1)\n    tree[b-1].append(a-1)\nl=[1]*N\nfor i in range(N):\n    flag=1\n    for j in tree[i]:\n        if H[i]<=H[j]:\n            flag=0\n    l[i]=flag\nprint(sum(l))\n\n\n\n\n","N , M = map ( int , input().strip().split(\" \") ) ;\nL0 = list ( map ( int , input().strip().split(\" \") ) ) ;\nL1 = [ 1 for x in range ( N ) ] ;\n\nfor x in range ( M ) :\n\ta , b  = map ( int , input().strip().split(\" \") ) ;\n\t\n\tif  L0[a-1] > 0 and L0[a-1] <= L0[b-1] :\n\t\tL1[a-1] = 0 ;\n\n\tif  L0[b-1] > 0 and L0[b-1] <= L0[a-1] :\n\t\tL1[b-1] = 0 ;\nprint ( sum(L1 ) ) ;\n","# -*- coding: utf-8 -*-\n\nN,M = map(int, input().split())\nh_l = list(map(int, input().split()))\n\nall_l = list(range(1,N+1))\nlose_l = []\nwhile M > 0:\n    a,b = map(int, input().split())\n    if h_l[a-1] > h_l[b-1]:\n        lose_l.append(b)\n    if h_l[a-1] < h_l[b-1]:\n        lose_l.append(a)\n    else:\n        lose_l.append(a)\n        lose_l.append(b)\n    M -= 1\n\nresult = list(set(all_l) - set(lose_l))\nprint(len(result))","N,M=map(int,input().split())\nH=list(map(int,input().split()))\nln=[i for i in range(N)]\nx=0\nfor i in range(M):\n    a,b=map(int,input().split())\n    a=a-1\n    b=b-1\n    if H[a]==H[b]:\n        if a in ln:\n            ln[a]=N\n            x+=1\n        if b in ln:\n            ln[b]=N\n            x+=1\n    elif H[a]>H[b]:\n        if b in ln:\n            ln[b]=N\n            x+=1\n    else:\n        if a in ln:\n            ln[a]=N\n            x+=1\nprint(x)\n","N,M = map(int,input().split())\nH = list(map(int,input().split()))\nAB = []\nfor _ in range(M):\n    AB.append(list(map(int,input().split())))\n\nans = [1] * N\nfor i in range(M):\n    if H[AB[i][0]-1] < H[AB[i][1]-1]:\n        ans[AB[i][0]-1] = 0\n    elif H[AB[i][0]-1] > H[AB[i][1]-1]:\n        ans[AB[i][1]-1] = 0\n    else:\n        ans[AB[i][0]-1] = 0\n        ans[AB[i][1]-1] = 0\n\nprint(sum(ans))","N,M = map(int, input().split())\n\ngoodObservatory = [1]*N\nH = []\nH = input()\n\nfor i in range(M):\n\tA,B = map(int, input().split())\n\tif H[A-1] > H[B-1]:\n\t\tgoodObservatory[B-1] = 0\n\telif H[A-1] < H[B-1]:\n\t\tgoodObservatory[A-1] = 0\n\telif H[A-1] == H[B-1]:\n\t\tgoodObservatory[A-1] = 0\n\t\tgoodObservatory[B-1] = 0\n\nprint(sum(goodObservatory))","N,M = map(int,input().split())\nH=list(map(int,input().split()))\nABmap=[[] for i in range(N)]\ncount=0\nfor i in range(M):\n    A,B=map(lambda x:x-1,map(int,input().split()))\n    ABmap[A].append(H[B])\n    ABmap[B].append(H[A])\n        \nfor i in range(N):\n    if len(ABmap[i])==0:\n        count+=1\n    elif max(ABmap[i])<H[i]:\n        count+=1\n   # print(ABmap[i])\n    #print(count)\n        \n    ","n, m = map(int, input().split())\nh = list(map(int, input().split()))\nab = [list(map(int, input().split())) for i in range(m)]\nfor i in range(m):\n  h[min(ab[i][0]-1, ab[i][1])-1] = 0\nh = [i for i in h if i != 0]\nprint(len(h))","import sys\nN,M=map(int,input().split())\nH=list(map(int,input().split()))\n\n#print(N,M,H)\n\nbad=set()\nfor ln in sys.stdin:\n    A,B=map(int,ln.split())\n    x,y=H[A-1],H[B-1]\n    if x>y:\n        bad.add(y)\n    elif x<y:\n        bad.add(x)\n    else:\n        bad.add(x)\n        bad.add(y)\n\nprint(N-len(bad))\n","class Observatory:\n    def __init__(self, height):\n        self.height = height\n        self.around = []\n\n    def is_good(self, li, di):\n        flag = True\n        for i in self.around:\n            oo = li[i - 1]\n            if oo.height >= self.height:\n                flag = False\n            else:\n                di[i - 1] = False\n        return flag\n\n\nn, m = map(int, input().split())\nh = [int(i) for i in input().split()]\nobservatories = [Observatory(h[i]) for i in range(n)]\ndic = {}\nfor i in range(n):\n    dic[i] = True\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    observatories[a - 1].around.append(b)\n    observatories[b - 1].around.append(a)\n\nans = 0\n\nfor i in range(n):\n    o = observatories[i]\n    if dic[i]:\n        if o.is_good(observatories, dic):\n            ans += 1\n\nprint(ans)\n","n,m = list(map(int,input().strip().split()))\nh = list(map(int,input().split()))\ntemp = [1] * n\nans = int(0)\nfor i in range(m):\n    a,b = list(map(int,input().strip().split()))\n    if h[a-1] > h[b-1]:\n        temp[b-1] *= 0\n    elif h[a-1] == h[b-1]:\n        temp[a-1] *= 0\n        temp[b-1] *= 0\n    else:\n        temp[a-1] *= 0\nans += temp.count(1)\nprint(ans)","#n = int(input())\nn, m = map(int, input().split())\nhl = list(map(int, input().split()))\n#al=[list(input()) for i in range(n)]\n\nisgood = [True for _ in range(n)]\n\nfor i in range(m):\n    a, b = map(int, input().split())\n    if hl[a-1] <= hl[b-1]:\n        isgood[a-1] = False\n    if hl[b-1] <= hl[a-1]:\n        isgood[b-1] = False\nprint(isgood.count(True))\n","n,m=map(int,input().split())\nheights=list(map(int,input().split()))\nheights_w=sorted([(h,i+1) for i,h in enumerate(heights)])[::-1]\ncons={i+1:set() for i in range(n)}\nfor _ in range(m):\n  a,b=map(int,input().split())\n  cons[a].add(b)\n  cons[b].add(a)\n\ndebug=False\nwatched=set()\nres=0\nif debug: res_m=set()\nfor h,i in heights_w:\n  if i in watched:\n    continue\n  watched.add(i)\n  flg=True\n  for con in cons[i]:\n    if debug: print(h,heights[con-1],i,con)\n    flg=(flg and h>heights[con-1])\n    watched.add(con)\n  if debug: print(i,h,flg)\n  if flg:\n    if debug: res_m.add(i)\n    res+=1\nif debug: print(heights_w,cons,res_m)\nprint(res)\n\n","n,m=map(int,input().split())\nh1=list(map(int,input().split()))\nh2=[0]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    if h1[a-1] == h1[b-1]:\n        h2[a-1]=1\n        h2[b-1]=1\n    elif h1[a-1] < h1[b-1]:\n        h2[a-1]=1\n    else:\n        h2[b-1]=1\nprint(h2.count(0))","## import\n\n## function definition \n\n## main process\nif __name__ == '__main__':\n    \n    N, M = map(int,input().split())\n    HEIGHT_LIST = list(map(int,input().split())) \n    \n    ans = [1] * N\n    for j in range(M):\n        a, b = map(int,input().split())\n        a -= 1\n        b -= 1\n        height_a = HEIGHT_LIST[a]\n        height_b = HEIGHT_LIST[b]\n\n        if height_a < height_b:\n            ans[point_a] = 0\n        elif height_a > height_b:\n            ans[point_b] = 0\n        else:\n            ans[point_a] = 0\n            ans[point_b] = 0\n    print(sum(ans))","import numpy as np\n\nN,M   = list(map(int,input().split()))\nHlist = list(map(int,input().split()))\nHdict = {i:Hlist[i] for i in range(len(Hlist))}\n# adj = [[0 for _ in range(N)] for _ in range(N)]\n\n# for line in Mlist:\nbad_set = set()\nfor _ in range(M):\n    line = list(map(int,input().split()))\n    if Hdict[line[0]-1] <= Hdict[line[1]-1]:\n        bad_set.add(line[0])\n    if Hdict[line[1]-1] <= Hdict[line[0]-1]:\n        bad_set.add(line[1])\nprint(N-len(bad_set))","n,m = map(lambda x:int(x),input().split())\nheights = list(map(lambda x:int(x),input().split()))\ngood = 0\nobscon = {}\nfor i in range(n):\n  obscon[i] = [-1]\nfor i in range(m):\n  a,b = map(lambda x:int(x)-1,input().split())\n  obscon[a].append(b)\n  obscon[b].append(a)\nfor i in range(n):\n  if obscon[i] == [-1]:\n    good += 1\n  else:\n    obscon[i].remove(-1)\n    tall = 1\n    for j in obscon[i]:\n      if heights[i]>heights[j]:\n        tall = min(tall,1)\n      else:\n        tall = min(tall,0)\n    if tall == 1:\n      good += 1\nprint(good)","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nab = [[] for i in range(n)]\n\nfor i in range(m):\n    x1, y1 = [int(i) for i in input().split()]\n    ab[x1-1].append(y1-1)\n    ab[y1-1].append(x1-1)\n\nans = 0\n\nfor i in range(n):\n    ok = 1\n    for j in range(len(ab[i])):\n        #print(i)\n        if h[i] >h[ab[i][j]]:\n            continue\n        else:\n            ok = 0\n            break\n\n    if ok == 1:\n        #print(i)\n        ans += 1\n\nprint(ans)\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nx = [[10**6+l] for l in range(n)] \ncnt = 0\nfor _ in range(m):\n    w,q = map(int,input().split())\n    if w not in x[q-1]:\n        x[q-1].append(w)\n    if q not in x[w-1]:\n        x[w-1].append(q)\nfor i in range(n):\n        cnt += 1\n        for j in range(1,len(x[i])):\n            if h[i] <= h[x[i][j]-1]:\n                cnt -= 1\n                break\nprint(cnt)\n","n,m = map(int, input().split())\nh = list(map(int, input().split()))\nroad_list = [list(map(int, input().split()))]\nfor _ in range(m-1):\n    road_list.append(list(map(int,input().split())))\n\nlower_set = set()\nfor road in road_list:\n    \n    if h[road[0]-1] > h[road[1]-1]:\n        lower_set.add(road[1]-1)\n        \n    elif h[road[0]-1] < h[road[1]-1]:\n        lower_set.add(road[0]-1)\n\ncount = 0\nfor i in range(n):\n    if not i in lower_set:\n        count += 1\nprint(count)\n","n, m = map(int,input().split())\nh = list(map(int,input().split()))\nn_ans=[1]*n\n\nfor i in range(m):\n    a, b = map(int,input().split())\n    if h[a-1] <= h[b-1] and n_ans[a-1] == 1:\n        n_ans[a-1] = 0\n    if h[a-1] <= h[a-1] and n_ans[b-1] == 1:\n        n_ans[b-1] = 0\nprint(sum(n_ans))\n\n","import copy\n\ndef main():\n  n,m = map(int,input().split())\n  s = [int(n) for n in input().split()]\n  cs = copy.copy(s)\n  for i in range(m):\n    a,b = map(int,input().split())\n    a-=1\n    b-=1\n    if(s[a] < s[b]):\n      cs[a] = -1\n    elif(s[a] == s[b]):\n      cs[a] = -1\n      cs[b] = -1\n    elif(s[b] < s[a]):\n      cs[b] = -1\n  print(cs)\n  print()\n  print(len(cs)-cs.count(-1))\n      \nif __name__ == '__main__':\n  main()","n,m=map(int,input().split())\nh=list(map(int,input().split()))\nx=[1]*n\nfor i in range(m):\n    a,b=map(int,input().split())\n    if h[a-1]>=h[b-1]:\n        x[b-1]=0\n    if h[a-1]<=h[b-1]:\n        x[a-1]=0\nprint(sum(x))","#c\nimport numpy as np\nn, m = map(int, input().split())\nhlist = list(map(int, input().split()))\nmlist = []\n\nfor i in range(m):\n    ml = list(map(int, input().split()))\n    mlist.append(ml)    \n    \n# n=6\n# m=5\n# hlist=[8, 6, 9, 1, 2, 1]\n# m1=[1, 3]\n# m2=[4,2]\n# m3=[4,3]\n# m4=[4,6]\n# m5=[4,6]\n\n# mlist = [m1,m2,m3,m4,m5]\n# print(mlist)\n\ntest = np.array(np.zeros(n**2).reshape(n,n))\ncounter = 0\n\nfor mlist_x in mlist:\n    test[[mlist_x[0]-1], [mlist_x[1]-1]] = hlist[mlist_x[1]-1]\n    test[[mlist_x[1]-1], [mlist_x[0]-1]] = hlist[mlist_x[0]-1]\n\nfor i in range(n):\n    test[[i],[i]] = hlist[i]\n\nfor i in range(n):\n    if (max(test[i])==test[i][i]) and (len(np.where(test[i]==test[i].max())[0])==1):\n        counter += 1\n    else:\n        pass\nprint(test)\nprint(counter)","N,M=map(int,input().split())\nH=list(map(int,input().split()))\n\nlabel=[-1]*N\nEdge=[[] for _ in range(N)]\nfor i in range(M):\n    A,B=map(int,input().split())\n    Edge[A-1].append(B-1)\n    Edge[B-1].append(A-1)\n\nout=0\nfor i in range(N):\n    if label[i]==-1:\n        S=0\n        CN=0\n        stack=[i]\n        while stack:\n            T=stack.pop()\n            label[T]=0\n            for ii in Edge[i]:\n                if label[ii]==-1:\n                    stack.append(ii)\n            if S<H[T]:\n                S=H[T]\n                CN=1\n            else:\n                CN=0\n        out+=CN\nprint(out)","def getInts():\n    return [ int(x) for x in input().split() ]\n\n[N,M] = getInts()\nH = getInts()\nG = {}\nfor i in range(1,N+1):\n    G[i] = set()\nAs = []\nBs = []\nfor i in range(M):\n    [A,B] = getInts()\n    G[A].add(B)\n    G[B].add(A)\n\ngoodCount = 0\nfor i in range(1,N+1):\n    if all([ H[nei-1] < H[i-1] for nei in G[i] ]):\n        goodCount += 1\nprint(goodCount)\n","N,M = map(int,input().split(\" \"))\nh_list = list(map(int,input().split(\" \")))\nroad = [[] for i in range(N)]\nfor i in range(M):\n    a,b = map(int,input().split(\" \"))\n    road[a-1].append(b-1)\n    road[b-1].append(a-1)\ngood_obs = [0 for i in range(N)]\nfor i in range(N):\n    if len(road[i]) == 0:\n        good_obs[i] = 1\n    else:\n        h_max = 0\n        for j in road[i]:\n            h_max = max(h_max,h_list[j])\n        if h_max < h_list[i]:\n            good_obs[i] = 1\nprint(good_obs.count(1))\n","N, M = map(int, input().split())\nH_list = list(map(int, input().split()))\nAB = []\n\nfor i in range(M):\n    ab = list(map(int, input().split()))\n    AB.append(ab)\n\nl = [1 for i in range(N)]\nfor ab in AB:\n    a = ab[0]-1\n    b = ab[1]-1\n\n    if H_list[a] < H_list[b]:\n        l[a] = 0\n    else:\n        l[b] = 0\n\nprint(sum(l))\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\nv = [0 for i in range(N)]\nab = []\nfor i in range(M):\n  l = list(map(int, input().split()))\n  ab.append(l)\n  \nfor val in ab:\n  if H[val[0] - 1] == H[val[1] - 1]:\n    v[val[0] - 1] = 1\n    v[val[1] - 1] = 1\n  elif H[val[0] - 1] < H[val[1] - 1]:\n    v[val[0] - 1] = 1\n  else:\n    v[val[1] - 1] = 1\n    \nans = v.count(0)\nprint(ans)","def solve(way, height, n):\n  ss = set()\n  for a,b in way:\n    if height[a-1] == height[b-1]:\n      ss = ss | {a,b}\n    else:\n      remove_idx = a if height[a-1] < height[b-1] else b\n      ss = ss | {remove_idx}\n  return n - len(ss)\n\n\nif __name__ == \"__main__\":\n  n,m = map(int, input().split())\n  height = [int(i) for i in input().split()]\n  way = [tuple(map(int, input().split())) for i in range(m)]\n  print(way)\n  print(solve(way, height, n))\n","n,m = map(int,input().split())\nh = list(map(int,input().split()))\nla = [0] * n\nfor i in range(m):\n    a,b = map(int,input().split())\n    a -= 1\n    b -= 1\n    la[a] = max(la[a],h[b])\n    la[b] = max(la[b],h[a])\n\nans = 0\n    \nfor i in range(n):\n    if la[i] < h[i]:\n        ans += 1\n        \nprint(ans)","def LI():return list(map(int,input().split()))\nn,m=LI()\nh=LI()\nedge=[[] for i in range(n)]\nfor i in range(m):\n  a,b=LI()\n  edge[a-1].append(b-1)\n  edge[b-1].append(a-1)\nans=0\nfor i in range(n):\n  if all([h[i]>h[j] for j in edge[i]]):\n    ans+=1\nprint(ans)","#n=int(input())\n#n,m=list(map(int,input().split()))\n#a=list(map(int,input().split()))\nimport math\nimport itertools\nfrom collections import defaultdict\nfrom collections import Counter\nimport numpy as np\n\nimport heapq\n\ndef bfs(c,nu,di,node,val):\n    c[nu]=True\n    di[val[nu]]+=1\n    for each in node[nu]:\n        if c[each]:\n            continue\n        di=bfs(c,each,di,node,val)\n    return di\n\n\n\n\n\nn,k=list(map(int,input().split()))\nh=list(map(int,input().split()))\n#node=[i for i in h]\nnode=[defaultdict(int) for _ in range(n) ]\nfor _ in range(k):\n    i,v=list(map(int,input().split()))\n    i-=1\n    v-=1\n    \"\"\"\n    if node[i]>node[v]:\n        node[v]=node[i]\n    elif node[i]<node[v]:\n        node[i]=node[v]\n    \"\"\"\n    #node[i]=max(node[i],h[v])\n    #node[v]=max(node[v],h[i])\n    #node[i].append(v)\n    #node[v].append(i)\n    node[i][h[v]]+=1\n    node[v][h[i]]+=1\n\n#print(node)\ncheck=[False for _ in range(n)]\nans=0\nfor i in range(n):\n    t=node[i]\n    if len(t)==0:\n        ans+=1\n        continue\n    if max(t.keys())<h[i]:\n        #print(i)\n        ans+=1\nprint(ans)\n    \n","n,m=map(int,input().split())\narr=[0]+list(map(int,input().split()))\ng=[[] for _ in range(n+1)]\nfor _ in range(m):\n  a,b=map(int,input().split())\n  g[a].append(b)\n  g[b].append(a)\nans=0\nfor v in range(1,n+1):\n  for u in g[v]:\n    if arr[u]>=arr[v]:\n      break\n  else:\n    ans+=1\nprint(ans)","# coding: utf-8\n# Your code here!\nfrom collections import defaultdict\n\ndef main():\n    n, m = map(int, input().split())\n    h_list = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(m):\n        a, b = map(int, input().split())\n        d[a].append(h_list[b-1])\n        d[b].append(h_list[a-1])\n    \n    count = 0\n    for i, h in enumerate(h_list):\n        if len(d[i+1]) == 0:\n            count += 1\n            continue\n        max_h = max(d[i+1])\n        if max_h < h:\n            count += 1\n    \n    print(count)\n    \nmain()\n","# C - Peaks\ndef main():\n    N, M, *HAB = map(int, open(0).read().split())\n    H, AB = [0] + HAB[:N], HAB[N:]\n    good_observatories = set(range(1, N + 1))\n    for a, b in zip(*[iter(AB)] * 2):\n        if H[a] >= H[b]:\n            good_observatories.discard(b)\n        if H[b] >= H[a]:\n            good_observatories.discard(a)\n    print(len(good_observatories))\n\n\nif __name__ == \"__main__\":\n    main()\n","def main():\n    N, M = map(int, input().split())\n    H = [int(h) for h in input().split()]\n    is_Good = [True for i in range(N)]\n\n    for i in range(M):\n        A, B = map(int, input().split())\n        if H[A-1] <= H[B-1]:\n            is_Good[A-1] = False\n        if H[B-1] <= H[A-1]:\n            is_Good[B-1] = False\n\n    cnt = 0\n    for i in range(N):\n        if is_Good[i] == True:\n            cnt += 1\n\n    print(cnt)\n\nif __name__ == \"__main__\":\n    main()","N, M = map(int, input().split()) \nHEIGHT = list(map(int, input().split()))\ntenbou = list(range(1,N+1))\nfor i in range(M):\n    hasi1, hasi2 = map(int, input().split())\n    if HEIGHT[hasi1-1] > HEIGHT[hasi2-1]:\n        try:\n            tenbou.remove(hasi2)\n        except:\n            pass\n        #print(tenbou)\n    if HEIGHT[hasi1-1] < HEIGHT[hasi2-1]:\n        try:\n            tenbou.remove(hasi1)\n        except:\n            pass\n       #print(tenbou)\n    if HEIGHT[hasi1-1] == HEIGHT[hasi2-1]:\n        if hasi1 in tenbou:\n            tenbou.remove(hasi1)\n        if hasi2 in tenbou:\n            tenbou.remove(hasi2)\n        #print(tenbou)\nprint(len(tenbou))","def main():\n    N, M = map(int, input().split())\n    HN = list(map(int, input().split()))\n\n    temp = [True for _ in range(N)]\n    for _ in range(M):\n        A, B = map(int, input().split())\n\n        if HN[A - 1] < HN[B - 1]:\n            temp[A - 1] = False\n        if HN[B - 1] < HN[A - 1]:\n            temp[B - 1] = False\n        else:\n            temp[A - 1] = False\n            temp[B - 1] = False\n\n    print(sum([1 for a in temp if a]))\n\n\nmain()\n","N, M = map(int, input().split())\nH = list(map(int, input().split()))\ngood = [True] * N\n\nfor i in range(M):\n    a, b = map(int, input().split())\n    a = a - 1\n    b = b - 1\n    if not H[a] > H[b]:\n        good[a] = False\n    if not H[a] < H[b]:\n        good[b] = False\n\nprint(sum([1 if good[i] else 0 for i in range(N)]))","n,m = map(int,input().split())\n\nh = list(map(int,input().split()))\n\na = [list(map(int,input().split())) for i in range(m)]\n\ngood = [1] * (n+1)\n\n\nfor i in a:\n    if h[i[0]-1] < h[i[1]-1]:\n        good[i[0]] = 0\n    elif h[i[0]-1] > h[i[1]-1]:\n        good[i[1]] = 0\n    else:\n        continue\n\nprint(good.count(1)-1)\n","import collections\nimport sys\ninput = lambda: sys.stdin.readline().strip()\n\ndef main():\n    N,M = map(int,input().split())\n    H_list = sorted(list(map(int,input().split())))\n    ab_list = [map(int,input().split()) for _ in range(M)]\n\n    min_set = set()\n    for a,b in ab_list:\n        min_set.add(min(a,b))\n    c = collections.Counter(H_list)\n\n    ans = 0\n    for i in min_set:\n        ans += c[i]\n    print(ans)\n\nmain()\n","n,m = list(map(int, input().split()))\nh = list(map(int, input().split())) \nab =  [[int(_) for _ in input().split()] for __ in range(m)]\n\nn_list =[x for x in range(1,n+1)]\nze = dict(zip(n_list, [0 for i in range(len(n_list))]))\n\nfor i in ab:\n    if (h[i[0]-1]  > h[i[1]-1]):\n        ze[i[1]] += 1\n    elif (h[i[0]-1]  < h[i[1]-1]) :\n        ze[i[0]] += 1\n    elif h[i[0]-1]  == h[i[1]-1]:\n        ze[i[0]] += 1\n        ze[i[1]] += 1\n\nres = 0\nfor k, v in ze.items():\n    if v == 0:\n        res += 1\nprint(res)","from sys import stdin\n\nn, m = list(map(int, input().split()))\nh_n = list(map(int, input().split()))\na_b_m = stdin.readlines()\n\nres = 0\nfor i in range(1, n+1):\n    count = 0\n    count_higher = 0\n    for j in range(m):\n        a, b = [int(x) for x in a_b_m[j].rstrip().split()]\n        if a == i:\n            count = 1\n            if h_n[b-1] >= h_n[a-1]:\n                count_higher = 1\n                break\n        elif b == i:\n            count = 1\n            if h_n[a-1] >= h_n[b-1]:\n                count_higher = 1\n                break\n    if count == 1 and count_higher == 0:\n        res += 1\n    elif count == 0:\n        res += 1\nprint(res)\n","N, M = map(int,input().split())\nH = list(map(int,input().split()))\nans = [1] * N\nfor i in range(M):\n  A, B = map(int, input().split())\n  if H[A - 1] <= H[B -1]:\n    ans[B - 1] = 0\n  elif H[A - 1] >= H[B - 1]:\n    ans[B - 1] = 0\n\n\nprint(sum(ans))","N, M = map(int , input().split())\nH  = list(map(int , input().split()))\nfor i in range(M):\n  A, B = map(int , input().split())\np = 0\nfor i in range(1 , N+1):\n  q = 0\n  C = [0]\n  for j in range(M):\n    if(A == i):\n      b = H[B-1]\n      C.append(b)\n      q += 1\n    elif(B == i):\n      a = H[A-1]\n      C.append(a)\n      q += 1\n    else:\n      C.append(0) \n  G = max(C)\n  if(H[i-1] > G or G==0):\n    p += 1\nprint(p-1)\n","import sys\n\ndef main():\n    N, M = map(int, input().split())\n    H_list = list(map(int, input().split()))\n    AB_list = [[int(_) for _ in input().split()] for i in range(M)]\n\n    tree = [[] for _ in range(N)]\n\n    for a, b in AB_list:\n        tree[a-1].append(b-1)\n        tree[b-1].append(a-1)\n\n    good_observatory = 0\n\n    for i_obs in range(N):\n        if len(tree[i_obs]) == 0:\n            good_observatory += 1\n            continue\n\n        now_height = H_list[i_obs]\n        good_flag = True\n        for i_tree in tree[i_obs]:\n            if now_height <= H_list[i_tree]:\n                good_flag = False\n        if good_flag:\n            good_observatory += 1\n\n    print(good_observatory)\n    return\n\n\n    if a:\n        print('Yes')\n    else:\n        print('No')\n\n    return\n\nif __name__ == '__main__':\n    main()\n    sys.exit(0)"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>You drew lottery <var>N<\/var> times. In the <var>i<\/var>-th draw, you got an item of the kind represented by a string <var>S_i<\/var>.<\/p>\n<p>How many kinds of items did you get?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5<\/var><\/li>\n<li><var>S_i<\/var> consists of lowercase English letters and has a length between <var>1<\/var> and <var>10<\/var> (inclusive).<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>S_1<\/var>\n<var>:<\/var>\n<var>S_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of kinds of items you got.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3\napple\norange\napple\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<p>You got two kinds of items: <code>apple<\/code> and <code>orange<\/code>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>5\ngrape\ngrape\ngrape\ngrape\ngrape\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>1\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>4\naaaa\na\naaa\naa\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>4\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 300 points\n\n\nProblem StatementYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n\n\n\nConstraints\n1 \\leq N \\leq 2\\times 10^5\nS_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n\n\n\n\nOutputPrint the number of kinds of items you got.\n\n\n\n\n\n\nSample Input 13\napple\norange\napple\n\n\n\n\n\nSample Output 12\n\nYou got two kinds of items: apple and orange.\n\n\n\n\n\nSample Input 25\ngrape\ngrape\ngrape\ngrape\ngrape\n\n\n\n\n\nSample Output 21\n\n\n\n\n\n\nSample Input 34\naaaa\na\naaa\naa\n\n\n\n\n\nSample Output 34\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>300<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>You drew lottery <var>N<\/var> times. In the <var>i<\/var>-th draw, you got an item of the kind represented by a string <var>S_i<\/var>.<\/p>\n<p>How many kinds of items did you get?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq N \\leq 2\\times 10^5<\/var><\/li>\n<li><var>S_i<\/var> consists of lowercase English letters and has a length between <var>1<\/var> and <var>10<\/var> (inclusive).<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>S_1<\/var>\n<var>:<\/var>\n<var>S_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of kinds of items you got.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>3\napple\norange\napple\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<p>You got two kinds of items: <code>apple<\/code> and <code>orange<\/code>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>5\ngrape\ngrape\ngrape\ngrape\ngrape\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>1\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>4\naaaa\na\naaa\naa\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>4\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 300 points\n\n\nProblem StatementYou drew lottery N times. In the i-th draw, you got an item of the kind represented by a string S_i.\nHow many kinds of items did you get?\n\n\n\n\nConstraints\n1 \\leq N \\leq 2\\times 10^5\nS_i consists of lowercase English letters and has a length between 1 and 10 (inclusive).\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\nS_1\n:\nS_N\n\n\n\n\n\nOutputPrint the number of kinds of items you got.\n\n\n\n\n\n\nSample Input 13\napple\norange\napple\n\n\n\n\n\nSample Output 12\n\nYou got two kinds of items: apple and orange.\n\n\n\n\n\nSample Input 25\ngrape\ngrape\ngrape\ngrape\ngrape\n\n\n\n\n\nSample Output 21\n\n\n\n\n\n\nSample Input 34\naaaa\na\naaa\naa\n\n\n\n\n\nSample Output 34\n\n\n","solve_rate":0.6656888889,"codenet_problem_id":"p02701","input_testcases":{"92":"5\neaepr\neqago\ne`qog\ngr`pe\nrgbrf","35":"5\neagpr\ngrape\ngqaoe\nep`rg\ngqape","50":"5\nrpgae\ngrape\ngaqoe\nep`rg\nrgaqe","91":"3\nflooa\nmgbqmf\npplca","76":"3\nflooa\nfgaqnm\ndplpa","86":"5\neaepr\neqago\ne`qog\ngr`pe\nrgaqf","96":"4\n`cba\na\nbc_\n`a","26":"5\neagpr\ngrape\ngraoe\nep`rg\nepaqf","98":"5\neaepr\neqago\ngoq`e\ngr`pe\nfrbgr","62":"5\nrpeae\ngraoe\ngaqoe\nep`rg\nrgaqf","89":"5\neaepr\neqago\ne`qog\ngr`pe\nrgarf","30":"4\n`caa\nb\nbaa\nab","22":"3\nflppa\negnaro\nappld","44":"5\nrpgae\ngrape\ngaqoe\nep`rg\nqgape","67":"3\naoolf\nfgarnm\naplpd","70":"3\nflooa\nfgarnm\naplpd","73":"3\nflooa\nfgaqnm\naplpd","15":"5\negapr\ngrape\ngraoe\ngrape\nepaqg","63":"4\nacb`\na\nab_\nbb","79":"3\nflooa\nfgaqmm\ndplpa","41":"5\nrpgae\ngrape\ngaqoe\nep`rg\ngqape","71":"5\nrpeae\neraog\ng`qoe\nep`rg\nrgaqf","93":"4\n`cba\na\ncb_\n`a","28":"3\napplf\norangf\nappld","5":"3\nbpple\negnaro\napple","97":"3\nflooa\nmgbrmf\npalcp","46":"3\nflppa\nfgamrn\naqpld","40":"3\nflppa\nfgmarn\nappld","3":"5\negapr\ngrape\ngraoe\ngr`pe\nepaqg","77":"5\nrpeae\nerago\ne`qog\nep`rg\nrgaqf","31":"3\napplf\nnrangf\nappld","49":"3\nflopa\nfgamrn\naqpld","60":"4\n`bca\na\nab_\nbb","23":"5\negapr\ngrape\ngraoe\nep`rg\nepaqf","85":"3\nflooa\nfgbqmm\npplda","59":"5\nrpfae\ngraoe\ngaqoe\nep`rg\nrgaqf","29":"5\neagpr\ngrape\ngraoe\nep`rg\nepaqg","6":"5\ngrape\ngrape\ngraoe\ngrape\neparg","95":"5\neaepr\neqago\ne`qog\ngr`pe\nfrbgr","17":"3\napplf\nfgnaro\nappld","90":"4\n`cba\na\nbb_\n`a","14":"3\napple\nfgnaro\nappld","38":"5\neagpr\ngrape\ngaqoe\nep`rg\ngqape","9":"5\ngrape\ngrape\ngraoe\ngrape\nepaqg","57":"4\n`bca\na\na_b\nbb","32":"5\neagpr\ngrape\ngqaoe\nep`rg\nepaqg","82":"3\nflooa\nfgaqmm\npplda","8":"3\nbpple\negnaro\nappld","68":"5\nrpeae\neraog\ngaqoe\nep`rg\nrgaqf","52":"3\nflopa\nfganrm\naqpld","53":"5\nrpfae\ngrape\ngaqoe\nep`rg\nrgaqe","56":"5\nrpfae\ngraoe\ngaqoe\nep`rg\nrgaqe","61":"3\napolf\nfgarnm\naqlpd","24":"4\n`caa\na\nbaa\nba","80":"5\nrpeae\nerago\ne`qog\ngr`pe\nrgaqf","21":"4\n`caa\n`\naab\naa","74":"5\nrpeae\neraog\ne`qog\nep`rg\nrgaqf","99":"4\nabc`\na\nbc_\n`a","25":"3\napplf\negnaro\nappld","94":"3\nflooa\nmgbrmf\npplca","54":"4\n`bca\na\na`b\nbb","64":"3\napolf\nfgarnm\naplpd","20":"5\negapr\ngrape\ngraoe\ngr`pe\nepaqf","11":"3\napple\negnaro\nappld","83":"5\nrpeae\neqago\ne`qog\ngr`pe\nrgaqf","47":"5\nrpgae\ngrape\ngaqoe\nep`rg\nqgaqe","65":"5\nrpeae\neoarg\ngaqoe\nep`rg\nrgaqf","58":"3\napolf\nfganrm\naqlpd","34":"3\napplf\nnramgf\nappld","55":"3\nflopa\nfganrm\naqlpd","12":"5\ngeapr\ngrape\ngraoe\ngrape\nepaqg","19":"3\nflppa\nfgnaro\nappld","1":"3\nbpple\norange\napple","88":"3\nflooa\nfgbqmm\npplca","37":"3\napplf\nfgmarn\nappld","43":"3\nflppa\nfgamrn\nappld"},"output_testcases":{"92":"5\n","35":"5\n","50":"5\n","91":"3\n","76":"3\n","86":"5\n","96":"4\n","26":"5\n","98":"5\n","62":"5\n","89":"5\n","30":"4\n","22":"3\n","44":"5\n","67":"3\n","70":"3\n","73":"3\n","15":"4\n","63":"4\n","79":"3\n","41":"5\n","71":"5\n","93":"4\n","28":"3\n","5":"3\n","97":"3\n","46":"3\n","40":"3\n","3":"5\n","77":"5\n","31":"3\n","49":"3\n","60":"4\n","23":"5\n","85":"3\n","59":"5\n","29":"5\n","6":"3\n","95":"5\n","17":"3\n","90":"4\n","14":"3\n","38":"5\n","9":"3\n","57":"4\n","32":"5\n","82":"3\n","8":"3\n","68":"5\n","52":"3\n","53":"5\n","56":"5\n","61":"3\n","24":"4\n","80":"5\n","21":"4\n","74":"5\n","99":"4\n","25":"3\n","94":"3\n","54":"4\n","64":"3\n","20":"5\n","11":"3\n","83":"5\n","47":"5\n","65":"5\n","58":"3\n","34":"3\n","55":"3\n","12":"4\n","19":"3\n","1":"3\n","88":"3\n","37":"3\n","43":"3\n"},"n_missing":28,"programs":["N = int(input())\nS = []\nfor i in range(N):\n    S.append(input())\n\nkind = 1\nS.sort()\ns_old = S[0]\nfor i in range(1,N):\n    if S[i] != s_old:\n        kind += 1\n\nprint(kind)\n","N=int(input())\ns_li=[input() for i in range(N)]\nprint(len(set(s_li)))","import sys\na = int(input())\nb = \"\"\nc = 0\nd = 0\ne = 0\ncount = 0\nbox = []\nwhile c < a:\n    b = input()\n    if box == []:\n        box.append(b)\n        count += 1\n    else:\n        for i in box:\n            if b == i:\n                e += 1\n            else:\n                d += 1\n        if e == 0:\n            if d > 0:\n                box.append(b)\n                count += 1\n                d = 0\n        else:\n            d = 0\n    c += 1\nprint(count)","n=int(input())\ns=list(input() for _ in range(n))\nprint(len(set(s)))","N = int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))","\ndef main():\n    n = int(input())\n    sList = [input() for _ in range(n)]\n    sSet = set(sList)\n    print(len(sSet))\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\ns = list(input() for _ in range(n))\nprint(len(set(s)))\n","N = int(input())\nS =[str(input()) for i in range(N)]\n\nG = []\n\nfor i in range(N):\n    goods = S[i]\n    if goods in G:\n        continue\n    else:\n        G.append(goods)\n\n\nprint(len(G))","N = int(input())\nS = [input() for i in range(N)]\nprint(len(set(S)))","n = int(input())\na = set([input() for _ in range(n)])\nprint(len(a))","n = int(input())\n\nl = []\nfor _ in range(n):\n  l.append(str(input()))\n  \nprint(set(l).__len__())","N = int(input())\nprint(len(set([input() for _ in range(N)])))","# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Apr 26 22:06:14 2020\n\n@author: Masataka Amau\n\"\"\"\n\nN = int(input())\naaa = []\nfor i in range(N):\n    buf = input()\n    if(buf not in aaa):\n        aaa.append(buf)\n        \nprint(len(aaa))","N = int(input())\nS = set()\nfor i in range(N):\n    S.add(input())\n\nprint(len(S))","n=int(input())\ns=[input() for i in range(n)]\nprint(len(set(s)))","N = int(input())\ndic = {}\nfor i in range(N):\n    s = input()\n    if not s in dic.keys():\n        dic[s] = 1\nprint(len(dic.keys()))\n","n = int(input())\nA=set()\nB=set()\n\nfor i in range(n):\n\ts = input()\n\tif len(s)>=5:\n\t\tA.add(s)\n\telse:\n\t\tB.add(s)\n\t\t\nprint(len(A)+len(B))\n\n\t\n","n = int(input())\nS = [input() for i in range(n)]\n\ncount = 0\ni=0\nwhile S != []:\n    temp = len(S)\n    S = [s for s in S if s != S[i]]\n    if temp > len(S):\n        count += 1\n        i = 0\n    i +=1\n    if i == len(S):\n        i = 0\nprint(count)","n = int(input())\ns = set()\nfor _ in range(n):\n  s.add(input())\n  \n  \n  \nprint(len(s))","n = int(input())\nprint(len(set(list([input() for _ in range(n)])))) ","n = int(input())\nitem = {}\nfor i in range(n):\n  it = input()\n  item[it] = 'y'\nprint(len(item))\n","n = int(input())\nu = set()\nfor i in range(n):\n  u.add(input())\nprint(len(u))","import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nn = int(input())\nans = set()\nfor i in range(n):\n    ans.add(input().strip())\n\nprint(len(ans))\n","N = int(input())\nS = {input() for _ in range(N)}\nprint(len(S))","from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp():\n    '''\n    \u4e00\u3064\u306e\u6574\u6570\n    '''\n    return int(input())\ndef inpl():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\n    '''\n    return list(map(int, input().split()))\ndef inpl_str():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6587\u5b57\n    '''\n    return list(input().split())\n\nn = inp()\ns=set()\nfor i in range(n):\n    st=input()\n    s.add(st)\nprint(len(s))","import sys\nimport os\n\ndef file_input():\n    f = open('..\/Beginner_Contest_164\/input.txt', 'r')\n    sys.stdin = f\n\ndef main():\n    #file_input()\n    # A,B,C,D=map(int, input().split())\n    N = int(input())\n\n    S = []\n    val = 0\n    for i in range(N):\n        str = input()\n        if str not in S:\n            val += 1\n            S.append(str)\n\n    print(val)\n\nif __name__ == '__main__':\n    main()\n","N = [int(n) for n in input().split()][0]\n\nS = set(input() for _ in range(N))\nprint(len(S))\n\n","N = int(input())\nS = set([input() for _ in range(N)])\nprint(len(S))\n","n=int(input())\ns={input() for _ in range(n)}\nprint(len(s))","N = int(input())\ns = [input() for i in range(N)]\nk = sorted(s)\nd = 0\nfor i in range(N-1):\n\tif(k[i] == k[i+1]):\n\t\td+=1\n\t\t\nprint(N-d)\n","import sys\np = []\nfor l in sys.stdin:\n    a.append(l)\ns = set()\nfor i in range(1, len(p)):\n    s.add(p[i])\nprint(len(set(s)))","# C - gacha\ndef main():\n    _, *S = open(0).read().split()\n    print(len(set(S)))\n\n\nif __name__ == \"__main__\":\n    main()\n","N = int(input())\n\nS = set()\nfor _ in range(N):\n  s = input()\n  S.add(s)\n\nprint(len(S))\n","N=int(input())\ncount=0\nA=''\nfor i in range(0,N):\n  B=input()\n  if A==B:\n    count+=0\n  else:\n    count+=1\nprint(count)   ","n = int(input())\nl = [input() for _ in range(n)]\no = l[0:n+1]\n\nprint(len(list(set(o))))","N = int(input()) #1\u884c\u76ee\u306eN\u3092\u53d6\u5f97\u3059\u308b\ns = [input() for i in range(N)] #\u8907\u6570\u884c\u306e\u6570\u5024\u306e\u5165\u529b\u3092\u53d6\u5f97\nprint(len(s))","import sys\ninput = sys.stdin.readline\ndef print_ans(N, ar):\n    \"\"\"Test Case\n    >>> print_ans(3, [\"apple\", \"orange\", \"apple\"])\n    2\n    >>> print_ans(5,[\"grape\" ,\"grape\" ,\"grape\" ,\"grape\" ,\"grape\"])\n    1\n    \"\"\"\n    print(len(set(ar)))\n    \n\nif __name__ == '__main__':\n    N = int(input().rstrip())\n    ar = [input().rstrip() for _ in range(N) ]\n    print_ans(N, ar)\n\n\n","n = int(input())\nlst = { input() for i in range(n) }\nprint(len(lst))","n = int(input())\nA = []\nfor i in range(n):\n    A.append(input())\nA = list(set(A))\nprint(len(A))\n","inputs = open(0).readlines()\nn = int(inputs[0])\nS = [s.strip() for s in inputs[1:]]\nprint(len(set(S)))","n = int(input())\n\nd = {}\nfor _ in range(n):\n    s = input()\n    if not s in d:\n        d[s] = 0\n        \nprint(len(d.keys()))","N = int(input())\nfruits = [input() for i in range(N)]\nprint(len(set(fruits)))","N = int(input())\nS = []\nfor i in range(N):\n    S.append(input())\nprint(set(S))","N = int(input())\nlist1 = set()\nfor i in range(N):\n    taisho = input()\n    if not taisho in list1:\n        list1.add(taisho)\nprint(len(list1))\n","set2=set()\nN=int(input())\nans=0\nfor i in range(N):\n  s=input()\n  if not s in set2:\n    ans+=1\n    set2.add(s)\nprint(ans)","n = int(input())\nS = [input() for _ in range(n)]\nprint(len(set(S)))","N=int(input())\nS=[input() for i in range(N)]\nS=list(set(S))\nprint(len(S))","N = int(input())\n \nres = set()\nfor i in range(N):\n    res.add(input())\n \nprint(len(res))","def mapint_inp():\n    return map(int, input().split())\n\ndef intinp():\n    return int(input())\n\nN = intinp()\nitem_set = set()\nans = 0\n\nfor _ in range(N):\n    S = input()\n    if S in item_set: continue\n    item_set.add(S)\n    ans += 1\n\nprint(ans)","n = int(input())\nlist=[]\ncount = 0\n\nfor i in range(n):\n\t\n\tstr = input()\n\tif (not str in list):\n\t\tcount += 1\n\t\tlist.append(str)\n\nprint(count)","N=int(input())\ns=[input() for i in range(N)]\nr=set(s)\nprint(len(r))","#c\nN = int(input())\nS = []\nfor _ in range(N):\n    S.append(str(input()))\n\nprint(len(list(set(S))))","a = int(input())\nc= [input() for i in range(a)]\nn = int(c[0])\nc.pop(0)\n\nlst = []\n\nfor i in range(len(c)):\n    if not(c[i] in lst):\n        lst.append(i)\nprint(len(lst))","# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\n#N, K = map(int, input().split())\nN = int(input())\nlist = []\n# \u6587\u5b57\u5217\u306e\u5165\u529b\nfor i in range(N):\n    s = input()\n    if not s in list:\n        list.append(s)\n\n#print(list)\nprint(len(list))\n","def main():\n  import collections\n  \n  n=int(input())\n  string_list=[input() for i in range(n)]\n  c = collections.Counter(string_list)\n  print(len(c))\n  \nmain()","N=int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))\n","n = int(input())\ndata = set()\nfor i in range(n):\n\tdata.add(input())\n\nprint(len(data))","N = int(input())\nS = [input() for i in range(N)]\n\nS_set = set(S)\nprint(len(S_set))\n","N = int(input())\narray = set()\nfor i in range(N):\n    array.add(input())\nprint(len(array))\n","N = int(input())\nprint(len(set(input() for _ in range(N))))","from collections import Counter\nprize = Counter()\nN = int(input())\nfor i in range(N):\n    prize[input()] += 1\n\nprint(len(list(prize.keys())))\n","import math\nN = int(input())\ndi = {}\ncount = 0\nfor i in range(N):\n    word = input()\n    if word not in di:\n        di[word] = 1\n        count += 1\n    else:\n        di[word] += 1\nprint(count)","#C\nn = int(input())\ns = [input() for _ in range(n)]\n\ns_set = set(s)\nprint(len(s_set))","num = int(input())\ntargets = []\ntargetl = []\nhit = 0\nfor j in range(num):\n    check = input()\n    long = len(check)\n    if long <= 5:\n        if check not in targets:\n            targets.append(check)\n            hit += 1\n    elif long >= 6:\n        if check not in targets:\n            targetl.append(check)\n            hit += 1\nprint(hit)","#!\/usr\/bin\/env python3\nimport sys\n\nN = int(input())\n\ndic = {}\nfor i in range(N):\n    S = input()\n    if S not in dic:\n        dic[S] = 1\n\nprint(len(dic.keys()))","def main():\n    n = int(input())\n    S = [input() for _ in range(n)]\n    print(len(set(S)))\nmain()","n=int(input())\ns=[]\nfor i in range(n): s.append(input())\ns.sort()\nm=n\nfor i in range(1,n):\n  if s[i]==s[i-1]: m-=1\nprint(m)","N = int(input())\nS = [input() for _ in range(N)]\nS = set(S)\nprint(len(S))","N=int(input())\nlist=[input() for i in range(N)]\nlist.sort()\nn=1\ns=list[0]\nfor i in range(N):\n  if list[i] != s:\n    n+=1\n    s=list[i]\nprint(n)","N = int(input())\nS = []\nfor i in range(N):\n  new = input()\n  if not(new in S):\n  \tS.append(new)\nprint(len(S))","a=int(input())\nb=[input() for _ in range(10)]\ns=set(b)\nprint(min(a,len(s)-1) if '' in b else min(a,len(s)))","n = int(input())\ns = [input() for _ in range(n)]\nm = list(set(s))\nprint(len(m))","n = int(input())\n\nm = {}\nfor i in range(n):\n  s = input()\n  m[s] = True\n  \nprint(len(m))\n","N = int(input())\nr = []\nfor i in range(N):\n    a = input()\n    r.append(a)\n\nprint(len(set(r)))","from sys import stdin\nimport math\nimport fractions\n\nn = int(stdin.readline().rstrip())\n\ns = [0] * n\n\nfor i in range(n):\n    s[i] = stdin.readline().rstrip()\n\nresult = {}\nfor ss in s:\n    result[ss] = 1\n\nprint(len(result))","N = int(input())\nl = []\nfor i in range(N):\n    l.append(input().rstrip())\nprint(len(list(set(l))))","n = int(input())\nlist = []\nfor i in range(n):\n  s = input()\n  list.append(s)\n  set_list = set(list)\n\nprint(len(set_list))","N = int(input())\nret = {}\nfor i in range(N):\n    ret[input()] = 0\nprint(len(ret.keys()))","a=int(input())\nlist1=[]\nfor i in range(a+1):\n  list1.append(input())\n\nprint(len(list(set(list1))))","N = int(input())\nS = {}\n\nfor i in range(N):\n    s = input()\n    if s not in S.values():\n        S[i] = s\nprint(len(S))        ","N = int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))","n=int(input())\na = [input() for i in range(n)]\n\na=set(a)\n\nprint(len(a))","n=int(input())\na=set()\nfor i in range(0,n):\n    b=input()\n    a.add(b)\nprint(len(a))","N = int(input())\nL = []\nif not (1 <= N <= 2*(10**5)):\n    exit()\n\n\nfor i in range(N):\n    d = input()\n    # if not (1 <= len(d) <= 10):\n    #    exit()\n    # if not (d.lower() == d):\n    #     exit()\n    L.append(d)\n\nprint(len(set(L)))","# coding: utf-8\n# Your code here!\nimport math\n\nN = int(input())\nS = [\"\" for i in range(N)]\nfor i in range(N):\n    S[i] = input()\n    \nS.sort()\n\nif N==1:\n    print(1)\nelse:\n    count = 1\n    for i in range(N-1):\n        if S[i] != S[i+1] :\n            count += 1\n    print(count)","n = int(input())\nans = set()\nfor i in range(n):\n  ans.add(input())\nprint(len(ans))","import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n# from fractions import gcd\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom functools import reduce\nfrom bisect import bisect_left, insort_left\nfrom heapq import heapify, heappush, heappop\n\nINPUT = lambda: sys.stdin.readline().rstrip()\nINT = lambda: int(INPUT())\nMAP = lambda: map(int, INPUT().split())\nS_MAP = lambda: map(str, INPUT().split())\nLIST = lambda: list(map(int, INPUT().split()))\nS_LIST = lambda: list(map(str, INPUT().split()))\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef main():\n    N = INT()\n    S = [INPUT() for _ in range(N)]\n    print(len(set(S)))\n\n\nif __name__ == '__main__':\n    main()\n","n=int(input())\ns = [0]*n\ndic = []\ncount = 1\nfor i in range(n):\n    s[i] = input()\n\nsorted(s)\nfor i in range(n):\n    sw = 0\n    if i == 0:\n        dic.append(s[0])\n    else:\n        for name in dic:\n            if str(name) == str(s[i]):\n                sw = 1\n                break\n        if sw == 0:\n            dic.append(s[i])\n            count += 1\nprint(count)","n = int(input())\n*s, = [input() for _ in range(n)]\nsets = set()\nfor si in s:\n    sets.add(si)\nprint(len(sets))","s=[]\nn=int(input())\n\nfor i in range(n):\n\ts.append(input())\n#\u51e6\u7406\nl=[]\nl=list(set(s))\nprint(len(l))\n\n\n","N = int(input())\nS = {input() for _ in range(N)}\nprint(len(S))\n","n = int(input())\nkeihinn_list = []\nfor i in range(n):\n    keihinn_list.append(input())\nkeihinn_list.sort()\ncount = 0\n\nwhile True:\n    if len(keihinn_list) == 0:\n        break\n    else:\n        keihinn = keihinn_list[0]\n        a = keihinn_list.count(keihinn)\n        keihinn_list = keihinn_list[a:]\n        count += 1\n\nprint(count)\n","N = int(input())\nS = []\nfor _ in range(N):\n    S.append(input())\nprint(len(set(S)))","import collections\n\nN = int(input())\nK = []\nfor i in range(N):\n    S = input()\n    K.append(S)\n    i = i + 1\n    \nA = collections.Counter(K)\n\nprint(len(A))","n=int(input())\ns=[]\nfor i in range(n):\n    s.append(input())\ns.sort()\nans=n\nfor i in range(n-1):\n    if s[i]==s[i+1]:\n        ans-=1\nprint(ans)","N = int(input())\nS = [input() for i in range(N)]\n\nprint(len(set(S)))","from collections import Counter\nn=int(input())\nl=[]\nfor i in range(n):\n    s=input()\n    l.append(s)\nfreq=dict(Counter(l))\nans=list(freq.values())\nprint(len(ans))","num=int(input())\nfor i in range (0,num):\n\tsome=input(list1[])\n    list1.append(some)\nprint(len(set(i for i in list1 if i.isalpha())))","n = int(input())\ns = [input() for i in range(n)]\ns.sort()\ncnt = 1\n\nfor i in range(1, n):\n    if s[i] != s[i-1]:\n        cnt += 1\n    \nprint(cnt)","N = int(input())\nans = []\nfor i in range(N):\n    s = input()\n    ans.append(s)\nanswer = set(ans)\nprint(len(answer))"],"raw_generations":["N = int(input())\nS = []\nfor i in range(N):\n    S.append(input())\n\nkind = 1\nS.sort()\ns_old = S[0]\nfor i in range(1,N):\n    if S[i] != s_old:\n        kind += 1\n\nprint(kind)\n","N=int(input())\ns_li=[input() for i in range(N)]\nprint(len(set(s_li)))","import sys\na = int(input())\nb = \"\"\nc = 0\nd = 0\ne = 0\ncount = 0\nbox = []\nwhile c < a:\n    b = input()\n    if box == []:\n        box.append(b)\n        count += 1\n    else:\n        for i in box:\n            if b == i:\n                e += 1\n            else:\n                d += 1\n        if e == 0:\n            if d > 0:\n                box.append(b)\n                count += 1\n                d = 0\n        else:\n            d = 0\n    c += 1\nprint(count)","n=int(input())\ns=list(input() for _ in range(n))\nprint(len(set(s)))","N = int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))","\ndef main():\n    n = int(input())\n    sList = [input() for _ in range(n)]\n    sSet = set(sList)\n    print(len(sSet))\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\ns = list(input() for _ in range(n))\nprint(len(set(s)))\n","N = int(input())\nS =[str(input()) for i in range(N)]\n\nG = []\n\nfor i in range(N):\n    goods = S[i]\n    if goods in G:\n        continue\n    else:\n        G.append(goods)\n\n\nprint(len(G))","N = int(input())\nS = [input() for i in range(N)]\nprint(len(set(S)))","n = int(input())\na = set([input() for _ in range(n)])\nprint(len(a))","n = int(input())\n\nl = []\nfor _ in range(n):\n  l.append(str(input()))\n  \nprint(set(l).__len__())","N = int(input())\nprint(len(set([input() for _ in range(N)])))","# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Apr 26 22:06:14 2020\n\n@author: Masataka Amau\n\"\"\"\n\nN = int(input())\naaa = []\nfor i in range(N):\n    buf = input()\n    if(buf not in aaa):\n        aaa.append(buf)\n        \nprint(len(aaa))","N = int(input())\nS = set()\nfor i in range(N):\n    S.add(input())\n\nprint(len(S))","n=int(input())\ns=[input() for i in range(n)]\nprint(len(set(s)))","N = int(input())\ndic = {}\nfor i in range(N):\n    s = input()\n    if not s in dic.keys():\n        dic[s] = 1\nprint(len(dic.keys()))\n","n = int(input())\nA=set()\nB=set()\n\nfor i in range(n):\n\ts = input()\n\tif len(s)>=5:\n\t\tA.add(s)\n\telse:\n\t\tB.add(s)\n\t\t\nprint(len(A)+len(B))\n\n\t\n","n = int(input())\nS = [input() for i in range(n)]\n\ncount = 0\ni=0\nwhile S != []:\n    temp = len(S)\n    S = [s for s in S if s != S[i]]\n    if temp > len(S):\n        count += 1\n        i = 0\n    i +=1\n    if i == len(S):\n        i = 0\nprint(count)","n = int(input())\ns = set()\nfor _ in range(n):\n  s.add(input())\n  \n  \n  \nprint(len(s))","n = int(input())\nprint(len(set(list([input() for _ in range(n)])))) ","n = int(input())\nitem = {}\nfor i in range(n):\n  it = input()\n  item[it] = 'y'\nprint(len(item))\n","n = int(input())\nu = set()\nfor i in range(n):\n  u.add(input())\nprint(len(u))","import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nn = int(input())\nans = set()\nfor i in range(n):\n    ans.add(input().strip())\n\nprint(len(ans))\n","N = int(input())\nS = {input() for _ in range(N)}\nprint(len(S))","from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp():\n    '''\n    \u4e00\u3064\u306e\u6574\u6570\n    '''\n    return int(input())\ndef inpl():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\n    '''\n    return list(map(int, input().split()))\ndef inpl_str():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6587\u5b57\n    '''\n    return list(input().split())\n\nn = inp()\ns=set()\nfor i in range(n):\n    st=input()\n    s.add(st)\nprint(len(s))","import sys\nimport os\n\ndef file_input():\n    f = open('..\/Beginner_Contest_164\/input.txt', 'r')\n    sys.stdin = f\n\ndef main():\n    #file_input()\n    # A,B,C,D=map(int, input().split())\n    N = int(input())\n\n    S = []\n    val = 0\n    for i in range(N):\n        str = input()\n        if str not in S:\n            val += 1\n            S.append(str)\n\n    print(val)\n\nif __name__ == '__main__':\n    main()\n","N = [int(n) for n in input().split()][0]\n\nS = set(input() for _ in range(N))\nprint(len(S))\n\n","N = int(input())\nS = set([input() for _ in range(N)])\nprint(len(S))\n","n=int(input())\ns={input() for _ in range(n)}\nprint(len(s))","N = int(input())\ns = [input() for i in range(N)]\nk = sorted(s)\nd = 0\nfor i in range(N-1):\n\tif(k[i] == k[i+1]):\n\t\td+=1\n\t\t\nprint(N-d)\n","import sys\np = []\nfor l in sys.stdin:\n    a.append(l)\ns = set()\nfor i in range(1, len(p)):\n    s.add(p[i])\nprint(len(set(s)))","# C - gacha\ndef main():\n    _, *S = open(0).read().split()\n    print(len(set(S)))\n\n\nif __name__ == \"__main__\":\n    main()\n","N = int(input())\n\nS = set()\nfor _ in range(N):\n  s = input()\n  S.add(s)\n\nprint(len(S))\n","N=int(input())\ncount=0\nA=''\nfor i in range(0,N):\n  B=input()\n  if A==B:\n    count+=0\n  else:\n    count+=1\nprint(count)   ","n = int(input())\nl = [input() for _ in range(n)]\no = l[0:n+1]\n\nprint(len(list(set(o))))","N = int(input()) #1\u884c\u76ee\u306eN\u3092\u53d6\u5f97\u3059\u308b\ns = [input() for i in range(N)] #\u8907\u6570\u884c\u306e\u6570\u5024\u306e\u5165\u529b\u3092\u53d6\u5f97\nprint(len(s))","import sys\ninput = sys.stdin.readline\ndef print_ans(N, ar):\n    \"\"\"Test Case\n    >>> print_ans(3, [\"apple\", \"orange\", \"apple\"])\n    2\n    >>> print_ans(5,[\"grape\" ,\"grape\" ,\"grape\" ,\"grape\" ,\"grape\"])\n    1\n    \"\"\"\n    print(len(set(ar)))\n    \n\nif __name__ == '__main__':\n    N = int(input().rstrip())\n    ar = [input().rstrip() for _ in range(N) ]\n    print_ans(N, ar)\n\n\n","n = int(input())\nlst = { input() for i in range(n) }\nprint(len(lst))","n = int(input())\nA = []\nfor i in range(n):\n    A.append(input())\nA = list(set(A))\nprint(len(A))\n","inputs = open(0).readlines()\nn = int(inputs[0])\nS = [s.strip() for s in inputs[1:]]\nprint(len(set(S)))","n = int(input())\n\nd = {}\nfor _ in range(n):\n    s = input()\n    if not s in d:\n        d[s] = 0\n        \nprint(len(d.keys()))","N = int(input())\nfruits = [input() for i in range(N)]\nprint(len(set(fruits)))","N = int(input())\nS = []\nfor i in range(N):\n    S.append(input())\nprint(set(S))","N = int(input())\nlist1 = set()\nfor i in range(N):\n    taisho = input()\n    if not taisho in list1:\n        list1.add(taisho)\nprint(len(list1))\n","set2=set()\nN=int(input())\nans=0\nfor i in range(N):\n  s=input()\n  if not s in set2:\n    ans+=1\n    set2.add(s)\nprint(ans)","n = int(input())\nS = [input() for _ in range(n)]\nprint(len(set(S)))","N=int(input())\nS=[input() for i in range(N)]\nS=list(set(S))\nprint(len(S))","N = int(input())\n \nres = set()\nfor i in range(N):\n    res.add(input())\n \nprint(len(res))","def mapint_inp():\n    return map(int, input().split())\n\ndef intinp():\n    return int(input())\n\nN = intinp()\nitem_set = set()\nans = 0\n\nfor _ in range(N):\n    S = input()\n    if S in item_set: continue\n    item_set.add(S)\n    ans += 1\n\nprint(ans)","n = int(input())\nlist=[]\ncount = 0\n\nfor i in range(n):\n\t\n\tstr = input()\n\tif (not str in list):\n\t\tcount += 1\n\t\tlist.append(str)\n\nprint(count)","N=int(input())\ns=[input() for i in range(N)]\nr=set(s)\nprint(len(r))","#c\nN = int(input())\nS = []\nfor _ in range(N):\n    S.append(str(input()))\n\nprint(len(list(set(S))))","a = int(input())\nc= [input() for i in range(a)]\nn = int(c[0])\nc.pop(0)\n\nlst = []\n\nfor i in range(len(c)):\n    if not(c[i] in lst):\n        lst.append(i)\nprint(len(lst))","# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\n#N, K = map(int, input().split())\nN = int(input())\nlist = []\n# \u6587\u5b57\u5217\u306e\u5165\u529b\nfor i in range(N):\n    s = input()\n    if not s in list:\n        list.append(s)\n\n#print(list)\nprint(len(list))\n","def main():\n  import collections\n  \n  n=int(input())\n  string_list=[input() for i in range(n)]\n  c = collections.Counter(string_list)\n  print(len(c))\n  \nmain()","N=int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))\n","n = int(input())\ndata = set()\nfor i in range(n):\n\tdata.add(input())\n\nprint(len(data))","N = int(input())\nS = [input() for i in range(N)]\n\nS_set = set(S)\nprint(len(S_set))\n","N = int(input())\narray = set()\nfor i in range(N):\n    array.add(input())\nprint(len(array))\n","N = int(input())\nprint(len(set(input() for _ in range(N))))","from collections import Counter\nprize = Counter()\nN = int(input())\nfor i in range(N):\n    prize[input()] += 1\n\nprint(len(list(prize.keys())))\n","import math\nN = int(input())\ndi = {}\ncount = 0\nfor i in range(N):\n    word = input()\n    if word not in di:\n        di[word] = 1\n        count += 1\n    else:\n        di[word] += 1\nprint(count)","#C\nn = int(input())\ns = [input() for _ in range(n)]\n\ns_set = set(s)\nprint(len(s_set))","num = int(input())\ntargets = []\ntargetl = []\nhit = 0\nfor j in range(num):\n    check = input()\n    long = len(check)\n    if long <= 5:\n        if check not in targets:\n            targets.append(check)\n            hit += 1\n    elif long >= 6:\n        if check not in targets:\n            targetl.append(check)\n            hit += 1\nprint(hit)","#!\/usr\/bin\/env python3\nimport sys\n\nN = int(input())\n\ndic = {}\nfor i in range(N):\n    S = input()\n    if S not in dic:\n        dic[S] = 1\n\nprint(len(dic.keys()))","def main():\n    n = int(input())\n    S = [input() for _ in range(n)]\n    print(len(set(S)))\nmain()","n=int(input())\ns=[]\nfor i in range(n): s.append(input())\ns.sort()\nm=n\nfor i in range(1,n):\n  if s[i]==s[i-1]: m-=1\nprint(m)","N = int(input())\nS = [input() for _ in range(N)]\nS = set(S)\nprint(len(S))","N=int(input())\nlist=[input() for i in range(N)]\nlist.sort()\nn=1\ns=list[0]\nfor i in range(N):\n  if list[i] != s:\n    n+=1\n    s=list[i]\nprint(n)","N = int(input())\nS = []\nfor i in range(N):\n  new = input()\n  if not(new in S):\n  \tS.append(new)\nprint(len(S))","a=int(input())\nb=[input() for _ in range(10)]\ns=set(b)\nprint(min(a,len(s)-1) if '' in b else min(a,len(s)))","n = int(input())\ns = [input() for _ in range(n)]\nm = list(set(s))\nprint(len(m))","n = int(input())\n\nm = {}\nfor i in range(n):\n  s = input()\n  m[s] = True\n  \nprint(len(m))\n","N = int(input())\nr = []\nfor i in range(N):\n    a = input()\n    r.append(a)\n\nprint(len(set(r)))","from sys import stdin\nimport math\nimport fractions\n\nn = int(stdin.readline().rstrip())\n\ns = [0] * n\n\nfor i in range(n):\n    s[i] = stdin.readline().rstrip()\n\nresult = {}\nfor ss in s:\n    result[ss] = 1\n\nprint(len(result))","N = int(input())\nl = []\nfor i in range(N):\n    l.append(input().rstrip())\nprint(len(list(set(l))))","n = int(input())\nlist = []\nfor i in range(n):\n  s = input()\n  list.append(s)\n  set_list = set(list)\n\nprint(len(set_list))","N = int(input())\nret = {}\nfor i in range(N):\n    ret[input()] = 0\nprint(len(ret.keys()))","a=int(input())\nlist1=[]\nfor i in range(a+1):\n  list1.append(input())\n\nprint(len(list(set(list1))))","N = int(input())\nS = {}\n\nfor i in range(N):\n    s = input()\n    if s not in S.values():\n        S[i] = s\nprint(len(S))        ","N = int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))","n=int(input())\na = [input() for i in range(n)]\n\na=set(a)\n\nprint(len(a))","n=int(input())\na=set()\nfor i in range(0,n):\n    b=input()\n    a.add(b)\nprint(len(a))","N = int(input())\nL = []\nif not (1 <= N <= 2*(10**5)):\n    exit()\n\n\nfor i in range(N):\n    d = input()\n    # if not (1 <= len(d) <= 10):\n    #    exit()\n    # if not (d.lower() == d):\n    #     exit()\n    L.append(d)\n\nprint(len(set(L)))","# coding: utf-8\n# Your code here!\nimport math\n\nN = int(input())\nS = [\"\" for i in range(N)]\nfor i in range(N):\n    S[i] = input()\n    \nS.sort()\n\nif N==1:\n    print(1)\nelse:\n    count = 1\n    for i in range(N-1):\n        if S[i] != S[i+1] :\n            count += 1\n    print(count)","n = int(input())\nans = set()\nfor i in range(n):\n  ans.add(input())\nprint(len(ans))","import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n# from fractions import gcd\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom functools import reduce\nfrom bisect import bisect_left, insort_left\nfrom heapq import heapify, heappush, heappop\n\nINPUT = lambda: sys.stdin.readline().rstrip()\nINT = lambda: int(INPUT())\nMAP = lambda: map(int, INPUT().split())\nS_MAP = lambda: map(str, INPUT().split())\nLIST = lambda: list(map(int, INPUT().split()))\nS_LIST = lambda: list(map(str, INPUT().split()))\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef main():\n    N = INT()\n    S = [INPUT() for _ in range(N)]\n    print(len(set(S)))\n\n\nif __name__ == '__main__':\n    main()\n","n=int(input())\ns = [0]*n\ndic = []\ncount = 1\nfor i in range(n):\n    s[i] = input()\n\nsorted(s)\nfor i in range(n):\n    sw = 0\n    if i == 0:\n        dic.append(s[0])\n    else:\n        for name in dic:\n            if str(name) == str(s[i]):\n                sw = 1\n                break\n        if sw == 0:\n            dic.append(s[i])\n            count += 1\nprint(count)","n = int(input())\n*s, = [input() for _ in range(n)]\nsets = set()\nfor si in s:\n    sets.add(si)\nprint(len(sets))","s=[]\nn=int(input())\n\nfor i in range(n):\n\ts.append(input())\n#\u51e6\u7406\nl=[]\nl=list(set(s))\nprint(len(l))\n\n\n","N = int(input())\nS = {input() for _ in range(N)}\nprint(len(S))\n","n = int(input())\nkeihinn_list = []\nfor i in range(n):\n    keihinn_list.append(input())\nkeihinn_list.sort()\ncount = 0\n\nwhile True:\n    if len(keihinn_list) == 0:\n        break\n    else:\n        keihinn = keihinn_list[0]\n        a = keihinn_list.count(keihinn)\n        keihinn_list = keihinn_list[a:]\n        count += 1\n\nprint(count)\n","N = int(input())\nS = []\nfor _ in range(N):\n    S.append(input())\nprint(len(set(S)))","import collections\n\nN = int(input())\nK = []\nfor i in range(N):\n    S = input()\n    K.append(S)\n    i = i + 1\n    \nA = collections.Counter(K)\n\nprint(len(A))","n=int(input())\ns=[]\nfor i in range(n):\n    s.append(input())\ns.sort()\nans=n\nfor i in range(n-1):\n    if s[i]==s[i+1]:\n        ans-=1\nprint(ans)","N = int(input())\nS = [input() for i in range(N)]\n\nprint(len(set(S)))","from collections import Counter\nn=int(input())\nl=[]\nfor i in range(n):\n    s=input()\n    l.append(s)\nfreq=dict(Counter(l))\nans=list(freq.values())\nprint(len(ans))","num=int(input())\nfor i in range (0,num):\n\tsome=input(list1[])\n    list1.append(some)\nprint(len(set(i for i in list1 if i.isalpha())))","n = int(input())\ns = [input() for i in range(n)]\ns.sort()\ncnt = 1\n\nfor i in range(1, n):\n    if s[i] != s[i-1]:\n        cnt += 1\n    \nprint(cnt)","N = int(input())\nans = []\nfor i in range(N):\n    s = input()\n    ans.append(s)\nanswer = set(ans)\nprint(len(answer))"],"formatted_programs":["N = int(input())\nS = []\nfor i in range(N):\n    S.append(input())\n\nkind = 1\nS.sort()\ns_old = S[0]\nfor i in range(1,N):\n    if S[i] != s_old:\n        kind += 1\n\nprint(kind)\n","N=int(input())\ns_li=[input() for i in range(N)]\nprint(len(set(s_li)))","import sys\na = int(input())\nb = \"\"\nc = 0\nd = 0\ne = 0\ncount = 0\nbox = []\nwhile c < a:\n    b = input()\n    if box == []:\n        box.append(b)\n        count += 1\n    else:\n        for i in box:\n            if b == i:\n                e += 1\n            else:\n                d += 1\n        if e == 0:\n            if d > 0:\n                box.append(b)\n                count += 1\n                d = 0\n        else:\n            d = 0\n    c += 1\nprint(count)","n=int(input())\ns=list(input() for _ in range(n))\nprint(len(set(s)))","N = int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))","\ndef main():\n    n = int(input())\n    sList = [input() for _ in range(n)]\n    sSet = set(sList)\n    print(len(sSet))\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\ns = list(input() for _ in range(n))\nprint(len(set(s)))\n","N = int(input())\nS =[str(input()) for i in range(N)]\n\nG = []\n\nfor i in range(N):\n    goods = S[i]\n    if goods in G:\n        continue\n    else:\n        G.append(goods)\n\n\nprint(len(G))","N = int(input())\nS = [input() for i in range(N)]\nprint(len(set(S)))","n = int(input())\na = set([input() for _ in range(n)])\nprint(len(a))","n = int(input())\n\nl = []\nfor _ in range(n):\n  l.append(str(input()))\n  \nprint(set(l).__len__())","N = int(input())\nprint(len(set([input() for _ in range(N)])))","# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Sun Apr 26 22:06:14 2020\n\n@author: Masataka Amau\n\"\"\"\n\nN = int(input())\naaa = []\nfor i in range(N):\n    buf = input()\n    if(buf not in aaa):\n        aaa.append(buf)\n        \nprint(len(aaa))","N = int(input())\nS = set()\nfor i in range(N):\n    S.add(input())\n\nprint(len(S))","n=int(input())\ns=[input() for i in range(n)]\nprint(len(set(s)))","N = int(input())\ndic = {}\nfor i in range(N):\n    s = input()\n    if not s in dic.keys():\n        dic[s] = 1\nprint(len(dic.keys()))\n","n = int(input())\nA=set()\nB=set()\n\nfor i in range(n):\n\ts = input()\n\tif len(s)>=5:\n\t\tA.add(s)\n\telse:\n\t\tB.add(s)\n\t\t\nprint(len(A)+len(B))\n\n\t\n","n = int(input())\nS = [input() for i in range(n)]\n\ncount = 0\ni=0\nwhile S != []:\n    temp = len(S)\n    S = [s for s in S if s != S[i]]\n    if temp > len(S):\n        count += 1\n        i = 0\n    i +=1\n    if i == len(S):\n        i = 0\nprint(count)","n = int(input())\ns = set()\nfor _ in range(n):\n  s.add(input())\n  \n  \n  \nprint(len(s))","n = int(input())\nprint(len(set(list([input() for _ in range(n)])))) ","n = int(input())\nitem = {}\nfor i in range(n):\n  it = input()\n  item[it] = 'y'\nprint(len(item))\n","n = int(input())\nu = set()\nfor i in range(n):\n  u.add(input())\nprint(len(u))","import sys\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\nn = int(input())\nans = set()\nfor i in range(n):\n    ans.add(input().strip())\n\nprint(len(ans))\n","N = int(input())\nS = {input() for _ in range(N)}\nprint(len(S))","from collections import defaultdict,deque\nimport sys,heapq,bisect,math,itertools,string,queue,copy,time\nsys.setrecursionlimit(10**8)\ninput = sys.stdin.readline\nINF = float('inf')\nmod = 10**9+7\neps = 10**-7\ndef inp():\n    '''\n    \u4e00\u3064\u306e\u6574\u6570\n    '''\n    return int(input())\ndef inpl():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6574\u6570\n    '''\n    return list(map(int, input().split()))\ndef inpl_str():\n    '''\n    \u4e00\u884c\u306b\u8907\u6570\u306e\u6587\u5b57\n    '''\n    return list(input().split())\n\nn = inp()\ns=set()\nfor i in range(n):\n    st=input()\n    s.add(st)\nprint(len(s))","import sys\nimport os\n\ndef file_input():\n    f = open('..\/Beginner_Contest_164\/input.txt', 'r')\n    sys.stdin = f\n\ndef main():\n    #file_input()\n    # A,B,C,D=map(int, input().split())\n    N = int(input())\n\n    S = []\n    val = 0\n    for i in range(N):\n        str = input()\n        if str not in S:\n            val += 1\n            S.append(str)\n\n    print(val)\n\nif __name__ == '__main__':\n    main()\n","N = [int(n) for n in input().split()][0]\n\nS = set(input() for _ in range(N))\nprint(len(S))\n\n","N = int(input())\nS = set([input() for _ in range(N)])\nprint(len(S))\n","n=int(input())\ns={input() for _ in range(n)}\nprint(len(s))","N = int(input())\ns = [input() for i in range(N)]\nk = sorted(s)\nd = 0\nfor i in range(N-1):\n\tif(k[i] == k[i+1]):\n\t\td+=1\n\t\t\nprint(N-d)\n","import sys\np = []\nfor l in sys.stdin:\n    a.append(l)\ns = set()\nfor i in range(1, len(p)):\n    s.add(p[i])\nprint(len(set(s)))","# C - gacha\ndef main():\n    _, *S = open(0).read().split()\n    print(len(set(S)))\n\n\nif __name__ == \"__main__\":\n    main()\n","N = int(input())\n\nS = set()\nfor _ in range(N):\n  s = input()\n  S.add(s)\n\nprint(len(S))\n","N=int(input())\ncount=0\nA=''\nfor i in range(0,N):\n  B=input()\n  if A==B:\n    count+=0\n  else:\n    count+=1\nprint(count)   ","n = int(input())\nl = [input() for _ in range(n)]\no = l[0:n+1]\n\nprint(len(list(set(o))))","N = int(input()) #1\u884c\u76ee\u306eN\u3092\u53d6\u5f97\u3059\u308b\ns = [input() for i in range(N)] #\u8907\u6570\u884c\u306e\u6570\u5024\u306e\u5165\u529b\u3092\u53d6\u5f97\nprint(len(s))","import sys\ninput = sys.stdin.readline\ndef print_ans(N, ar):\n    \"\"\"Test Case\n    >>> print_ans(3, [\"apple\", \"orange\", \"apple\"])\n    2\n    >>> print_ans(5,[\"grape\" ,\"grape\" ,\"grape\" ,\"grape\" ,\"grape\"])\n    1\n    \"\"\"\n    print(len(set(ar)))\n    \n\nif __name__ == '__main__':\n    N = int(input().rstrip())\n    ar = [input().rstrip() for _ in range(N) ]\n    print_ans(N, ar)\n\n\n","n = int(input())\nlst = { input() for i in range(n) }\nprint(len(lst))","n = int(input())\nA = []\nfor i in range(n):\n    A.append(input())\nA = list(set(A))\nprint(len(A))\n","inputs = open(0).readlines()\nn = int(inputs[0])\nS = [s.strip() for s in inputs[1:]]\nprint(len(set(S)))","n = int(input())\n\nd = {}\nfor _ in range(n):\n    s = input()\n    if not s in d:\n        d[s] = 0\n        \nprint(len(d.keys()))","N = int(input())\nfruits = [input() for i in range(N)]\nprint(len(set(fruits)))","N = int(input())\nS = []\nfor i in range(N):\n    S.append(input())\nprint(set(S))","N = int(input())\nlist1 = set()\nfor i in range(N):\n    taisho = input()\n    if not taisho in list1:\n        list1.add(taisho)\nprint(len(list1))\n","set2=set()\nN=int(input())\nans=0\nfor i in range(N):\n  s=input()\n  if not s in set2:\n    ans+=1\n    set2.add(s)\nprint(ans)","n = int(input())\nS = [input() for _ in range(n)]\nprint(len(set(S)))","N=int(input())\nS=[input() for i in range(N)]\nS=list(set(S))\nprint(len(S))","N = int(input())\n \nres = set()\nfor i in range(N):\n    res.add(input())\n \nprint(len(res))","def mapint_inp():\n    return map(int, input().split())\n\ndef intinp():\n    return int(input())\n\nN = intinp()\nitem_set = set()\nans = 0\n\nfor _ in range(N):\n    S = input()\n    if S in item_set: continue\n    item_set.add(S)\n    ans += 1\n\nprint(ans)","n = int(input())\nlist=[]\ncount = 0\n\nfor i in range(n):\n\t\n\tstr = input()\n\tif (not str in list):\n\t\tcount += 1\n\t\tlist.append(str)\n\nprint(count)","N=int(input())\ns=[input() for i in range(N)]\nr=set(s)\nprint(len(r))","#c\nN = int(input())\nS = []\nfor _ in range(N):\n    S.append(str(input()))\n\nprint(len(list(set(S))))","a = int(input())\nc= [input() for i in range(a)]\nn = int(c[0])\nc.pop(0)\n\nlst = []\n\nfor i in range(len(c)):\n    if not(c[i] in lst):\n        lst.append(i)\nprint(len(lst))","# -*- coding: utf-8 -*-\n# \u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u306e\u6574\u6570\u306e\u5165\u529b\n#N, K = map(int, input().split())\nN = int(input())\nlist = []\n# \u6587\u5b57\u5217\u306e\u5165\u529b\nfor i in range(N):\n    s = input()\n    if not s in list:\n        list.append(s)\n\n#print(list)\nprint(len(list))\n","def main():\n  import collections\n  \n  n=int(input())\n  string_list=[input() for i in range(n)]\n  c = collections.Counter(string_list)\n  print(len(c))\n  \nmain()","N=int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))\n","n = int(input())\ndata = set()\nfor i in range(n):\n\tdata.add(input())\n\nprint(len(data))","N = int(input())\nS = [input() for i in range(N)]\n\nS_set = set(S)\nprint(len(S_set))\n","N = int(input())\narray = set()\nfor i in range(N):\n    array.add(input())\nprint(len(array))\n","N = int(input())\nprint(len(set(input() for _ in range(N))))","from collections import Counter\nprize = Counter()\nN = int(input())\nfor i in range(N):\n    prize[input()] += 1\n\nprint(len(list(prize.keys())))\n","import math\nN = int(input())\ndi = {}\ncount = 0\nfor i in range(N):\n    word = input()\n    if word not in di:\n        di[word] = 1\n        count += 1\n    else:\n        di[word] += 1\nprint(count)","#C\nn = int(input())\ns = [input() for _ in range(n)]\n\ns_set = set(s)\nprint(len(s_set))","num = int(input())\ntargets = []\ntargetl = []\nhit = 0\nfor j in range(num):\n    check = input()\n    long = len(check)\n    if long <= 5:\n        if check not in targets:\n            targets.append(check)\n            hit += 1\n    elif long >= 6:\n        if check not in targets:\n            targetl.append(check)\n            hit += 1\nprint(hit)","#!\/usr\/bin\/env python3\nimport sys\n\nN = int(input())\n\ndic = {}\nfor i in range(N):\n    S = input()\n    if S not in dic:\n        dic[S] = 1\n\nprint(len(dic.keys()))","def main():\n    n = int(input())\n    S = [input() for _ in range(n)]\n    print(len(set(S)))\nmain()","n=int(input())\ns=[]\nfor i in range(n): s.append(input())\ns.sort()\nm=n\nfor i in range(1,n):\n  if s[i]==s[i-1]: m-=1\nprint(m)","N = int(input())\nS = [input() for _ in range(N)]\nS = set(S)\nprint(len(S))","N=int(input())\nlist=[input() for i in range(N)]\nlist.sort()\nn=1\ns=list[0]\nfor i in range(N):\n  if list[i] != s:\n    n+=1\n    s=list[i]\nprint(n)","N = int(input())\nS = []\nfor i in range(N):\n  new = input()\n  if not(new in S):\n  \tS.append(new)\nprint(len(S))","a=int(input())\nb=[input() for _ in range(10)]\ns=set(b)\nprint(min(a,len(s)-1) if '' in b else min(a,len(s)))","n = int(input())\ns = [input() for _ in range(n)]\nm = list(set(s))\nprint(len(m))","n = int(input())\n\nm = {}\nfor i in range(n):\n  s = input()\n  m[s] = True\n  \nprint(len(m))\n","N = int(input())\nr = []\nfor i in range(N):\n    a = input()\n    r.append(a)\n\nprint(len(set(r)))","from sys import stdin\nimport math\nimport fractions\n\nn = int(stdin.readline().rstrip())\n\ns = [0] * n\n\nfor i in range(n):\n    s[i] = stdin.readline().rstrip()\n\nresult = {}\nfor ss in s:\n    result[ss] = 1\n\nprint(len(result))","N = int(input())\nl = []\nfor i in range(N):\n    l.append(input().rstrip())\nprint(len(list(set(l))))","n = int(input())\nlist = []\nfor i in range(n):\n  s = input()\n  list.append(s)\n  set_list = set(list)\n\nprint(len(set_list))","N = int(input())\nret = {}\nfor i in range(N):\n    ret[input()] = 0\nprint(len(ret.keys()))","a=int(input())\nlist1=[]\nfor i in range(a+1):\n  list1.append(input())\n\nprint(len(list(set(list1))))","N = int(input())\nS = {}\n\nfor i in range(N):\n    s = input()\n    if s not in S.values():\n        S[i] = s\nprint(len(S))        ","N = int(input())\nS = [input() for _ in range(N)]\nprint(len(set(S)))","n=int(input())\na = [input() for i in range(n)]\n\na=set(a)\n\nprint(len(a))","n=int(input())\na=set()\nfor i in range(0,n):\n    b=input()\n    a.add(b)\nprint(len(a))","N = int(input())\nL = []\nif not (1 <= N <= 2*(10**5)):\n    exit()\n\n\nfor i in range(N):\n    d = input()\n    # if not (1 <= len(d) <= 10):\n    #    exit()\n    # if not (d.lower() == d):\n    #     exit()\n    L.append(d)\n\nprint(len(set(L)))","# coding: utf-8\n# Your code here!\nimport math\n\nN = int(input())\nS = [\"\" for i in range(N)]\nfor i in range(N):\n    S[i] = input()\n    \nS.sort()\n\nif N==1:\n    print(1)\nelse:\n    count = 1\n    for i in range(N-1):\n        if S[i] != S[i+1] :\n            count += 1\n    print(count)","n = int(input())\nans = set()\nfor i in range(n):\n  ans.add(input())\nprint(len(ans))","import sys, re, os\nfrom collections import deque, defaultdict, Counter\nfrom math import ceil, sqrt, hypot, factorial, pi, sin, cos, radians\n# from fractions import gcd\nfrom itertools import permutations, combinations, product, accumulate\nfrom operator import itemgetter, mul\nfrom copy import deepcopy\nfrom string import ascii_lowercase, ascii_uppercase, digits\nfrom functools import reduce\nfrom bisect import bisect_left, insort_left\nfrom heapq import heapify, heappush, heappop\n\nINPUT = lambda: sys.stdin.readline().rstrip()\nINT = lambda: int(INPUT())\nMAP = lambda: map(int, INPUT().split())\nS_MAP = lambda: map(str, INPUT().split())\nLIST = lambda: list(map(int, INPUT().split()))\nS_LIST = lambda: list(map(str, INPUT().split()))\n\nsys.setrecursionlimit(10 ** 9)\nINF = float('inf')\nmod = 10 ** 9 + 7\n\n\ndef main():\n    N = INT()\n    S = [INPUT() for _ in range(N)]\n    print(len(set(S)))\n\n\nif __name__ == '__main__':\n    main()\n","n=int(input())\ns = [0]*n\ndic = []\ncount = 1\nfor i in range(n):\n    s[i] = input()\n\nsorted(s)\nfor i in range(n):\n    sw = 0\n    if i == 0:\n        dic.append(s[0])\n    else:\n        for name in dic:\n            if str(name) == str(s[i]):\n                sw = 1\n                break\n        if sw == 0:\n            dic.append(s[i])\n            count += 1\nprint(count)","n = int(input())\n*s, = [input() for _ in range(n)]\nsets = set()\nfor si in s:\n    sets.add(si)\nprint(len(sets))","s=[]\nn=int(input())\n\nfor i in range(n):\n\ts.append(input())\n#\u51e6\u7406\nl=[]\nl=list(set(s))\nprint(len(l))\n\n\n","N = int(input())\nS = {input() for _ in range(N)}\nprint(len(S))\n","n = int(input())\nkeihinn_list = []\nfor i in range(n):\n    keihinn_list.append(input())\nkeihinn_list.sort()\ncount = 0\n\nwhile True:\n    if len(keihinn_list) == 0:\n        break\n    else:\n        keihinn = keihinn_list[0]\n        a = keihinn_list.count(keihinn)\n        keihinn_list = keihinn_list[a:]\n        count += 1\n\nprint(count)\n","N = int(input())\nS = []\nfor _ in range(N):\n    S.append(input())\nprint(len(set(S)))","import collections\n\nN = int(input())\nK = []\nfor i in range(N):\n    S = input()\n    K.append(S)\n    i = i + 1\n    \nA = collections.Counter(K)\n\nprint(len(A))","n=int(input())\ns=[]\nfor i in range(n):\n    s.append(input())\ns.sort()\nans=n\nfor i in range(n-1):\n    if s[i]==s[i+1]:\n        ans-=1\nprint(ans)","N = int(input())\nS = [input() for i in range(N)]\n\nprint(len(set(S)))","from collections import Counter\nn=int(input())\nl=[]\nfor i in range(n):\n    s=input()\n    l.append(s)\nfreq=dict(Counter(l))\nans=list(freq.values())\nprint(len(ans))","num=int(input())\nfor i in range (0,num):\n\tsome=input(list1[])\n    list1.append(some)\nprint(len(set(i for i in list1 if i.isalpha())))","n = int(input())\ns = [input() for i in range(n)]\ns.sort()\ncnt = 1\n\nfor i in range(1, n):\n    if s[i] != s[i-1]:\n        cnt += 1\n    \nprint(cnt)","N = int(input())\nans = []\nfor i in range(N):\n    s = input()\n    ans.append(s)\nanswer = set(ans)\nprint(len(answer))"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>We have <var>A<\/var> cards, each of which has an integer <var>1<\/var> written on it. Similarly, we also have <var>B<\/var> cards with <var>0<\/var>s and <var>C<\/var> cards with <var>-1<\/var>s.<\/p>\n<p>We will pick up <var>K<\/var> among these cards. What is the maximum possible sum of the numbers written on the cards chosen?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>0 \\leq A, B, C<\/var><\/li>\n<li><var>1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A<\/var> <var>B<\/var> <var>C<\/var> <var>K<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the maximum possible sum of the numbers written on the cards chosen.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>2 1 1 3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<p>Consider picking up two cards with <var>1<\/var>s and one card with a <var>0<\/var>.\nIn this case, the sum of the numbers written on the cards is <var>2<\/var>, which is the maximum possible value.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>1 2 3 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>0\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>2000000000 0 0 2000000000\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>2000000000\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementWe have A cards, each of which has an integer 1 written on it. Similarly, we also have B cards with 0s and C cards with -1s.\nWe will pick up K among these cards. What is the maximum possible sum of the numbers written on the cards chosen?\n\n\n\n\nConstraints\nAll values in input are integers.\n0 \\leq A, B, C\n1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA B C K\n\n\n\n\n\nOutputPrint the maximum possible sum of the numbers written on the cards chosen.\n\n\n\n\n\n\nSample Input 12 1 1 3\n\n\n\n\n\nSample Output 12\n\nConsider picking up two cards with 1s and one card with a 0.\nIn this case, the sum of the numbers written on the cards is 2, which is the maximum possible value.\n\n\n\n\n\nSample Input 21 2 3 4\n\n\n\n\n\nSample Output 20\n\n\n\n\n\n\nSample Input 32000000000 0 0 2000000000\n\n\n\n\n\nSample Output 32000000000\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>We have <var>A<\/var> cards, each of which has an integer <var>1<\/var> written on it. Similarly, we also have <var>B<\/var> cards with <var>0<\/var>s and <var>C<\/var> cards with <var>-1<\/var>s.<\/p>\n<p>We will pick up <var>K<\/var> among these cards. What is the maximum possible sum of the numbers written on the cards chosen?<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>0 \\leq A, B, C<\/var><\/li>\n<li><var>1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A<\/var> <var>B<\/var> <var>C<\/var> <var>K<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the maximum possible sum of the numbers written on the cards chosen.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>2 1 1 3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<p>Consider picking up two cards with <var>1<\/var>s and one card with a <var>0<\/var>.\nIn this case, the sum of the numbers written on the cards is <var>2<\/var>, which is the maximum possible value.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>1 2 3 4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>0\n<\/pre>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>2000000000 0 0 2000000000\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>2000000000\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementWe have A cards, each of which has an integer 1 written on it. Similarly, we also have B cards with 0s and C cards with -1s.\nWe will pick up K among these cards. What is the maximum possible sum of the numbers written on the cards chosen?\n\n\n\n\nConstraints\nAll values in input are integers.\n0 \\leq A, B, C\n1 \\leq K \\leq A + B + C \\leq 2 \\times 10^9\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA B C K\n\n\n\n\n\nOutputPrint the maximum possible sum of the numbers written on the cards chosen.\n\n\n\n\n\n\nSample Input 12 1 1 3\n\n\n\n\n\nSample Output 12\n\nConsider picking up two cards with 1s and one card with a 0.\nIn this case, the sum of the numbers written on the cards is 2, which is the maximum possible value.\n\n\n\n\n\nSample Input 21 2 3 4\n\n\n\n\n\nSample Output 20\n\n\n\n\n\n\nSample Input 32000000000 0 0 2000000000\n\n\n\n\n\nSample Output 32000000000\n\n\n","solve_rate":0.5634602076,"codenet_problem_id":"p02682","input_testcases":{"89":"4 2 0 2","37":"0 2 8 3","72":"0 6 8 8","51":"0 2 6 4","66":"1 2 6 4","34":"1 2 9 3","91":"2 3 14 2","21":"1 2 4 3","71":"0 1 8 0","32":"2 1 0 3","81":"1 2 15 4","33":"0 2 5 4","94":"2 3 10 9","1":"2 0 1 3","12":"6 1 1 7","18":"3 0 17 18","22":"1 2 8 3","3":"0 3 8 5","90":"1 1 6 4","58":"0 6 8 6","75":"2 7 3 2","87":"1 14 1 1","9":"4 2 0 4","53":"1 2 10 4","79":"1 1 3 4","80":"2 3 9 2","14":"1 0 8 9","65":"2 2 0 4","13":"0 3 10 12","0":"1 2 5 4","76":"1 9 1 1","20":"1 2 6 3","2":"0 3 8 6","24":"0 3 8 3","92":"2 2 18 4","101":"2 1 1 3","35":"1 2 10 3","17":"10 2 4 8","98":"1 14 2 1","70":"0 3 10 9","100":"2000000000 0 0 2000000000","99":"4 2 1 2","63":"0 0 3 1","50":"2 2 4 4","19":"1 2 5 3","83":"1 3 10 9","56":"0 3 10 8","10":"4 3 4 3","25":"0 3 5 5","7":"2 2 3 4","103":"1 2 3 4","40":"0 3 8 8","57":"0 3 8 0","44":"0 6 3 6","43":"0 6 5 6","102":"2 1 1 3","62":"1 6 1 1","68":"1 2 18 4"},"output_testcases":{"89":"2\n","37":"-1\n","72":"-2\n","51":"-2\n","66":"0\n","34":"1\n","91":"2\n","21":"1\n","71":"0\n","32":"2\n","81":"0\n","33":"-2\n","94":"-2\n","1":"1\n","12":"6\n","18":"-12\n","22":"1\n","3":"-2\n","90":"-1\n","58":"0\n","75":"2\n","87":"1\n","9":"4\n","53":"0\n","79":"-1\n","80":"2\n","14":"-7\n","65":"2\n","13":"-9\n","0":"0\n","76":"1\n","20":"1\n","2":"-3\n","24":"0\n","92":"2\n","101":"2\n","35":"1\n","17":"8\n","98":"1\n","70":"-6\n","100":"2000000000\n","99":"2\n","63":"-1\n","50":"2\n","19":"1\n","83":"-4\n","56":"-5\n","10":"3\n","25":"-2\n","7":"2\n","103":"0\n","40":"-5\n","57":"0\n","44":"0\n","43":"0\n","102":"2\n","62":"1\n","68":"0\n"},"n_missing":46,"programs":["a,b,c,k = [int(i) for i in input().split()]\nif k<=a:\n  print(k)\nelse if a<k<=a+b:\n  print(a)\nelse:\n  print(a-(k-a-b))\n      ","a, b, c, k = map(int, input().split())\nans = 0\nans += a\nk -= a\nk -= b\nif k>0:\n    ans-=k\nprint(ans)","a,b,c,k=map(int,input().split())\nans=0\nans+=a\nif k-a-b>=0:\n    ans-=k-a-b\nprint(ans)","a, b, c, k = map(int, input().split())\n\nif k <= a:\n  print(k)\nelif k <= a+b:\n  print(a)\nelse:\n  print(2*a - k + b)","a,b,c,k = map(int,input().split())\n\nans = 0\nif(k>a):\n    k-=a\n    ans+=a\nelse:\n    ans = k\n    k=0\nif k>0:\n    if k>b:\n        k-=b\n    else:\n        k=0\nif k>0:\n    if k>c:\n        ans-=c\n    else:\n        ans -= k\n\nprint(ans)\n","if __name__ == \"__main__\":\n    A, B, C, K = list(map(int, input().split()))\n    if A > K:\n        print(K)\n    elif A <= K <= A+B:\n        print(A)\n    else:\n        print(A-1*(K-A-B))","a = list(map(int, input().split()))\nn = a[0]\nm = a[1]\nl = a[2]\nk = a[3]\n\nif 0 < n < k:\n    print(n)\n    \nelif n >= k:\n    print(n)\nelif n + m >= k:\n    print(n)\nelif n + m + l >= k:\n    print(n -1*(k-l))\nelse:\n    print(0)","a,b,c,k=map(int,input().split())\ns=0\nfor i in range(k):\n    if a!=0:\n        s+=1\n        a-=1\n    elif b != 0:\n        b-=1\n    elif c!=0:\n        s-=1\n        c-=1\n\nprint(s)\n        \n","A,B,C,K = list(map(int,input().split()))\n\ncount = K\nans = 0\n\n\nif count <= A:\n    print(A)\n    exit()\nelse:\n    count -= A\n    ans += A\n\n    if count <= B:\n        print(ans)\n        exit()\n    else:\n        count -= B\n        ans -= count\n        print(ans)\n        exit()\n        \n","a, b, c, k = map(int, input().split())\nans, k = min(a, k), k-min(a, k)\nk -= min(b, k)\nans -= min(c,k)\nprint(ans)","n = list(map(int,input().split()))\n\nsum = 0\nnum = 0\nnm = [1,0,-1]\n\nc = 0\n\nwhile True:\n    if n[num] == 0:\n        num += 1\n        continue\n    sum += nm[num]\n    n[num]-=1\n    c+=1\n    if c == n[3]:\n        break\n\n\nprint(sum)\n","a,b,c,k=map(int,input().split())\ncount=0\ncount+=a\nif k-a>0:\n    k-=a\nelse:\n    print(k)\n    exit()\nif k-b>0:\n    k-=b\nelse:\n    print(count)\n    exit()\nif k-c>0:\n    count-=c\nelse:\n    count-=k\n    print(count)\n    exit()","a, b, c, k = map(int, input().split())  # x = 1, y = 2\n\nsum_card = 0\nsum_n = 0\n\nif k <= a:\n    print(k)\n    exit()\nelif k <= (a + b):\n    print(a)\n    exit()\nelse:\n    print(a - (k - a - b))\n","a, b, c, k= map(int, input().split()) \n\nif a+b >= k:\n    print(a)\nelse:\n    print(a- (k-a-b) )","A, B, C, K = map(int, input().split())\n\nif A >= K:\n    print(K)\nelif A + B >= K:\n    print(A)\nelif A + B + C >= K:\n    print(A + (-1) *(K - A - B))\nelse:\n    print(A - B)","def maxSum(a, b, c, k):\n  currentSum = 0\n  currentSum += min(a, k)\n  k -= a\n  if k <= 0:\n    return currentSum\n  k -= min(b, k)\n  if k <=0:\n    return currentSum\n  currentSum -= min(c, k)\n  return currentSum\n\na, b, c, k = map(int, input().split())\nprint(maxSum(a, b, c, k))","a,b,c,k=map(int,input().split())\nif k<=a:\n    print(k)\nelif k<=a+b:\n    print(a)\nelse:\n    print(2*a-k+b)","def create_union_answer(a, b, c, k):\n    if a >= k:\n        return a\n    if a + b >= k:\n        return a\n    # can select type[c] card numbers.\n    can_c = k - (a + b)\n    if can_c > c :\n        can_c = c\n    return a - can_c\n\nvalues = input().split()\n\na = int(values[0])\nb = int(values[1])\nc = int(values[2])\nk = int(values[3])\n\nanswer = create_union_answer(a, b, c, k)\nprint(answer)","a, b, c, k = map(int, input().split())\n\nxa = min(k, a)\nk = k - xa\nxb = min(k, b)\nk = k - xb\nxc = k\n\nsum = xa * (1) + xb * (0) + xc * (-1)\nprint(sum)","if k<=a:\n    print(k)\nelse:\n    x = k-a\n    if x<=b:\n        print(a)\n    else:\n        print(a-(x-b))","a, b, c, k = list(map(int, input().split()))\n\nres = 0\nif k >= a:\n    res = a\n    k = k - a\n    if k >= b:\n        k = k - b\n        if k >= 0:\n            res = res - k\nelse:\n    res = k\n\nprint(res)\n","import fileinput\n\na, b, c, k = map(int, input().split())\n\ns = 0\nif a >= k:\n    print(a)\n    exit()\n\ns += a\nkk = k - a\n\nif b >= kk:\n    print(s)\n    exit()\n\nkkk = kk - b\n\ns -= kkk\nprint(s)\n\n","s  = input().split(\" \")\na  = int(s[0])\nb  = int(s[1])\nc  = int(s[2])\nk  = int(s[3])\n\nt = 0\nif a >= k:\n  print(a)\nelse:\n  t += a\n  if b >= (k - a):\n    print(a)\n  else:\n    t -=  (k - a -b)\n    print(t)","a, b, c, k = map(int, input().split())\nif (a >= k):\n    print(k)\nelif (a < k and k <= a + b):\n    print(a)\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = list(map(int, input().split()))\n\nif K <= A:\n\tprint(K)\nelif K <= A+B:\n\tprint(A)\nelse:\n\tprint(2*A + B - K)","#! \/usr\/bin\/env python3\n\nimport bisect, collections, copy, heapq, itertools, math, numpy, string\nimport sys\n\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef LS():\n    return list(sys.stdin.readline().rstrip().split())\n\n\ndef main():\n    a, b, c, k = LI()\n    sum = 0\n    # print(a, b, c, k)\n    if a >= k:\n        sum = sum + k\n        k = 0\n    else:\n        sum = sum + a\n        k = k - a\n    # print(\"xxx\", a, b, c, k, sum)\n    if k > 0:\n        if b >= k:\n            k = 0\n        else:\n            k = k - b\n    # print(\"yyy\", a, b, c, k, sum)\n    if k > 0:\n        if c >= k:\n            sum = sum - k\n            k = 0\n        else:\n            sum = sum - c\n            k = k - c\n    # print(\"zzz\", a, b, c, k, sum)\n    print(sum)\n\n\nmain()\n","if __name__==\"__main__\":\n    a,b,c,k = map(int, input().split())\n    picks = 0\n\n    if a >= k:\n        print(k)\n    elif a+b >= k:\n        print(a)\n    else:\n        print(a-(k-(a+b)))\n","A,B,C,K = map(int,input().split())\n\nif K<=A:\n    print(K)\nelif A<K<=A+B:\n    print(A)\nelse:\n    print(A-(K-A-B))\n","def t1():\n    ll=list(map(int,input().split()))\n    K=ll[-1]\n    S=[1,0,-1]\n    wa=0\n    \n    if K>ll[0]:\n        wa+=ll[0]\n        K-=ll[0]\n        if K>ll[1]:\n            K-=ll[1]\n            wa-=K\n        else:\n            pass\n    else:\n        wa+=K\n    \n\n    print(wa)\n        \n            \n\n      \nif __name__ == '__main__':\n    t1()\n    ","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n  A, B, C, K = map(int, input().split())\n  c = min(A, K)\n  K -= (A + B)\n\n  if K > 0:\n    c -= K\n\n  print(c)\n\n\nif __name__ == '__main__':\n  main()\n","a,b,c,h=(int(x) for x in input().split())\nnum = 0\ncount=h\nnum += a\ncount -= a\nif count > 0:\n  count -= b\nif count >0:\n  num -= count\nprint(num)\n","A, B, C, K = map(int,input().split())\nsum = 0\nn = 0\nif K - A > 0:\n    sum = A\n    n = K - A\n    if B < n:\n        n = n - B\n        sum += (-1) * n\nelse:\n    sum = K\nprint(sum)","a, b, c, k = map(int, input().split())\nif k<=a:\n    print(k)\nelif a < k <= a+b:\n    print(a)\nelse:\n    print(a-(k-a-b))","A, B, C, K = (int(x) for x in input().split())\nif A >= K:\n    ans = K\nelse:\n    ans = A\n    tmp = K - A\n    if B >= tmp:\n        pass\n    else:\n        tmp = tmp - B\n        ans += tmp * (-1)\nprint(ans)","A, B, C, K = map(int, input().split())\n\nans = 0\na = min(A, K)\nans += a\n\nK -= a\nb = min(B, K)\nK -= b\n\nc = min(C, K)\nans -= c\n\nprint(ans)\n","def main(A, B, C, K):\n    \"\"\"\n    a = [1 for _ in range(A)]\n    b = [0 for _ in range(B)]\n    c = [-1 for _ in range(C)]\n    k = a + b + c\n    ans = sum(k[:K])\n    \"\"\"\n    if A+B >= K:\n        return K\n    else:\n        return A - (K-A-B)\n\nif __name__ == '__main__':\n    A, B, C, K = map(int, input().split())\n    ans = main(A, B, C, K)\n    print(ans)\n\n","#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(A: int, B: int, C: int, K: int):\n    ans = 0\n    for x, y in ((1, A), (0, B), (-1, C)):\n        z = min(y, K)\n        ans += x * z\n        K -= z\n    return ans\n\n\n\n# Generated by 1.1.6 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    C = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    print(solve(A, B, C, K))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","a, b, c, k = map(int, input().split())\nif k <= a+b:\n    print(min(k, a))\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = map(int, input().split())\n\na = min(A, K)\nb = max(K - a, 0)\nb = min(b, B)\nc = max(K - a - b, 0)\n\nprint(a * 1 + c * (-1))","A, B, C, K = map(int, input().split())\nif A > K:\n    print(K)\nelif A + B > K:\n    print(A)\nelse:\n    print(A - (K - A - B))\n","a, b, c, k = map(int, input().split())\n\nans = 0\nif k >= a:\n    ans += a\n    k -= a\n    if k >= b:\n        ans -= (k - b)\n\nelse:\n    ans = k\n\nprint(ans)","if __name__ == '__main__':\n    a, b, c, k = map(int, input().split())\n    \n    if k <= a:\n        print(k)\n    elif a < k and k <= (a+b):\n        print(a)\n    else:\n        print(a - (k-a-b))","A,B,C,K = map(int,input().split())\nsum = 0;\nif A <= K:\n\tsum += A;\n\tK -= A\nelse:\n\tsum += K;\n\tK -= K\nif B <= K:\n\tK -= B\nelse:\n\tK -= K\nif C <= K:\n\tsum -= C\n\tK -= C\nelse:\n\tsum -= K\n\tK -= K\nprint(sum)","# -*- coding: utf-8 -*-\na, b, c, k = map(int, input().split())\n\nmax = 0\n\nif a <= k:\n    max = a\n    k -= a\n    if 0 < k:\n        k -= b\n        if 0 < k:\n            max -= min(c, k)\n\nelse:\n    max = a\n\n\nprint(max)\n","a,b,c,k = map(int, input().split())\n \nif k > a :\n  k = k-a\n  if k > b :\n    k = k-b\n    if k < c :\n      c = k\n  else:\n    c = 0\nelse:\n  a = k\n  c = 0\n \nprint(a-c)","A,B,C,K = list(map(int, input().split()))\n\nans = 0\n\nif A >= K:\n    print(K)\nelse:\n    ans += A\n    K -= A\n    K -= B\n\n    print(ans - K)","A,B,C,K=map(int,input().split())\nif A>=K:\n    print(K)\nelif A+B>=K:\n    print(A)\nelse:\n    print(A-(K-A-B))","arr = [int(char) for char in input().split(\" \")]\na, b, c, k = arr[0], arr[1], arr[2], arr[3]\nif a+b>=k:\n  print(a)\nelse:\n  print(a-(k-(a+b)))","A,B,C,K = map(int,input().split())\nif A < K:\n    if A + B < K:\n        print(A + (-1 * (K - A - B)))\n    else:\n        print(A)\nelse:\n    print(K)","a,b,c,k=map(int,input().split())\n#sum=a*1+b*0-c*1\nif a>=k:\n    print(1*k)\nif a<k and a+b>=k:\n    print(1*(k-b))\nif a<k and a+b<k and a+b+c>=k:\n    print(a-(k-a-b))","# -*- coding: utf-8 -*-\ninputs = list(map(int, input().split()))\n\nif inputs[0]+inputs[1]>=inputs[3]:\n  print(inputs[0])\nelse:\n  print(inputs[0] - (inputs[3] - (inputs[0]+inputs[1])))","N = [int(e) for e in input().split()]\nif(N[3] - N[0] > 0):\n    N[3] -= N[0]\n    if(N[3] - N[1] > 0):\n        N[3] -= N[1]\n        ans = N[0] - N[3]\n    else:\n        ans = N[0]\nelse:\n    ans = N[0]\nprint(ans)","A, B, C, K = map(int,input().split())\nans = 0\nif(K<=A):\n  ans = K\nelif(K<=A+B):\n  ans = A\nelse:\n  ans = A-(K-A-B)\nprint(ans)","a,b,c,k=map(int,input().split())\nif k<=a+b:\n    print(a)\nelse:\n    print(a-(k-a-b))","a, b, c, k = map(int, input().split(' '))\n\nif a >= k:\n    print(k)\nelif (a + b) >= k:\n    print(a)\nelse:\n    print(a - (k - (a + b)))","A, B, C, K = map(int, input().split())\n\nsum = 0\nsum += A * 1\nif(A + B < K):\n  sum += C * (-1)\n\nprint(sum)","a, b, c, k = list(map(int, input().split()))\n\nif k <= a+b:\n    ans = min(a,k)\nelse:\n    ans = 2*a+b-k\nprint(ans)","A, B, C, K = list(map(int, input().split( )))\nmax_score = 0\n\nwhile(K != 0):\n    if(A == 0 and B == 0 and C > 0):\n        C -= 1\n        max_score += -1\n    if(A == 0 and B > 0):\n        B -= 1\n    if(A > 0):\n        A -= 1\n        max_score += 1\n    K -= 1\n\nprint(max_score)","A, B, C, K = map(int, input().split())\n\n\nif K <= A:\n    print(A)\nelif K <= A + B:\n    print(A)\nelse:\n    print(A - (K - A - B))","a,b,c,k = map(int,input().split())\n\nk -= b\nl = max(0,k - a)\na = min(a,k)\nans = max(0,a - l)\nprint(ans)\n","a, b, c, k = map(int, input().split())\n\nans = 0\n\nif a > k:\n  print(k)\n  exit()\n\nif a + b == k:\n  print(a)\nelse:\n  k = ((k - (a + b)) * -1)\n  print(a + k)\n","A, B, C, K = map(int, input().split())\n\nif K <= A+B:\n    print(A)\nelse:\n    print(2*A+B-K)\n","# n = int(input())\na, b, c, k = map(int, input().split())\n# l = list(map(int, input().split()))\n\nif k <= a:\n    print(k)\nelif a < k <= a+b:\n    print(a)\nelif a+b < k <= a+b+c:\n    # print(a - (k - a))\n    print(a-(k - a - b))","A, B, C, K = map(int, input().split())\n\nif A >= K:\n    print(K)\nelif A+B>=K:\n    print(A)\nelif A+B+C <= K:\n    print(A - C)\nelse:\n    print(A - (K-A-B))","A,B,C,K=map(int,input().split())\nans=0\nif A >= K:\n    ans=K\nelse:\n    ans=A\n    K=K-A\n    if B<K:\n        K=K-B\n        if C>=K:\n            ans=ans-K\nprint(ans)\n","d = input()\nd = d.split()\na = int(d[0])\nb = int(d[1])\nc = int(d[2])\nk = int(d[3])\nf = 0\nif a < k:\n    f = f + a\n    k = k - a\n    if b < k:\n        k = k - b\n        f = f - k\n    else:\n        f = f\nelse:\n    f = k\nprint(f)","A,B,C,K=map(int, input().split())\n\nif A+B>=K:\n\tprint(A)\nelse:\n\tprint(A-(K-A-B))\n","def resolve():\n    import sys\n\n    input = lambda: sys.stdin.readline().rstrip()\n\n    a, b, c, k = map(int,input().split())\n    \n    if a + b >= k:\n      print(k)\n    else:\n      print(a-(k-(a+b)))\n      \nresolve()","a,b,c,k = map(int,input().split())\nans = 0\nif a>=k:\n  ans = k\nelif a+b>=k:\n  ans = a\nelse:\n  ans = a - (k-a-b)\nprint(ans)","a,b,c,k = map(int, input().split())\nif k <= a:\n  print(k)\nelif a <= k <= a+b:\n  print(a)\nelif a+b <= k <= a+b+c:\n  print(a - (k-(a+b)))","a,b,c,k=map(int, input().split())\n\nif k<=a:\n        print(k)\nif a<k<a+b:\n        print(a)\nelse:\n        print(a-(k-a-b))","a, b, c, k = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\nk = int(k)\n\nif a >= k:\n    sum = k\nelif a + b >= k:\n    sum = a\nelse:\n    sum = a - (k - a - b)\n    \nprint(sum)\n","# -*- coding: utf-8 -*-\n\nA, B, C, K =  [int(i) for i in input().split()]\n\nif K <= A:\n    print(K)\nelif k <= A+B:\n    print(A)\nelse:\n    print((K-(A+B))*(-1)+A)\n","A,B ,C ,K = map(int,input().split())\n\nif A+B>=K:\n    print(min(A,K))\nelse:\n    print(A+(K-B-A)*(-1))\n\n\n\n","a,b,c,k = map(int,input().split())\nif(a>=k):\n    print(k)\nelif(a+b>=k):\n    print(a)\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif A < K <= A + B:\n    print(A)\nelif A + B < K <= A + B + C:\n    print(2*A+B-K)\n","a,b,c,k= [int(x) for x in input().split()]\nif a>=k:\n\tans = k\nelif a+b>k and a<k:\n\tans = a\nelse: \n\tx=k-a-b\n\tans = a-x\nprint(ans)","a,b,c,K=map(int,input().split())\nif K<=a:\n  print(K)\nelif K<=a+b:\n  print(a)\nelse :\n  print(a-(K-a-b))","def ZZ(): return list(map(int, input().split()))\ndef Z(): return int(input())\n\nA, B, C, K = ZZ()\nS = [1] * A + [0] * B + [-1] * C\nprint(sum(S[:K]))","A, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\n\nelif K <= A + B:\n    print(A)\n\nelse:\n    print(A - (K - A - B))\n","if oneCard >= getCardNum: print(oneCard)\nelif oneCard + zeroCard >= getCardNum: print(oneCard)\nelse: print(oneCard - (getCardNum - oneCard - zeroCard))","arr = [int(char) for char in input().split(\" \")]\na, b, c, k = arr[0], arr[1], arr[2], arr[3]\nif k<=a:\n  print(k)\nelif a+b>=k:\n  print(a)\nelse:\n  print(a-(k-(a+b)))","a,b,c,k=map(int,input().split())\n'''l=[]\nfor _ in range(a):\n    l.append(1)\nfor _ in range(b):\n    l.append(0)\nfor _ in range(c):\n    l.append(-1)\nprint(sum(l[:k]))'''\nsu=0\nif a>=k:\n    print(k)\nelse:\n    su=su+a\n    tem=k-a\n    if b>=tem:\n        print(su)\n    else:\n        tem1=tem-b\n        print(su-tem1)","a,b,c,k=map(int,input().split())\nif k<=a:\n  print(k)\n  exit()\nif k<=(a+b):\n  print(a)\n  exit()\nprint(a-(k-(a+b)))","# \u521d\u671f\u5165\u529b\nimport sys\ninput = sys.stdin.readline\nA,B,C,K = list(map(int, input().split()))\na=1\nb=0\nc=-1\ncount =K\npoint =0\nif A< K:\n    point +=A\n    count -=A\n    K -=A\nelse:\n    point +=K\n    count =0\n    print(point)\n    exit()\n\nif B < count:\n    point +=0\n    count -=B\n    K -=B\nelse:\n    point +=0\n    count =0\n    print(point)\n    exit()    \n\nif C <= count:\n    point -=C\nelse:\n    point -=count\n    count =0\n    \nprint(point)","import sys\nreadline = sys.stdin.readline\n\ndef main():\n    A, B, C, K = map(int, readline().rstrip().split())\n    if A >= K:\n        print(K)\n    elif A + B >= K:\n        print(A)\n    else:\n        print(A - (K - A - B))\n\n\nif __name__ == '__main__':\n    main()","A, B, C, K = map(int, input().split())\n# A : 1, B: 0, C: -1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K-A-B))","A,B,C,K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(2*A+B-K)","A,B,C,K=(int(x) for x in input().split())\nif(A>=K):\n    print(K)\nelif(A+B>=K):\n    print(A)\nelif(A+B+C>=K):\n    print(A-(K-(A+B)))","import sys\n#from collections import defaultdict, deque, Counter\n#import bisect\n#import heapq\n#import math\n#from itertools import accumulate\n#from itertools import permutations as perm\n#from itertools import combinations as comb\n#from itertools import combinations_with_replacement as combr\n#from fractions import gcd\n#import numpy as np\n\nstdin = sys.stdin\nsys.setrecursionlimit(10 ** 7)\nMIN = -10 ** 9\nMOD = 10 ** 9 + 7\nINF = float(\"inf\")\nIINF = 10 ** 18\n\n#n = int(stdin.readline().rstrip())\n#l = list(map(int, stdin.readline().rstrip().split()))\nA, B, C, K = map(int, stdin.readline().rstrip().split())\n#numbers = [[int(c) for c in l.strip().split()] for l in sys.stdin]\n#word = [stdin.readline().rstrip() for _ in range(n)]\n#number = [[int(c) for c in stdin.readline().rstrip()] for _ in range(n)]\n#zeros = [[0] * w for i in range(h)]\n\nif K <= A:\n    print(K)\nelif K <= A +B:\n    print(A)\nelse:\n    print(A- (K-A-B))\n","s = input().split(\" \")\n\nk = int(s[3])\n\nsum = 0\n\nif k >= int(s[0]) :\n    sum += int(s[0])\n    k -= int(s[0])\nelse :\n    sum += k\n    k =0\n\nif k >= int(s[1]) :\n    k -= int(s[1])\nelse :\n    k =0\n\nif k :\n    sum -= k\n\nprint(sum)","A,B,C,K=map(int,input().split())\nif A-K>=0:\n    print(K)\nelif A-K<0 and A+B-K>=0:\n    print(A)\nelse:\n    print(A-(K-A-B))","s = input()\nA, B, C, K = [int(v) for v in s.split(\" \")]\n\nif K <= A:\n  print(K)\nelif K <= A + B:\n  print(A)\nelif K <= A + B + C:\n  print(A - (K - A - B))","A,B,C,K=map(int,input().split())\nprint(A,B,C,K)\nif A+B>=K:\n    print(A)\nelse:\n    print(A-C)","a,b,c,k = map(int,input().split())\nsum=0\nif(a>k):\n  sum+=k\nelse:\n  sum+=a\n  k=k-a\n  if(k==0):\n    print(sum)\n  if(b>k):\n    print(sum)\n  else:\n    k = k-b\n    if(k==0):\n      print(sum)\n    if(c>k):\n      sum-=k\n      print(sum)\n    else:\n      sum-=c\n      print(sum)","A,B,C,K=(int(x) for x in input().split())\nif K<=A:print(K)\nelif K<=A+B:print(A)\nelse: print(A-(K-B-A))\n","a, b, c, k = map(int, input().split())\n\nan = a if a <= k else k\nans = an\nk = k - an\nif k > 0:\n  bn = b if b <= k else k\n  k = k - bn\nif k > 0:\n  cn = k\n  ans = ans - cn\nprint(ans)","a, b, c, k = map(int, input().split())\nans = 0\nfor aa in range(a+1):\n    for bb in range(b+1):\n        for cc in range(c+1):\n            if aa+bb+cc == k:\n                t = aa+cc*-1\n                ans = max(t, ans)\nprint(ans)\n","A,B,C,K = map(int,input().split())\n\na = K - A #A\u306e\u30ab\u30fc\u30c9\u3092\u5f15\u3044\u305f\u5f8c\u306eB,C\u306e\u6570\nb = K - A - B #B\u306e\u30ab\u30fc\u30c9\u3067\u6c34\u5897\u3057\u3057\u305f\u5f8c\u306eC\u306e\u6570\n\nif A = 0:\n    print((-1)*b)\nelif A > 0:\n    if b >= 0:\n        print(A - b)\n    elif b < 0:\n        print(A)","a,b,c,k=map(int,input().split())\nans=0\nans+=min(k,a)\nk-=min(k,a)\nk-=min(k,b)\nans-=min(k,c)\nprint(ans)\n"],"raw_generations":["a,b,c,k = [int(i) for i in input().split()]\nif k<=a:\n  print(k)\nelse if a<k<=a+b:\n  print(a)\nelse:\n  print(a-(k-a-b))\n      ","a, b, c, k = map(int, input().split())\nans = 0\nans += a\nk -= a\nk -= b\nif k>0:\n    ans-=k\nprint(ans)","a,b,c,k=map(int,input().split())\nans=0\nans+=a\nif k-a-b>=0:\n    ans-=k-a-b\nprint(ans)","a, b, c, k = map(int, input().split())\n\nif k <= a:\n  print(k)\nelif k <= a+b:\n  print(a)\nelse:\n  print(2*a - k + b)","a,b,c,k = map(int,input().split())\n\nans = 0\nif(k>a):\n    k-=a\n    ans+=a\nelse:\n    ans = k\n    k=0\nif k>0:\n    if k>b:\n        k-=b\n    else:\n        k=0\nif k>0:\n    if k>c:\n        ans-=c\n    else:\n        ans -= k\n\nprint(ans)\n","if __name__ == \"__main__\":\n    A, B, C, K = list(map(int, input().split()))\n    if A > K:\n        print(K)\n    elif A <= K <= A+B:\n        print(A)\n    else:\n        print(A-1*(K-A-B))","a = list(map(int, input().split()))\nn = a[0]\nm = a[1]\nl = a[2]\nk = a[3]\n\nif 0 < n < k:\n    print(n)\n    \nelif n >= k:\n    print(n)\nelif n + m >= k:\n    print(n)\nelif n + m + l >= k:\n    print(n -1*(k-l))\nelse:\n    print(0)","a,b,c,k=map(int,input().split())\ns=0\nfor i in range(k):\n    if a!=0:\n        s+=1\n        a-=1\n    elif b != 0:\n        b-=1\n    elif c!=0:\n        s-=1\n        c-=1\n\nprint(s)\n        \n","A,B,C,K = list(map(int,input().split()))\n\ncount = K\nans = 0\n\n\nif count <= A:\n    print(A)\n    exit()\nelse:\n    count -= A\n    ans += A\n\n    if count <= B:\n        print(ans)\n        exit()\n    else:\n        count -= B\n        ans -= count\n        print(ans)\n        exit()\n        \n","a, b, c, k = map(int, input().split())\nans, k = min(a, k), k-min(a, k)\nk -= min(b, k)\nans -= min(c,k)\nprint(ans)","n = list(map(int,input().split()))\n\nsum = 0\nnum = 0\nnm = [1,0,-1]\n\nc = 0\n\nwhile True:\n    if n[num] == 0:\n        num += 1\n        continue\n    sum += nm[num]\n    n[num]-=1\n    c+=1\n    if c == n[3]:\n        break\n\n\nprint(sum)\n","a,b,c,k=map(int,input().split())\ncount=0\ncount+=a\nif k-a>0:\n    k-=a\nelse:\n    print(k)\n    exit()\nif k-b>0:\n    k-=b\nelse:\n    print(count)\n    exit()\nif k-c>0:\n    count-=c\nelse:\n    count-=k\n    print(count)\n    exit()","a, b, c, k = map(int, input().split())  # x = 1, y = 2\n\nsum_card = 0\nsum_n = 0\n\nif k <= a:\n    print(k)\n    exit()\nelif k <= (a + b):\n    print(a)\n    exit()\nelse:\n    print(a - (k - a - b))\n","a, b, c, k= map(int, input().split()) \n\nif a+b >= k:\n    print(a)\nelse:\n    print(a- (k-a-b) )","A, B, C, K = map(int, input().split())\n\nif A >= K:\n    print(K)\nelif A + B >= K:\n    print(A)\nelif A + B + C >= K:\n    print(A + (-1) *(K - A - B))\nelse:\n    print(A - B)","def maxSum(a, b, c, k):\n  currentSum = 0\n  currentSum += min(a, k)\n  k -= a\n  if k <= 0:\n    return currentSum\n  k -= min(b, k)\n  if k <=0:\n    return currentSum\n  currentSum -= min(c, k)\n  return currentSum\n\na, b, c, k = map(int, input().split())\nprint(maxSum(a, b, c, k))","a,b,c,k=map(int,input().split())\nif k<=a:\n    print(k)\nelif k<=a+b:\n    print(a)\nelse:\n    print(2*a-k+b)","def create_union_answer(a, b, c, k):\n    if a >= k:\n        return a\n    if a + b >= k:\n        return a\n    # can select type[c] card numbers.\n    can_c = k - (a + b)\n    if can_c > c :\n        can_c = c\n    return a - can_c\n\nvalues = input().split()\n\na = int(values[0])\nb = int(values[1])\nc = int(values[2])\nk = int(values[3])\n\nanswer = create_union_answer(a, b, c, k)\nprint(answer)","a, b, c, k = map(int, input().split())\n\nxa = min(k, a)\nk = k - xa\nxb = min(k, b)\nk = k - xb\nxc = k\n\nsum = xa * (1) + xb * (0) + xc * (-1)\nprint(sum)","if k<=a:\n    print(k)\nelse:\n    x = k-a\n    if x<=b:\n        print(a)\n    else:\n        print(a-(x-b))","a, b, c, k = list(map(int, input().split()))\n\nres = 0\nif k >= a:\n    res = a\n    k = k - a\n    if k >= b:\n        k = k - b\n        if k >= 0:\n            res = res - k\nelse:\n    res = k\n\nprint(res)\n","import fileinput\n\na, b, c, k = map(int, input().split())\n\ns = 0\nif a >= k:\n    print(a)\n    exit()\n\ns += a\nkk = k - a\n\nif b >= kk:\n    print(s)\n    exit()\n\nkkk = kk - b\n\ns -= kkk\nprint(s)\n\n","s  = input().split(\" \")\na  = int(s[0])\nb  = int(s[1])\nc  = int(s[2])\nk  = int(s[3])\n\nt = 0\nif a >= k:\n  print(a)\nelse:\n  t += a\n  if b >= (k - a):\n    print(a)\n  else:\n    t -=  (k - a -b)\n    print(t)","a, b, c, k = map(int, input().split())\nif (a >= k):\n    print(k)\nelif (a < k and k <= a + b):\n    print(a)\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = list(map(int, input().split()))\n\nif K <= A:\n\tprint(K)\nelif K <= A+B:\n\tprint(A)\nelse:\n\tprint(2*A + B - K)","#! \/usr\/bin\/env python3\n\nimport bisect, collections, copy, heapq, itertools, math, numpy, string\nimport sys\n\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef LS():\n    return list(sys.stdin.readline().rstrip().split())\n\n\ndef main():\n    a, b, c, k = LI()\n    sum = 0\n    # print(a, b, c, k)\n    if a >= k:\n        sum = sum + k\n        k = 0\n    else:\n        sum = sum + a\n        k = k - a\n    # print(\"xxx\", a, b, c, k, sum)\n    if k > 0:\n        if b >= k:\n            k = 0\n        else:\n            k = k - b\n    # print(\"yyy\", a, b, c, k, sum)\n    if k > 0:\n        if c >= k:\n            sum = sum - k\n            k = 0\n        else:\n            sum = sum - c\n            k = k - c\n    # print(\"zzz\", a, b, c, k, sum)\n    print(sum)\n\n\nmain()\n","if __name__==\"__main__\":\n    a,b,c,k = map(int, input().split())\n    picks = 0\n\n    if a >= k:\n        print(k)\n    elif a+b >= k:\n        print(a)\n    else:\n        print(a-(k-(a+b)))\n","A,B,C,K = map(int,input().split())\n\nif K<=A:\n    print(K)\nelif A<K<=A+B:\n    print(A)\nelse:\n    print(A-(K-A-B))\n","def t1():\n    ll=list(map(int,input().split()))\n    K=ll[-1]\n    S=[1,0,-1]\n    wa=0\n    \n    if K>ll[0]:\n        wa+=ll[0]\n        K-=ll[0]\n        if K>ll[1]:\n            K-=ll[1]\n            wa-=K\n        else:\n            pass\n    else:\n        wa+=K\n    \n\n    print(wa)\n        \n            \n\n      \nif __name__ == '__main__':\n    t1()\n    ","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n  A, B, C, K = map(int, input().split())\n  c = min(A, K)\n  K -= (A + B)\n\n  if K > 0:\n    c -= K\n\n  print(c)\n\n\nif __name__ == '__main__':\n  main()\n","a,b,c,h=(int(x) for x in input().split())\nnum = 0\ncount=h\nnum += a\ncount -= a\nif count > 0:\n  count -= b\nif count >0:\n  num -= count\nprint(num)\n","A, B, C, K = map(int,input().split())\nsum = 0\nn = 0\nif K - A > 0:\n    sum = A\n    n = K - A\n    if B < n:\n        n = n - B\n        sum += (-1) * n\nelse:\n    sum = K\nprint(sum)","a, b, c, k = map(int, input().split())\nif k<=a:\n    print(k)\nelif a < k <= a+b:\n    print(a)\nelse:\n    print(a-(k-a-b))","A, B, C, K = (int(x) for x in input().split())\nif A >= K:\n    ans = K\nelse:\n    ans = A\n    tmp = K - A\n    if B >= tmp:\n        pass\n    else:\n        tmp = tmp - B\n        ans += tmp * (-1)\nprint(ans)","A, B, C, K = map(int, input().split())\n\nans = 0\na = min(A, K)\nans += a\n\nK -= a\nb = min(B, K)\nK -= b\n\nc = min(C, K)\nans -= c\n\nprint(ans)\n","def main(A, B, C, K):\n    \"\"\"\n    a = [1 for _ in range(A)]\n    b = [0 for _ in range(B)]\n    c = [-1 for _ in range(C)]\n    k = a + b + c\n    ans = sum(k[:K])\n    \"\"\"\n    if A+B >= K:\n        return K\n    else:\n        return A - (K-A-B)\n\nif __name__ == '__main__':\n    A, B, C, K = map(int, input().split())\n    ans = main(A, B, C, K)\n    print(ans)\n\n","#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(A: int, B: int, C: int, K: int):\n    ans = 0\n    for x, y in ((1, A), (0, B), (-1, C)):\n        z = min(y, K)\n        ans += x * z\n        K -= z\n    return ans\n\n\n\n# Generated by 1.1.6 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    C = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    print(solve(A, B, C, K))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","a, b, c, k = map(int, input().split())\nif k <= a+b:\n    print(min(k, a))\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = map(int, input().split())\n\na = min(A, K)\nb = max(K - a, 0)\nb = min(b, B)\nc = max(K - a - b, 0)\n\nprint(a * 1 + c * (-1))","A, B, C, K = map(int, input().split())\nif A > K:\n    print(K)\nelif A + B > K:\n    print(A)\nelse:\n    print(A - (K - A - B))\n","a, b, c, k = map(int, input().split())\n\nans = 0\nif k >= a:\n    ans += a\n    k -= a\n    if k >= b:\n        ans -= (k - b)\n\nelse:\n    ans = k\n\nprint(ans)","if __name__ == '__main__':\n    a, b, c, k = map(int, input().split())\n    \n    if k <= a:\n        print(k)\n    elif a < k and k <= (a+b):\n        print(a)\n    else:\n        print(a - (k-a-b))","A,B,C,K = map(int,input().split())\nsum = 0;\nif A <= K:\n\tsum += A;\n\tK -= A\nelse:\n\tsum += K;\n\tK -= K\nif B <= K:\n\tK -= B\nelse:\n\tK -= K\nif C <= K:\n\tsum -= C\n\tK -= C\nelse:\n\tsum -= K\n\tK -= K\nprint(sum)","# -*- coding: utf-8 -*-\na, b, c, k = map(int, input().split())\n\nmax = 0\n\nif a <= k:\n    max = a\n    k -= a\n    if 0 < k:\n        k -= b\n        if 0 < k:\n            max -= min(c, k)\n\nelse:\n    max = a\n\n\nprint(max)\n","a,b,c,k = map(int, input().split())\n \nif k > a :\n  k = k-a\n  if k > b :\n    k = k-b\n    if k < c :\n      c = k\n  else:\n    c = 0\nelse:\n  a = k\n  c = 0\n \nprint(a-c)","A,B,C,K = list(map(int, input().split()))\n\nans = 0\n\nif A >= K:\n    print(K)\nelse:\n    ans += A\n    K -= A\n    K -= B\n\n    print(ans - K)","A,B,C,K=map(int,input().split())\nif A>=K:\n    print(K)\nelif A+B>=K:\n    print(A)\nelse:\n    print(A-(K-A-B))","arr = [int(char) for char in input().split(\" \")]\na, b, c, k = arr[0], arr[1], arr[2], arr[3]\nif a+b>=k:\n  print(a)\nelse:\n  print(a-(k-(a+b)))","A,B,C,K = map(int,input().split())\nif A < K:\n    if A + B < K:\n        print(A + (-1 * (K - A - B)))\n    else:\n        print(A)\nelse:\n    print(K)","a,b,c,k=map(int,input().split())\n#sum=a*1+b*0-c*1\nif a>=k:\n    print(1*k)\nif a<k and a+b>=k:\n    print(1*(k-b))\nif a<k and a+b<k and a+b+c>=k:\n    print(a-(k-a-b))","# -*- coding: utf-8 -*-\ninputs = list(map(int, input().split()))\n\nif inputs[0]+inputs[1]>=inputs[3]:\n  print(inputs[0])\nelse:\n  print(inputs[0] - (inputs[3] - (inputs[0]+inputs[1])))","N = [int(e) for e in input().split()]\nif(N[3] - N[0] > 0):\n    N[3] -= N[0]\n    if(N[3] - N[1] > 0):\n        N[3] -= N[1]\n        ans = N[0] - N[3]\n    else:\n        ans = N[0]\nelse:\n    ans = N[0]\nprint(ans)","A, B, C, K = map(int,input().split())\nans = 0\nif(K<=A):\n  ans = K\nelif(K<=A+B):\n  ans = A\nelse:\n  ans = A-(K-A-B)\nprint(ans)","a,b,c,k=map(int,input().split())\nif k<=a+b:\n    print(a)\nelse:\n    print(a-(k-a-b))","a, b, c, k = map(int, input().split(' '))\n\nif a >= k:\n    print(k)\nelif (a + b) >= k:\n    print(a)\nelse:\n    print(a - (k - (a + b)))","A, B, C, K = map(int, input().split())\n\nsum = 0\nsum += A * 1\nif(A + B < K):\n  sum += C * (-1)\n\nprint(sum)","a, b, c, k = list(map(int, input().split()))\n\nif k <= a+b:\n    ans = min(a,k)\nelse:\n    ans = 2*a+b-k\nprint(ans)","A, B, C, K = list(map(int, input().split( )))\nmax_score = 0\n\nwhile(K != 0):\n    if(A == 0 and B == 0 and C > 0):\n        C -= 1\n        max_score += -1\n    if(A == 0 and B > 0):\n        B -= 1\n    if(A > 0):\n        A -= 1\n        max_score += 1\n    K -= 1\n\nprint(max_score)","A, B, C, K = map(int, input().split())\n\n\nif K <= A:\n    print(A)\nelif K <= A + B:\n    print(A)\nelse:\n    print(A - (K - A - B))","a,b,c,k = map(int,input().split())\n\nk -= b\nl = max(0,k - a)\na = min(a,k)\nans = max(0,a - l)\nprint(ans)\n","a, b, c, k = map(int, input().split())\n\nans = 0\n\nif a > k:\n  print(k)\n  exit()\n\nif a + b == k:\n  print(a)\nelse:\n  k = ((k - (a + b)) * -1)\n  print(a + k)\n","A, B, C, K = map(int, input().split())\n\nif K <= A+B:\n    print(A)\nelse:\n    print(2*A+B-K)\n","# n = int(input())\na, b, c, k = map(int, input().split())\n# l = list(map(int, input().split()))\n\nif k <= a:\n    print(k)\nelif a < k <= a+b:\n    print(a)\nelif a+b < k <= a+b+c:\n    # print(a - (k - a))\n    print(a-(k - a - b))","A, B, C, K = map(int, input().split())\n\nif A >= K:\n    print(K)\nelif A+B>=K:\n    print(A)\nelif A+B+C <= K:\n    print(A - C)\nelse:\n    print(A - (K-A-B))","A,B,C,K=map(int,input().split())\nans=0\nif A >= K:\n    ans=K\nelse:\n    ans=A\n    K=K-A\n    if B<K:\n        K=K-B\n        if C>=K:\n            ans=ans-K\nprint(ans)\n","d = input()\nd = d.split()\na = int(d[0])\nb = int(d[1])\nc = int(d[2])\nk = int(d[3])\nf = 0\nif a < k:\n    f = f + a\n    k = k - a\n    if b < k:\n        k = k - b\n        f = f - k\n    else:\n        f = f\nelse:\n    f = k\nprint(f)","A,B,C,K=map(int, input().split())\n\nif A+B>=K:\n\tprint(A)\nelse:\n\tprint(A-(K-A-B))\n","def resolve():\n    import sys\n\n    input = lambda: sys.stdin.readline().rstrip()\n\n    a, b, c, k = map(int,input().split())\n    \n    if a + b >= k:\n      print(k)\n    else:\n      print(a-(k-(a+b)))\n      \nresolve()","a,b,c,k = map(int,input().split())\nans = 0\nif a>=k:\n  ans = k\nelif a+b>=k:\n  ans = a\nelse:\n  ans = a - (k-a-b)\nprint(ans)","a,b,c,k = map(int, input().split())\nif k <= a:\n  print(k)\nelif a <= k <= a+b:\n  print(a)\nelif a+b <= k <= a+b+c:\n  print(a - (k-(a+b)))","a,b,c,k=map(int, input().split())\n\nif k<=a:\n        print(k)\nif a<k<a+b:\n        print(a)\nelse:\n        print(a-(k-a-b))","a, b, c, k = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\nk = int(k)\n\nif a >= k:\n    sum = k\nelif a + b >= k:\n    sum = a\nelse:\n    sum = a - (k - a - b)\n    \nprint(sum)\n","# -*- coding: utf-8 -*-\n\nA, B, C, K =  [int(i) for i in input().split()]\n\nif K <= A:\n    print(K)\nelif k <= A+B:\n    print(A)\nelse:\n    print((K-(A+B))*(-1)+A)\n","A,B ,C ,K = map(int,input().split())\n\nif A+B>=K:\n    print(min(A,K))\nelse:\n    print(A+(K-B-A)*(-1))\n\n\n\n","a,b,c,k = map(int,input().split())\nif(a>=k):\n    print(k)\nelif(a+b>=k):\n    print(a)\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif A < K <= A + B:\n    print(A)\nelif A + B < K <= A + B + C:\n    print(2*A+B-K)\n","a,b,c,k= [int(x) for x in input().split()]\nif a>=k:\n\tans = k\nelif a+b>k and a<k:\n\tans = a\nelse: \n\tx=k-a-b\n\tans = a-x\nprint(ans)","a,b,c,K=map(int,input().split())\nif K<=a:\n  print(K)\nelif K<=a+b:\n  print(a)\nelse :\n  print(a-(K-a-b))","def ZZ(): return list(map(int, input().split()))\ndef Z(): return int(input())\n\nA, B, C, K = ZZ()\nS = [1] * A + [0] * B + [-1] * C\nprint(sum(S[:K]))","A, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\n\nelif K <= A + B:\n    print(A)\n\nelse:\n    print(A - (K - A - B))\n","if oneCard >= getCardNum: print(oneCard)\nelif oneCard + zeroCard >= getCardNum: print(oneCard)\nelse: print(oneCard - (getCardNum - oneCard - zeroCard))","arr = [int(char) for char in input().split(\" \")]\na, b, c, k = arr[0], arr[1], arr[2], arr[3]\nif k<=a:\n  print(k)\nelif a+b>=k:\n  print(a)\nelse:\n  print(a-(k-(a+b)))","a,b,c,k=map(int,input().split())\n'''l=[]\nfor _ in range(a):\n    l.append(1)\nfor _ in range(b):\n    l.append(0)\nfor _ in range(c):\n    l.append(-1)\nprint(sum(l[:k]))'''\nsu=0\nif a>=k:\n    print(k)\nelse:\n    su=su+a\n    tem=k-a\n    if b>=tem:\n        print(su)\n    else:\n        tem1=tem-b\n        print(su-tem1)","a,b,c,k=map(int,input().split())\nif k<=a:\n  print(k)\n  exit()\nif k<=(a+b):\n  print(a)\n  exit()\nprint(a-(k-(a+b)))","# \u521d\u671f\u5165\u529b\nimport sys\ninput = sys.stdin.readline\nA,B,C,K = list(map(int, input().split()))\na=1\nb=0\nc=-1\ncount =K\npoint =0\nif A< K:\n    point +=A\n    count -=A\n    K -=A\nelse:\n    point +=K\n    count =0\n    print(point)\n    exit()\n\nif B < count:\n    point +=0\n    count -=B\n    K -=B\nelse:\n    point +=0\n    count =0\n    print(point)\n    exit()    \n\nif C <= count:\n    point -=C\nelse:\n    point -=count\n    count =0\n    \nprint(point)","import sys\nreadline = sys.stdin.readline\n\ndef main():\n    A, B, C, K = map(int, readline().rstrip().split())\n    if A >= K:\n        print(K)\n    elif A + B >= K:\n        print(A)\n    else:\n        print(A - (K - A - B))\n\n\nif __name__ == '__main__':\n    main()","A, B, C, K = map(int, input().split())\n# A : 1, B: 0, C: -1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K-A-B))","A,B,C,K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(2*A+B-K)","A,B,C,K=(int(x) for x in input().split())\nif(A>=K):\n    print(K)\nelif(A+B>=K):\n    print(A)\nelif(A+B+C>=K):\n    print(A-(K-(A+B)))","import sys\n#from collections import defaultdict, deque, Counter\n#import bisect\n#import heapq\n#import math\n#from itertools import accumulate\n#from itertools import permutations as perm\n#from itertools import combinations as comb\n#from itertools import combinations_with_replacement as combr\n#from fractions import gcd\n#import numpy as np\n\nstdin = sys.stdin\nsys.setrecursionlimit(10 ** 7)\nMIN = -10 ** 9\nMOD = 10 ** 9 + 7\nINF = float(\"inf\")\nIINF = 10 ** 18\n\n#n = int(stdin.readline().rstrip())\n#l = list(map(int, stdin.readline().rstrip().split()))\nA, B, C, K = map(int, stdin.readline().rstrip().split())\n#numbers = [[int(c) for c in l.strip().split()] for l in sys.stdin]\n#word = [stdin.readline().rstrip() for _ in range(n)]\n#number = [[int(c) for c in stdin.readline().rstrip()] for _ in range(n)]\n#zeros = [[0] * w for i in range(h)]\n\nif K <= A:\n    print(K)\nelif K <= A +B:\n    print(A)\nelse:\n    print(A- (K-A-B))\n","s = input().split(\" \")\n\nk = int(s[3])\n\nsum = 0\n\nif k >= int(s[0]) :\n    sum += int(s[0])\n    k -= int(s[0])\nelse :\n    sum += k\n    k =0\n\nif k >= int(s[1]) :\n    k -= int(s[1])\nelse :\n    k =0\n\nif k :\n    sum -= k\n\nprint(sum)","A,B,C,K=map(int,input().split())\nif A-K>=0:\n    print(K)\nelif A-K<0 and A+B-K>=0:\n    print(A)\nelse:\n    print(A-(K-A-B))","s = input()\nA, B, C, K = [int(v) for v in s.split(\" \")]\n\nif K <= A:\n  print(K)\nelif K <= A + B:\n  print(A)\nelif K <= A + B + C:\n  print(A - (K - A - B))","A,B,C,K=map(int,input().split())\nprint(A,B,C,K)\nif A+B>=K:\n    print(A)\nelse:\n    print(A-C)","a,b,c,k = map(int,input().split())\nsum=0\nif(a>k):\n  sum+=k\nelse:\n  sum+=a\n  k=k-a\n  if(k==0):\n    print(sum)\n  if(b>k):\n    print(sum)\n  else:\n    k = k-b\n    if(k==0):\n      print(sum)\n    if(c>k):\n      sum-=k\n      print(sum)\n    else:\n      sum-=c\n      print(sum)","A,B,C,K=(int(x) for x in input().split())\nif K<=A:print(K)\nelif K<=A+B:print(A)\nelse: print(A-(K-B-A))\n","a, b, c, k = map(int, input().split())\n\nan = a if a <= k else k\nans = an\nk = k - an\nif k > 0:\n  bn = b if b <= k else k\n  k = k - bn\nif k > 0:\n  cn = k\n  ans = ans - cn\nprint(ans)","a, b, c, k = map(int, input().split())\nans = 0\nfor aa in range(a+1):\n    for bb in range(b+1):\n        for cc in range(c+1):\n            if aa+bb+cc == k:\n                t = aa+cc*-1\n                ans = max(t, ans)\nprint(ans)\n","A,B,C,K = map(int,input().split())\n\na = K - A #A\u306e\u30ab\u30fc\u30c9\u3092\u5f15\u3044\u305f\u5f8c\u306eB,C\u306e\u6570\nb = K - A - B #B\u306e\u30ab\u30fc\u30c9\u3067\u6c34\u5897\u3057\u3057\u305f\u5f8c\u306eC\u306e\u6570\n\nif A = 0:\n    print((-1)*b)\nelif A > 0:\n    if b >= 0:\n        print(A - b)\n    elif b < 0:\n        print(A)","a,b,c,k=map(int,input().split())\nans=0\nans+=min(k,a)\nk-=min(k,a)\nk-=min(k,b)\nans-=min(k,c)\nprint(ans)\n"],"formatted_programs":["a,b,c,k = [int(i) for i in input().split()]\nif k<=a:\n  print(k)\nelse if a<k<=a+b:\n  print(a)\nelse:\n  print(a-(k-a-b))\n      ","a, b, c, k = map(int, input().split())\nans = 0\nans += a\nk -= a\nk -= b\nif k>0:\n    ans-=k\nprint(ans)","a,b,c,k=map(int,input().split())\nans=0\nans+=a\nif k-a-b>=0:\n    ans-=k-a-b\nprint(ans)","a, b, c, k = map(int, input().split())\n\nif k <= a:\n  print(k)\nelif k <= a+b:\n  print(a)\nelse:\n  print(2*a - k + b)","a,b,c,k = map(int,input().split())\n\nans = 0\nif(k>a):\n    k-=a\n    ans+=a\nelse:\n    ans = k\n    k=0\nif k>0:\n    if k>b:\n        k-=b\n    else:\n        k=0\nif k>0:\n    if k>c:\n        ans-=c\n    else:\n        ans -= k\n\nprint(ans)\n","if __name__ == \"__main__\":\n    A, B, C, K = list(map(int, input().split()))\n    if A > K:\n        print(K)\n    elif A <= K <= A+B:\n        print(A)\n    else:\n        print(A-1*(K-A-B))","a = list(map(int, input().split()))\nn = a[0]\nm = a[1]\nl = a[2]\nk = a[3]\n\nif 0 < n < k:\n    print(n)\n    \nelif n >= k:\n    print(n)\nelif n + m >= k:\n    print(n)\nelif n + m + l >= k:\n    print(n -1*(k-l))\nelse:\n    print(0)","a,b,c,k=map(int,input().split())\ns=0\nfor i in range(k):\n    if a!=0:\n        s+=1\n        a-=1\n    elif b != 0:\n        b-=1\n    elif c!=0:\n        s-=1\n        c-=1\n\nprint(s)\n        \n","A,B,C,K = list(map(int,input().split()))\n\ncount = K\nans = 0\n\n\nif count <= A:\n    print(A)\n    exit()\nelse:\n    count -= A\n    ans += A\n\n    if count <= B:\n        print(ans)\n        exit()\n    else:\n        count -= B\n        ans -= count\n        print(ans)\n        exit()\n        \n","a, b, c, k = map(int, input().split())\nans, k = min(a, k), k-min(a, k)\nk -= min(b, k)\nans -= min(c,k)\nprint(ans)","n = list(map(int,input().split()))\n\nsum = 0\nnum = 0\nnm = [1,0,-1]\n\nc = 0\n\nwhile True:\n    if n[num] == 0:\n        num += 1\n        continue\n    sum += nm[num]\n    n[num]-=1\n    c+=1\n    if c == n[3]:\n        break\n\n\nprint(sum)\n","a,b,c,k=map(int,input().split())\ncount=0\ncount+=a\nif k-a>0:\n    k-=a\nelse:\n    print(k)\n    exit()\nif k-b>0:\n    k-=b\nelse:\n    print(count)\n    exit()\nif k-c>0:\n    count-=c\nelse:\n    count-=k\n    print(count)\n    exit()","a, b, c, k = map(int, input().split())  # x = 1, y = 2\n\nsum_card = 0\nsum_n = 0\n\nif k <= a:\n    print(k)\n    exit()\nelif k <= (a + b):\n    print(a)\n    exit()\nelse:\n    print(a - (k - a - b))\n","a, b, c, k= map(int, input().split()) \n\nif a+b >= k:\n    print(a)\nelse:\n    print(a- (k-a-b) )","A, B, C, K = map(int, input().split())\n\nif A >= K:\n    print(K)\nelif A + B >= K:\n    print(A)\nelif A + B + C >= K:\n    print(A + (-1) *(K - A - B))\nelse:\n    print(A - B)","def maxSum(a, b, c, k):\n  currentSum = 0\n  currentSum += min(a, k)\n  k -= a\n  if k <= 0:\n    return currentSum\n  k -= min(b, k)\n  if k <=0:\n    return currentSum\n  currentSum -= min(c, k)\n  return currentSum\n\na, b, c, k = map(int, input().split())\nprint(maxSum(a, b, c, k))","a,b,c,k=map(int,input().split())\nif k<=a:\n    print(k)\nelif k<=a+b:\n    print(a)\nelse:\n    print(2*a-k+b)","def create_union_answer(a, b, c, k):\n    if a >= k:\n        return a\n    if a + b >= k:\n        return a\n    # can select type[c] card numbers.\n    can_c = k - (a + b)\n    if can_c > c :\n        can_c = c\n    return a - can_c\n\nvalues = input().split()\n\na = int(values[0])\nb = int(values[1])\nc = int(values[2])\nk = int(values[3])\n\nanswer = create_union_answer(a, b, c, k)\nprint(answer)","a, b, c, k = map(int, input().split())\n\nxa = min(k, a)\nk = k - xa\nxb = min(k, b)\nk = k - xb\nxc = k\n\nsum = xa * (1) + xb * (0) + xc * (-1)\nprint(sum)","if k<=a:\n    print(k)\nelse:\n    x = k-a\n    if x<=b:\n        print(a)\n    else:\n        print(a-(x-b))","a, b, c, k = list(map(int, input().split()))\n\nres = 0\nif k >= a:\n    res = a\n    k = k - a\n    if k >= b:\n        k = k - b\n        if k >= 0:\n            res = res - k\nelse:\n    res = k\n\nprint(res)\n","import fileinput\n\na, b, c, k = map(int, input().split())\n\ns = 0\nif a >= k:\n    print(a)\n    exit()\n\ns += a\nkk = k - a\n\nif b >= kk:\n    print(s)\n    exit()\n\nkkk = kk - b\n\ns -= kkk\nprint(s)\n\n","s  = input().split(\" \")\na  = int(s[0])\nb  = int(s[1])\nc  = int(s[2])\nk  = int(s[3])\n\nt = 0\nif a >= k:\n  print(a)\nelse:\n  t += a\n  if b >= (k - a):\n    print(a)\n  else:\n    t -=  (k - a -b)\n    print(t)","a, b, c, k = map(int, input().split())\nif (a >= k):\n    print(k)\nelif (a < k and k <= a + b):\n    print(a)\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = list(map(int, input().split()))\n\nif K <= A:\n\tprint(K)\nelif K <= A+B:\n\tprint(A)\nelse:\n\tprint(2*A + B - K)","#! \/usr\/bin\/env python3\n\nimport bisect, collections, copy, heapq, itertools, math, numpy, string\nimport sys\n\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\n\ndef LS():\n    return list(sys.stdin.readline().rstrip().split())\n\n\ndef main():\n    a, b, c, k = LI()\n    sum = 0\n    # print(a, b, c, k)\n    if a >= k:\n        sum = sum + k\n        k = 0\n    else:\n        sum = sum + a\n        k = k - a\n    # print(\"xxx\", a, b, c, k, sum)\n    if k > 0:\n        if b >= k:\n            k = 0\n        else:\n            k = k - b\n    # print(\"yyy\", a, b, c, k, sum)\n    if k > 0:\n        if c >= k:\n            sum = sum - k\n            k = 0\n        else:\n            sum = sum - c\n            k = k - c\n    # print(\"zzz\", a, b, c, k, sum)\n    print(sum)\n\n\nmain()\n","if __name__==\"__main__\":\n    a,b,c,k = map(int, input().split())\n    picks = 0\n\n    if a >= k:\n        print(k)\n    elif a+b >= k:\n        print(a)\n    else:\n        print(a-(k-(a+b)))\n","A,B,C,K = map(int,input().split())\n\nif K<=A:\n    print(K)\nelif A<K<=A+B:\n    print(A)\nelse:\n    print(A-(K-A-B))\n","def t1():\n    ll=list(map(int,input().split()))\n    K=ll[-1]\n    S=[1,0,-1]\n    wa=0\n    \n    if K>ll[0]:\n        wa+=ll[0]\n        K-=ll[0]\n        if K>ll[1]:\n            K-=ll[1]\n            wa-=K\n        else:\n            pass\n    else:\n        wa+=K\n    \n\n    print(wa)\n        \n            \n\n      \nif __name__ == '__main__':\n    t1()\n    ","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\ndef main():\n  A, B, C, K = map(int, input().split())\n  c = min(A, K)\n  K -= (A + B)\n\n  if K > 0:\n    c -= K\n\n  print(c)\n\n\nif __name__ == '__main__':\n  main()\n","a,b,c,h=(int(x) for x in input().split())\nnum = 0\ncount=h\nnum += a\ncount -= a\nif count > 0:\n  count -= b\nif count >0:\n  num -= count\nprint(num)\n","A, B, C, K = map(int,input().split())\nsum = 0\nn = 0\nif K - A > 0:\n    sum = A\n    n = K - A\n    if B < n:\n        n = n - B\n        sum += (-1) * n\nelse:\n    sum = K\nprint(sum)","a, b, c, k = map(int, input().split())\nif k<=a:\n    print(k)\nelif a < k <= a+b:\n    print(a)\nelse:\n    print(a-(k-a-b))","A, B, C, K = (int(x) for x in input().split())\nif A >= K:\n    ans = K\nelse:\n    ans = A\n    tmp = K - A\n    if B >= tmp:\n        pass\n    else:\n        tmp = tmp - B\n        ans += tmp * (-1)\nprint(ans)","A, B, C, K = map(int, input().split())\n\nans = 0\na = min(A, K)\nans += a\n\nK -= a\nb = min(B, K)\nK -= b\n\nc = min(C, K)\nans -= c\n\nprint(ans)\n","def main(A, B, C, K):\n    \"\"\"\n    a = [1 for _ in range(A)]\n    b = [0 for _ in range(B)]\n    c = [-1 for _ in range(C)]\n    k = a + b + c\n    ans = sum(k[:K])\n    \"\"\"\n    if A+B >= K:\n        return K\n    else:\n        return A - (K-A-B)\n\nif __name__ == '__main__':\n    A, B, C, K = map(int, input().split())\n    ans = main(A, B, C, K)\n    print(ans)\n\n","#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(A: int, B: int, C: int, K: int):\n    ans = 0\n    for x, y in ((1, A), (0, B), (-1, C)):\n        z = min(y, K)\n        ans += x * z\n        K -= z\n    return ans\n\n\n\n# Generated by 1.1.6 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    A = int(next(tokens))  # type: int\n    B = int(next(tokens))  # type: int\n    C = int(next(tokens))  # type: int\n    K = int(next(tokens))  # type: int\n    print(solve(A, B, C, K))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","a, b, c, k = map(int, input().split())\nif k <= a+b:\n    print(min(k, a))\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = map(int, input().split())\n\na = min(A, K)\nb = max(K - a, 0)\nb = min(b, B)\nc = max(K - a - b, 0)\n\nprint(a * 1 + c * (-1))","A, B, C, K = map(int, input().split())\nif A > K:\n    print(K)\nelif A + B > K:\n    print(A)\nelse:\n    print(A - (K - A - B))\n","a, b, c, k = map(int, input().split())\n\nans = 0\nif k >= a:\n    ans += a\n    k -= a\n    if k >= b:\n        ans -= (k - b)\n\nelse:\n    ans = k\n\nprint(ans)","if __name__ == '__main__':\n    a, b, c, k = map(int, input().split())\n    \n    if k <= a:\n        print(k)\n    elif a < k and k <= (a+b):\n        print(a)\n    else:\n        print(a - (k-a-b))","A,B,C,K = map(int,input().split())\nsum = 0;\nif A <= K:\n\tsum += A;\n\tK -= A\nelse:\n\tsum += K;\n\tK -= K\nif B <= K:\n\tK -= B\nelse:\n\tK -= K\nif C <= K:\n\tsum -= C\n\tK -= C\nelse:\n\tsum -= K\n\tK -= K\nprint(sum)","# -*- coding: utf-8 -*-\na, b, c, k = map(int, input().split())\n\nmax = 0\n\nif a <= k:\n    max = a\n    k -= a\n    if 0 < k:\n        k -= b\n        if 0 < k:\n            max -= min(c, k)\n\nelse:\n    max = a\n\n\nprint(max)\n","a,b,c,k = map(int, input().split())\n \nif k > a :\n  k = k-a\n  if k > b :\n    k = k-b\n    if k < c :\n      c = k\n  else:\n    c = 0\nelse:\n  a = k\n  c = 0\n \nprint(a-c)","A,B,C,K = list(map(int, input().split()))\n\nans = 0\n\nif A >= K:\n    print(K)\nelse:\n    ans += A\n    K -= A\n    K -= B\n\n    print(ans - K)","A,B,C,K=map(int,input().split())\nif A>=K:\n    print(K)\nelif A+B>=K:\n    print(A)\nelse:\n    print(A-(K-A-B))","arr = [int(char) for char in input().split(\" \")]\na, b, c, k = arr[0], arr[1], arr[2], arr[3]\nif a+b>=k:\n  print(a)\nelse:\n  print(a-(k-(a+b)))","A,B,C,K = map(int,input().split())\nif A < K:\n    if A + B < K:\n        print(A + (-1 * (K - A - B)))\n    else:\n        print(A)\nelse:\n    print(K)","a,b,c,k=map(int,input().split())\n#sum=a*1+b*0-c*1\nif a>=k:\n    print(1*k)\nif a<k and a+b>=k:\n    print(1*(k-b))\nif a<k and a+b<k and a+b+c>=k:\n    print(a-(k-a-b))","# -*- coding: utf-8 -*-\ninputs = list(map(int, input().split()))\n\nif inputs[0]+inputs[1]>=inputs[3]:\n  print(inputs[0])\nelse:\n  print(inputs[0] - (inputs[3] - (inputs[0]+inputs[1])))","N = [int(e) for e in input().split()]\nif(N[3] - N[0] > 0):\n    N[3] -= N[0]\n    if(N[3] - N[1] > 0):\n        N[3] -= N[1]\n        ans = N[0] - N[3]\n    else:\n        ans = N[0]\nelse:\n    ans = N[0]\nprint(ans)","A, B, C, K = map(int,input().split())\nans = 0\nif(K<=A):\n  ans = K\nelif(K<=A+B):\n  ans = A\nelse:\n  ans = A-(K-A-B)\nprint(ans)","a,b,c,k=map(int,input().split())\nif k<=a+b:\n    print(a)\nelse:\n    print(a-(k-a-b))","a, b, c, k = map(int, input().split(' '))\n\nif a >= k:\n    print(k)\nelif (a + b) >= k:\n    print(a)\nelse:\n    print(a - (k - (a + b)))","A, B, C, K = map(int, input().split())\n\nsum = 0\nsum += A * 1\nif(A + B < K):\n  sum += C * (-1)\n\nprint(sum)","a, b, c, k = list(map(int, input().split()))\n\nif k <= a+b:\n    ans = min(a,k)\nelse:\n    ans = 2*a+b-k\nprint(ans)","A, B, C, K = list(map(int, input().split( )))\nmax_score = 0\n\nwhile(K != 0):\n    if(A == 0 and B == 0 and C > 0):\n        C -= 1\n        max_score += -1\n    if(A == 0 and B > 0):\n        B -= 1\n    if(A > 0):\n        A -= 1\n        max_score += 1\n    K -= 1\n\nprint(max_score)","A, B, C, K = map(int, input().split())\n\n\nif K <= A:\n    print(A)\nelif K <= A + B:\n    print(A)\nelse:\n    print(A - (K - A - B))","a,b,c,k = map(int,input().split())\n\nk -= b\nl = max(0,k - a)\na = min(a,k)\nans = max(0,a - l)\nprint(ans)\n","a, b, c, k = map(int, input().split())\n\nans = 0\n\nif a > k:\n  print(k)\n  exit()\n\nif a + b == k:\n  print(a)\nelse:\n  k = ((k - (a + b)) * -1)\n  print(a + k)\n","A, B, C, K = map(int, input().split())\n\nif K <= A+B:\n    print(A)\nelse:\n    print(2*A+B-K)\n","# n = int(input())\na, b, c, k = map(int, input().split())\n# l = list(map(int, input().split()))\n\nif k <= a:\n    print(k)\nelif a < k <= a+b:\n    print(a)\nelif a+b < k <= a+b+c:\n    # print(a - (k - a))\n    print(a-(k - a - b))","A, B, C, K = map(int, input().split())\n\nif A >= K:\n    print(K)\nelif A+B>=K:\n    print(A)\nelif A+B+C <= K:\n    print(A - C)\nelse:\n    print(A - (K-A-B))","A,B,C,K=map(int,input().split())\nans=0\nif A >= K:\n    ans=K\nelse:\n    ans=A\n    K=K-A\n    if B<K:\n        K=K-B\n        if C>=K:\n            ans=ans-K\nprint(ans)\n","d = input()\nd = d.split()\na = int(d[0])\nb = int(d[1])\nc = int(d[2])\nk = int(d[3])\nf = 0\nif a < k:\n    f = f + a\n    k = k - a\n    if b < k:\n        k = k - b\n        f = f - k\n    else:\n        f = f\nelse:\n    f = k\nprint(f)","A,B,C,K=map(int, input().split())\n\nif A+B>=K:\n\tprint(A)\nelse:\n\tprint(A-(K-A-B))\n","def resolve():\n    import sys\n\n    input = lambda: sys.stdin.readline().rstrip()\n\n    a, b, c, k = map(int,input().split())\n    \n    if a + b >= k:\n      print(k)\n    else:\n      print(a-(k-(a+b)))\n      \nresolve()","a,b,c,k = map(int,input().split())\nans = 0\nif a>=k:\n  ans = k\nelif a+b>=k:\n  ans = a\nelse:\n  ans = a - (k-a-b)\nprint(ans)","a,b,c,k = map(int, input().split())\nif k <= a:\n  print(k)\nelif a <= k <= a+b:\n  print(a)\nelif a+b <= k <= a+b+c:\n  print(a - (k-(a+b)))","a,b,c,k=map(int, input().split())\n\nif k<=a:\n        print(k)\nif a<k<a+b:\n        print(a)\nelse:\n        print(a-(k-a-b))","a, b, c, k = input().split()\n\na = int(a)\nb = int(b)\nc = int(c)\nk = int(k)\n\nif a >= k:\n    sum = k\nelif a + b >= k:\n    sum = a\nelse:\n    sum = a - (k - a - b)\n    \nprint(sum)\n","# -*- coding: utf-8 -*-\n\nA, B, C, K =  [int(i) for i in input().split()]\n\nif K <= A:\n    print(K)\nelif k <= A+B:\n    print(A)\nelse:\n    print((K-(A+B))*(-1)+A)\n","A,B ,C ,K = map(int,input().split())\n\nif A+B>=K:\n    print(min(A,K))\nelse:\n    print(A+(K-B-A)*(-1))\n\n\n\n","a,b,c,k = map(int,input().split())\nif(a>=k):\n    print(k)\nelif(a+b>=k):\n    print(a)\nelse:\n    print(a-(k-a-b))\n","A, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif A < K <= A + B:\n    print(A)\nelif A + B < K <= A + B + C:\n    print(2*A+B-K)\n","a,b,c,k= [int(x) for x in input().split()]\nif a>=k:\n\tans = k\nelif a+b>k and a<k:\n\tans = a\nelse: \n\tx=k-a-b\n\tans = a-x\nprint(ans)","a,b,c,K=map(int,input().split())\nif K<=a:\n  print(K)\nelif K<=a+b:\n  print(a)\nelse :\n  print(a-(K-a-b))","def ZZ(): return list(map(int, input().split()))\ndef Z(): return int(input())\n\nA, B, C, K = ZZ()\nS = [1] * A + [0] * B + [-1] * C\nprint(sum(S[:K]))","A, B, C, K = map(int, input().split())\n\nif K <= A:\n    print(K)\n\nelif K <= A + B:\n    print(A)\n\nelse:\n    print(A - (K - A - B))\n","if oneCard >= getCardNum: print(oneCard)\nelif oneCard + zeroCard >= getCardNum: print(oneCard)\nelse: print(oneCard - (getCardNum - oneCard - zeroCard))","arr = [int(char) for char in input().split(\" \")]\na, b, c, k = arr[0], arr[1], arr[2], arr[3]\nif k<=a:\n  print(k)\nelif a+b>=k:\n  print(a)\nelse:\n  print(a-(k-(a+b)))","a,b,c,k=map(int,input().split())\n'''l=[]\nfor _ in range(a):\n    l.append(1)\nfor _ in range(b):\n    l.append(0)\nfor _ in range(c):\n    l.append(-1)\nprint(sum(l[:k]))'''\nsu=0\nif a>=k:\n    print(k)\nelse:\n    su=su+a\n    tem=k-a\n    if b>=tem:\n        print(su)\n    else:\n        tem1=tem-b\n        print(su-tem1)","a,b,c,k=map(int,input().split())\nif k<=a:\n  print(k)\n  exit()\nif k<=(a+b):\n  print(a)\n  exit()\nprint(a-(k-(a+b)))","# \u521d\u671f\u5165\u529b\nimport sys\ninput = sys.stdin.readline\nA,B,C,K = list(map(int, input().split()))\na=1\nb=0\nc=-1\ncount =K\npoint =0\nif A< K:\n    point +=A\n    count -=A\n    K -=A\nelse:\n    point +=K\n    count =0\n    print(point)\n    exit()\n\nif B < count:\n    point +=0\n    count -=B\n    K -=B\nelse:\n    point +=0\n    count =0\n    print(point)\n    exit()    \n\nif C <= count:\n    point -=C\nelse:\n    point -=count\n    count =0\n    \nprint(point)","import sys\nreadline = sys.stdin.readline\n\ndef main():\n    A, B, C, K = map(int, readline().rstrip().split())\n    if A >= K:\n        print(K)\n    elif A + B >= K:\n        print(A)\n    else:\n        print(A - (K - A - B))\n\n\nif __name__ == '__main__':\n    main()","A, B, C, K = map(int, input().split())\n# A : 1, B: 0, C: -1\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(A - (K-A-B))","A,B,C,K = map(int, input().split())\n\nif K <= A:\n    print(K)\nelif K <= A+B:\n    print(A)\nelse:\n    print(2*A+B-K)","A,B,C,K=(int(x) for x in input().split())\nif(A>=K):\n    print(K)\nelif(A+B>=K):\n    print(A)\nelif(A+B+C>=K):\n    print(A-(K-(A+B)))","import sys\n#from collections import defaultdict, deque, Counter\n#import bisect\n#import heapq\n#import math\n#from itertools import accumulate\n#from itertools import permutations as perm\n#from itertools import combinations as comb\n#from itertools import combinations_with_replacement as combr\n#from fractions import gcd\n#import numpy as np\n\nstdin = sys.stdin\nsys.setrecursionlimit(10 ** 7)\nMIN = -10 ** 9\nMOD = 10 ** 9 + 7\nINF = float(\"inf\")\nIINF = 10 ** 18\n\n#n = int(stdin.readline().rstrip())\n#l = list(map(int, stdin.readline().rstrip().split()))\nA, B, C, K = map(int, stdin.readline().rstrip().split())\n#numbers = [[int(c) for c in l.strip().split()] for l in sys.stdin]\n#word = [stdin.readline().rstrip() for _ in range(n)]\n#number = [[int(c) for c in stdin.readline().rstrip()] for _ in range(n)]\n#zeros = [[0] * w for i in range(h)]\n\nif K <= A:\n    print(K)\nelif K <= A +B:\n    print(A)\nelse:\n    print(A- (K-A-B))\n","s = input().split(\" \")\n\nk = int(s[3])\n\nsum = 0\n\nif k >= int(s[0]) :\n    sum += int(s[0])\n    k -= int(s[0])\nelse :\n    sum += k\n    k =0\n\nif k >= int(s[1]) :\n    k -= int(s[1])\nelse :\n    k =0\n\nif k :\n    sum -= k\n\nprint(sum)","A,B,C,K=map(int,input().split())\nif A-K>=0:\n    print(K)\nelif A-K<0 and A+B-K>=0:\n    print(A)\nelse:\n    print(A-(K-A-B))","s = input()\nA, B, C, K = [int(v) for v in s.split(\" \")]\n\nif K <= A:\n  print(K)\nelif K <= A + B:\n  print(A)\nelif K <= A + B + C:\n  print(A - (K - A - B))","A,B,C,K=map(int,input().split())\nprint(A,B,C,K)\nif A+B>=K:\n    print(A)\nelse:\n    print(A-C)","a,b,c,k = map(int,input().split())\nsum=0\nif(a>k):\n  sum+=k\nelse:\n  sum+=a\n  k=k-a\n  if(k==0):\n    print(sum)\n  if(b>k):\n    print(sum)\n  else:\n    k = k-b\n    if(k==0):\n      print(sum)\n    if(c>k):\n      sum-=k\n      print(sum)\n    else:\n      sum-=c\n      print(sum)","A,B,C,K=(int(x) for x in input().split())\nif K<=A:print(K)\nelif K<=A+B:print(A)\nelse: print(A-(K-B-A))\n","a, b, c, k = map(int, input().split())\n\nan = a if a <= k else k\nans = an\nk = k - an\nif k > 0:\n  bn = b if b <= k else k\n  k = k - bn\nif k > 0:\n  cn = k\n  ans = ans - cn\nprint(ans)","a, b, c, k = map(int, input().split())\nans = 0\nfor aa in range(a+1):\n    for bb in range(b+1):\n        for cc in range(c+1):\n            if aa+bb+cc == k:\n                t = aa+cc*-1\n                ans = max(t, ans)\nprint(ans)\n","A,B,C,K = map(int,input().split())\n\na = K - A #A\u306e\u30ab\u30fc\u30c9\u3092\u5f15\u3044\u305f\u5f8c\u306eB,C\u306e\u6570\nb = K - A - B #B\u306e\u30ab\u30fc\u30c9\u3067\u6c34\u5897\u3057\u3057\u305f\u5f8c\u306eC\u306e\u6570\n\nif A = 0:\n    print((-1)*b)\nelif A > 0:\n    if b >= 0:\n        print(A - b)\n    elif b < 0:\n        print(A)","a,b,c,k=map(int,input().split())\nans=0\nans+=min(k,a)\nk-=min(k,a)\nk-=min(k,b)\nans-=min(k,c)\nprint(ans)\n"]}
{"description_html":"<h3>Income Inequality<\/h3>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nWe often compute the average as the first step\nin processing statistical data.\nYes, the average is a good tendency measure of data,\nbut it is not always the best.\nIn some cases, the average may hinder the understanding\nof the data.\n<\/p>\n\n<p>\nFor example, consider the national income of a country.\nAs the term <i>income inequality<\/i> suggests,\na small number of people earn a good portion of the gross national income\nin many countries.\nIn such cases, the average income computes much higher than the\nincome of the vast majority.\nIt is not appropriate to regard the average as the income of typical people.\n<\/p>\n\n<p>\nLet us observe the above-mentioned phenomenon in some concrete data.\nIncomes of <i>n<\/i> people, <i>a<\/i><sub>1<\/sub>, ... ,\n<i>a<sub>n<\/sub><\/i>, are given.\nYou are asked to write a program that reports the number of people\nwhose incomes are less than or equal to the average\n(<i>a<\/i><sub>1<\/sub> + ... + <i>a<sub>n<\/sub><\/i>) \/ <i>n<\/i>.\n<\/p>\n<!-- end en only -->\n\n\n\n\n<h3>Input<\/h3>\n\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets, each in the following format.\n<\/p>\n<!-- end en only -->\n\n<blockquote>\n<p>\n<i>n<\/i><br>\n<i>a<\/i><sub>1<\/sub> <i>a<\/i><sub>2<\/sub> ... <i>a<sub>n<\/sub><\/i>\n<\/p>\n<\/blockquote>\n\n<!-- begin en only -->\n<p>\nA dataset consists of two lines.\nIn the first line, the number of people <i>n<\/i> is given.\n<i>n<\/i> is an integer satisfying 2 &#8804; <i>n<\/i> &#8804; 10&#8239;000.\nIn the second line, incomes of <i>n<\/i> people are given.\n<i>a<sub>i<\/sub><\/i> (1 &#8804; <i>i<\/i> &#8804; <i>n<\/i>) is the income\nof the <i>i<\/i>-th person.\nThis value is an integer greater than or equal to 1 and\nless than or equal to 100&#8239;000.\n<\/p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\nThe sum of <i>n<\/i>'s of all the datasets does not exceed 50&#8239;000.\n<\/p>\n<!-- end en only -->\n\n\n\n\n<h3>Output<\/h3>\n\n\n\n<!-- begin en only -->\n<p>\nFor each dataset, output the number of people whose incomes are\nless than or equal to the average.\n<\/p>\n<!-- end en only -->\n\n\n\n\n<h3>Sample Input<\/h3>\n\n\n<pre>7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0\n<\/pre>\n\n\n<h3>Output for the Sample Input<\/h3>\n\n\n<pre>7\n3\n9\n1\n4\n<\/pre>\n\n","description_string":"Income Inequality\n\n\n\nWe often compute the average as the first step\nin processing statistical data.\nYes, the average is a good tendency measure of data,\nbut it is not always the best.\nIn some cases, the average may hinder the understanding\nof the data.\n\n\nFor example, consider the national income of a country.\nAs the term income inequality suggests,\na small number of people earn a good portion of the gross national income\nin many countries.\nIn such cases, the average income computes much higher than the\nincome of the vast majority.\nIt is not appropriate to regard the average as the income of typical people.\n\n\nLet us observe the above-mentioned phenomenon in some concrete data.\nIncomes of n people, a1, ... ,\nan, are given.\nYou are asked to write a program that reports the number of people\nwhose incomes are less than or equal to the average\n(a1 + ... + an) \/ n.\n\n\nInput\n\n\nThe input consists of multiple datasets, each in the following format.\n\n\n\n\nn\na1 a2 ... an\n\n\n\n\nA dataset consists of two lines.\nIn the first line, the number of people n is given.\nn is an integer satisfying 2 \u2264 n \u2264 10\u202f000.\nIn the second line, incomes of n people are given.\nai (1 \u2264 i \u2264 n) is the income\nof the i-th person.\nThis value is an integer greater than or equal to 1 and\nless than or equal to 100\u202f000.\n\n\nThe end of the input is indicated by a line containing a zero.\nThe sum of n's of all the datasets does not exceed 50\u202f000.\n\n\nOutput\n\n\nFor each dataset, output the number of people whose incomes are\nless than or equal to the average.\n\n\nSample Input\n7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0\n\nOutput for the Sample Input\n7\n3\n9\n1\n4\n\n","orig_lang_html":"<h3>Income Inequality<\/h3>\n<!-- end en only -->\n\n\n\n<!-- begin en only -->\n<p>\nWe often compute the average as the first step\nin processing statistical data.\nYes, the average is a good tendency measure of data,\nbut it is not always the best.\nIn some cases, the average may hinder the understanding\nof the data.\n<\/p>\n\n<p>\nFor example, consider the national income of a country.\nAs the term <i>income inequality<\/i> suggests,\na small number of people earn a good portion of the gross national income\nin many countries.\nIn such cases, the average income computes much higher than the\nincome of the vast majority.\nIt is not appropriate to regard the average as the income of typical people.\n<\/p>\n\n<p>\nLet us observe the above-mentioned phenomenon in some concrete data.\nIncomes of <i>n<\/i> people, <i>a<\/i><sub>1<\/sub>, ... ,\n<i>a<sub>n<\/sub><\/i>, are given.\nYou are asked to write a program that reports the number of people\nwhose incomes are less than or equal to the average\n(<i>a<\/i><sub>1<\/sub> + ... + <i>a<sub>n<\/sub><\/i>) \/ <i>n<\/i>.\n<\/p>\n<!-- end en only -->\n\n\n\n\n<h3>Input<\/h3>\n\n\n\n<!-- begin en only -->\n<p>\nThe input consists of multiple datasets, each in the following format.\n<\/p>\n<!-- end en only -->\n\n<blockquote>\n<p>\n<i>n<\/i><br>\n<i>a<\/i><sub>1<\/sub> <i>a<\/i><sub>2<\/sub> ... <i>a<sub>n<\/sub><\/i>\n<\/p>\n<\/blockquote>\n\n<!-- begin en only -->\n<p>\nA dataset consists of two lines.\nIn the first line, the number of people <i>n<\/i> is given.\n<i>n<\/i> is an integer satisfying 2 &#8804; <i>n<\/i> &#8804; 10&#8239;000.\nIn the second line, incomes of <i>n<\/i> people are given.\n<i>a<sub>i<\/sub><\/i> (1 &#8804; <i>i<\/i> &#8804; <i>n<\/i>) is the income\nof the <i>i<\/i>-th person.\nThis value is an integer greater than or equal to 1 and\nless than or equal to 100&#8239;000.\n<\/p>\n\n<p>\nThe end of the input is indicated by a line containing a zero.\nThe sum of <i>n<\/i>'s of all the datasets does not exceed 50&#8239;000.\n<\/p>\n<!-- end en only -->\n\n\n\n\n<h3>Output<\/h3>\n\n\n\n<!-- begin en only -->\n<p>\nFor each dataset, output the number of people whose incomes are\nless than or equal to the average.\n<\/p>\n<!-- end en only -->\n\n\n\n\n<h3>Sample Input<\/h3>\n\n\n<pre>7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0\n<\/pre>\n\n\n<h3>Output for the Sample Input<\/h3>\n\n\n<pre>7\n3\n9\n1\n4\n<\/pre>\n\n","orig_lang_string":"Income Inequality\n\n\n\nWe often compute the average as the first step\nin processing statistical data.\nYes, the average is a good tendency measure of data,\nbut it is not always the best.\nIn some cases, the average may hinder the understanding\nof the data.\n\n\nFor example, consider the national income of a country.\nAs the term income inequality suggests,\na small number of people earn a good portion of the gross national income\nin many countries.\nIn such cases, the average income computes much higher than the\nincome of the vast majority.\nIt is not appropriate to regard the average as the income of typical people.\n\n\nLet us observe the above-mentioned phenomenon in some concrete data.\nIncomes of n people, a1, ... ,\nan, are given.\nYou are asked to write a program that reports the number of people\nwhose incomes are less than or equal to the average\n(a1 + ... + an) \/ n.\n\n\nInput\n\n\nThe input consists of multiple datasets, each in the following format.\n\n\n\n\nn\na1 a2 ... an\n\n\n\n\nA dataset consists of two lines.\nIn the first line, the number of people n is given.\nn is an integer satisfying 2 \u2264 n \u2264 10\u202f000.\nIn the second line, incomes of n people are given.\nai (1 \u2264 i \u2264 n) is the income\nof the i-th person.\nThis value is an integer greater than or equal to 1 and\nless than or equal to 100\u202f000.\n\n\nThe end of the input is indicated by a line containing a zero.\nThe sum of n's of all the datasets does not exceed 50\u202f000.\n\n\nOutput\n\n\nFor each dataset, output the number of people whose incomes are\nless than or equal to the average.\n\n\nSample Input\n7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0\n\nOutput for the Sample Input\n7\n3\n9\n1\n4\n\n","solve_rate":0.9228395062,"codenet_problem_id":"p01109","input_testcases":{"70":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","92":"7\n15 15 15 15 15 23 15\n4\n10 21 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n82 90 90 90 90 65 10\n7\n2 7 1 8 2 8 4\n0","27":"7\n23 14 1 15 15 18 16\n4\n14 20 30 60\n10\n1 1 1 1 1 0 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0","95":"7\n23 15 1 15 21 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n41 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","73":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 0 100\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0","33":"7\n17 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 98 88 10\n7\n0 7 0 5 2 11 8\n0","17":"7\n2 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n90 90 90 137 90 52 10\n7\n2 7 1 9 2 11 4\n0","100":"7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","90":"7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","78":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 8 2 11 4\n0","63":"7\n2 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 000\n7\n90 90 90 137 90 28 10\n7\n2 7 1 9 2 11 4\n0","25":"7\n2 15 15 15 15 23 15\n4\n10 27 30 60\n10\n0 1 0 1 0 1 1 1 1 100\n7\n100 90 90 137 179 28 10\n7\n2 7 1 9 2 11 4\n0","14":"7\n23 14 1 15 15 18 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","10":"7\n23 24 1 5 15 23 30\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 14\n7\n2 7 0 8 2 11 4\n0","91":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n7\n31 90 90 124 90 90 10\n7\n2 7 0 8 2 11 4\n0","79":"7\n23 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","9":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 2 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 7\n0","7":"7\n15 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0","76":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n82 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","94":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 9 2 11 4\n0","57":"7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 35 90 10\n7\n2 7 1 8 2 6 4\n0","54":"7\n23 15 1 15 15 18 19\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","2":"7\n23 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","86":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 9 2 11 4\n0","81":"7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 172 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","71":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","93":"7\n15 15 15 15 15 23 15\n4\n10 20 30 79\n10\n1 2 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 7\n0","28":"7\n41 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 90 88 10\n7\n0 7 0 5 2 11 4\n0","13":"7\n15 15 1 15 15 23 15\n4\n10 20 30 5\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 122 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0","5":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","96":"7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 110\n7\n31 172 90 90 90 90 10\n7\n2 7 1 8 2 6 4\n0","82":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 14\n7\n2 7 0 8 2 11 4\n0","75":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 2 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","26":"7\n27 15 2 15 15 23 15\n4\n10 20 30 5\n10\n1 1 1 2 1 1 1 0 1 110\n7\n90 122 90 90 90 9 10\n7\n2 8 2 8 2 11 8\n0","97":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n7\n31 90 90 67 90 90 10\n7\n2 7 0 8 2 11 4\n0","87":"7\n15 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 122 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0","8":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 000\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0","20":"7\n23 14 1 15 15 18 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0","69":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","101":"7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","3":"7\n23 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","52":"7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 14 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","53":"7\n15 0 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 122 90 90 90 90 10\n7\n2 7 1 8 2 11 8\n0","16":"7\n15 20 15 15 15 23 15\n4\n10 20 30 79\n10\n1 2 1 0 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 7\n0","89":"7\n23 15 1 15 21 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n41 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","83":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 0 100\n7\n31 90 90 124 90 90 10\n7\n2 7 0 8 2 11 4\n0","18":"7\n15 15 1 15 15 23 15\n4\n10 20 30 5\n10\n1 1 1 1 1 1 1 0 1 100\n7\n90 122 90 90 90 34 10\n7\n2 7 2 8 2 11 8\n0","30":"7\n23 14 1 15 15 25 16\n4\n14 20 30 60\n10\n1 1 1 1 1 0 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0","77":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 2 1 0 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","31":"7\n17 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 90 88 10\n7\n0 7 0 5 2 11 8\n0","0":"7\n15 15 15 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","4":"7\n23 15 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","58":"7\n15 15 15 15 15 23 15\n4\n10 20 30 22\n10\n1 1 1 1 0 0 1 1 1 100\n7\n90 90 90 137 90 90 10\n7\n2 7 1 9 2 11 4\n0","22":"7\n41 24 1 5 15 23 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 90 90 10\n7\n0 7 0 5 2 11 4\n0","34":"7\n17 24 1 5 15 0 27\n4\n10 3 30 60\n10\n1 1 1 1 0 1 1 1 1 100\n7\n31 90 90 67 98 88 10\n7\n0 11 0 5 2 11 8\n0","55":"7\n23 24 1 5 15 23 30\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 29 90 90 14\n7\n2 7 0 8 2 11 4\n0","61":"7\n23 15 1 18 5 23 15\n4\n10 20 32 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n41 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0","24":"7\n23 14 1 15 15 18 20\n4\n14 20 30 60\n10\n1 1 1 1 1 1 1 1 1 001\n7\n3 90 90 155 168 90 10\n7\n2 7 1 7 2 11 4\n0","80":"7\n23 15 1 15 21 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","12":"7\n15 15 12 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 2 100\n7\n90 90 90 4 90 90 10\n7\n2 7 1 8 2 8 4\n0","72":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0","19":"7\n15 15 6 15 15 23 15\n4\n10 20 30 22\n10\n0 1 1 1 1 1 1 1 2 100\n7\n88 90 90 4 133 90 10\n7\n2 7 1 8 2 8 4\n0","1":"7\n15 15 1 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","88":"7\n23 15 1 15 15 18 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 101\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 11 4\n0","85":"7\n15 15 15 15 15 23 15\n4\n10 21 30 60\n10\n1 1 1 0 1 1 1 1 1 100\n7\n82 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","74":"7\n23 24 1 5 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 0 100\n7\n31 90 90 90 90 90 10\n7\n2 7 0 8 2 11 4\n0","67":"7\n15 15 1 11 15 23 15\n4\n10 20 30 5\n10\n1 1 1 1 1 1 1 0 1 110\n7\n90 122 90 90 90 9 10\n7\n2 8 2 8 2 11 8\n0","84":"7\n15 15 12 15 15 23 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 2 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0","99":"7\n15 15 12 15 15 23 15\n4\n10 20 30 60\n10\n0 1 1 1 1 1 1 1 2 100\n7\n90 90 90 4 90 90 10\n7\n2 7 1 8 2 8 4\n0","66":"7\n41 24 1 5 15 23 27\n4\n10 20 30 60\n10\n1 1 1 1 0 1 1 1 1 000\n7\n31 90 90 67 90 90 10\n7\n0 7 0 5 2 11 4\n0","6":"7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n4 7 1 8 2 8 4\n0"},"output_testcases":{"70":"6\n3\n9\n1\n4\n","92":"6\n3\n9\n2\n4\n","27":"2\n3\n1\n2\n4\n","95":"4\n3\n9\n2\n4\n","73":"4\n3\n9\n2\n4\n","33":"3\n2\n9\n3\n3\n","17":"1\n3\n9\n2\n4\n","100":"7\n3\n9\n1\n4\n","90":"2\n3\n9\n2\n4\n","78":"6\n3\n9\n1\n4\n","63":"1\n3\n2\n2\n4\n","25":"1\n3\n9\n4\n4\n","14":"2\n3\n9\n1\n4\n","10":"3\n3\n9\n2\n4\n","91":"4\n3\n9\n2\n4\n","79":"5\n3\n9\n1\n4\n","9":"6\n3\n9\n1\n3\n","7":"1\n3\n9\n1\n3\n","76":"6\n3\n9\n1\n4\n","94":"6\n3\n9\n1\n4\n","57":"2\n3\n9\n3\n4\n","54":"4\n3\n9\n1\n4\n","2":"5\n3\n9\n1\n4\n","86":"6\n3\n9\n1\n4\n","81":"2\n3\n9\n2\n4\n","71":"6\n3\n9\n1\n4\n","93":"6\n3\n9\n1\n3\n","28":"4\n2\n9\n2\n4\n","13":"1\n2\n9\n1\n3\n","5":"4\n3\n9\n2\n4\n","96":"2\n3\n9\n2\n4\n","82":"4\n3\n9\n2\n4\n","75":"6\n3\n9\n1\n4\n","26":"5\n2\n9\n2\n3\n","97":"4\n3\n9\n2\n4\n","87":"1\n3\n9\n1\n3\n","8":"4\n3\n3\n2\n4\n","20":"2\n3\n10\n2\n4\n","69":"6\n3\n9\n1\n4\n","101":"7\n3\n9\n1\n4\n","3":"5\n3\n9\n2\n4\n","52":"7\n3\n9\n2\n4\n","53":"2\n3\n9\n1\n3\n","16":"5\n3\n9\n1\n3\n","89":"4\n3\n9\n2\n4\n","83":"4\n3\n9\n2\n4\n","18":"1\n2\n9\n2\n3\n","30":"4\n3\n1\n2\n4\n","77":"6\n3\n9\n1\n4\n","31":"3\n2\n9\n2\n3\n","0":"6\n3\n9\n1\n4\n","4":"2\n3\n9\n2\n4\n","58":"6\n2\n9\n1\n4\n","22":"3\n2\n9\n2\n4\n","34":"3\n2\n9\n3\n4\n","55":"3\n3\n9\n3\n4\n","61":"2\n2\n9\n2\n4\n","24":"4\n3\n10\n2\n4\n","80":"4\n3\n9\n2\n4\n","12":"6\n3\n9\n2\n4\n","72":"4\n3\n9\n2\n4\n","19":"1\n2\n9\n2\n4\n","1":"1\n3\n9\n1\n4\n","88":"1\n3\n9\n1\n4\n","85":"6\n3\n9\n1\n4\n","74":"4\n3\n9\n2\n4\n","67":"2\n2\n9\n2\n3\n","84":"6\n3\n9\n1\n4\n","99":"6\n3\n9\n2\n4\n","66":"3\n3\n2\n2\n4\n","6":"7\n3\n9\n1\n4\n"},"n_missing":31,"programs":["while True:\n    t=0\n    n=int(input())\n    if n==0:\n        break\n    else:\n        y=list(map(int,input().split()))\n        s=sum(y)\/n\n        for i in range(n):\n            if y[i]<=s:\n                t+=1\n        print(t)\n","while True:\n    n = int(input())\n    \n    if n == 0:\n        break\n    \n    a = list(map(int,input().split()))\n    \n    b = sum(a)\/n\n    \n    \n    ans = 0\n    for i in a:\n        if i <= b:\n            ans += 1\n        \n    print(ans)\n","a = int(input())\nsu = 0\nwhile a != 0:\n    b = list(map(int,input().split()))\n    c = sum(b)\/len(b)\n    for i in range(len(b)):\n        if b[i] <= c:\n            su += 1\n    \n    print(su)\n    su = 0\n    a = int(input())\n","n = int(input())\nwhile n != 0:\n  list = input().split()\n\n  for i in range(len(list)):\n    list[i] = int(list[i])\n\n  avgs = sum(list) \/ n\n  i = 0\n  a = 0\n  for i in range(len(list)):\n    if list[i] <= avgs:\n      a = a + 1\n  print(a)\n  n = int(input())\n","#!\/usr\/bin\/python3\n\nimport array\nfrom fractions import Fraction\nimport functools\nimport itertools\nimport math\nimport os\nimport sys\n\n\ndef main():\n    while True:\n        N = read_int()\n        if N == 0:\n            break\n        A = read_ints()\n        print(solve(N, A))\n\n\ndef solve(N, A):\n    avg = Fraction(sum(A), N)\n    return len([a for a in A if a <= avg])\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n","import bisect\n# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\n\ndef solve():\n    N=int(input())\n    if N==0:\n        exit()\n    L=list(map(int,input().split()))\n    ave = sum(L)\/\/N\n    L = sorted(L)\n    low = bisect.bisect_right(L,ave)\n    print(low)\n\nwhile True:\n    solve()\n\n\n","anslist = []\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    ans = 0\n    ave = sum(a) \/ n\n    for i in range(n):\n        if a[i] <= ave:\n            ans += 1\n\n    anslist.append(ans)\n\nfor i in anslist:\n    print(i)\n","n=int(input())\na=[int(i) for i in input().split]\n\ntotal=0\nfor i in a:\n    total+=i\n\nhei=total\/n\n\ncount=0\nfor i in a:\n    if i <= hei:\n        count+=1\n        \nprint(count)\n","for v in range(10000):\n  x = 0\n  n = input()\n  n = int(n)\n  if n == 0:\n    break\n  else:\n    a = input().split()\n    b = [int(s) for s in a]\n    for i in range(n):\n      x += b[i]\n      i += 1\n    y = x\/n\n    z = 0\n    for j in range(n):\n      if y >= b[j]:\n        z+=1\n        j += 1\n      else:\n        j+=1\n  print(z)\n\n\n","while True:\n    c = int(input())\n    if c == 0:\n        break\n    a = list(map(int,input().split()))\n    az = sum(a)\/c\n    ans = 0\n    for x in a:\n        if x <= az:\n            ans += 1\n    print(ans)\n","import statistics\n\ndef get_data():\n    data = int(input())\n    return data\n\ndef get_data_list():\n    data_list = input().split()\n    for i, v in enumerate(data_list):\n        data_list[i] = int(v)\n    return data_list\n\ndef count_num_under_average(list_num, reverse_sorted_num_list, average_num):\n    count = list_num\n    for v in reverse_sorted_income_list:\n        if v > average_num:\n            count -= 1\n        else:\n            break\n    return count\n\n\nif __name__ == \"__main__\":\n    while True:\n        population = get_data()\n        if population == 0:\n            break\n        income_list = get_data_list()\n        reverse_sorted_income_list = sorted(income_list, reverse=True)\n        average_income = statistics.mean(reverse_sorted_income_list)\n        count = count_num_under_average(population, reverse_sorted_income_list, average_income)\n        print(count)\n\n\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    m=list(map(int,input().split()))\n    M=sum(m)\/\/n\n    A=0\n    for i in range(n):\n        S=m[i]-M\n        if S<=0:\n            A=A+1\n    print(A)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    li = [int(i) for i in input().split()]\n    mean = sum(li) \/ len(li)\n    cnt = 0\n    for i in li:\n        if float(i) <= mean:\n            cnt += 1\n    print(cnt)\n","while(True):\n    if(input()==\"0\"):\n        exit()\n    l = list(map(int,input().split()))\n    print(len([i for i in l if i<=sum(l)\/len(l)]))\n","ans = []\nwhile 1:\n    N = int(input())\n    if N == 0:\n        break\n    *A, = map(int, input().split())\n    s = sum(A)\n    cnt = 0\n    for a in A:\n        if a*N <= s:\n            cnt += 1\n    ans.append(cnt)\nprint(*ans, sep='\\n')\n\n","# AOJ 1624 Income Inequality\n# Python 2018.7.12 bal4u\n\nwhile True:\n\tn = int(input())\n\tif n == 0: break\n\ta = list(map(int, input().split()))\n\ts = int(sum(a)\/\/n)\n\tans = 0\n\tfor x in a:\n\t\tif x <= s: ans += 1\n\tprint(ans)\n","while True:\n    n = int(input())\n    if not n:\n        break\n    a = list(map(int, input().split()))\n    ave = sum(a) \/ n\n    print(len([x for x in a if x <= ave]))\n\n","while True:\n    M=0\n    \n    A=int(input())\n    \n    if A==0:\n        break\n    \n    L=list(map(int,input().split()))\n    \n    B=sum(L)\/len(L)\n    \n    for i in range(A):\n        if L[i]<=B:\n            M+=1\n            \n    print(M)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a)\/n\n    print(len([i for i in a if avg >= i]))\n\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n  print(c)\n","while True:\n    n=int(input())\n    if n == 0: break\n    xs=list(map(int,input().split()))\n    ave=sum(xs)\/n\n    print(sum(1 for x in xs if x <= ave))\n\n","while True:\n  n = int(input())\n  if n == 0:break\n  alst = list(map(int, input().split()))\n  ave = sum(alst) \/ n\n  print(sum(a <= ave for a in alst))\n\n","import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 \/ 10**13\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    def f(n):\n        a = LI()\n        av = 1.0 * sum(a) \/ n\n\n        return len([c for c in a if c <= av])\n\n\n    while 1:\n        n = I()\n        if n == 0:\n            break\n        rr.append(f(n))\n\n    return '\\n'.join(map(str, rr))\n\n\nprint(main())\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n\n    sum_a = sum(a)\n    ans = 0\n    for e in a:\n        if e * n <= sum_a:\n            ans += 1\n    print(ans)\n\n\n\n","nl=[]\nal=[]\nwhile 1:\n    n=input()\n    if n==\"0\":\n        break\n    nl.append(int(n))\n\n    a = list(map(lambda x: int(x), input().split()))\n    al.append(a)\n\nfor i in range(len(nl)):\n    ave = sum(al[i]) \/ nl[i]\n    num = len(list(filter(lambda x: x <= ave, al[i])))\n    print(num)\n\n\n","\ndef main():\n\twhile(1):\n\n\t\ta = int(input())\n\t\tif a == 0:\n\t\t\tbreak\n\n\t\tb = list(map(int, input().split()))\n\t\tmean = sum(b)\/a\n\t\tcount=0\n\t\tfor i in range(a):\n\t\t\tif mean>= b[i]:\n\t\t\t\tcount+=1\n\t\tprint(count)\n\n\nif __name__ == '__main__':\n    main()\n","import sys\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef LIST(): return list(map(int, input().split()))\n\nans = []\nwhile 1:\n\tn = INT()\n\tif n == 0:\n\t\tbreak\n\n\ta = LIST()\n\tave = sum(a)\/n\n\tcount = 0\n\tfor i in a:\n\t\tif i <= ave:\n\t\t\tcount += 1\n\tans.append(count)\nfor i in ans:\n\tprint(i)\n\n","while  True:\n    N = int(input())\n    if N == 0:\n        break\n    s = list(map(int,input().split()))\n    avg = sum(s) \/ N\n    ans = 0\n    for c in s:\n        if c <= avg:\n            ans += 1\n    print(ans)\n","while True:\n    n = int(input())\n    if n==0:\n        break\n    a = [int(a) for a in input().split()]\n    ave = sum(a)\/n\n    count = 0\n    for i in range(n):\n        if a[i]<=ave:\n            count += 1\n    print(count)\n","#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n#A\ndef A():\n    while 1:\n        n = I()\n        if n == 0:\n            quit()\n        a = LI()\n        m = sum(a)\/n\n        c = 0\n        for i in range(n):\n            if a[i] <= m:\n                c += 1\n        print(c)\n    return\n\n#B\ndef B():\n    return\n\n#C\ndef C():\n    return\n\n#D\ndef D():\n    return\n\n#E\ndef E():\n    return\n\n#F\ndef F():\n    return\n\n#G\ndef G():\n    return\n\n#H\ndef H():\n    return\n\n#I\ndef I_():\n    return\n\n#J\ndef J():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    A()\n\n","while True:\n\tn = int(input())\n\tif n == 0:\n\t    break\n\ta = list(map(int, input().split()))\n\ts = int(sum(a) \/\/ n)\n\tans = 0\n\tfor x in a:\n\t    if x <= s:\n\t        ans += 1\n\tprint(ans)\n\n","while 1:\n    n = int(input())\n    if n == 0: break\n    a = sorted(list(map(int, input().split())))\n    mean = sum(a) \/ len(a)\n    count = 0\n    for item in a:\n        if item <= mean: count += 1\n        else: break\n    print(count)\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    A = list(map(int, input().split()))\n    assert len(A) == n\n\n    ave = sum(A) \/\/ n\n    print(sum(1 for a in A if a <= ave))\n","#\u7121\u9650\u30eb\u30fc\u30d7\u3068\u6a19\u6e96\u5165\u529b\u3068\u30ab\u30a6\u30f3\u30bf\u5909\u6570\u306e\u30ea\u30bb\u30c3\u30c8\nwhile True:\n    kai = 0\n    num = int(input())\n    \n    #\u5165\u529b\u5024\u304c0\u3060\u3063\u305f\u3089\u7d42\u308f\u308b\n    if num == 0:break\n\n    #\u6a19\u6e96\u5165\u529b\u3092\u3057\u3001\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n    line = list(map(int,input().split()))\n    heikin = sum(line) \/ num\n    \n    #\u5e73\u5747\u5024\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u8abf\u3079\u500b\u6570\u3092\u51fa\u529b\n    for i in range(num):\n        if line[i] <= heikin:kai += 1\n    print(kai)\n","while(True):\n    n = int(input())\n    if n==0:\n        exit()\n    l = list(map(int,input().split()))\n    l.sort()\n    s = sum(l)\/n\n    res = 0\n    if l[-1]==l[0]:\n        print(n)\n        continue\n    for i in range(n):\n        if l[i]>s:\n            print(i)\n            break\n","#!\/usr\/bin\/env python3\n\nwhile True:\n    n = int(input())\n    if n == 0: break\n\n    a = list(map(int, input().split()))\n    ave_num = sum(a) \/ n\n\n    cnt = 0\n    for item in a:\n        if item <= ave_num:\n            cnt += 1\n\n    print(cnt)\n\n","while True :\n    n = int(input())\n    \n    if n == 0 :\n        break\n    \n    else :\n        A = list(map(int, input().split()))\n        cnt = 0\n        \n        ave = sum(A) \/ n\n        # \u5e73\u5747 average\n        \n        for i in range(len(A)) :\n            if A[i] <= ave :\n                cnt += 1\n                \n        print(cnt)\n        \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    A=list(map(int,input().split()))\n\n    AVE=sum(A)\/n\n    print(len([a for a in A if a<=AVE]))\n","while(True):\n    n = input()\n    if n==\"0\":\n        break\n    elif (int)(n)>50000:\n        continue\n    hairetu = input()\n\n    tarou = hairetu.split(\" \")\n    avg=0\n\n    for i in range(0,(int)(n)):\n        avg=avg+(int)(tarou[i])\n    avg=avg\/(int)(n)\n\n    cdnt=0\n    for j in range(0,(int)(n)):\n        if (int)(tarou[j]) <= (int)(avg):\n            cdnt=cdnt+1 \n    print(cdnt)\n\n","import sys\n\n\ndef solve(n):\n    a = list(map(int, input().split()))\n    ave = sum(a) \/ n\n    count = 0\n    for i in a:\n        if i <= ave:\n            count += 1\n\n    print(count)\n\n\ndef main():\n    while(True):\n        n = int(input())\n        if n == 0:\n            sys.exit(0)\n        else:\n            solve(n)\n\n\nmain()\n\n","while True:\n\tn = int(input())\n\tif n < 1:\n\t\tbreak\n\tdata = [int(x) for x in input().split()]\n\tlessequal = [1 for x in data if x <= (sum(data) \/ len(data))]\n\tprint(sum(lessequal))\n","while(1):\n\tn=int(input())\n\tif n==0:\n\t\tbreak\t\n\ta=[int(i) for i in input().split()]\n\n\ttotal=0\n\tfor i in a:\n\t\ttotal+=i\n\t\n\thei=total\/n\n\tcount=0\n\tfor i in a:\n\t\tif i <=hei:\n\t\t\tcount+=1\n\tprint(count)\n\n","while True:\n    num = int(input())\n    if num == 0:\n        break\n    \n    L = [int(x) for x in input().split()]\n    \n    ave = sum(L)\/ len(L)\n    \n    c = 0\n    for i in L:\n        if i <= ave:\n            c += 1\n    print(c)\n    \n","while True :\n    n = int(input())\n    if n == 0 :\n        break\n    \n    lst = list(map(int, input().split()))\n    ave_lst = sum(lst) \/ len(lst)\n    Sum = 0\n    for i in range(n) :\n        if lst[i] <= ave_lst :\n            Sum += 1\n    print(Sum)\n","try:\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        ika = 0\n        a = list(map(int,input().split()))\n        m = sum(a) \/ n\n        for j in a:\n            if j <= m:\n                ika += 1 \n        print(ika)\nexcept EOFError:\n    pass\n\n\n","ans = []\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a) \/ n\n    ans.append(sum(avg >= x for x in a))\nprint(*ans, sep=\"\\n\")\n\n","while True:\n    n = int(input());\n    if n == 0:\n        break;\n    a = list(map(int, input().split()));\n\n    h = sum(a)\/n;\n    \n    k = 0;\n    for i in range(0,n):\n        if a[i] <= h:\n            k += 1;\n    print(k);\n","from statistics import *\nwhile int(input()):\n    a=list(map(int,input().split()))\n    m=mean(a)\n    c=0\n    for i in a:\n        if i<=m:c+=1\n    print(c)\n","while True:\n  #1\u884c\u76een\u3092\u8aad\u307f\u8fbc\u3080\n  cnt = 0\n  n =int(input())\n  #\u3082\u3057n==0\u306a\u3089break\n  if n==0:\n    break\n  #n>0\u306a\u3089\u3070\n  if n>0:\n    #\u914d\u5217a[i]\u3092\u8aad\u307f\u8fbc\u3080(1<=i<=n)\n    a = list(map(int, input().split()))\n \n  ans = sum(a) \/\/n\n  for i in range(n):\n    if a[i] <= ans:\n      cnt+=1\n  print(cnt)\n      \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    l=(input().split())\n    for i in range(n):\n        l[i]=int(l[i])\n    m=sum(l)\/n\n    a=0\n    for i in range(n):\n        if l[i]<=m:\n           a+=1\n    print(a)\n","while True:\n    n = int(input())\n    if n == 0:\n        exit()\n    else:\n        sample = list(map(int,input().split()))\n        average = sum(sample)\/n\n        cnt = len([1 for i in range(n) if sample[i] <= average])\n        print(cnt)\n","import os,re,sys,operator\nfrom collections import Counter,deque\nfrom operator import itemgetter\nfrom itertools import accumulate,combinations,groupby\nfrom sys import stdin,setrecursionlimit\nfrom copy import deepcopy\nimport heapq\n\nsetrecursionlimit(10**6)\nwhile 1:\n    n=int(stdin.readline().rstrip())\n    if n==0:\n        break\n    a=[int(i) for i in stdin.readline().rstrip().split()]\n    mean=sum(a)\/n\n    cnt=0\n    for i in a:\n        if i<=mean:\n            cnt+=1\n    print(cnt)\n","while True:\n  n = int(input())\n  if n==0:\n    break\n  a = list(map(int, input().split()))\n  ave = int(sum(a) \/\/ n)\n  cnt = 0\n  for i in a:\n    if i<=ave:\n      cnt += 1\n  print(cnt)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    ans=0\n    ave=sum(a)\/n\n    for i in range(n):\n        if a[i]<=ave:\n            ans+=1\n    print(ans)\n","while True:\n    n = int(input())\n    if n == 0:\n        break;\n    a = list(map(int, input().split()))\n    mean = sum(a)\/n\n    print(len(list(filter(lambda x:x<=mean, a))))\n\n","while True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=sum(ns)\/n:\n      c+=1\n  print(c)\n","while(True):\n    N=int(input())\n    if N==0:\n        break\n    a=[int(i) for i in input().split()]\n    S=sum(a)\n    ans=0\n    for i in range(N):\n        if a[i]*N<=S:\n            ans+=1\n    print(ans)\n\n","# coding: utf-8\n# Your code here!\n\nwhile True:\n   n = int(input()) # \u56fd\u6c11\u306e\u4eba\u6570\n   if n == 0: break\n   \n   income = list(map(int, input().split()))\n   avg = sum(income) \/\/ n\n   \n   c = 0\n   for i in range(n):\n      if income[i] <= avg:\n         c += 1\n   print(c)\n   \n","def income_inequality():\n    n = int(input())\n    low_income_num = []\n    while n:\n        incomes = [int(i) for i in input().split()]\n        sum = 0.0\n        for i in incomes:\n            sum += i\n        everage = sum \/ len(incomes)\n        count = 0\n        for i in incomes:\n            if i <= everage:\n                count += 1\n        low_income_num.append(count)\n        n = int(input())\n    for i in low_income_num:\n        print(i)\n\nincome_inequality()\n","while True:\n    n = int(input())\n    if n <= 0: break\n    a = [int(i) for i in input().split()]\n    ave = sum(a)\/n\n\n    print(len(list(filter(lambda x: x <= ave, a))))\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    else:\n        X=[int(i) for i in input().split()]\n        a=sum(X)\/n\n        s=0\n        for i in range(n):\n            if X[i]<=a:\n                s+=1\n        print(s)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    \n    c=0\n    ave=0\n    for i in range(n):\n        ave=ave+a[i]\n    ave=ave\/\/n\n    for i in range(n):\n        if ave>=a[i]:\n            c=c+1\n    \n    print(c)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    lst=list(map(int,input().split()))\n    x=sum(lst)\/n\n    ans=0\n    for i in lst:\n        if x>=i:\n            ans+=1\n    print(ans)\n","import bisect\ndef main(n):\n    a = list(map(int, input().split()))\n    a.sort()\n    print(bisect.bisect_right(a,sum(a)\/n))\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    main(n)\n","while True:\n    num = int(input())\n    if num == 0:\n        break\n    else:\n        x = input().split()\n        for i in range(num):\n            x[i] = int(x[i])\n        ave = sum(x)\/num\n        count = 0\n        for i in range(num):\n            if x[i]<=ave:\n                count += 1\n        print(count)\n","while True :\n    n=int(input())\n    if n==0 : break\n    a=input().split()\n    tot=0;ans=0\n    for i in a : tot+=int(i)\n    for i in a :\n        if (tot\/n)>=int(i) : ans+=1\n    print(ans)\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","while True:\n  n = int(input())\n  if n == 0:\n    break\n  a = list(map(int,input().split()))\n  s = sum(a)\/n\n  a.sort()\n  ans = 0\n  for i in range(n):\n    if a[i]>s:\n      break\n    ans += 1\n  print(ans)\n","while True:\n    n = int(input())\n    if n == 0 :\n        break\n    lst = input().split()\n    sum = 0\n\n    for i in lst:\n        sum = sum + int(i)\n\n    mean = sum \/ len(lst)\n    poor = 0\n\n    for i in lst:\n        if mean >= int(i):\n            poor = poor +  1\n\n    print(poor)\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a)\/n\n    cnt = 0\n    for i in a:\n        if i <= m:\n            cnt += 1\n    print(cnt)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    hei = sum(a)\/len(a)\n    count = 0\n    for i in a:\n        if hei >= i:\n            count += 1\n    else:\n        print(count)\n","ans_list = []\nwhile True:\n    n = int(input())\n    if n==0:\n        break\n    A = list(map(int,input().split()))\n    ave = sum(A) \/\/ len(A)\n    cnt = 0\n    for a in A:\n        if a <= ave:\n            cnt += 1\n    ans_list.append(cnt)\n\nfor ans in ans_list:\n    print(ans)\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","while True:\n    t=[]\n    n=int(input())\n    if n==0:\n        break\n    else:\n        m=input().strip().split()\n        k=[int(i) for i in m]\n        x=sum(k)\/n\n        for i in range(n):\n            if k[i]<=x:\n                t.append(k[i])\n            else:\n                pass\n        print(len(t))\n   \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    sum=0\n    for i in range(n):\n        sum+=a[i]\n    ave=sum\/n\n    count=0\n    for i in range(n):\n        if a[i]<=ave:\n            count+=1\n    print(count)\n            \n","def main():\n    while True:\n        n = int(input())\n        if not n:\n            return\n        aa = list(map(int,input().split()))\n        ave = sum(aa)\/n\n        print(len([x for x in aa if x <= ave]))\n\nif __name__ == '__main__':\n    main()\n\n","while True:\n   n = int(input())\n   if n==0:\n      break\n   a = [int(x) for x in input().split()]\n   ave = sum(a)\/n\n   c = 0\n   for j in range(n):\n      if a[j]<=ave:\n         c += 1\n   print(c)\n","def solve():\n  while(True):\n    N = int(input())\n    if N == 0:\n      break\n    l = list(map(int,input().split()))\n    ave = sum(l)\/\/len(l)\n    ans = 0\n    for a in l:\n      if a <= ave:\n        ans+=1\n    print(ans)\nif __name__ == '__main__':\n  solve()\n","# coding=utf-8\n\n###\n### for python program\n###\n\nimport sys\nimport math\n\n# math class\nclass mymath:\n    ### pi\n    pi = 3.14159265358979323846264338\n\n    ### Prime Number\n    def pnum_eratosthenes(self, n):\n        ptable = [0 for i in range(n+1)]\n        plist = []\n\n        for i in range(2, n+1):\n            if ptable[i]==0:\n                plist.append(i)\n                for j in range(i+i, n+1, i):\n                    ptable[j] = 1\n        return plist\n\n    def pnum_check(self, n):\n        if (n==1):\n            return False\n        elif (n==2):\n            return True\n        else:\n            for x in range(2,n):\n                if(n % x==0):\n                    return False\n            return True\n\n    ### GCD\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a%b)\n\n    ### LCM\n    def lcm(self, a, b):\n        return (a*b)\/\/self.gcd(a,b)\n\n    ### Mat Multiplication\n    def mul(self, A, B):\n        ans = []\n        for a in A:\n            c = 0\n            for j, row in enumerate(a):\n                c += row*B[j]\n            ans.append(c)\n        return ans\n    \n    ### int\u30c1\u30a7\u30c3\u30af\n    def is_integer(self, n):\n        try:\n            float(n)\n        except ValueError:\n            return False\n        else:\n            return float(n).is_integer()\n\n    ### \u5e7e\u4f55\u5b66\u554f\u984c\u7528\n    def dist(self, A, B):\n        d = 0\n        for i in range(len(A)):\n            d += (A[i]-B[i])**2            \n        d = d**(1\/2)\n        return d\n\n    ### \u7d76\u5bfe\u5024\n    def abs(self, n):\n        if n >= 0:\n            return n\n        else:\n            return -n\n\nmymath = mymath()\n\n### output class\nclass output:\n    ### list\n    def list(self, l):\n        l = list(l)\n        #print(\" \", end=\"\")\n        for i, num in enumerate(l):\n            print(num, end=\"\")\n            if i != len(l)-1:\n                print(\" \", end=\"\")\n        print()\n\noutput = output()\n\n### input sample\n#i = input()\n#N = int(input())\n#A, B, C = [x for x in input().split()]\n#N, K = [int(x) for x in input().split()]\n#inlist = [int(w) for w in input().split()]\n\n#R = float(input())\n#A.append(list(map(int,input().split())))\n\n#for line in sys.stdin.readlines():\n#    x, y = [int(temp) for temp in line.split()]\n\n#abc list\n#abc = [chr(ord('a') + i) for i in range(26)]\n\n### output sample\n# print(\"{0} {1} {2:.5f}\".format(A\/\/B, A%B, A\/B))\n# print(\"{0:.6f} {1:.6f}\".format(R*R*math.pi,R*2*math.pi))\n# print(\" {}\".format(i), end=\"\")\n\ndef printA(A):\n    N = len(A)\n    for i, n in enumerate(A):\n        print(n, end='')\n        if i != N-1:\n            print(' ', end='')\n    print()\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18 if\u3042\u308a\n# [x-k if x != 0 else x for x in C]\n\n# \u30bd\u30fc\u30c8\n# N = N.sort()\n\n# 10000\u500b\u306e\u7d20\u6570\u30ea\u30b9\u30c8\n# P = mymath.pnum_eratosthenes(105000)\n\ndef get_input():\n    N = []\n    while True:\n        try:\n            N.append(input())\n            #N.append(int(input()))\n            #N.append(float(input()))\n        except EOFError:\n            break\n    return N\n\nwhile True:\n    N = int(input())\n    if N==0:\n        break\n    A = [int(x) for x in input().split()]\n\n    ave = sum(A)\/N\n\n    count = 0\n\n    for i in A:\n        if i <= ave:\n            count += 1\n    \n    print(count)\n\n","def main(n):\n\tif n == 0:\n\t\treturn False\n\ta = list(map(int,input().split()))\n\tm = sum(a)\/n\n\tans = 0\n\tfor i in a:\n\t\tif i<= m:\n\t\t\tans += 1\n\tprint(ans)\n\treturn True\n\nwhile main(int(input())): pass\n","# import sys\n# input = sys.stdin.readline\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a)\/n\n    count = 0\n    for i in a:\n        if i <= m:\n            count += 1\n    print(count)\n\n","from itertools import takewhile\n\nwhile True:\n    n = int(input())\n    if n == 0:break\n    num = sorted(list(map(int, input().split())))\n    ave = int(sum(num))\/int(len(num))\n    print(len(list(takewhile (lambda x:x <= ave, num))))\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    datum = list(map(int, input().split()))\n    ave = sum(datum) \/ n\n    res = 0\n\n    for data in datum:\n        if data <= ave:\n            res += 1\n\n    print(res)\n","import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef LIST(): return list(map(int, input().split()))\n\ndef main():\n    ans = []\n    \n    while 1:\n        n = int(input())\n        if n == 0:\n            break\n        else:\n            a = LIST()\n            heikin = sum(a) \/ n\n            tmp = [x for x in a if x <= heikin]\n            ans.append(len(tmp))\n        \n    for x in ans:\n        print(x)\n\n\nif __name__ == '__main__':\n    main()\n\n","\nwhile True:\n    a = 0\n    num = int(input())\n\n    if num == 0: break\n\n    ls = list(map(int,input().split()))\n    ave = sum(ls) \/ num\n    \n\n    for i in range(num):\n        if ls[i] <= ave :\n            a += 1\n    print(a)\n","while True:\n    try:\n        n = int(input())\n        a = list(map(int,input().split()))\n        s = sum(a)\n        ave = s\/n\n    \n        i = 0\n        x = []\n        while i <= n-1:\n            if a[i] <= ave:\n                x.append(a[i])\n            i += 1\n\n        print(len(x))\n    \n    except:\n        if n == 0:\n            break\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a) \/ n\n    ans = 0\n    for aa in a:\n        if aa <= m:\n            ans += 1\n    print(ans)\n\n","ans = []\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a) \/ n\n    ans.append(sum(avg >= x for x in a))\nprint(*ans, sep=\"\\n\")\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","ans_list = []\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    A = list(map(int,input().split()))\n    ave = sum(A) \/ len(A)\n    cnt = 0\n    for a in A:\n        if a <= ave:\n            cnt += 1\n    ans_list.append(cnt)\n\nfor ans in ans_list:\n    print(ans)\n","while True:\n  n=int(input())\n  if n == 0:\n    break\n  A = list(map(int,input().split()))\n#  print(A)\n  a =sum(A)\n  bar = a\/n\n#  print(bar)\n  count=0\n  for i in A:\n    if i<=bar:\n      count+=1\n  print(count)\n","while 1:\n    n=int(input())\n    if n==0:break\n    a=list(map(int,input().split()))\n    aave=sum(a)\/len(a)\n    ans=0\n    for i in a:\n        if aave>=i: ans+=1\n    print(ans)\n","res = []\nwhile True :\n    n = int(input())\n    \n    if n == 0 :\n        break\n    else :\n        li = [int(x) for x in input().split()]\n        avg = sum(li) \/ n\n        res.append(sum([1 if x <= avg else 0 for x in li]))\n        \nfor r in res :\n    print(r)\n","x=[]\na=[] #append\u306e\u305f\u3081\u306b\u5ba3\u8a00\u304c\u5fc5\u8981\nwhile True:\n    try:\n        a.append(list(map(int,input().split())))\n\n    except:\n        break;\n        #\u307e\u305f\u306f\u3001quit(),os.exit()\u3092\u3057\u3066\u6b62\u3081\u308b\u3002\n\n\n#[[1, 2, 2, 3, 1], [4, 5, 3, 4, 1, 2, 3, 4], [2, 3, 5, 6, 0, 2]]\nfor i in range(len(a)\/\/2):\n    x.append(i)\n    n=i*2\n    m=i*2+1\n    s=sum(a[m])\/a[n][0]\n    for t in range(len(a[m])):\n      if s>=a[m][t]:\n        x[i]=x[i]+1\n    print(x[i]-i)\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int,input().split()))\n    cnt = 0\n    ave = sum(a) \/ n\n    for i in a:\n        if ave >= i:\n           cnt +=1\n    print(cnt) \n\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n  print(c)\n","\nwhile True:\n    x=int(input())\n    if x==0:\n        break\n    alst = list(map(int,input().split()))\n    num = sum(alst) \/ x\n    print(sum(a <= num for a in alst))\n    \n\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    data = list(map(int, input().split()))\n    mean = sum(data) \/ n\n\n    cnt = 0\n    for d in data:\n        if d <= mean:\n            cnt += 1\n\n    print(cnt)\n\n","\nwhile 1:\n    n = int(input())\n    if n==0: break\n    a = list(map(int, input().split()))\n    \n    ave = sum(a)\/n\n    \n    print(len([i for i in a if i <= ave]))\n    #\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092len()\u3067\u8868\u793a\n","while True:\n    a=int(input())\n    if a==0:\n        break\n    else:\n        b=list(map(int,input().split()))\n        h=sum(b)\/a\n        c=0\n        for i in range(a):\n            if h>=b[i]:\n                c+=1\n            else:\n                pass\n        print(c)\n"],"raw_generations":["while True:\n    t=0\n    n=int(input())\n    if n==0:\n        break\n    else:\n        y=list(map(int,input().split()))\n        s=sum(y)\/n\n        for i in range(n):\n            if y[i]<=s:\n                t+=1\n        print(t)\n","while True:\n    n = int(input())\n    \n    if n == 0:\n        break\n    \n    a = list(map(int,input().split()))\n    \n    b = sum(a)\/n\n    \n    \n    ans = 0\n    for i in a:\n        if i <= b:\n            ans += 1\n        \n    print(ans)\n","a = int(input())\nsu = 0\nwhile a != 0:\n    b = list(map(int,input().split()))\n    c = sum(b)\/len(b)\n    for i in range(len(b)):\n        if b[i] <= c:\n            su += 1\n    \n    print(su)\n    su = 0\n    a = int(input())\n","n = int(input())\nwhile n != 0:\n  list = input().split()\n\n  for i in range(len(list)):\n    list[i] = int(list[i])\n\n  avgs = sum(list) \/ n\n  i = 0\n  a = 0\n  for i in range(len(list)):\n    if list[i] <= avgs:\n      a = a + 1\n  print(a)\n  n = int(input())\n","#!\/usr\/bin\/python3\n\nimport array\nfrom fractions import Fraction\nimport functools\nimport itertools\nimport math\nimport os\nimport sys\n\n\ndef main():\n    while True:\n        N = read_int()\n        if N == 0:\n            break\n        A = read_ints()\n        print(solve(N, A))\n\n\ndef solve(N, A):\n    avg = Fraction(sum(A), N)\n    return len([a for a in A if a <= avg])\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n","import bisect\n# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\n\ndef solve():\n    N=int(input())\n    if N==0:\n        exit()\n    L=list(map(int,input().split()))\n    ave = sum(L)\/\/N\n    L = sorted(L)\n    low = bisect.bisect_right(L,ave)\n    print(low)\n\nwhile True:\n    solve()\n\n\n","anslist = []\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    ans = 0\n    ave = sum(a) \/ n\n    for i in range(n):\n        if a[i] <= ave:\n            ans += 1\n\n    anslist.append(ans)\n\nfor i in anslist:\n    print(i)\n","n=int(input())\na=[int(i) for i in input().split]\n\ntotal=0\nfor i in a:\n    total+=i\n\nhei=total\/n\n\ncount=0\nfor i in a:\n    if i <= hei:\n        count+=1\n        \nprint(count)\n","for v in range(10000):\n  x = 0\n  n = input()\n  n = int(n)\n  if n == 0:\n    break\n  else:\n    a = input().split()\n    b = [int(s) for s in a]\n    for i in range(n):\n      x += b[i]\n      i += 1\n    y = x\/n\n    z = 0\n    for j in range(n):\n      if y >= b[j]:\n        z+=1\n        j += 1\n      else:\n        j+=1\n  print(z)\n\n\n","while True:\n    c = int(input())\n    if c == 0:\n        break\n    a = list(map(int,input().split()))\n    az = sum(a)\/c\n    ans = 0\n    for x in a:\n        if x <= az:\n            ans += 1\n    print(ans)\n","import statistics\n\ndef get_data():\n    data = int(input())\n    return data\n\ndef get_data_list():\n    data_list = input().split()\n    for i, v in enumerate(data_list):\n        data_list[i] = int(v)\n    return data_list\n\ndef count_num_under_average(list_num, reverse_sorted_num_list, average_num):\n    count = list_num\n    for v in reverse_sorted_income_list:\n        if v > average_num:\n            count -= 1\n        else:\n            break\n    return count\n\n\nif __name__ == \"__main__\":\n    while True:\n        population = get_data()\n        if population == 0:\n            break\n        income_list = get_data_list()\n        reverse_sorted_income_list = sorted(income_list, reverse=True)\n        average_income = statistics.mean(reverse_sorted_income_list)\n        count = count_num_under_average(population, reverse_sorted_income_list, average_income)\n        print(count)\n\n\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    m=list(map(int,input().split()))\n    M=sum(m)\/\/n\n    A=0\n    for i in range(n):\n        S=m[i]-M\n        if S<=0:\n            A=A+1\n    print(A)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    li = [int(i) for i in input().split()]\n    mean = sum(li) \/ len(li)\n    cnt = 0\n    for i in li:\n        if float(i) <= mean:\n            cnt += 1\n    print(cnt)\n","while(True):\n    if(input()==\"0\"):\n        exit()\n    l = list(map(int,input().split()))\n    print(len([i for i in l if i<=sum(l)\/len(l)]))\n","ans = []\nwhile 1:\n    N = int(input())\n    if N == 0:\n        break\n    *A, = map(int, input().split())\n    s = sum(A)\n    cnt = 0\n    for a in A:\n        if a*N <= s:\n            cnt += 1\n    ans.append(cnt)\nprint(*ans, sep='\\n')\n\n","# AOJ 1624 Income Inequality\n# Python 2018.7.12 bal4u\n\nwhile True:\n\tn = int(input())\n\tif n == 0: break\n\ta = list(map(int, input().split()))\n\ts = int(sum(a)\/\/n)\n\tans = 0\n\tfor x in a:\n\t\tif x <= s: ans += 1\n\tprint(ans)\n","while True:\n    n = int(input())\n    if not n:\n        break\n    a = list(map(int, input().split()))\n    ave = sum(a) \/ n\n    print(len([x for x in a if x <= ave]))\n\n","while True:\n    M=0\n    \n    A=int(input())\n    \n    if A==0:\n        break\n    \n    L=list(map(int,input().split()))\n    \n    B=sum(L)\/len(L)\n    \n    for i in range(A):\n        if L[i]<=B:\n            M+=1\n            \n    print(M)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a)\/n\n    print(len([i for i in a if avg >= i]))\n\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n  print(c)\n","while True:\n    n=int(input())\n    if n == 0: break\n    xs=list(map(int,input().split()))\n    ave=sum(xs)\/n\n    print(sum(1 for x in xs if x <= ave))\n\n","while True:\n  n = int(input())\n  if n == 0:break\n  alst = list(map(int, input().split()))\n  ave = sum(alst) \/ n\n  print(sum(a <= ave for a in alst))\n\n","import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 \/ 10**13\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    def f(n):\n        a = LI()\n        av = 1.0 * sum(a) \/ n\n\n        return len([c for c in a if c <= av])\n\n\n    while 1:\n        n = I()\n        if n == 0:\n            break\n        rr.append(f(n))\n\n    return '\\n'.join(map(str, rr))\n\n\nprint(main())\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n\n    sum_a = sum(a)\n    ans = 0\n    for e in a:\n        if e * n <= sum_a:\n            ans += 1\n    print(ans)\n\n\n\n","nl=[]\nal=[]\nwhile 1:\n    n=input()\n    if n==\"0\":\n        break\n    nl.append(int(n))\n\n    a = list(map(lambda x: int(x), input().split()))\n    al.append(a)\n\nfor i in range(len(nl)):\n    ave = sum(al[i]) \/ nl[i]\n    num = len(list(filter(lambda x: x <= ave, al[i])))\n    print(num)\n\n\n","\ndef main():\n\twhile(1):\n\n\t\ta = int(input())\n\t\tif a == 0:\n\t\t\tbreak\n\n\t\tb = list(map(int, input().split()))\n\t\tmean = sum(b)\/a\n\t\tcount=0\n\t\tfor i in range(a):\n\t\t\tif mean>= b[i]:\n\t\t\t\tcount+=1\n\t\tprint(count)\n\n\nif __name__ == '__main__':\n    main()\n","import sys\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef LIST(): return list(map(int, input().split()))\n\nans = []\nwhile 1:\n\tn = INT()\n\tif n == 0:\n\t\tbreak\n\n\ta = LIST()\n\tave = sum(a)\/n\n\tcount = 0\n\tfor i in a:\n\t\tif i <= ave:\n\t\t\tcount += 1\n\tans.append(count)\nfor i in ans:\n\tprint(i)\n\n","while  True:\n    N = int(input())\n    if N == 0:\n        break\n    s = list(map(int,input().split()))\n    avg = sum(s) \/ N\n    ans = 0\n    for c in s:\n        if c <= avg:\n            ans += 1\n    print(ans)\n","while True:\n    n = int(input())\n    if n==0:\n        break\n    a = [int(a) for a in input().split()]\n    ave = sum(a)\/n\n    count = 0\n    for i in range(n):\n        if a[i]<=ave:\n            count += 1\n    print(count)\n","#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n#A\ndef A():\n    while 1:\n        n = I()\n        if n == 0:\n            quit()\n        a = LI()\n        m = sum(a)\/n\n        c = 0\n        for i in range(n):\n            if a[i] <= m:\n                c += 1\n        print(c)\n    return\n\n#B\ndef B():\n    return\n\n#C\ndef C():\n    return\n\n#D\ndef D():\n    return\n\n#E\ndef E():\n    return\n\n#F\ndef F():\n    return\n\n#G\ndef G():\n    return\n\n#H\ndef H():\n    return\n\n#I\ndef I_():\n    return\n\n#J\ndef J():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    A()\n\n","while True:\n\tn = int(input())\n\tif n == 0:\n\t    break\n\ta = list(map(int, input().split()))\n\ts = int(sum(a) \/\/ n)\n\tans = 0\n\tfor x in a:\n\t    if x <= s:\n\t        ans += 1\n\tprint(ans)\n\n","while 1:\n    n = int(input())\n    if n == 0: break\n    a = sorted(list(map(int, input().split())))\n    mean = sum(a) \/ len(a)\n    count = 0\n    for item in a:\n        if item <= mean: count += 1\n        else: break\n    print(count)\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    A = list(map(int, input().split()))\n    assert len(A) == n\n\n    ave = sum(A) \/\/ n\n    print(sum(1 for a in A if a <= ave))\n","#\u7121\u9650\u30eb\u30fc\u30d7\u3068\u6a19\u6e96\u5165\u529b\u3068\u30ab\u30a6\u30f3\u30bf\u5909\u6570\u306e\u30ea\u30bb\u30c3\u30c8\nwhile True:\n    kai = 0\n    num = int(input())\n    \n    #\u5165\u529b\u5024\u304c0\u3060\u3063\u305f\u3089\u7d42\u308f\u308b\n    if num == 0:break\n\n    #\u6a19\u6e96\u5165\u529b\u3092\u3057\u3001\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n    line = list(map(int,input().split()))\n    heikin = sum(line) \/ num\n    \n    #\u5e73\u5747\u5024\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u8abf\u3079\u500b\u6570\u3092\u51fa\u529b\n    for i in range(num):\n        if line[i] <= heikin:kai += 1\n    print(kai)\n","while(True):\n    n = int(input())\n    if n==0:\n        exit()\n    l = list(map(int,input().split()))\n    l.sort()\n    s = sum(l)\/n\n    res = 0\n    if l[-1]==l[0]:\n        print(n)\n        continue\n    for i in range(n):\n        if l[i]>s:\n            print(i)\n            break\n","#!\/usr\/bin\/env python3\n\nwhile True:\n    n = int(input())\n    if n == 0: break\n\n    a = list(map(int, input().split()))\n    ave_num = sum(a) \/ n\n\n    cnt = 0\n    for item in a:\n        if item <= ave_num:\n            cnt += 1\n\n    print(cnt)\n\n","while True :\n    n = int(input())\n    \n    if n == 0 :\n        break\n    \n    else :\n        A = list(map(int, input().split()))\n        cnt = 0\n        \n        ave = sum(A) \/ n\n        # \u5e73\u5747 average\n        \n        for i in range(len(A)) :\n            if A[i] <= ave :\n                cnt += 1\n                \n        print(cnt)\n        \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    A=list(map(int,input().split()))\n\n    AVE=sum(A)\/n\n    print(len([a for a in A if a<=AVE]))\n","while(True):\n    n = input()\n    if n==\"0\":\n        break\n    elif (int)(n)>50000:\n        continue\n    hairetu = input()\n\n    tarou = hairetu.split(\" \")\n    avg=0\n\n    for i in range(0,(int)(n)):\n        avg=avg+(int)(tarou[i])\n    avg=avg\/(int)(n)\n\n    cdnt=0\n    for j in range(0,(int)(n)):\n        if (int)(tarou[j]) <= (int)(avg):\n            cdnt=cdnt+1 \n    print(cdnt)\n\n","import sys\n\n\ndef solve(n):\n    a = list(map(int, input().split()))\n    ave = sum(a) \/ n\n    count = 0\n    for i in a:\n        if i <= ave:\n            count += 1\n\n    print(count)\n\n\ndef main():\n    while(True):\n        n = int(input())\n        if n == 0:\n            sys.exit(0)\n        else:\n            solve(n)\n\n\nmain()\n\n","while True:\n\tn = int(input())\n\tif n < 1:\n\t\tbreak\n\tdata = [int(x) for x in input().split()]\n\tlessequal = [1 for x in data if x <= (sum(data) \/ len(data))]\n\tprint(sum(lessequal))\n","while(1):\n\tn=int(input())\n\tif n==0:\n\t\tbreak\t\n\ta=[int(i) for i in input().split()]\n\n\ttotal=0\n\tfor i in a:\n\t\ttotal+=i\n\t\n\thei=total\/n\n\tcount=0\n\tfor i in a:\n\t\tif i <=hei:\n\t\t\tcount+=1\n\tprint(count)\n\n","while True:\n    num = int(input())\n    if num == 0:\n        break\n    \n    L = [int(x) for x in input().split()]\n    \n    ave = sum(L)\/ len(L)\n    \n    c = 0\n    for i in L:\n        if i <= ave:\n            c += 1\n    print(c)\n    \n","while True :\n    n = int(input())\n    if n == 0 :\n        break\n    \n    lst = list(map(int, input().split()))\n    ave_lst = sum(lst) \/ len(lst)\n    Sum = 0\n    for i in range(n) :\n        if lst[i] <= ave_lst :\n            Sum += 1\n    print(Sum)\n","try:\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        ika = 0\n        a = list(map(int,input().split()))\n        m = sum(a) \/ n\n        for j in a:\n            if j <= m:\n                ika += 1 \n        print(ika)\nexcept EOFError:\n    pass\n\n\n","ans = []\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a) \/ n\n    ans.append(sum(avg >= x for x in a))\nprint(*ans, sep=\"\\n\")\n\n","while True:\n    n = int(input());\n    if n == 0:\n        break;\n    a = list(map(int, input().split()));\n\n    h = sum(a)\/n;\n    \n    k = 0;\n    for i in range(0,n):\n        if a[i] <= h:\n            k += 1;\n    print(k);\n","from statistics import *\nwhile int(input()):\n    a=list(map(int,input().split()))\n    m=mean(a)\n    c=0\n    for i in a:\n        if i<=m:c+=1\n    print(c)\n","while True:\n  #1\u884c\u76een\u3092\u8aad\u307f\u8fbc\u3080\n  cnt = 0\n  n =int(input())\n  #\u3082\u3057n==0\u306a\u3089break\n  if n==0:\n    break\n  #n>0\u306a\u3089\u3070\n  if n>0:\n    #\u914d\u5217a[i]\u3092\u8aad\u307f\u8fbc\u3080(1<=i<=n)\n    a = list(map(int, input().split()))\n \n  ans = sum(a) \/\/n\n  for i in range(n):\n    if a[i] <= ans:\n      cnt+=1\n  print(cnt)\n      \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    l=(input().split())\n    for i in range(n):\n        l[i]=int(l[i])\n    m=sum(l)\/n\n    a=0\n    for i in range(n):\n        if l[i]<=m:\n           a+=1\n    print(a)\n","while True:\n    n = int(input())\n    if n == 0:\n        exit()\n    else:\n        sample = list(map(int,input().split()))\n        average = sum(sample)\/n\n        cnt = len([1 for i in range(n) if sample[i] <= average])\n        print(cnt)\n","import os,re,sys,operator\nfrom collections import Counter,deque\nfrom operator import itemgetter\nfrom itertools import accumulate,combinations,groupby\nfrom sys import stdin,setrecursionlimit\nfrom copy import deepcopy\nimport heapq\n\nsetrecursionlimit(10**6)\nwhile 1:\n    n=int(stdin.readline().rstrip())\n    if n==0:\n        break\n    a=[int(i) for i in stdin.readline().rstrip().split()]\n    mean=sum(a)\/n\n    cnt=0\n    for i in a:\n        if i<=mean:\n            cnt+=1\n    print(cnt)\n","while True:\n  n = int(input())\n  if n==0:\n    break\n  a = list(map(int, input().split()))\n  ave = int(sum(a) \/\/ n)\n  cnt = 0\n  for i in a:\n    if i<=ave:\n      cnt += 1\n  print(cnt)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    ans=0\n    ave=sum(a)\/n\n    for i in range(n):\n        if a[i]<=ave:\n            ans+=1\n    print(ans)\n","while True:\n    n = int(input())\n    if n == 0:\n        break;\n    a = list(map(int, input().split()))\n    mean = sum(a)\/n\n    print(len(list(filter(lambda x:x<=mean, a))))\n\n","while True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=sum(ns)\/n:\n      c+=1\n  print(c)\n","while(True):\n    N=int(input())\n    if N==0:\n        break\n    a=[int(i) for i in input().split()]\n    S=sum(a)\n    ans=0\n    for i in range(N):\n        if a[i]*N<=S:\n            ans+=1\n    print(ans)\n\n","# coding: utf-8\n# Your code here!\n\nwhile True:\n   n = int(input()) # \u56fd\u6c11\u306e\u4eba\u6570\n   if n == 0: break\n   \n   income = list(map(int, input().split()))\n   avg = sum(income) \/\/ n\n   \n   c = 0\n   for i in range(n):\n      if income[i] <= avg:\n         c += 1\n   print(c)\n   \n","def income_inequality():\n    n = int(input())\n    low_income_num = []\n    while n:\n        incomes = [int(i) for i in input().split()]\n        sum = 0.0\n        for i in incomes:\n            sum += i\n        everage = sum \/ len(incomes)\n        count = 0\n        for i in incomes:\n            if i <= everage:\n                count += 1\n        low_income_num.append(count)\n        n = int(input())\n    for i in low_income_num:\n        print(i)\n\nincome_inequality()\n","while True:\n    n = int(input())\n    if n <= 0: break\n    a = [int(i) for i in input().split()]\n    ave = sum(a)\/n\n\n    print(len(list(filter(lambda x: x <= ave, a))))\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    else:\n        X=[int(i) for i in input().split()]\n        a=sum(X)\/n\n        s=0\n        for i in range(n):\n            if X[i]<=a:\n                s+=1\n        print(s)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    \n    c=0\n    ave=0\n    for i in range(n):\n        ave=ave+a[i]\n    ave=ave\/\/n\n    for i in range(n):\n        if ave>=a[i]:\n            c=c+1\n    \n    print(c)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    lst=list(map(int,input().split()))\n    x=sum(lst)\/n\n    ans=0\n    for i in lst:\n        if x>=i:\n            ans+=1\n    print(ans)\n","import bisect\ndef main(n):\n    a = list(map(int, input().split()))\n    a.sort()\n    print(bisect.bisect_right(a,sum(a)\/n))\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    main(n)\n","while True:\n    num = int(input())\n    if num == 0:\n        break\n    else:\n        x = input().split()\n        for i in range(num):\n            x[i] = int(x[i])\n        ave = sum(x)\/num\n        count = 0\n        for i in range(num):\n            if x[i]<=ave:\n                count += 1\n        print(count)\n","while True :\n    n=int(input())\n    if n==0 : break\n    a=input().split()\n    tot=0;ans=0\n    for i in a : tot+=int(i)\n    for i in a :\n        if (tot\/n)>=int(i) : ans+=1\n    print(ans)\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","while True:\n  n = int(input())\n  if n == 0:\n    break\n  a = list(map(int,input().split()))\n  s = sum(a)\/n\n  a.sort()\n  ans = 0\n  for i in range(n):\n    if a[i]>s:\n      break\n    ans += 1\n  print(ans)\n","while True:\n    n = int(input())\n    if n == 0 :\n        break\n    lst = input().split()\n    sum = 0\n\n    for i in lst:\n        sum = sum + int(i)\n\n    mean = sum \/ len(lst)\n    poor = 0\n\n    for i in lst:\n        if mean >= int(i):\n            poor = poor +  1\n\n    print(poor)\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a)\/n\n    cnt = 0\n    for i in a:\n        if i <= m:\n            cnt += 1\n    print(cnt)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    hei = sum(a)\/len(a)\n    count = 0\n    for i in a:\n        if hei >= i:\n            count += 1\n    else:\n        print(count)\n","ans_list = []\nwhile True:\n    n = int(input())\n    if n==0:\n        break\n    A = list(map(int,input().split()))\n    ave = sum(A) \/\/ len(A)\n    cnt = 0\n    for a in A:\n        if a <= ave:\n            cnt += 1\n    ans_list.append(cnt)\n\nfor ans in ans_list:\n    print(ans)\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","while True:\n    t=[]\n    n=int(input())\n    if n==0:\n        break\n    else:\n        m=input().strip().split()\n        k=[int(i) for i in m]\n        x=sum(k)\/n\n        for i in range(n):\n            if k[i]<=x:\n                t.append(k[i])\n            else:\n                pass\n        print(len(t))\n   \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    sum=0\n    for i in range(n):\n        sum+=a[i]\n    ave=sum\/n\n    count=0\n    for i in range(n):\n        if a[i]<=ave:\n            count+=1\n    print(count)\n            \n","def main():\n    while True:\n        n = int(input())\n        if not n:\n            return\n        aa = list(map(int,input().split()))\n        ave = sum(aa)\/n\n        print(len([x for x in aa if x <= ave]))\n\nif __name__ == '__main__':\n    main()\n\n","while True:\n   n = int(input())\n   if n==0:\n      break\n   a = [int(x) for x in input().split()]\n   ave = sum(a)\/n\n   c = 0\n   for j in range(n):\n      if a[j]<=ave:\n         c += 1\n   print(c)\n","def solve():\n  while(True):\n    N = int(input())\n    if N == 0:\n      break\n    l = list(map(int,input().split()))\n    ave = sum(l)\/\/len(l)\n    ans = 0\n    for a in l:\n      if a <= ave:\n        ans+=1\n    print(ans)\nif __name__ == '__main__':\n  solve()\n","# coding=utf-8\n\n###\n### for python program\n###\n\nimport sys\nimport math\n\n# math class\nclass mymath:\n    ### pi\n    pi = 3.14159265358979323846264338\n\n    ### Prime Number\n    def pnum_eratosthenes(self, n):\n        ptable = [0 for i in range(n+1)]\n        plist = []\n\n        for i in range(2, n+1):\n            if ptable[i]==0:\n                plist.append(i)\n                for j in range(i+i, n+1, i):\n                    ptable[j] = 1\n        return plist\n\n    def pnum_check(self, n):\n        if (n==1):\n            return False\n        elif (n==2):\n            return True\n        else:\n            for x in range(2,n):\n                if(n % x==0):\n                    return False\n            return True\n\n    ### GCD\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a%b)\n\n    ### LCM\n    def lcm(self, a, b):\n        return (a*b)\/\/self.gcd(a,b)\n\n    ### Mat Multiplication\n    def mul(self, A, B):\n        ans = []\n        for a in A:\n            c = 0\n            for j, row in enumerate(a):\n                c += row*B[j]\n            ans.append(c)\n        return ans\n    \n    ### int\u30c1\u30a7\u30c3\u30af\n    def is_integer(self, n):\n        try:\n            float(n)\n        except ValueError:\n            return False\n        else:\n            return float(n).is_integer()\n\n    ### \u5e7e\u4f55\u5b66\u554f\u984c\u7528\n    def dist(self, A, B):\n        d = 0\n        for i in range(len(A)):\n            d += (A[i]-B[i])**2            \n        d = d**(1\/2)\n        return d\n\n    ### \u7d76\u5bfe\u5024\n    def abs(self, n):\n        if n >= 0:\n            return n\n        else:\n            return -n\n\nmymath = mymath()\n\n### output class\nclass output:\n    ### list\n    def list(self, l):\n        l = list(l)\n        #print(\" \", end=\"\")\n        for i, num in enumerate(l):\n            print(num, end=\"\")\n            if i != len(l)-1:\n                print(\" \", end=\"\")\n        print()\n\noutput = output()\n\n### input sample\n#i = input()\n#N = int(input())\n#A, B, C = [x for x in input().split()]\n#N, K = [int(x) for x in input().split()]\n#inlist = [int(w) for w in input().split()]\n\n#R = float(input())\n#A.append(list(map(int,input().split())))\n\n#for line in sys.stdin.readlines():\n#    x, y = [int(temp) for temp in line.split()]\n\n#abc list\n#abc = [chr(ord('a') + i) for i in range(26)]\n\n### output sample\n# print(\"{0} {1} {2:.5f}\".format(A\/\/B, A%B, A\/B))\n# print(\"{0:.6f} {1:.6f}\".format(R*R*math.pi,R*2*math.pi))\n# print(\" {}\".format(i), end=\"\")\n\ndef printA(A):\n    N = len(A)\n    for i, n in enumerate(A):\n        print(n, end='')\n        if i != N-1:\n            print(' ', end='')\n    print()\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18 if\u3042\u308a\n# [x-k if x != 0 else x for x in C]\n\n# \u30bd\u30fc\u30c8\n# N = N.sort()\n\n# 10000\u500b\u306e\u7d20\u6570\u30ea\u30b9\u30c8\n# P = mymath.pnum_eratosthenes(105000)\n\ndef get_input():\n    N = []\n    while True:\n        try:\n            N.append(input())\n            #N.append(int(input()))\n            #N.append(float(input()))\n        except EOFError:\n            break\n    return N\n\nwhile True:\n    N = int(input())\n    if N==0:\n        break\n    A = [int(x) for x in input().split()]\n\n    ave = sum(A)\/N\n\n    count = 0\n\n    for i in A:\n        if i <= ave:\n            count += 1\n    \n    print(count)\n\n","def main(n):\n\tif n == 0:\n\t\treturn False\n\ta = list(map(int,input().split()))\n\tm = sum(a)\/n\n\tans = 0\n\tfor i in a:\n\t\tif i<= m:\n\t\t\tans += 1\n\tprint(ans)\n\treturn True\n\nwhile main(int(input())): pass\n","# import sys\n# input = sys.stdin.readline\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a)\/n\n    count = 0\n    for i in a:\n        if i <= m:\n            count += 1\n    print(count)\n\n","from itertools import takewhile\n\nwhile True:\n    n = int(input())\n    if n == 0:break\n    num = sorted(list(map(int, input().split())))\n    ave = int(sum(num))\/int(len(num))\n    print(len(list(takewhile (lambda x:x <= ave, num))))\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    datum = list(map(int, input().split()))\n    ave = sum(datum) \/ n\n    res = 0\n\n    for data in datum:\n        if data <= ave:\n            res += 1\n\n    print(res)\n","import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef LIST(): return list(map(int, input().split()))\n\ndef main():\n    ans = []\n    \n    while 1:\n        n = int(input())\n        if n == 0:\n            break\n        else:\n            a = LIST()\n            heikin = sum(a) \/ n\n            tmp = [x for x in a if x <= heikin]\n            ans.append(len(tmp))\n        \n    for x in ans:\n        print(x)\n\n\nif __name__ == '__main__':\n    main()\n\n","\nwhile True:\n    a = 0\n    num = int(input())\n\n    if num == 0: break\n\n    ls = list(map(int,input().split()))\n    ave = sum(ls) \/ num\n    \n\n    for i in range(num):\n        if ls[i] <= ave :\n            a += 1\n    print(a)\n","while True:\n    try:\n        n = int(input())\n        a = list(map(int,input().split()))\n        s = sum(a)\n        ave = s\/n\n    \n        i = 0\n        x = []\n        while i <= n-1:\n            if a[i] <= ave:\n                x.append(a[i])\n            i += 1\n\n        print(len(x))\n    \n    except:\n        if n == 0:\n            break\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a) \/ n\n    ans = 0\n    for aa in a:\n        if aa <= m:\n            ans += 1\n    print(ans)\n\n","ans = []\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a) \/ n\n    ans.append(sum(avg >= x for x in a))\nprint(*ans, sep=\"\\n\")\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","ans_list = []\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    A = list(map(int,input().split()))\n    ave = sum(A) \/ len(A)\n    cnt = 0\n    for a in A:\n        if a <= ave:\n            cnt += 1\n    ans_list.append(cnt)\n\nfor ans in ans_list:\n    print(ans)\n","while True:\n  n=int(input())\n  if n == 0:\n    break\n  A = list(map(int,input().split()))\n#  print(A)\n  a =sum(A)\n  bar = a\/n\n#  print(bar)\n  count=0\n  for i in A:\n    if i<=bar:\n      count+=1\n  print(count)\n","while 1:\n    n=int(input())\n    if n==0:break\n    a=list(map(int,input().split()))\n    aave=sum(a)\/len(a)\n    ans=0\n    for i in a:\n        if aave>=i: ans+=1\n    print(ans)\n","res = []\nwhile True :\n    n = int(input())\n    \n    if n == 0 :\n        break\n    else :\n        li = [int(x) for x in input().split()]\n        avg = sum(li) \/ n\n        res.append(sum([1 if x <= avg else 0 for x in li]))\n        \nfor r in res :\n    print(r)\n","x=[]\na=[] #append\u306e\u305f\u3081\u306b\u5ba3\u8a00\u304c\u5fc5\u8981\nwhile True:\n    try:\n        a.append(list(map(int,input().split())))\n\n    except:\n        break;\n        #\u307e\u305f\u306f\u3001quit(),os.exit()\u3092\u3057\u3066\u6b62\u3081\u308b\u3002\n\n\n#[[1, 2, 2, 3, 1], [4, 5, 3, 4, 1, 2, 3, 4], [2, 3, 5, 6, 0, 2]]\nfor i in range(len(a)\/\/2):\n    x.append(i)\n    n=i*2\n    m=i*2+1\n    s=sum(a[m])\/a[n][0]\n    for t in range(len(a[m])):\n      if s>=a[m][t]:\n        x[i]=x[i]+1\n    print(x[i]-i)\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int,input().split()))\n    cnt = 0\n    ave = sum(a) \/ n\n    for i in a:\n        if ave >= i:\n           cnt +=1\n    print(cnt) \n\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n  print(c)\n","\nwhile True:\n    x=int(input())\n    if x==0:\n        break\n    alst = list(map(int,input().split()))\n    num = sum(alst) \/ x\n    print(sum(a <= num for a in alst))\n    \n\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    data = list(map(int, input().split()))\n    mean = sum(data) \/ n\n\n    cnt = 0\n    for d in data:\n        if d <= mean:\n            cnt += 1\n\n    print(cnt)\n\n","\nwhile 1:\n    n = int(input())\n    if n==0: break\n    a = list(map(int, input().split()))\n    \n    ave = sum(a)\/n\n    \n    print(len([i for i in a if i <= ave]))\n    #\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092len()\u3067\u8868\u793a\n","while True:\n    a=int(input())\n    if a==0:\n        break\n    else:\n        b=list(map(int,input().split()))\n        h=sum(b)\/a\n        c=0\n        for i in range(a):\n            if h>=b[i]:\n                c+=1\n            else:\n                pass\n        print(c)\n"],"formatted_programs":["while True:\n    t=0\n    n=int(input())\n    if n==0:\n        break\n    else:\n        y=list(map(int,input().split()))\n        s=sum(y)\/n\n        for i in range(n):\n            if y[i]<=s:\n                t+=1\n        print(t)\n","while True:\n    n = int(input())\n    \n    if n == 0:\n        break\n    \n    a = list(map(int,input().split()))\n    \n    b = sum(a)\/n\n    \n    \n    ans = 0\n    for i in a:\n        if i <= b:\n            ans += 1\n        \n    print(ans)\n","a = int(input())\nsu = 0\nwhile a != 0:\n    b = list(map(int,input().split()))\n    c = sum(b)\/len(b)\n    for i in range(len(b)):\n        if b[i] <= c:\n            su += 1\n    \n    print(su)\n    su = 0\n    a = int(input())\n","n = int(input())\nwhile n != 0:\n  list = input().split()\n\n  for i in range(len(list)):\n    list[i] = int(list[i])\n\n  avgs = sum(list) \/ n\n  i = 0\n  a = 0\n  for i in range(len(list)):\n    if list[i] <= avgs:\n      a = a + 1\n  print(a)\n  n = int(input())\n","#!\/usr\/bin\/python3\n\nimport array\nfrom fractions import Fraction\nimport functools\nimport itertools\nimport math\nimport os\nimport sys\n\n\ndef main():\n    while True:\n        N = read_int()\n        if N == 0:\n            break\n        A = read_ints()\n        print(solve(N, A))\n\n\ndef solve(N, A):\n    avg = Fraction(sum(A), N)\n    return len([a for a in A if a <= avg])\n\n\n###############################################################################\n# AUXILIARY FUNCTIONS\n\nDEBUG = 'DEBUG' in os.environ\n\n\ndef inp():\n    return sys.stdin.readline().rstrip()\n\n\ndef read_int():\n    return int(inp())\n\n\ndef read_ints():\n    return [int(e) for e in inp().split()]\n\n\ndef dprint(*value, sep=' ', end='\\n'):\n    if DEBUG:\n        print(*value, sep=sep, end=end)\n\n\nif __name__ == '__main__':\n    main()\n\n","import bisect\n# python template for atcoder1\nimport sys\nsys.setrecursionlimit(10**9)\ninput = sys.stdin.readline\n\n\ndef solve():\n    N=int(input())\n    if N==0:\n        exit()\n    L=list(map(int,input().split()))\n    ave = sum(L)\/\/N\n    L = sorted(L)\n    low = bisect.bisect_right(L,ave)\n    print(low)\n\nwhile True:\n    solve()\n\n\n","anslist = []\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    ans = 0\n    ave = sum(a) \/ n\n    for i in range(n):\n        if a[i] <= ave:\n            ans += 1\n\n    anslist.append(ans)\n\nfor i in anslist:\n    print(i)\n","n=int(input())\na=[int(i) for i in input().split]\n\ntotal=0\nfor i in a:\n    total+=i\n\nhei=total\/n\n\ncount=0\nfor i in a:\n    if i <= hei:\n        count+=1\n        \nprint(count)\n","for v in range(10000):\n  x = 0\n  n = input()\n  n = int(n)\n  if n == 0:\n    break\n  else:\n    a = input().split()\n    b = [int(s) for s in a]\n    for i in range(n):\n      x += b[i]\n      i += 1\n    y = x\/n\n    z = 0\n    for j in range(n):\n      if y >= b[j]:\n        z+=1\n        j += 1\n      else:\n        j+=1\n  print(z)\n\n\n","while True:\n    c = int(input())\n    if c == 0:\n        break\n    a = list(map(int,input().split()))\n    az = sum(a)\/c\n    ans = 0\n    for x in a:\n        if x <= az:\n            ans += 1\n    print(ans)\n","import statistics\n\ndef get_data():\n    data = int(input())\n    return data\n\ndef get_data_list():\n    data_list = input().split()\n    for i, v in enumerate(data_list):\n        data_list[i] = int(v)\n    return data_list\n\ndef count_num_under_average(list_num, reverse_sorted_num_list, average_num):\n    count = list_num\n    for v in reverse_sorted_income_list:\n        if v > average_num:\n            count -= 1\n        else:\n            break\n    return count\n\n\nif __name__ == \"__main__\":\n    while True:\n        population = get_data()\n        if population == 0:\n            break\n        income_list = get_data_list()\n        reverse_sorted_income_list = sorted(income_list, reverse=True)\n        average_income = statistics.mean(reverse_sorted_income_list)\n        count = count_num_under_average(population, reverse_sorted_income_list, average_income)\n        print(count)\n\n\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    m=list(map(int,input().split()))\n    M=sum(m)\/\/n\n    A=0\n    for i in range(n):\n        S=m[i]-M\n        if S<=0:\n            A=A+1\n    print(A)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    li = [int(i) for i in input().split()]\n    mean = sum(li) \/ len(li)\n    cnt = 0\n    for i in li:\n        if float(i) <= mean:\n            cnt += 1\n    print(cnt)\n","while(True):\n    if(input()==\"0\"):\n        exit()\n    l = list(map(int,input().split()))\n    print(len([i for i in l if i<=sum(l)\/len(l)]))\n","ans = []\nwhile 1:\n    N = int(input())\n    if N == 0:\n        break\n    *A, = map(int, input().split())\n    s = sum(A)\n    cnt = 0\n    for a in A:\n        if a*N <= s:\n            cnt += 1\n    ans.append(cnt)\nprint(*ans, sep='\\n')\n\n","# AOJ 1624 Income Inequality\n# Python 2018.7.12 bal4u\n\nwhile True:\n\tn = int(input())\n\tif n == 0: break\n\ta = list(map(int, input().split()))\n\ts = int(sum(a)\/\/n)\n\tans = 0\n\tfor x in a:\n\t\tif x <= s: ans += 1\n\tprint(ans)\n","while True:\n    n = int(input())\n    if not n:\n        break\n    a = list(map(int, input().split()))\n    ave = sum(a) \/ n\n    print(len([x for x in a if x <= ave]))\n\n","while True:\n    M=0\n    \n    A=int(input())\n    \n    if A==0:\n        break\n    \n    L=list(map(int,input().split()))\n    \n    B=sum(L)\/len(L)\n    \n    for i in range(A):\n        if L[i]<=B:\n            M+=1\n            \n    print(M)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a)\/n\n    print(len([i for i in a if avg >= i]))\n\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n  print(c)\n","while True:\n    n=int(input())\n    if n == 0: break\n    xs=list(map(int,input().split()))\n    ave=sum(xs)\/n\n    print(sum(1 for x in xs if x <= ave))\n\n","while True:\n  n = int(input())\n  if n == 0:break\n  alst = list(map(int, input().split()))\n  ave = sum(alst) \/ n\n  print(sum(a <= ave for a in alst))\n\n","import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\n\nsys.setrecursionlimit(10**7)\ninf = 10**20\neps = 1.0 \/ 10**13\nmod = 10**9+7\ndd = [(-1,0),(0,1),(1,0),(0,-1)]\nddn = [(-1,0),(-1,1),(0,1),(1,1),(1,0),(1,-1),(0,-1),(-1,-1)]\n\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\ndef LS(): return sys.stdin.readline().split()\ndef I(): return int(sys.stdin.readline())\ndef F(): return float(sys.stdin.readline())\ndef S(): return input()\ndef pf(s): return print(s, flush=True)\n\n\ndef main():\n    rr = []\n\n    def f(n):\n        a = LI()\n        av = 1.0 * sum(a) \/ n\n\n        return len([c for c in a if c <= av])\n\n\n    while 1:\n        n = I()\n        if n == 0:\n            break\n        rr.append(f(n))\n\n    return '\\n'.join(map(str, rr))\n\n\nprint(main())\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n\n    sum_a = sum(a)\n    ans = 0\n    for e in a:\n        if e * n <= sum_a:\n            ans += 1\n    print(ans)\n\n\n\n","nl=[]\nal=[]\nwhile 1:\n    n=input()\n    if n==\"0\":\n        break\n    nl.append(int(n))\n\n    a = list(map(lambda x: int(x), input().split()))\n    al.append(a)\n\nfor i in range(len(nl)):\n    ave = sum(al[i]) \/ nl[i]\n    num = len(list(filter(lambda x: x <= ave, al[i])))\n    print(num)\n\n\n","\ndef main():\n\twhile(1):\n\n\t\ta = int(input())\n\t\tif a == 0:\n\t\t\tbreak\n\n\t\tb = list(map(int, input().split()))\n\t\tmean = sum(b)\/a\n\t\tcount=0\n\t\tfor i in range(a):\n\t\t\tif mean>= b[i]:\n\t\t\t\tcount+=1\n\t\tprint(count)\n\n\nif __name__ == '__main__':\n    main()\n","import sys\ndef input(): return sys.stdin.readline().strip()\ndef INT(): return int(input())\ndef LIST(): return list(map(int, input().split()))\n\nans = []\nwhile 1:\n\tn = INT()\n\tif n == 0:\n\t\tbreak\n\n\ta = LIST()\n\tave = sum(a)\/n\n\tcount = 0\n\tfor i in a:\n\t\tif i <= ave:\n\t\t\tcount += 1\n\tans.append(count)\nfor i in ans:\n\tprint(i)\n\n","while  True:\n    N = int(input())\n    if N == 0:\n        break\n    s = list(map(int,input().split()))\n    avg = sum(s) \/ N\n    ans = 0\n    for c in s:\n        if c <= avg:\n            ans += 1\n    print(ans)\n","while True:\n    n = int(input())\n    if n==0:\n        break\n    a = [int(a) for a in input().split()]\n    ave = sum(a)\/n\n    count = 0\n    for i in range(n):\n        if a[i]<=ave:\n            count += 1\n    print(count)\n","#!usr\/bin\/env python3\nfrom collections import defaultdict\nfrom collections import deque\nfrom heapq import heappush, heappop\nimport sys\nimport math\nimport bisect\nimport random\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef I(): return int(sys.stdin.readline())\ndef LS():return list(map(list, sys.stdin.readline().split()))\ndef S(): return list(sys.stdin.readline())[:-1]\ndef IR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = I()\n    return l\ndef LIR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LI()\n    return l\ndef SR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = S()\n    return l\ndef LSR(n):\n    l = [None for i in range(n)]\n    for i in range(n):l[i] = LS()\n    return l\nsys.setrecursionlimit(1000000)\nmod = 1000000007\n\n#A\ndef A():\n    while 1:\n        n = I()\n        if n == 0:\n            quit()\n        a = LI()\n        m = sum(a)\/n\n        c = 0\n        for i in range(n):\n            if a[i] <= m:\n                c += 1\n        print(c)\n    return\n\n#B\ndef B():\n    return\n\n#C\ndef C():\n    return\n\n#D\ndef D():\n    return\n\n#E\ndef E():\n    return\n\n#F\ndef F():\n    return\n\n#G\ndef G():\n    return\n\n#H\ndef H():\n    return\n\n#I\ndef I_():\n    return\n\n#J\ndef J():\n    return\n\n#Solve\nif __name__ == \"__main__\":\n    A()\n\n","while True:\n\tn = int(input())\n\tif n == 0:\n\t    break\n\ta = list(map(int, input().split()))\n\ts = int(sum(a) \/\/ n)\n\tans = 0\n\tfor x in a:\n\t    if x <= s:\n\t        ans += 1\n\tprint(ans)\n\n","while 1:\n    n = int(input())\n    if n == 0: break\n    a = sorted(list(map(int, input().split())))\n    mean = sum(a) \/ len(a)\n    count = 0\n    for item in a:\n        if item <= mean: count += 1\n        else: break\n    print(count)\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    A = list(map(int, input().split()))\n    assert len(A) == n\n\n    ave = sum(A) \/\/ n\n    print(sum(1 for a in A if a <= ave))\n","#\u7121\u9650\u30eb\u30fc\u30d7\u3068\u6a19\u6e96\u5165\u529b\u3068\u30ab\u30a6\u30f3\u30bf\u5909\u6570\u306e\u30ea\u30bb\u30c3\u30c8\nwhile True:\n    kai = 0\n    num = int(input())\n    \n    #\u5165\u529b\u5024\u304c0\u3060\u3063\u305f\u3089\u7d42\u308f\u308b\n    if num == 0:break\n\n    #\u6a19\u6e96\u5165\u529b\u3092\u3057\u3001\u5e73\u5747\u5024\u3092\u6c42\u3081\u308b\n    line = list(map(int,input().split()))\n    heikin = sum(line) \/ num\n    \n    #\u5e73\u5747\u5024\u4ee5\u4e0b\u306e\u500b\u6570\u3092\u8abf\u3079\u500b\u6570\u3092\u51fa\u529b\n    for i in range(num):\n        if line[i] <= heikin:kai += 1\n    print(kai)\n","while(True):\n    n = int(input())\n    if n==0:\n        exit()\n    l = list(map(int,input().split()))\n    l.sort()\n    s = sum(l)\/n\n    res = 0\n    if l[-1]==l[0]:\n        print(n)\n        continue\n    for i in range(n):\n        if l[i]>s:\n            print(i)\n            break\n","#!\/usr\/bin\/env python3\n\nwhile True:\n    n = int(input())\n    if n == 0: break\n\n    a = list(map(int, input().split()))\n    ave_num = sum(a) \/ n\n\n    cnt = 0\n    for item in a:\n        if item <= ave_num:\n            cnt += 1\n\n    print(cnt)\n\n","while True :\n    n = int(input())\n    \n    if n == 0 :\n        break\n    \n    else :\n        A = list(map(int, input().split()))\n        cnt = 0\n        \n        ave = sum(A) \/ n\n        # \u5e73\u5747 average\n        \n        for i in range(len(A)) :\n            if A[i] <= ave :\n                cnt += 1\n                \n        print(cnt)\n        \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    A=list(map(int,input().split()))\n\n    AVE=sum(A)\/n\n    print(len([a for a in A if a<=AVE]))\n","while(True):\n    n = input()\n    if n==\"0\":\n        break\n    elif (int)(n)>50000:\n        continue\n    hairetu = input()\n\n    tarou = hairetu.split(\" \")\n    avg=0\n\n    for i in range(0,(int)(n)):\n        avg=avg+(int)(tarou[i])\n    avg=avg\/(int)(n)\n\n    cdnt=0\n    for j in range(0,(int)(n)):\n        if (int)(tarou[j]) <= (int)(avg):\n            cdnt=cdnt+1 \n    print(cdnt)\n\n","import sys\n\n\ndef solve(n):\n    a = list(map(int, input().split()))\n    ave = sum(a) \/ n\n    count = 0\n    for i in a:\n        if i <= ave:\n            count += 1\n\n    print(count)\n\n\ndef main():\n    while(True):\n        n = int(input())\n        if n == 0:\n            sys.exit(0)\n        else:\n            solve(n)\n\n\nmain()\n\n","while True:\n\tn = int(input())\n\tif n < 1:\n\t\tbreak\n\tdata = [int(x) for x in input().split()]\n\tlessequal = [1 for x in data if x <= (sum(data) \/ len(data))]\n\tprint(sum(lessequal))\n","while(1):\n\tn=int(input())\n\tif n==0:\n\t\tbreak\t\n\ta=[int(i) for i in input().split()]\n\n\ttotal=0\n\tfor i in a:\n\t\ttotal+=i\n\t\n\thei=total\/n\n\tcount=0\n\tfor i in a:\n\t\tif i <=hei:\n\t\t\tcount+=1\n\tprint(count)\n\n","while True:\n    num = int(input())\n    if num == 0:\n        break\n    \n    L = [int(x) for x in input().split()]\n    \n    ave = sum(L)\/ len(L)\n    \n    c = 0\n    for i in L:\n        if i <= ave:\n            c += 1\n    print(c)\n    \n","while True :\n    n = int(input())\n    if n == 0 :\n        break\n    \n    lst = list(map(int, input().split()))\n    ave_lst = sum(lst) \/ len(lst)\n    Sum = 0\n    for i in range(n) :\n        if lst[i] <= ave_lst :\n            Sum += 1\n    print(Sum)\n","try:\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        ika = 0\n        a = list(map(int,input().split()))\n        m = sum(a) \/ n\n        for j in a:\n            if j <= m:\n                ika += 1 \n        print(ika)\nexcept EOFError:\n    pass\n\n\n","ans = []\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a) \/ n\n    ans.append(sum(avg >= x for x in a))\nprint(*ans, sep=\"\\n\")\n\n","while True:\n    n = int(input());\n    if n == 0:\n        break;\n    a = list(map(int, input().split()));\n\n    h = sum(a)\/n;\n    \n    k = 0;\n    for i in range(0,n):\n        if a[i] <= h:\n            k += 1;\n    print(k);\n","from statistics import *\nwhile int(input()):\n    a=list(map(int,input().split()))\n    m=mean(a)\n    c=0\n    for i in a:\n        if i<=m:c+=1\n    print(c)\n","while True:\n  #1\u884c\u76een\u3092\u8aad\u307f\u8fbc\u3080\n  cnt = 0\n  n =int(input())\n  #\u3082\u3057n==0\u306a\u3089break\n  if n==0:\n    break\n  #n>0\u306a\u3089\u3070\n  if n>0:\n    #\u914d\u5217a[i]\u3092\u8aad\u307f\u8fbc\u3080(1<=i<=n)\n    a = list(map(int, input().split()))\n \n  ans = sum(a) \/\/n\n  for i in range(n):\n    if a[i] <= ans:\n      cnt+=1\n  print(cnt)\n      \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    l=(input().split())\n    for i in range(n):\n        l[i]=int(l[i])\n    m=sum(l)\/n\n    a=0\n    for i in range(n):\n        if l[i]<=m:\n           a+=1\n    print(a)\n","while True:\n    n = int(input())\n    if n == 0:\n        exit()\n    else:\n        sample = list(map(int,input().split()))\n        average = sum(sample)\/n\n        cnt = len([1 for i in range(n) if sample[i] <= average])\n        print(cnt)\n","import os,re,sys,operator\nfrom collections import Counter,deque\nfrom operator import itemgetter\nfrom itertools import accumulate,combinations,groupby\nfrom sys import stdin,setrecursionlimit\nfrom copy import deepcopy\nimport heapq\n\nsetrecursionlimit(10**6)\nwhile 1:\n    n=int(stdin.readline().rstrip())\n    if n==0:\n        break\n    a=[int(i) for i in stdin.readline().rstrip().split()]\n    mean=sum(a)\/n\n    cnt=0\n    for i in a:\n        if i<=mean:\n            cnt+=1\n    print(cnt)\n","while True:\n  n = int(input())\n  if n==0:\n    break\n  a = list(map(int, input().split()))\n  ave = int(sum(a) \/\/ n)\n  cnt = 0\n  for i in a:\n    if i<=ave:\n      cnt += 1\n  print(cnt)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    ans=0\n    ave=sum(a)\/n\n    for i in range(n):\n        if a[i]<=ave:\n            ans+=1\n    print(ans)\n","while True:\n    n = int(input())\n    if n == 0:\n        break;\n    a = list(map(int, input().split()))\n    mean = sum(a)\/n\n    print(len(list(filter(lambda x:x<=mean, a))))\n\n","while True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=sum(ns)\/n:\n      c+=1\n  print(c)\n","while(True):\n    N=int(input())\n    if N==0:\n        break\n    a=[int(i) for i in input().split()]\n    S=sum(a)\n    ans=0\n    for i in range(N):\n        if a[i]*N<=S:\n            ans+=1\n    print(ans)\n\n","# coding: utf-8\n# Your code here!\n\nwhile True:\n   n = int(input()) # \u56fd\u6c11\u306e\u4eba\u6570\n   if n == 0: break\n   \n   income = list(map(int, input().split()))\n   avg = sum(income) \/\/ n\n   \n   c = 0\n   for i in range(n):\n      if income[i] <= avg:\n         c += 1\n   print(c)\n   \n","def income_inequality():\n    n = int(input())\n    low_income_num = []\n    while n:\n        incomes = [int(i) for i in input().split()]\n        sum = 0.0\n        for i in incomes:\n            sum += i\n        everage = sum \/ len(incomes)\n        count = 0\n        for i in incomes:\n            if i <= everage:\n                count += 1\n        low_income_num.append(count)\n        n = int(input())\n    for i in low_income_num:\n        print(i)\n\nincome_inequality()\n","while True:\n    n = int(input())\n    if n <= 0: break\n    a = [int(i) for i in input().split()]\n    ave = sum(a)\/n\n\n    print(len(list(filter(lambda x: x <= ave, a))))\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    else:\n        X=[int(i) for i in input().split()]\n        a=sum(X)\/n\n        s=0\n        for i in range(n):\n            if X[i]<=a:\n                s+=1\n        print(s)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    \n    c=0\n    ave=0\n    for i in range(n):\n        ave=ave+a[i]\n    ave=ave\/\/n\n    for i in range(n):\n        if ave>=a[i]:\n            c=c+1\n    \n    print(c)\n","while True:\n    n=int(input())\n    if n==0:\n        break\n    lst=list(map(int,input().split()))\n    x=sum(lst)\/n\n    ans=0\n    for i in lst:\n        if x>=i:\n            ans+=1\n    print(ans)\n","import bisect\ndef main(n):\n    a = list(map(int, input().split()))\n    a.sort()\n    print(bisect.bisect_right(a,sum(a)\/n))\n\nwhile 1:\n    n = int(input())\n    if n == 0:\n        break\n    main(n)\n","while True:\n    num = int(input())\n    if num == 0:\n        break\n    else:\n        x = input().split()\n        for i in range(num):\n            x[i] = int(x[i])\n        ave = sum(x)\/num\n        count = 0\n        for i in range(num):\n            if x[i]<=ave:\n                count += 1\n        print(count)\n","while True :\n    n=int(input())\n    if n==0 : break\n    a=input().split()\n    tot=0;ans=0\n    for i in a : tot+=int(i)\n    for i in a :\n        if (tot\/n)>=int(i) : ans+=1\n    print(ans)\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","while True:\n  n = int(input())\n  if n == 0:\n    break\n  a = list(map(int,input().split()))\n  s = sum(a)\/n\n  a.sort()\n  ans = 0\n  for i in range(n):\n    if a[i]>s:\n      break\n    ans += 1\n  print(ans)\n","while True:\n    n = int(input())\n    if n == 0 :\n        break\n    lst = input().split()\n    sum = 0\n\n    for i in lst:\n        sum = sum + int(i)\n\n    mean = sum \/ len(lst)\n    poor = 0\n\n    for i in lst:\n        if mean >= int(i):\n            poor = poor +  1\n\n    print(poor)\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a)\/n\n    cnt = 0\n    for i in a:\n        if i <= m:\n            cnt += 1\n    print(cnt)\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    hei = sum(a)\/len(a)\n    count = 0\n    for i in a:\n        if hei >= i:\n            count += 1\n    else:\n        print(count)\n","ans_list = []\nwhile True:\n    n = int(input())\n    if n==0:\n        break\n    A = list(map(int,input().split()))\n    ave = sum(A) \/\/ len(A)\n    cnt = 0\n    for a in A:\n        if a <= ave:\n            cnt += 1\n    ans_list.append(cnt)\n\nfor ans in ans_list:\n    print(ans)\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","while True:\n    t=[]\n    n=int(input())\n    if n==0:\n        break\n    else:\n        m=input().strip().split()\n        k=[int(i) for i in m]\n        x=sum(k)\/n\n        for i in range(n):\n            if k[i]<=x:\n                t.append(k[i])\n            else:\n                pass\n        print(len(t))\n   \n","while True:\n    n=int(input())\n    if n==0:\n        break\n    a=list(map(int,input().split()))\n    sum=0\n    for i in range(n):\n        sum+=a[i]\n    ave=sum\/n\n    count=0\n    for i in range(n):\n        if a[i]<=ave:\n            count+=1\n    print(count)\n            \n","def main():\n    while True:\n        n = int(input())\n        if not n:\n            return\n        aa = list(map(int,input().split()))\n        ave = sum(aa)\/n\n        print(len([x for x in aa if x <= ave]))\n\nif __name__ == '__main__':\n    main()\n\n","while True:\n   n = int(input())\n   if n==0:\n      break\n   a = [int(x) for x in input().split()]\n   ave = sum(a)\/n\n   c = 0\n   for j in range(n):\n      if a[j]<=ave:\n         c += 1\n   print(c)\n","def solve():\n  while(True):\n    N = int(input())\n    if N == 0:\n      break\n    l = list(map(int,input().split()))\n    ave = sum(l)\/\/len(l)\n    ans = 0\n    for a in l:\n      if a <= ave:\n        ans+=1\n    print(ans)\nif __name__ == '__main__':\n  solve()\n","# coding=utf-8\n\n###\n### for python program\n###\n\nimport sys\nimport math\n\n# math class\nclass mymath:\n    ### pi\n    pi = 3.14159265358979323846264338\n\n    ### Prime Number\n    def pnum_eratosthenes(self, n):\n        ptable = [0 for i in range(n+1)]\n        plist = []\n\n        for i in range(2, n+1):\n            if ptable[i]==0:\n                plist.append(i)\n                for j in range(i+i, n+1, i):\n                    ptable[j] = 1\n        return plist\n\n    def pnum_check(self, n):\n        if (n==1):\n            return False\n        elif (n==2):\n            return True\n        else:\n            for x in range(2,n):\n                if(n % x==0):\n                    return False\n            return True\n\n    ### GCD\n    def gcd(self, a, b):\n        if b == 0:\n            return a\n        return self.gcd(b, a%b)\n\n    ### LCM\n    def lcm(self, a, b):\n        return (a*b)\/\/self.gcd(a,b)\n\n    ### Mat Multiplication\n    def mul(self, A, B):\n        ans = []\n        for a in A:\n            c = 0\n            for j, row in enumerate(a):\n                c += row*B[j]\n            ans.append(c)\n        return ans\n    \n    ### int\u30c1\u30a7\u30c3\u30af\n    def is_integer(self, n):\n        try:\n            float(n)\n        except ValueError:\n            return False\n        else:\n            return float(n).is_integer()\n\n    ### \u5e7e\u4f55\u5b66\u554f\u984c\u7528\n    def dist(self, A, B):\n        d = 0\n        for i in range(len(A)):\n            d += (A[i]-B[i])**2            \n        d = d**(1\/2)\n        return d\n\n    ### \u7d76\u5bfe\u5024\n    def abs(self, n):\n        if n >= 0:\n            return n\n        else:\n            return -n\n\nmymath = mymath()\n\n### output class\nclass output:\n    ### list\n    def list(self, l):\n        l = list(l)\n        #print(\" \", end=\"\")\n        for i, num in enumerate(l):\n            print(num, end=\"\")\n            if i != len(l)-1:\n                print(\" \", end=\"\")\n        print()\n\noutput = output()\n\n### input sample\n#i = input()\n#N = int(input())\n#A, B, C = [x for x in input().split()]\n#N, K = [int(x) for x in input().split()]\n#inlist = [int(w) for w in input().split()]\n\n#R = float(input())\n#A.append(list(map(int,input().split())))\n\n#for line in sys.stdin.readlines():\n#    x, y = [int(temp) for temp in line.split()]\n\n#abc list\n#abc = [chr(ord('a') + i) for i in range(26)]\n\n### output sample\n# print(\"{0} {1} {2:.5f}\".format(A\/\/B, A%B, A\/B))\n# print(\"{0:.6f} {1:.6f}\".format(R*R*math.pi,R*2*math.pi))\n# print(\" {}\".format(i), end=\"\")\n\ndef printA(A):\n    N = len(A)\n    for i, n in enumerate(A):\n        print(n, end='')\n        if i != N-1:\n            print(' ', end='')\n    print()\n\n# \u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18 if\u3042\u308a\n# [x-k if x != 0 else x for x in C]\n\n# \u30bd\u30fc\u30c8\n# N = N.sort()\n\n# 10000\u500b\u306e\u7d20\u6570\u30ea\u30b9\u30c8\n# P = mymath.pnum_eratosthenes(105000)\n\ndef get_input():\n    N = []\n    while True:\n        try:\n            N.append(input())\n            #N.append(int(input()))\n            #N.append(float(input()))\n        except EOFError:\n            break\n    return N\n\nwhile True:\n    N = int(input())\n    if N==0:\n        break\n    A = [int(x) for x in input().split()]\n\n    ave = sum(A)\/N\n\n    count = 0\n\n    for i in A:\n        if i <= ave:\n            count += 1\n    \n    print(count)\n\n","def main(n):\n\tif n == 0:\n\t\treturn False\n\ta = list(map(int,input().split()))\n\tm = sum(a)\/n\n\tans = 0\n\tfor i in a:\n\t\tif i<= m:\n\t\t\tans += 1\n\tprint(ans)\n\treturn True\n\nwhile main(int(input())): pass\n","# import sys\n# input = sys.stdin.readline\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a)\/n\n    count = 0\n    for i in a:\n        if i <= m:\n            count += 1\n    print(count)\n\n","from itertools import takewhile\n\nwhile True:\n    n = int(input())\n    if n == 0:break\n    num = sorted(list(map(int, input().split())))\n    ave = int(sum(num))\/int(len(num))\n    print(len(list(takewhile (lambda x:x <= ave, num))))\n\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    datum = list(map(int, input().split()))\n    ave = sum(datum) \/ n\n    res = 0\n\n    for data in datum:\n        if data <= ave:\n            res += 1\n\n    print(res)\n","import sys\n\ndef input(): return sys.stdin.readline().strip()\ndef LIST(): return list(map(int, input().split()))\n\ndef main():\n    ans = []\n    \n    while 1:\n        n = int(input())\n        if n == 0:\n            break\n        else:\n            a = LIST()\n            heikin = sum(a) \/ n\n            tmp = [x for x in a if x <= heikin]\n            ans.append(len(tmp))\n        \n    for x in ans:\n        print(x)\n\n\nif __name__ == '__main__':\n    main()\n\n","\nwhile True:\n    a = 0\n    num = int(input())\n\n    if num == 0: break\n\n    ls = list(map(int,input().split()))\n    ave = sum(ls) \/ num\n    \n\n    for i in range(num):\n        if ls[i] <= ave :\n            a += 1\n    print(a)\n","while True:\n    try:\n        n = int(input())\n        a = list(map(int,input().split()))\n        s = sum(a)\n        ave = s\/n\n    \n        i = 0\n        x = []\n        while i <= n-1:\n            if a[i] <= ave:\n                x.append(a[i])\n            i += 1\n\n        print(len(x))\n    \n    except:\n        if n == 0:\n            break\n","while True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    m = sum(a) \/ n\n    ans = 0\n    for aa in a:\n        if aa <= m:\n            ans += 1\n    print(ans)\n\n","ans = []\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int, input().split()))\n    avg = sum(a) \/ n\n    ans.append(sum(avg >= x for x in a))\nprint(*ans, sep=\"\\n\")\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n    else:\n      pass\n  print(c)\n","ans_list = []\n\nwhile True:\n    n = int(input())\n    if n == 0:\n        break\n    A = list(map(int,input().split()))\n    ave = sum(A) \/ len(A)\n    cnt = 0\n    for a in A:\n        if a <= ave:\n            cnt += 1\n    ans_list.append(cnt)\n\nfor ans in ans_list:\n    print(ans)\n","while True:\n  n=int(input())\n  if n == 0:\n    break\n  A = list(map(int,input().split()))\n#  print(A)\n  a =sum(A)\n  bar = a\/n\n#  print(bar)\n  count=0\n  for i in A:\n    if i<=bar:\n      count+=1\n  print(count)\n","while 1:\n    n=int(input())\n    if n==0:break\n    a=list(map(int,input().split()))\n    aave=sum(a)\/len(a)\n    ans=0\n    for i in a:\n        if aave>=i: ans+=1\n    print(ans)\n","res = []\nwhile True :\n    n = int(input())\n    \n    if n == 0 :\n        break\n    else :\n        li = [int(x) for x in input().split()]\n        avg = sum(li) \/ n\n        res.append(sum([1 if x <= avg else 0 for x in li]))\n        \nfor r in res :\n    print(r)\n","x=[]\na=[] #append\u306e\u305f\u3081\u306b\u5ba3\u8a00\u304c\u5fc5\u8981\nwhile True:\n    try:\n        a.append(list(map(int,input().split())))\n\n    except:\n        break;\n        #\u307e\u305f\u306f\u3001quit(),os.exit()\u3092\u3057\u3066\u6b62\u3081\u308b\u3002\n\n\n#[[1, 2, 2, 3, 1], [4, 5, 3, 4, 1, 2, 3, 4], [2, 3, 5, 6, 0, 2]]\nfor i in range(len(a)\/\/2):\n    x.append(i)\n    n=i*2\n    m=i*2+1\n    s=sum(a[m])\/a[n][0]\n    for t in range(len(a[m])):\n      if s>=a[m][t]:\n        x[i]=x[i]+1\n    print(x[i]-i)\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n    a = list(map(int,input().split()))\n    cnt = 0\n    ave = sum(a) \/ n\n    for i in a:\n        if ave >= i:\n           cnt +=1\n    print(cnt) \n\n","from statistics import mean\nwhile True:\n  n=int(input())\n  c=0\n  if n==0:\n    break\n  ns=list(map(int, input().split()))\n  for i in range(n):\n    if ns[i]<=mean(ns):\n      c+=1\n  print(c)\n","\nwhile True:\n    x=int(input())\n    if x==0:\n        break\n    alst = list(map(int,input().split()))\n    num = sum(alst) \/ x\n    print(sum(a <= num for a in alst))\n    \n\n","while 1:\n    n = int(input())\n    if n == 0:\n        break\n\n    data = list(map(int, input().split()))\n    mean = sum(data) \/ n\n\n    cnt = 0\n    for d in data:\n        if d <= mean:\n            cnt += 1\n\n    print(cnt)\n\n","\nwhile 1:\n    n = int(input())\n    if n==0: break\n    a = list(map(int, input().split()))\n    \n    ave = sum(a)\/n\n    \n    print(len([i for i in a if i <= ave]))\n    #\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3001\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u306e\u6570\u3092len()\u3067\u8868\u793a\n","while True:\n    a=int(input())\n    if a==0:\n        break\n    else:\n        b=list(map(int,input().split()))\n        h=sum(b)\/a\n        c=0\n        for i in range(a):\n            if h>=b[i]:\n                c+=1\n            else:\n                pass\n        print(c)\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Takahashi and Aoki will have a battle using their monsters.<\/p>\n<p>The health and strength of Takahashi's monster are <var>A<\/var> and <var>B<\/var>, respectively, and those of Aoki's monster are <var>C<\/var> and <var>D<\/var>, respectively.<\/p>\n<p>The two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes <var>0<\/var> or below. The person with the monster whose health becomes <var>0<\/var> or below loses, and the other person wins.<\/p>\n<p>If Takahashi will win, print <code>Yes<\/code>; if he will lose, print <code>No<\/code>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq A,B,C,D \\leq 100<\/var><\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A<\/var> <var>B<\/var> <var>C<\/var> <var>D<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>If Takahashi will win, print <code>Yes<\/code>; if he will lose, print <code>No<\/code>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>10 9 10 10\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>No\n<\/pre>\n<p>First, Takahashi's monster attacks Aoki's monster, whose health is now <var>10-9=1<\/var>.<\/p>\n<p>Next, Aoki's monster attacks Takahashi's monster, whose health is now <var>10-10=0<\/var>.<\/p>\n<p>Takahashi's monster is the first to have <var>0<\/var> or less health, so Takahashi loses.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>46 4 40 5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>Yes\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementTakahashi and Aoki will have a battle using their monsters.\nThe health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\nThe two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes 0 or below. The person with the monster whose health becomes 0 or below loses, and the other person wins.\nIf Takahashi will win, print Yes; if he will lose, print No.\n\n\n\n\nConstraints\n1 \\leq A,B,C,D \\leq 100\nAll values in input are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA B C D\n\n\n\n\n\nOutputIf Takahashi will win, print Yes; if he will lose, print No.\n\n\n\n\n\n\nSample Input 110 9 10 10\n\n\n\n\n\nSample Output 1No\n\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\n\n\n\n\n\nSample Input 246 4 40 5\n\n\n\n\n\nSample Output 2Yes\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Takahashi and Aoki will have a battle using their monsters.<\/p>\n<p>The health and strength of Takahashi's monster are <var>A<\/var> and <var>B<\/var>, respectively, and those of Aoki's monster are <var>C<\/var> and <var>D<\/var>, respectively.<\/p>\n<p>The two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes <var>0<\/var> or below. The person with the monster whose health becomes <var>0<\/var> or below loses, and the other person wins.<\/p>\n<p>If Takahashi will win, print <code>Yes<\/code>; if he will lose, print <code>No<\/code>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq A,B,C,D \\leq 100<\/var><\/li>\n<li>All values in input are integers.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>A<\/var> <var>B<\/var> <var>C<\/var> <var>D<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>If Takahashi will win, print <code>Yes<\/code>; if he will lose, print <code>No<\/code>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>10 9 10 10\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>No\n<\/pre>\n<p>First, Takahashi's monster attacks Aoki's monster, whose health is now <var>10-9=1<\/var>.<\/p>\n<p>Next, Aoki's monster attacks Takahashi's monster, whose health is now <var>10-10=0<\/var>.<\/p>\n<p>Takahashi's monster is the first to have <var>0<\/var> or less health, so Takahashi loses.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>46 4 40 5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>Yes\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementTakahashi and Aoki will have a battle using their monsters.\nThe health and strength of Takahashi's monster are A and B, respectively, and those of Aoki's monster are C and D, respectively.\nThe two monsters will take turns attacking, in the order Takahashi's, Aoki's, Takahashi's, Aoki's, ...\nHere, an attack decreases the opponent's health by the value equal to the attacker's strength.\nThe monsters keep attacking until the health of one monster becomes 0 or below. The person with the monster whose health becomes 0 or below loses, and the other person wins.\nIf Takahashi will win, print Yes; if he will lose, print No.\n\n\n\n\nConstraints\n1 \\leq A,B,C,D \\leq 100\nAll values in input are integers.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nA B C D\n\n\n\n\n\nOutputIf Takahashi will win, print Yes; if he will lose, print No.\n\n\n\n\n\n\nSample Input 110 9 10 10\n\n\n\n\n\nSample Output 1No\n\nFirst, Takahashi's monster attacks Aoki's monster, whose health is now 10-9=1.\nNext, Aoki's monster attacks Takahashi's monster, whose health is now 10-10=0.\nTakahashi's monster is the first to have 0 or less health, so Takahashi loses.\n\n\n\n\n\nSample Input 246 4 40 5\n\n\n\n\n\nSample Output 2Yes\n\n\n","solve_rate":0.5883350288,"codenet_problem_id":"p02700","input_testcases":{"72":"7 7 1 22","10":"54 6 2 5","67":"5 14 3 8","8":"54 8 2 5","1":"10 9 13 10","0":"46 4 4 5","65":"5 13 3 19","73":"79 1 1 10","100":"46 4 40 5","63":"6 9 3 10","66":"74 8 2 5","4":"64 8 4 5","6":"54 8 4 5","68":"2 14 3 12","22":"91 8 1 10","77":"91 8 2 10","2":"64 4 4 5","58":"10 9 9 10","17":"7 7 1 12","101":"10 9 10 10","7":"5 13 3 10","5":"5 9 3 10","15":"7 14 1 12","75":"79 11 1 10","102":"10 9 10 10","18":"79 6 1 10","64":"54 8 4 3","20":"79 8 1 10","59":"46 4 4 6","62":"64 8 4 1","60":"10 9 3 10","3":"5 9 13 10","69":"7 14 3 18","11":"5 14 3 12","61":"64 5 4 5","9":"5 14 3 10","13":"7 14 3 12"},"output_testcases":{"72":"Yes\n","10":"Yes\n","67":"Yes\n","8":"Yes\n","1":"No\n","0":"Yes\n","65":"Yes\n","73":"Yes\n","100":"Yes\n","63":"Yes\n","66":"Yes\n","4":"Yes\n","6":"Yes\n","68":"Yes\n","22":"Yes\n","77":"Yes\n","2":"Yes\n","58":"Yes\n","17":"Yes\n","101":"No\n","7":"Yes\n","5":"Yes\n","15":"Yes\n","75":"Yes\n","102":"No\n","18":"Yes\n","64":"Yes\n","20":"Yes\n","59":"Yes\n","62":"Yes\n","60":"Yes\n","3":"No\n","69":"Yes\n","11":"Yes\n","61":"Yes\n","9":"Yes\n","13":"Yes\n"},"n_missing":66,"programs":["# B - Battle\nA,B,C,D = map(int,input().split())\nans = ['No', 'Yes']\ntakahashi = (C-1)\/\/B + 1\naoki = (A-1)\/\/D + 1\nprint(ans[takahashi<=aoki])","TaHP,TaAP,AoHP,AoAP = map(int, input().split())\n\nFlag_Ta = True\n\nwhile( TaHP >= 0 or AoHP >= 0):\n\tif\tFlag_Ta:\n\t\tAoHP = AoHP - TaAP\n\t\tFlag_Ta = False\n\telse:\n\t\tTaHP = TaHP - AoAP\n\t\tFlag_Ta = True\nif TaHP >= 0:\n\tprint(\"Yes\")\nelse:\n    print(\"No\")","A, B, C, D = map(int, input().split(' '))\ntakahashi_dead_count = int(A \/ D) + 1\naoki_dead_count = int(C \/ B) + 1\n\nif takahashi_dead_count >= aoki_dead_count:\n    print('Yes')\nelse:\n    print('No')","import math\nA, B, C, D = input().split()\n \nif math.ceil(int(C)*1.0\/(int(B)*1.0)) >= math.ceil(int(A)*1.0\/(int(D)*1.0)):\n  print(\"Yes\")\nelse:\n  print(\"No\")","a,b,c,d=map(int,input().split())\na=a-d\nc=c-b\nif a<=0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A,B,C,D=map(int,input().split())\nwhile A>0 and C>0:\n  C-=B\n  A-=D\nif A<=0 and C<=0:\n  print(\"Yes\")\nelif A<=0:\n  print(\"No\")\nelse:\n  print(\"Yes\")","a, b, c, d = map(int, input().split())\ntakaturn = 0\nwhile (a > 0 and c > 0):\n  takaturn += 1\n  takaturn %= 2\n  if takaturn:\n    c -= b\n  else:\n    a -= d\nif takaturn:\n  print(\"Yes\")\nelse:\n  print(\"No\")","#https:\/\/atcoder.jp\/contests\/abc164\/tasks\/abc164_b\nA,B,C,D = map(int,input().split())\nSenkou_N,Senkou_Amari = divmod(C,B)\nif Senkou_Amari != 0:\n    Senkou_N += 1\nKoukou_N,Koukou_Amari = divmod(A,D)\nif Koukou_Amari != 0:\n    Koukou_N += 1\n\nif Senkou_N <= Koukou_N:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a, b, c, d = map(int, input().split())\n\nif c - b <= 0:\n    print(\"Yes\")\n\nelif a - d <= 0:\n    print(\"No\")\n","\na, b, c, d = map(int, input().split())\n\ncnt1 = 0\ncnt2 = 0\n\nwhile a > 0:\n\ta -= d\n\tcnt1 += 1\n\nwhile c >0:\n\tc -= b\n\tcnt2 += 1\n\nprint('Yes') if cnt1 >= cnt2 else print('No')","A,B,C,D = map(int, input().split())\nE = A-B\nF = D-C\nif E > F:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A,B,C,D=map(int,input().split())\natA=0\natC=0\nwhile(A>0):\n    A-=D \n    atA+=1 \nwhile(C>0):\n    C-=B \n    atC+=1\n#print(atA,atC)\nif(atA>=atC):\n    print('Yes')\nelse:\n    print('No')","A,B,C,D = list(map(int,input().split(\" \")))\nS,T = [0,0]\n\nif A%D != 0:\n  S +=1\nif C%B != 0:\n  T += 1\nif C\/\/B + T <= A\/\/D + S:\n  print(\"Yes\")\nelse:\n  print(\"No\")","from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    a,b,c,d=map(int,readline().split())\n    flag=0\n    while a>=1 and c>=1:\n        if flag==0:\n            c-=b\n            flag=1\n        else:\n            a-=d\n            flag=0\n    \n    if a>0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__==\"__main__\":\n    main()","A,B,C,D = map(int,input().split())\nwhile A > 0 and C > 0:\n  C -= B\n  if C <= 0:\n    break\n  A -= D\n  print(A,C)\nif A <= 0:\n  print('No')\nelse:\n  print('Yes')","from math import ceil\nA,B,C,D = list(map(int, input().split()))\nE = ceil(A\/C)\nF = ceil(D\/B)\nif F >= E:\n    print('Yes')\n\nelse:\n    print('No')","#!\/usr\/bin\/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef S(): return input().rstrip()\ndef LS(): return S().split()\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [S() for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = float(\"INF\")\n\n#solve\ndef solve():\n    a, b, c, d = LI()\n    print(\"Yes\" if (c-1)\/\/b + 1 >= (a-1)\/\/d + 1 else \"No\")\n    return\n\n\n#main\nif __name__ == '__main__':\n    solve()\n","A, B, C, D = map(int, input().split())\n\nwhile A > 0 and C > 0:\n    C -= B\n    if C <= 0:\n        break\n    A -= D\nprint(\"Yes\" if A > 0 else \"No\")","a,b,c,d = map(int,input().split())\n\nwhile(True):\n    c = c - b\n    if(c <= 0):\n        print(\"Yes\")\n        exit()\n    a = a - d\n    if(a <= 0):\n        print(\"No\")\n        exit()\n    ","import math\nA, B, C, D = map(int, input().split())\nwhile True:\n    C -= B\n    if C <= 0:\n        print(\"Yes\")\n        exit()\n    A -= D\n    if A <= 0:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\nif C\/B <= A\/D || C\/B <= 1:\n\tprint(\"Yes\")\nelse:    \n\tprint(\"No\")","a,b,c,d=map(int,input().split())\nfor i in range(1000):\n    c-=b\n    if c<=0:\n        print(\"Yes\")\n        exit()\n    a-=d\n    if a<=0:\n        print(\"No\")\n        exit()\n","a,b,c,d=map(int,input().split())\n\nif a+b>=c+d:\n    print(\"yes\")\nelse:\n    print(\"no\")","A,B,C,D = map(int,input().split())\n\nif C\/\/B >= D\/\/B:\n    print('Yes')\nelse:\n    print('No')","import sys\na,b,c,d = map(int,input().split())\nfor i in range(100):\n    if i % 2 == 0:\n        c -= b\n        if c <= 0:\n            print(\"Yes\")\n            sys.exit()\n    else:\n        a -= d\n        if a <= 0:\n            print(\"No\")\n            sys.exit()","from math import ceil\na,b,c,d=map(int,input().split())\ncnt1=ceil(c\/b)\ncnt2=ceil(a\/d)\nif cnt1<=cnt2:\n    print(\"yes\")\nelse:\n    print(\"No\")","#!\/usr\/bin\/env python3\n\ndef solve(a: int, b: int, c: int, d: int) -> bool:\n    while True:\n        c -= b\n        if c <= 0:\n            return True\n        a -= d\n        if a <= 0:\n            return False\n\n# generated by online-judge-template-generator v4.1.0 (https:\/\/github.com\/kmyk\/online-judge-template-generator)\ndef main():\n    A, B, C, D = map(int, input().split())\n    ans = solve(A, B, C, D)\n    print(ans and 'Yes' or 'No')\n\nif __name__ == '__main__':\n    main()\n","A, B, C, D = map(int, input().split())\n\nflag = 0\nwhile flag == 0:\n    if C - B <= 0:\n        print(\"Yes\")\n        break\n    C -= B\n    if A - D <= 0:\n        print(\"No\")\n        break\n    A -= D\n","a,b,c,d=map(int,input().split())\nx=float(a-1\/d)\ny=float(c-1\/b)\n\nif x>=y:\n  print(\"yes\")\nelse:\n  print(\"no\")","a, b, c, d = map(int, input().split())\nwhile True:\n    a -= d\n    if a <= 0:\n        print('No')\n        break\n    c = -b\n    if c <= 0:\n        print('Yes')\n        break\n","a, b, c, d = map(int, input().split())\n\nif a \/\/ d + (1 if a%d>0 else 0) >= c \/\/ b + (1 if c%b>0 else 0):\n  print(\"Yes\")\nelse:\n  print(\"No\")","a, b, c, d = list(map(int, input().split())) \nx = int((a+d-1)\/d)\ny = int((c+b-1)\/b)\nprint(\"Yes\" if x >= y  else \"No\")","def n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\n\na,b,c,d=n1()\n\nwhile True:\n    c=c-b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a=a-d\n    if a<=0:\n        print(\"No\")\n        break","import math\na,b,c,d=map(int,input().split())\na1,a2=0,0\nif(c%b==0):\n\ta1=math.floor(c\/b)\nelse:\n\ta1=math.floor(c\/b)+1\t\nif(a%d==0):\n\ta2=math.floor(a\/d)\nelse:\n\ta2=math.floor(a\/d)+1\n\t# print(a1,a2)\nif(a1>a2):\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")","import sys\nsys.setrecursionlimit(10 ** 6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\nINF = float('inf')\n\ndef solve():\n    a, b, c, d = MI()\n\n    for i in range(1000000):\n        c -= b\n        if c <= 0:\n            print('Yes')\n            return\n        a -= d\n        if a <= 0:\n            print('No')\n            return\n\n\nif __name__ == '__main__':\n    solve()\n","a, b, c, d = map(int, input().split())\nwhile c >0:\n  a -= d\n  c -= b\n  \nif c < 0:\n  print(\"No\")\nelse:\n  print(\"Yes\")","a, b, c, d = map(int, input().split())\nwhile True:\n\tc -= b\n\tif c <= 0:\n\t\tprint(\"Yes\")\n\t\tbreak\n\ta -= d\n\tif a <= 0:\n\t\tprint(\"No\")\n\t\tbreak","x = list(map(int, input(\"Enter a multiple value: \").split()))\nfor i in x:\n    x[1] -= x[2]\n    x[0] -= x[3]\nif x[0]<0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A,B,C,D = map(int,input().split(' '))\ncount1 = 0\nwhile A > 0:#\u5148\u653b\u9ad8\u6a4b\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u6b7b\u306c\u307e\u3067\u306e\u56de\u6570\n    A -= D\n    count1 += 1\ncount2 = 0\nwhile C > 0:#\u5f8c\u653b\u9752\u6728\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u6b7b\u306c\u307e\u3067\u306e\u56de\u6570\n    C -= B\n    count\uff12 += 1 \nif count1>count2:\n    #\u9752\u6728\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5148\u6b7b\u3093\u3060\u2192\u9ad8\u6a4b\u306e\u52dd\u3061\n    print('Yes')\nelif count1<count2:\n    print(\"No\")\nelif count1 == count2:\n    print(\"Yes\")","N=[int(x) for x in input().split()]\nif not N[2]%N[1]==0:\n   c=N[2]\/\/N[1]+1\nelse:\n    c=N[2]\/\/N[1]\nif not N[0]%N[3]==0:\n   c=N[0]\/\/N[3]+1\n\n   d=N[0]\/\/N[3]+1\nelse:\n    d=N[0]\/\/N[3]\nif d>=c+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A, B, C, D = map(int, input().split())\n\nwhile True:\n    C -= B\n    if C <= 0:\n        print('Yes')\n        exit(0)\n\n    A -= D\n    if A <= 0:\n        print('No')\n        exit(0)\n","a, b, c, d = map(int, input().split())\nA = c\nT = a\nwhile(A > 0 and T > 0):\n  A -= b\n  T -= d\nif A <= 0:\n  print('Yes')\nelse:\n  print('No')\n\t\n  \n  ","a,b,c,d=map(int,input().split())\nfor _ in range(101):\n    c=c-b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a=a-d\n    if a<=0:\n        print(\"No\")\n        break","def ceiling(a, b):\n    return int((a + b - 1) \/ b)\n\n\na, b, c, d = map(int, input().split())\nif(ceiling(c, b) <= ceiling(a, d)): print('Yes')\nelse: print('No')\n","ms=[int(x) for x in input().split(' ')]\nt=[ms[0],ms[1]]\na=[ms[2],ms[3]]\nwhile True:\n    a[0]-=t[1]\n    if a[0]<1:\n        print(\"Yes\")\n        break\n    t[0]-=a[1]\n    if t[0]<1:\n        print('No')\n        break\n","A,B,C,D = map(int, input().split())\n\nif C\/B <= A\/D:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")","A,B,C,D = map(int,input().split())\nfor cnt in range(100):\n  C = C - B\n  if C <= 0:\n    print(\"Yes\")\n    break\n  A = A - D\n  if A <= 0:\n    print(\"No\")\n    break","a, b, c, d = map(int, input().split())\nwhile a > 0 and c > 0:\n  c -= b\n  if c > 0:\n    a -= d\n  else:\n    print('Yes')\n  if a > 0:\n    break\n  else:\n    print('No')\n","a,b,c,d = map(int,input().split(\" \"))\nwhile True:\n  c -= b\n  if c <= 0:\n    print(\"Yes\")\n    exit()\n  a -= d\n  if a <= 0:\n    print(\"No\")\n    exit()","A, B, C, D = map(int, input().split())\n\n# while A > 0 and B > 0:\n#     print(A, C)\n#     C -= B\n#     if B <= 0:\n#         print(\"Yes\")\n#         break\n#     A -= D\n#     if A <= 0:\n#         print(\"No\")\n#         break\n\nimport math\n# print(math.ceil(A \/ D), math.ceil(C \/ B))\nif math.ceil(A \/ D) >= math.ceil(C \/ B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d=map(int,input().split())\ncheck=True\nwhile True:\n    if check:\n        c-=b\n        if c<=0:\n            print(\"Yes\")\n            break\n    else:\n        a-=d\n        if a<=0:\n            print(\"No\")\n            break\n    check=not check","import math\na, b, c, d = map(int, input().split())\n\nif math.ceil(c \/ b) <= math.ceil(a \/ d):\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d= map(int,input().split())\nwhile a>0 and c>0:\n  c -= b\n  if c<=0:\n    print('Yes')\n    break\n  a -= d\n  if a<=0:\n    print('No')\n    break\n","T_HP,T_Atk,A_HP,A_Atk = map(int,input().split())\n\nTakahashi = [T_HP,T_Atk]\nAsakura = [A_HP,A_Atk]\n\n    \nwhile True:    \n    Asakura[0] - Takahashi[1]\n    if Asakura[0] < 0:\n        print(\"Yes\")\n        exit()\n    \n    \n    Takahashi[0] - Asakura[1]\n    if Takahashi[0] < 0:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\n \n# X=ceil(C\/B)\u3068Y=ceil(A\/D)\u3092\u6bd4\u8f03\u3057\u3001X>=Y\u306a\u3089\u52dd\u3061\u3001X<Y\u306a\u3089\u8ca0\u3051\nX = (C+B-1) \/\/ B\nY = (A+D-1) \/\/ A\nif X >= Y: print('Yes')\nelse: print('No')","a, b, c, d = map(int, input().split())\n\ntakahashi = (a+d-1) \/\/ d\naoki = (c+b-1) \/\/ b\n\nif takahashi >= aoki:\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d = map(int, input().split())\nwhile a > 0 and c > 0:\n    c -= b\n    if c <= 0:\n        print(\"Yes\")\n        exit()\n    a -= d\nprint(\"No\")","A, B, C, D = map(int, input().split())\nwhile A > 0 and C > 0:\n    C = C - B\n    if C <= 0:\n        break\n    else:\n        A = A - D\nif A <= 0:\n    ans = 'No'\nelse:\n    ans = 'Yes'\nprint(ans)\n","a,b,c,d = map(int,input().split())\nwhile True:\n    c -= b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a -= d\n    if a <=0:\n        print(\"No\")\n        break","a,b,c,d = map(int,input().split())\nwhile 1:\n    c -= b\n    if c <= 0:\n        print('Yes')\n        break\n    a -= d\n    if a <= 0:\n        print('No')\n        break","a,b,c,d=map(int,input().split())\nprint('YNeos'[-a\/\/d>-c\/\/b::2])","a, b, c, d = map(int, input().split())\nif c%b ==0 :\n    e = c\/\/d\nelse:\n    e = c\/\/d + 1\nif a%d ==0:\n    f = a\/\/d\nelse:\n    f = a\/\/d +2\nif f >e:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d =list(map(int,input().split()))\nwhile a>0:\n  a-=d\n  if a>0:\n    c-=d\n    if c<0:\n      print(\"Yes\")\n      exit()\nprint(\"No\")","A,B,C,D = map(int,input().split())\nwhile True:\n    C-=B\n    if C<=0:\n        print(\"Yes\")\n        break\n    A-=D\n    if A<=0:\n        print(\"No\")\n        break","import math\na, b, c, d = map(int, input().split())\nprint('Yes' if math.ceil((a\/d))>=math.ceil((c\/b)) else 'No')\n","a,b,c,d=map(int,input().split())\n\nwhile a > 0:\n    c = c-b\n    print(c)\n    if c < 0:\n        print('Yes')\n        exit()\n    a = a-d\nprint('No')","A, B, C, D = map(int,input().split())\nn = 0\nm = 0\n\nwhile C > 0:\n    n += 1\n    C -= B\n\nwhile A > 0:\n    m += 1\n    A -= D\n\nif n >= m:\n    print('No')\nelse:\n    print('Yes')\n","A,B,C,D = list(map(int,input().split()))\nwhile True:\n    C -= B\n    if C <= 0:\n        print('Yes')\n        break\n    else:\n        A -= D\n        if A <= 0:\n            print('No')\n            break","a,b,c,d = map(int,input().split())\nacnt = 0\nccnt = 0\nwhile a > 0:\n    a -= d\n    acnt += 1\n    # print(a)\n    # print(acnt)\nwhile c > 0:\n    c -= b\n    ccnt +=1\n    # print(c)\n    # print(ccnt)\nif acnt >= ccnt:\n    print(\"Yes\")\nelse:\n    print(\"No\")","As,Aa,Bs,Ba = map(int,input().split())\nNa = Bs\/\/Aa\nNb = As\/\/Ba\n\nif Na <= Nb:\n  print('Yes')\nelse:\n  print('No')","a, b, c, d = map(int, input().split())\ntak = -(-c\/\/b)\naok = -(-a\/\/d)\n\nif tak > aok:\n  print(\"No\")\nelse:\n  print(\"Yes\")","A, B, C, D = map(int, input().split())\nwhile A <= 0:\n  A = A - D\nwhile C <= 0:\n  C = C - B\nif A >= C:\n  print(\"Yes\")\nelse:\n  print(\"No\")","import math\na, b, c, d = map(int, input().split())\n\ntaka = math.ceil(c\/b)\nao = math.ceil(a\/d)\n\nprint(taka, ao)\nis_true = True\nif taka < ao:\n    is_true = True\nelif taka > ao:\n    is_true = False\nelse:\n    if b > d:\n        is_true = False\n\nif is_true:\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d = map(int,input().split())\n\nwhile (b<=0) or (d<=0):\n  if d>0:\n    d -= a\n    if d<=0:\n      print(\"Yes\")\n    else:\n      pass\n    \n  elif b>0:\n    b -= c\n    if b<=0:\n      print(\"No\")\n    else:\n      pass","A,B,C,D = map(int, input().split())\nt_ta=0\nt_aa=0\n\ntatk = C\/\/B\ntss = C % B\n\naatk = A\/\/D\nass = A % D\n\nif tss == 0:\n    t_ta = tatk\nelse: \n    t_ta = tatk+1\n    \nif ass ==0:\n    t_aa = aatk\nelse:\n    t_aa = aatk+1\n    \nif t_ta -t_aa >0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","from sys import setrecursionlimit, exit\nsetrecursionlimit(1000000000)\n\ndef main():\n    a, b, c, d = map(int ,input().split())\n    while a > 0 and c > 0:\n        c -= b\n        if c <= 0:\n            print('Yes')\n            break\n        a -= d\n        if a <= 0:\n            print('No')\n\nmain()","a, b, c, d = map(int, input().split())\n\nwhile True:\n    c -= b\n    if c <= 0:\n        ans = \"Yes\"\n        break\n    a -= d\n    if a <= 0:\n        ans = \"No\"\n        break\n\nprint(ans)\n","a,b,c,d=map(int, input().split())\nwhile True:\n  b -= c\n  if c<=0:\n    print(\"Yes\")\n    break\n  a -=d\n  if a<=0:\n    print(\"No\")\n    break\n","import math\na,b,c,d =map(int,input().split())\n\nif math.ceil(a\/b) >= math.ceil(c\/d):\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d = map(int,input().split())\n\nfor i in range(111111):\n  c -= b\n  if c <= 0:\n    print('Yes')\n    exit()\n  a -= d\n  if a <= 0:\n    print('No') \n    exit()","a, b, c, d = map(int, input().split())\nwhile True:\n    a -= d\n    c -= b\n    if a <= 0 or c <= 0:\n        break\nprint('Yes' if c <= 0 else 'No')","a, b, c, d = map(int, input().split())\n\nwhile a > 0 or c > 0:\n    c = c - b\n    if c <= 0:\n        print(\"Yes\")\n        exit(0)\n    a = a - d\n    if a <= 0:\n        print(\"No\")\n        exit(0)\n","import math\n\na,b,c,d = map(int, input().split())\n\nwhile(a>0 and c>0):\n    c-=b\n    a-=d\n\nif(c<=0):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","A, B, C, D = map(int, input().split())\nturn = 0\nwhile (turn := turn + 1) and ((C := C - B) if turn & 1 else (A := A - D)) > 0: pass\nprint(\"Yes\" if turn & 1 else \"No\")\n","A,B,C,D = map(int,input().split())\n\nif -A\/\/D<=-C\/\/B:\n  print(\"Yes\")\nelse:\n  print(\"No\")","\nA, B, C, D = map(int, input().split())\n\nm = C \/\/ B  # \u9752\u6728\u541b\u306e\u8010\u3048\u3046\u308b\u30bf\u30fc\u30f3\nif C % B != 0:\n    m = m + 1\n\nn = A \/\/ D  # \u9ad8\u6a4b\u541b\u306e\u8010\u3048\u3046\u308b\u30bf\u30fc\u30f3\nif A % D != 0:\n    n = n + 1\n\nif n >= m:\n    print('Yes')\nelse:\n    print('No')\n","A,B,C,D=map(int,input().split())\na=A\/D\nb=C\/B\nprint(a,b)\nif a+1\/b>=b:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","a,b,c,d=map(int,input().split())\nimport math\n\nif math.ceil(c\/b)>=math.ceil(a\/d):\n    print('Yes')\nelse:\n    print('No')","A, B, C, D = map(int, input().split())\n\nif C\/\/B == A\/\/D:\n  if C%B > A%D:\n    print('No')\n  else:\n    print('Yes')  \nelse:\n  if C\/\/B > A\/\/D:\n    if C\/\/B - A\/\/D = 1:\n      print('Yes')\n    else:\n      print('No')  \n  elif C\/\/B < A\/\/D:  \n    if A\/\/D - C\/\/B = 1:\n      print('Yes')\n    else:\n      print('No')","a,b,c,d = map(int,input().split())\nwhile a > 0 and c > 0:\n  c -= b\n  if c <= 0:\n    break\n  a -= d\nif a > 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")","a, b, c, d = map(int, input().split())\nflg1 = False\nflg2 = False\nwhile True:\n    c -= b\n    a -= d\n    if c <= 0:\n        flg1 = True\n    if a <= 0:\n        flg2 = True\n\n    if flg1:\n        print(\"Yes\")\n        exit()\n    if flg2:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\nwhile C > 0 :\n  C = C - B\n  A = A -D\n  if A < 0:\n  print('No')  \n  break\n  \nprint('Yes')","a, b, c, d = map(int, input().split())\nfor i in range(10**9 + 7):\n    c -= b\n    if c <= 0:\n        print('Yes')\n        break\n    a -= d\n    if a <= 0:\n        print('No')\n        break\n        ","import sys\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline\nfrom itertools import permutations,  combinations, accumulate\nfrom functools import *\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heapify, heappop, heappush, heappushpop\n\nINF = float('inf')\nNIL = - 1\n\n\"\"\" Input\nS = input().rstrip()\nN = int(input())\nA = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.float64)\nD = [int(input()) for _ in range(N)]\nAB = [[int(x) for x in input().split()] for _ in range(N)]\nPX = [[int(x) for x in input().split()] for _ in range(Q)]\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nwhile True:\n    C -= B\n    if C < 0:\n        print('No')\n        break\n    A -= D\n    if A < 0:\n        print('Yes')\n        break\n\n\n\n\n\n\n\n# def main():\n\n# if __name__ == '__main__':\n#     main()\n","a, b, c, d = map(int, input().split())\n\nwhile c or a >= 0:\n    c -= b\n    a -= b\n    if c <= 0:\n        print('Yes')\n        break\n    if a <= 0:\n        print('No')","import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA,B,C,D = map(int, readline().split())\n\n\nwhile True:\n  C -= B\n  if C <= 0:\n    print('Yes')\n    break\n  A -= D\n  if A <= 0:\n    print('No')\n    break\n","a,b,c,d = map(int,input().split())\ny = (a-1)\/\/d\nn = (c-1)\/\/b\nif n > y:\n  print('No')\nelse:\n  print('Yes')","a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nwhile a>0 and c>0:\n  if c>0:\n    c += -b\n    \n  if c<=0:\n    break\n    print(\"Yes\")\n    \n  if a>0:\n    a += -d\n    \n  if a<=0:\n    break\n    print(\"No\")","a, b, c, d = map(int, input().split())\ni = 0\nr = ''\nwhile True:\n\tif i % 2 == 0:\n\t\tc -= b\n\t\tif c <= 0:\n\t\t\tr = 'Yes'\n\t\t\tbreak\n\telse:\n\t\ta -= d\n\t\tif a <= 0:\n\t\t\tr = 'No'\n\t\t\tbreak\n\ti += 1\nprint(r)","a, b, c, d = map(int, input().split())\ntakahashi_attack = c \/\/ b\naoki_attack = a \/\/ d\nif c % b != 0:\n    takahashi_attack += 1\nif a % d != 0:\n    aoki_attack += 1\nif takahashi_attack <= aoki_attack:\n    print('Yes')\nelse:\n    print('No')"],"raw_generations":["# B - Battle\nA,B,C,D = map(int,input().split())\nans = ['No', 'Yes']\ntakahashi = (C-1)\/\/B + 1\naoki = (A-1)\/\/D + 1\nprint(ans[takahashi<=aoki])","TaHP,TaAP,AoHP,AoAP = map(int, input().split())\n\nFlag_Ta = True\n\nwhile( TaHP >= 0 or AoHP >= 0):\n\tif\tFlag_Ta:\n\t\tAoHP = AoHP - TaAP\n\t\tFlag_Ta = False\n\telse:\n\t\tTaHP = TaHP - AoAP\n\t\tFlag_Ta = True\nif TaHP >= 0:\n\tprint(\"Yes\")\nelse:\n    print(\"No\")","A, B, C, D = map(int, input().split(' '))\ntakahashi_dead_count = int(A \/ D) + 1\naoki_dead_count = int(C \/ B) + 1\n\nif takahashi_dead_count >= aoki_dead_count:\n    print('Yes')\nelse:\n    print('No')","import math\nA, B, C, D = input().split()\n \nif math.ceil(int(C)*1.0\/(int(B)*1.0)) >= math.ceil(int(A)*1.0\/(int(D)*1.0)):\n  print(\"Yes\")\nelse:\n  print(\"No\")","a,b,c,d=map(int,input().split())\na=a-d\nc=c-b\nif a<=0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A,B,C,D=map(int,input().split())\nwhile A>0 and C>0:\n  C-=B\n  A-=D\nif A<=0 and C<=0:\n  print(\"Yes\")\nelif A<=0:\n  print(\"No\")\nelse:\n  print(\"Yes\")","a, b, c, d = map(int, input().split())\ntakaturn = 0\nwhile (a > 0 and c > 0):\n  takaturn += 1\n  takaturn %= 2\n  if takaturn:\n    c -= b\n  else:\n    a -= d\nif takaturn:\n  print(\"Yes\")\nelse:\n  print(\"No\")","#https:\/\/atcoder.jp\/contests\/abc164\/tasks\/abc164_b\nA,B,C,D = map(int,input().split())\nSenkou_N,Senkou_Amari = divmod(C,B)\nif Senkou_Amari != 0:\n    Senkou_N += 1\nKoukou_N,Koukou_Amari = divmod(A,D)\nif Koukou_Amari != 0:\n    Koukou_N += 1\n\nif Senkou_N <= Koukou_N:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a, b, c, d = map(int, input().split())\n\nif c - b <= 0:\n    print(\"Yes\")\n\nelif a - d <= 0:\n    print(\"No\")\n","\na, b, c, d = map(int, input().split())\n\ncnt1 = 0\ncnt2 = 0\n\nwhile a > 0:\n\ta -= d\n\tcnt1 += 1\n\nwhile c >0:\n\tc -= b\n\tcnt2 += 1\n\nprint('Yes') if cnt1 >= cnt2 else print('No')","A,B,C,D = map(int, input().split())\nE = A-B\nF = D-C\nif E > F:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A,B,C,D=map(int,input().split())\natA=0\natC=0\nwhile(A>0):\n    A-=D \n    atA+=1 \nwhile(C>0):\n    C-=B \n    atC+=1\n#print(atA,atC)\nif(atA>=atC):\n    print('Yes')\nelse:\n    print('No')","A,B,C,D = list(map(int,input().split(\" \")))\nS,T = [0,0]\n\nif A%D != 0:\n  S +=1\nif C%B != 0:\n  T += 1\nif C\/\/B + T <= A\/\/D + S:\n  print(\"Yes\")\nelse:\n  print(\"No\")","from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    a,b,c,d=map(int,readline().split())\n    flag=0\n    while a>=1 and c>=1:\n        if flag==0:\n            c-=b\n            flag=1\n        else:\n            a-=d\n            flag=0\n    \n    if a>0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__==\"__main__\":\n    main()","A,B,C,D = map(int,input().split())\nwhile A > 0 and C > 0:\n  C -= B\n  if C <= 0:\n    break\n  A -= D\n  print(A,C)\nif A <= 0:\n  print('No')\nelse:\n  print('Yes')","from math import ceil\nA,B,C,D = list(map(int, input().split()))\nE = ceil(A\/C)\nF = ceil(D\/B)\nif F >= E:\n    print('Yes')\n\nelse:\n    print('No')","#!\/usr\/bin\/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef S(): return input().rstrip()\ndef LS(): return S().split()\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [S() for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = float(\"INF\")\n\n#solve\ndef solve():\n    a, b, c, d = LI()\n    print(\"Yes\" if (c-1)\/\/b + 1 >= (a-1)\/\/d + 1 else \"No\")\n    return\n\n\n#main\nif __name__ == '__main__':\n    solve()\n","A, B, C, D = map(int, input().split())\n\nwhile A > 0 and C > 0:\n    C -= B\n    if C <= 0:\n        break\n    A -= D\nprint(\"Yes\" if A > 0 else \"No\")","a,b,c,d = map(int,input().split())\n\nwhile(True):\n    c = c - b\n    if(c <= 0):\n        print(\"Yes\")\n        exit()\n    a = a - d\n    if(a <= 0):\n        print(\"No\")\n        exit()\n    ","import math\nA, B, C, D = map(int, input().split())\nwhile True:\n    C -= B\n    if C <= 0:\n        print(\"Yes\")\n        exit()\n    A -= D\n    if A <= 0:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\nif C\/B <= A\/D || C\/B <= 1:\n\tprint(\"Yes\")\nelse:    \n\tprint(\"No\")","a,b,c,d=map(int,input().split())\nfor i in range(1000):\n    c-=b\n    if c<=0:\n        print(\"Yes\")\n        exit()\n    a-=d\n    if a<=0:\n        print(\"No\")\n        exit()\n","a,b,c,d=map(int,input().split())\n\nif a+b>=c+d:\n    print(\"yes\")\nelse:\n    print(\"no\")","A,B,C,D = map(int,input().split())\n\nif C\/\/B >= D\/\/B:\n    print('Yes')\nelse:\n    print('No')","import sys\na,b,c,d = map(int,input().split())\nfor i in range(100):\n    if i % 2 == 0:\n        c -= b\n        if c <= 0:\n            print(\"Yes\")\n            sys.exit()\n    else:\n        a -= d\n        if a <= 0:\n            print(\"No\")\n            sys.exit()","from math import ceil\na,b,c,d=map(int,input().split())\ncnt1=ceil(c\/b)\ncnt2=ceil(a\/d)\nif cnt1<=cnt2:\n    print(\"yes\")\nelse:\n    print(\"No\")","#!\/usr\/bin\/env python3\n\ndef solve(a: int, b: int, c: int, d: int) -> bool:\n    while True:\n        c -= b\n        if c <= 0:\n            return True\n        a -= d\n        if a <= 0:\n            return False\n\n# generated by online-judge-template-generator v4.1.0 (https:\/\/github.com\/kmyk\/online-judge-template-generator)\ndef main():\n    A, B, C, D = map(int, input().split())\n    ans = solve(A, B, C, D)\n    print(ans and 'Yes' or 'No')\n\nif __name__ == '__main__':\n    main()\n","A, B, C, D = map(int, input().split())\n\nflag = 0\nwhile flag == 0:\n    if C - B <= 0:\n        print(\"Yes\")\n        break\n    C -= B\n    if A - D <= 0:\n        print(\"No\")\n        break\n    A -= D\n","a,b,c,d=map(int,input().split())\nx=float(a-1\/d)\ny=float(c-1\/b)\n\nif x>=y:\n  print(\"yes\")\nelse:\n  print(\"no\")","a, b, c, d = map(int, input().split())\nwhile True:\n    a -= d\n    if a <= 0:\n        print('No')\n        break\n    c = -b\n    if c <= 0:\n        print('Yes')\n        break\n","a, b, c, d = map(int, input().split())\n\nif a \/\/ d + (1 if a%d>0 else 0) >= c \/\/ b + (1 if c%b>0 else 0):\n  print(\"Yes\")\nelse:\n  print(\"No\")","a, b, c, d = list(map(int, input().split())) \nx = int((a+d-1)\/d)\ny = int((c+b-1)\/b)\nprint(\"Yes\" if x >= y  else \"No\")","def n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\n\na,b,c,d=n1()\n\nwhile True:\n    c=c-b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a=a-d\n    if a<=0:\n        print(\"No\")\n        break","import math\na,b,c,d=map(int,input().split())\na1,a2=0,0\nif(c%b==0):\n\ta1=math.floor(c\/b)\nelse:\n\ta1=math.floor(c\/b)+1\t\nif(a%d==0):\n\ta2=math.floor(a\/d)\nelse:\n\ta2=math.floor(a\/d)+1\n\t# print(a1,a2)\nif(a1>a2):\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")","import sys\nsys.setrecursionlimit(10 ** 6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\nINF = float('inf')\n\ndef solve():\n    a, b, c, d = MI()\n\n    for i in range(1000000):\n        c -= b\n        if c <= 0:\n            print('Yes')\n            return\n        a -= d\n        if a <= 0:\n            print('No')\n            return\n\n\nif __name__ == '__main__':\n    solve()\n","a, b, c, d = map(int, input().split())\nwhile c >0:\n  a -= d\n  c -= b\n  \nif c < 0:\n  print(\"No\")\nelse:\n  print(\"Yes\")","a, b, c, d = map(int, input().split())\nwhile True:\n\tc -= b\n\tif c <= 0:\n\t\tprint(\"Yes\")\n\t\tbreak\n\ta -= d\n\tif a <= 0:\n\t\tprint(\"No\")\n\t\tbreak","x = list(map(int, input(\"Enter a multiple value: \").split()))\nfor i in x:\n    x[1] -= x[2]\n    x[0] -= x[3]\nif x[0]<0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A,B,C,D = map(int,input().split(' '))\ncount1 = 0\nwhile A > 0:#\u5148\u653b\u9ad8\u6a4b\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u6b7b\u306c\u307e\u3067\u306e\u56de\u6570\n    A -= D\n    count1 += 1\ncount2 = 0\nwhile C > 0:#\u5f8c\u653b\u9752\u6728\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u6b7b\u306c\u307e\u3067\u306e\u56de\u6570\n    C -= B\n    count\uff12 += 1 \nif count1>count2:\n    #\u9752\u6728\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5148\u6b7b\u3093\u3060\u2192\u9ad8\u6a4b\u306e\u52dd\u3061\n    print('Yes')\nelif count1<count2:\n    print(\"No\")\nelif count1 == count2:\n    print(\"Yes\")","N=[int(x) for x in input().split()]\nif not N[2]%N[1]==0:\n   c=N[2]\/\/N[1]+1\nelse:\n    c=N[2]\/\/N[1]\nif not N[0]%N[3]==0:\n   c=N[0]\/\/N[3]+1\n\n   d=N[0]\/\/N[3]+1\nelse:\n    d=N[0]\/\/N[3]\nif d>=c+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A, B, C, D = map(int, input().split())\n\nwhile True:\n    C -= B\n    if C <= 0:\n        print('Yes')\n        exit(0)\n\n    A -= D\n    if A <= 0:\n        print('No')\n        exit(0)\n","a, b, c, d = map(int, input().split())\nA = c\nT = a\nwhile(A > 0 and T > 0):\n  A -= b\n  T -= d\nif A <= 0:\n  print('Yes')\nelse:\n  print('No')\n\t\n  \n  ","a,b,c,d=map(int,input().split())\nfor _ in range(101):\n    c=c-b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a=a-d\n    if a<=0:\n        print(\"No\")\n        break","def ceiling(a, b):\n    return int((a + b - 1) \/ b)\n\n\na, b, c, d = map(int, input().split())\nif(ceiling(c, b) <= ceiling(a, d)): print('Yes')\nelse: print('No')\n","ms=[int(x) for x in input().split(' ')]\nt=[ms[0],ms[1]]\na=[ms[2],ms[3]]\nwhile True:\n    a[0]-=t[1]\n    if a[0]<1:\n        print(\"Yes\")\n        break\n    t[0]-=a[1]\n    if t[0]<1:\n        print('No')\n        break\n","A,B,C,D = map(int, input().split())\n\nif C\/B <= A\/D:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")","A,B,C,D = map(int,input().split())\nfor cnt in range(100):\n  C = C - B\n  if C <= 0:\n    print(\"Yes\")\n    break\n  A = A - D\n  if A <= 0:\n    print(\"No\")\n    break","a, b, c, d = map(int, input().split())\nwhile a > 0 and c > 0:\n  c -= b\n  if c > 0:\n    a -= d\n  else:\n    print('Yes')\n  if a > 0:\n    break\n  else:\n    print('No')\n","a,b,c,d = map(int,input().split(\" \"))\nwhile True:\n  c -= b\n  if c <= 0:\n    print(\"Yes\")\n    exit()\n  a -= d\n  if a <= 0:\n    print(\"No\")\n    exit()","A, B, C, D = map(int, input().split())\n\n# while A > 0 and B > 0:\n#     print(A, C)\n#     C -= B\n#     if B <= 0:\n#         print(\"Yes\")\n#         break\n#     A -= D\n#     if A <= 0:\n#         print(\"No\")\n#         break\n\nimport math\n# print(math.ceil(A \/ D), math.ceil(C \/ B))\nif math.ceil(A \/ D) >= math.ceil(C \/ B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d=map(int,input().split())\ncheck=True\nwhile True:\n    if check:\n        c-=b\n        if c<=0:\n            print(\"Yes\")\n            break\n    else:\n        a-=d\n        if a<=0:\n            print(\"No\")\n            break\n    check=not check","import math\na, b, c, d = map(int, input().split())\n\nif math.ceil(c \/ b) <= math.ceil(a \/ d):\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d= map(int,input().split())\nwhile a>0 and c>0:\n  c -= b\n  if c<=0:\n    print('Yes')\n    break\n  a -= d\n  if a<=0:\n    print('No')\n    break\n","T_HP,T_Atk,A_HP,A_Atk = map(int,input().split())\n\nTakahashi = [T_HP,T_Atk]\nAsakura = [A_HP,A_Atk]\n\n    \nwhile True:    \n    Asakura[0] - Takahashi[1]\n    if Asakura[0] < 0:\n        print(\"Yes\")\n        exit()\n    \n    \n    Takahashi[0] - Asakura[1]\n    if Takahashi[0] < 0:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\n \n# X=ceil(C\/B)\u3068Y=ceil(A\/D)\u3092\u6bd4\u8f03\u3057\u3001X>=Y\u306a\u3089\u52dd\u3061\u3001X<Y\u306a\u3089\u8ca0\u3051\nX = (C+B-1) \/\/ B\nY = (A+D-1) \/\/ A\nif X >= Y: print('Yes')\nelse: print('No')","a, b, c, d = map(int, input().split())\n\ntakahashi = (a+d-1) \/\/ d\naoki = (c+b-1) \/\/ b\n\nif takahashi >= aoki:\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d = map(int, input().split())\nwhile a > 0 and c > 0:\n    c -= b\n    if c <= 0:\n        print(\"Yes\")\n        exit()\n    a -= d\nprint(\"No\")","A, B, C, D = map(int, input().split())\nwhile A > 0 and C > 0:\n    C = C - B\n    if C <= 0:\n        break\n    else:\n        A = A - D\nif A <= 0:\n    ans = 'No'\nelse:\n    ans = 'Yes'\nprint(ans)\n","a,b,c,d = map(int,input().split())\nwhile True:\n    c -= b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a -= d\n    if a <=0:\n        print(\"No\")\n        break","a,b,c,d = map(int,input().split())\nwhile 1:\n    c -= b\n    if c <= 0:\n        print('Yes')\n        break\n    a -= d\n    if a <= 0:\n        print('No')\n        break","a,b,c,d=map(int,input().split())\nprint('YNeos'[-a\/\/d>-c\/\/b::2])","a, b, c, d = map(int, input().split())\nif c%b ==0 :\n    e = c\/\/d\nelse:\n    e = c\/\/d + 1\nif a%d ==0:\n    f = a\/\/d\nelse:\n    f = a\/\/d +2\nif f >e:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d =list(map(int,input().split()))\nwhile a>0:\n  a-=d\n  if a>0:\n    c-=d\n    if c<0:\n      print(\"Yes\")\n      exit()\nprint(\"No\")","A,B,C,D = map(int,input().split())\nwhile True:\n    C-=B\n    if C<=0:\n        print(\"Yes\")\n        break\n    A-=D\n    if A<=0:\n        print(\"No\")\n        break","import math\na, b, c, d = map(int, input().split())\nprint('Yes' if math.ceil((a\/d))>=math.ceil((c\/b)) else 'No')\n","a,b,c,d=map(int,input().split())\n\nwhile a > 0:\n    c = c-b\n    print(c)\n    if c < 0:\n        print('Yes')\n        exit()\n    a = a-d\nprint('No')","A, B, C, D = map(int,input().split())\nn = 0\nm = 0\n\nwhile C > 0:\n    n += 1\n    C -= B\n\nwhile A > 0:\n    m += 1\n    A -= D\n\nif n >= m:\n    print('No')\nelse:\n    print('Yes')\n","A,B,C,D = list(map(int,input().split()))\nwhile True:\n    C -= B\n    if C <= 0:\n        print('Yes')\n        break\n    else:\n        A -= D\n        if A <= 0:\n            print('No')\n            break","a,b,c,d = map(int,input().split())\nacnt = 0\nccnt = 0\nwhile a > 0:\n    a -= d\n    acnt += 1\n    # print(a)\n    # print(acnt)\nwhile c > 0:\n    c -= b\n    ccnt +=1\n    # print(c)\n    # print(ccnt)\nif acnt >= ccnt:\n    print(\"Yes\")\nelse:\n    print(\"No\")","As,Aa,Bs,Ba = map(int,input().split())\nNa = Bs\/\/Aa\nNb = As\/\/Ba\n\nif Na <= Nb:\n  print('Yes')\nelse:\n  print('No')","a, b, c, d = map(int, input().split())\ntak = -(-c\/\/b)\naok = -(-a\/\/d)\n\nif tak > aok:\n  print(\"No\")\nelse:\n  print(\"Yes\")","A, B, C, D = map(int, input().split())\nwhile A <= 0:\n  A = A - D\nwhile C <= 0:\n  C = C - B\nif A >= C:\n  print(\"Yes\")\nelse:\n  print(\"No\")","import math\na, b, c, d = map(int, input().split())\n\ntaka = math.ceil(c\/b)\nao = math.ceil(a\/d)\n\nprint(taka, ao)\nis_true = True\nif taka < ao:\n    is_true = True\nelif taka > ao:\n    is_true = False\nelse:\n    if b > d:\n        is_true = False\n\nif is_true:\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d = map(int,input().split())\n\nwhile (b<=0) or (d<=0):\n  if d>0:\n    d -= a\n    if d<=0:\n      print(\"Yes\")\n    else:\n      pass\n    \n  elif b>0:\n    b -= c\n    if b<=0:\n      print(\"No\")\n    else:\n      pass","A,B,C,D = map(int, input().split())\nt_ta=0\nt_aa=0\n\ntatk = C\/\/B\ntss = C % B\n\naatk = A\/\/D\nass = A % D\n\nif tss == 0:\n    t_ta = tatk\nelse: \n    t_ta = tatk+1\n    \nif ass ==0:\n    t_aa = aatk\nelse:\n    t_aa = aatk+1\n    \nif t_ta -t_aa >0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","from sys import setrecursionlimit, exit\nsetrecursionlimit(1000000000)\n\ndef main():\n    a, b, c, d = map(int ,input().split())\n    while a > 0 and c > 0:\n        c -= b\n        if c <= 0:\n            print('Yes')\n            break\n        a -= d\n        if a <= 0:\n            print('No')\n\nmain()","a, b, c, d = map(int, input().split())\n\nwhile True:\n    c -= b\n    if c <= 0:\n        ans = \"Yes\"\n        break\n    a -= d\n    if a <= 0:\n        ans = \"No\"\n        break\n\nprint(ans)\n","a,b,c,d=map(int, input().split())\nwhile True:\n  b -= c\n  if c<=0:\n    print(\"Yes\")\n    break\n  a -=d\n  if a<=0:\n    print(\"No\")\n    break\n","import math\na,b,c,d =map(int,input().split())\n\nif math.ceil(a\/b) >= math.ceil(c\/d):\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d = map(int,input().split())\n\nfor i in range(111111):\n  c -= b\n  if c <= 0:\n    print('Yes')\n    exit()\n  a -= d\n  if a <= 0:\n    print('No') \n    exit()","a, b, c, d = map(int, input().split())\nwhile True:\n    a -= d\n    c -= b\n    if a <= 0 or c <= 0:\n        break\nprint('Yes' if c <= 0 else 'No')","a, b, c, d = map(int, input().split())\n\nwhile a > 0 or c > 0:\n    c = c - b\n    if c <= 0:\n        print(\"Yes\")\n        exit(0)\n    a = a - d\n    if a <= 0:\n        print(\"No\")\n        exit(0)\n","import math\n\na,b,c,d = map(int, input().split())\n\nwhile(a>0 and c>0):\n    c-=b\n    a-=d\n\nif(c<=0):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","A, B, C, D = map(int, input().split())\nturn = 0\nwhile (turn := turn + 1) and ((C := C - B) if turn & 1 else (A := A - D)) > 0: pass\nprint(\"Yes\" if turn & 1 else \"No\")\n","A,B,C,D = map(int,input().split())\n\nif -A\/\/D<=-C\/\/B:\n  print(\"Yes\")\nelse:\n  print(\"No\")","\nA, B, C, D = map(int, input().split())\n\nm = C \/\/ B  # \u9752\u6728\u541b\u306e\u8010\u3048\u3046\u308b\u30bf\u30fc\u30f3\nif C % B != 0:\n    m = m + 1\n\nn = A \/\/ D  # \u9ad8\u6a4b\u541b\u306e\u8010\u3048\u3046\u308b\u30bf\u30fc\u30f3\nif A % D != 0:\n    n = n + 1\n\nif n >= m:\n    print('Yes')\nelse:\n    print('No')\n","A,B,C,D=map(int,input().split())\na=A\/D\nb=C\/B\nprint(a,b)\nif a+1\/b>=b:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","a,b,c,d=map(int,input().split())\nimport math\n\nif math.ceil(c\/b)>=math.ceil(a\/d):\n    print('Yes')\nelse:\n    print('No')","A, B, C, D = map(int, input().split())\n\nif C\/\/B == A\/\/D:\n  if C%B > A%D:\n    print('No')\n  else:\n    print('Yes')  \nelse:\n  if C\/\/B > A\/\/D:\n    if C\/\/B - A\/\/D = 1:\n      print('Yes')\n    else:\n      print('No')  \n  elif C\/\/B < A\/\/D:  \n    if A\/\/D - C\/\/B = 1:\n      print('Yes')\n    else:\n      print('No')","a,b,c,d = map(int,input().split())\nwhile a > 0 and c > 0:\n  c -= b\n  if c <= 0:\n    break\n  a -= d\nif a > 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")","a, b, c, d = map(int, input().split())\nflg1 = False\nflg2 = False\nwhile True:\n    c -= b\n    a -= d\n    if c <= 0:\n        flg1 = True\n    if a <= 0:\n        flg2 = True\n\n    if flg1:\n        print(\"Yes\")\n        exit()\n    if flg2:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\nwhile C > 0 :\n  C = C - B\n  A = A -D\n  if A < 0:\n  print('No')  \n  break\n  \nprint('Yes')","a, b, c, d = map(int, input().split())\nfor i in range(10**9 + 7):\n    c -= b\n    if c <= 0:\n        print('Yes')\n        break\n    a -= d\n    if a <= 0:\n        print('No')\n        break\n        ","import sys\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline\nfrom itertools import permutations,  combinations, accumulate\nfrom functools import *\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heapify, heappop, heappush, heappushpop\n\nINF = float('inf')\nNIL = - 1\n\n\"\"\" Input\nS = input().rstrip()\nN = int(input())\nA = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.float64)\nD = [int(input()) for _ in range(N)]\nAB = [[int(x) for x in input().split()] for _ in range(N)]\nPX = [[int(x) for x in input().split()] for _ in range(Q)]\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nwhile True:\n    C -= B\n    if C < 0:\n        print('No')\n        break\n    A -= D\n    if A < 0:\n        print('Yes')\n        break\n\n\n\n\n\n\n\n# def main():\n\n# if __name__ == '__main__':\n#     main()\n","a, b, c, d = map(int, input().split())\n\nwhile c or a >= 0:\n    c -= b\n    a -= b\n    if c <= 0:\n        print('Yes')\n        break\n    if a <= 0:\n        print('No')","import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA,B,C,D = map(int, readline().split())\n\n\nwhile True:\n  C -= B\n  if C <= 0:\n    print('Yes')\n    break\n  A -= D\n  if A <= 0:\n    print('No')\n    break\n","a,b,c,d = map(int,input().split())\ny = (a-1)\/\/d\nn = (c-1)\/\/b\nif n > y:\n  print('No')\nelse:\n  print('Yes')","a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nwhile a>0 and c>0:\n  if c>0:\n    c += -b\n    \n  if c<=0:\n    break\n    print(\"Yes\")\n    \n  if a>0:\n    a += -d\n    \n  if a<=0:\n    break\n    print(\"No\")","a, b, c, d = map(int, input().split())\ni = 0\nr = ''\nwhile True:\n\tif i % 2 == 0:\n\t\tc -= b\n\t\tif c <= 0:\n\t\t\tr = 'Yes'\n\t\t\tbreak\n\telse:\n\t\ta -= d\n\t\tif a <= 0:\n\t\t\tr = 'No'\n\t\t\tbreak\n\ti += 1\nprint(r)","a, b, c, d = map(int, input().split())\ntakahashi_attack = c \/\/ b\naoki_attack = a \/\/ d\nif c % b != 0:\n    takahashi_attack += 1\nif a % d != 0:\n    aoki_attack += 1\nif takahashi_attack <= aoki_attack:\n    print('Yes')\nelse:\n    print('No')"],"formatted_programs":["# B - Battle\nA,B,C,D = map(int,input().split())\nans = ['No', 'Yes']\ntakahashi = (C-1)\/\/B + 1\naoki = (A-1)\/\/D + 1\nprint(ans[takahashi<=aoki])","TaHP,TaAP,AoHP,AoAP = map(int, input().split())\n\nFlag_Ta = True\n\nwhile( TaHP >= 0 or AoHP >= 0):\n\tif\tFlag_Ta:\n\t\tAoHP = AoHP - TaAP\n\t\tFlag_Ta = False\n\telse:\n\t\tTaHP = TaHP - AoAP\n\t\tFlag_Ta = True\nif TaHP >= 0:\n\tprint(\"Yes\")\nelse:\n    print(\"No\")","A, B, C, D = map(int, input().split(' '))\ntakahashi_dead_count = int(A \/ D) + 1\naoki_dead_count = int(C \/ B) + 1\n\nif takahashi_dead_count >= aoki_dead_count:\n    print('Yes')\nelse:\n    print('No')","import math\nA, B, C, D = input().split()\n \nif math.ceil(int(C)*1.0\/(int(B)*1.0)) >= math.ceil(int(A)*1.0\/(int(D)*1.0)):\n  print(\"Yes\")\nelse:\n  print(\"No\")","a,b,c,d=map(int,input().split())\na=a-d\nc=c-b\nif a<=0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A,B,C,D=map(int,input().split())\nwhile A>0 and C>0:\n  C-=B\n  A-=D\nif A<=0 and C<=0:\n  print(\"Yes\")\nelif A<=0:\n  print(\"No\")\nelse:\n  print(\"Yes\")","a, b, c, d = map(int, input().split())\ntakaturn = 0\nwhile (a > 0 and c > 0):\n  takaturn += 1\n  takaturn %= 2\n  if takaturn:\n    c -= b\n  else:\n    a -= d\nif takaturn:\n  print(\"Yes\")\nelse:\n  print(\"No\")","#https:\/\/atcoder.jp\/contests\/abc164\/tasks\/abc164_b\nA,B,C,D = map(int,input().split())\nSenkou_N,Senkou_Amari = divmod(C,B)\nif Senkou_Amari != 0:\n    Senkou_N += 1\nKoukou_N,Koukou_Amari = divmod(A,D)\nif Koukou_Amari != 0:\n    Koukou_N += 1\n\nif Senkou_N <= Koukou_N:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a, b, c, d = map(int, input().split())\n\nif c - b <= 0:\n    print(\"Yes\")\n\nelif a - d <= 0:\n    print(\"No\")\n","\na, b, c, d = map(int, input().split())\n\ncnt1 = 0\ncnt2 = 0\n\nwhile a > 0:\n\ta -= d\n\tcnt1 += 1\n\nwhile c >0:\n\tc -= b\n\tcnt2 += 1\n\nprint('Yes') if cnt1 >= cnt2 else print('No')","A,B,C,D = map(int, input().split())\nE = A-B\nF = D-C\nif E > F:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A,B,C,D=map(int,input().split())\natA=0\natC=0\nwhile(A>0):\n    A-=D \n    atA+=1 \nwhile(C>0):\n    C-=B \n    atC+=1\n#print(atA,atC)\nif(atA>=atC):\n    print('Yes')\nelse:\n    print('No')","A,B,C,D = list(map(int,input().split(\" \")))\nS,T = [0,0]\n\nif A%D != 0:\n  S +=1\nif C%B != 0:\n  T += 1\nif C\/\/B + T <= A\/\/D + S:\n  print(\"Yes\")\nelse:\n  print(\"No\")","from sys import stdin\ndef main():\n    #\u5165\u529b\n    readline=stdin.readline\n    a,b,c,d=map(int,readline().split())\n    flag=0\n    while a>=1 and c>=1:\n        if flag==0:\n            c-=b\n            flag=1\n        else:\n            a-=d\n            flag=0\n    \n    if a>0:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n\nif __name__==\"__main__\":\n    main()","A,B,C,D = map(int,input().split())\nwhile A > 0 and C > 0:\n  C -= B\n  if C <= 0:\n    break\n  A -= D\n  print(A,C)\nif A <= 0:\n  print('No')\nelse:\n  print('Yes')","from math import ceil\nA,B,C,D = list(map(int, input().split()))\nE = ceil(A\/C)\nF = ceil(D\/B)\nif F >= E:\n    print('Yes')\n\nelse:\n    print('No')","#!\/usr\/bin\/env python3\nfrom collections import defaultdict,deque\nfrom heapq import heappush, heappop\nfrom bisect import bisect_left, bisect_right\nimport sys, random, itertools, math\nsys.setrecursionlimit(10**5)\ninput = sys.stdin.readline\nsqrt = math.sqrt\ndef LI(): return list(map(int, input().split()))\ndef LF(): return list(map(float, input().split()))\ndef LI_(): return list(map(lambda x: int(x)-1, input().split()))\ndef II(): return int(input())\ndef IF(): return float(input())\ndef S(): return input().rstrip()\ndef LS(): return S().split()\ndef IR(n): return [II() for _ in range(n)]\ndef LIR(n): return [LI() for _ in range(n)]\ndef FR(n): return [IF() for _ in range(n)]\ndef LFR(n): return [LI() for _ in range(n)]\ndef LIR_(n): return [LI_() for _ in range(n)]\ndef SR(n): return [S() for _ in range(n)]\ndef LSR(n): return [LS() for _ in range(n)]\nmod = 1000000007\ninf = float(\"INF\")\n\n#solve\ndef solve():\n    a, b, c, d = LI()\n    print(\"Yes\" if (c-1)\/\/b + 1 >= (a-1)\/\/d + 1 else \"No\")\n    return\n\n\n#main\nif __name__ == '__main__':\n    solve()\n","A, B, C, D = map(int, input().split())\n\nwhile A > 0 and C > 0:\n    C -= B\n    if C <= 0:\n        break\n    A -= D\nprint(\"Yes\" if A > 0 else \"No\")","a,b,c,d = map(int,input().split())\n\nwhile(True):\n    c = c - b\n    if(c <= 0):\n        print(\"Yes\")\n        exit()\n    a = a - d\n    if(a <= 0):\n        print(\"No\")\n        exit()\n    ","import math\nA, B, C, D = map(int, input().split())\nwhile True:\n    C -= B\n    if C <= 0:\n        print(\"Yes\")\n        exit()\n    A -= D\n    if A <= 0:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\nif C\/B <= A\/D || C\/B <= 1:\n\tprint(\"Yes\")\nelse:    \n\tprint(\"No\")","a,b,c,d=map(int,input().split())\nfor i in range(1000):\n    c-=b\n    if c<=0:\n        print(\"Yes\")\n        exit()\n    a-=d\n    if a<=0:\n        print(\"No\")\n        exit()\n","a,b,c,d=map(int,input().split())\n\nif a+b>=c+d:\n    print(\"yes\")\nelse:\n    print(\"no\")","A,B,C,D = map(int,input().split())\n\nif C\/\/B >= D\/\/B:\n    print('Yes')\nelse:\n    print('No')","import sys\na,b,c,d = map(int,input().split())\nfor i in range(100):\n    if i % 2 == 0:\n        c -= b\n        if c <= 0:\n            print(\"Yes\")\n            sys.exit()\n    else:\n        a -= d\n        if a <= 0:\n            print(\"No\")\n            sys.exit()","from math import ceil\na,b,c,d=map(int,input().split())\ncnt1=ceil(c\/b)\ncnt2=ceil(a\/d)\nif cnt1<=cnt2:\n    print(\"yes\")\nelse:\n    print(\"No\")","#!\/usr\/bin\/env python3\n\ndef solve(a: int, b: int, c: int, d: int) -> bool:\n    while True:\n        c -= b\n        if c <= 0:\n            return True\n        a -= d\n        if a <= 0:\n            return False\n\n# generated by online-judge-template-generator v4.1.0 (https:\/\/github.com\/kmyk\/online-judge-template-generator)\ndef main():\n    A, B, C, D = map(int, input().split())\n    ans = solve(A, B, C, D)\n    print(ans and 'Yes' or 'No')\n\nif __name__ == '__main__':\n    main()\n","A, B, C, D = map(int, input().split())\n\nflag = 0\nwhile flag == 0:\n    if C - B <= 0:\n        print(\"Yes\")\n        break\n    C -= B\n    if A - D <= 0:\n        print(\"No\")\n        break\n    A -= D\n","a,b,c,d=map(int,input().split())\nx=float(a-1\/d)\ny=float(c-1\/b)\n\nif x>=y:\n  print(\"yes\")\nelse:\n  print(\"no\")","a, b, c, d = map(int, input().split())\nwhile True:\n    a -= d\n    if a <= 0:\n        print('No')\n        break\n    c = -b\n    if c <= 0:\n        print('Yes')\n        break\n","a, b, c, d = map(int, input().split())\n\nif a \/\/ d + (1 if a%d>0 else 0) >= c \/\/ b + (1 if c%b>0 else 0):\n  print(\"Yes\")\nelse:\n  print(\"No\")","a, b, c, d = list(map(int, input().split())) \nx = int((a+d-1)\/d)\ny = int((c+b-1)\/b)\nprint(\"Yes\" if x >= y  else \"No\")","def n0():return int(input())\ndef n1():return [int(x) for x in input().split()]\ndef n2(n):return [int(input()) for _ in range(n)]\ndef n3(n):return [[int(x) for x in input().split()] for _ in range(n)]\n\na,b,c,d=n1()\n\nwhile True:\n    c=c-b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a=a-d\n    if a<=0:\n        print(\"No\")\n        break","import math\na,b,c,d=map(int,input().split())\na1,a2=0,0\nif(c%b==0):\n\ta1=math.floor(c\/b)\nelse:\n\ta1=math.floor(c\/b)+1\t\nif(a%d==0):\n\ta2=math.floor(a\/d)\nelse:\n\ta2=math.floor(a\/d)+1\n\t# print(a1,a2)\nif(a1>a2):\n\tprint(\"No\")\nelse:\n\tprint(\"Yes\")","import sys\nsys.setrecursionlimit(10 ** 6)\n# input = sys.stdin.readline    ####\nint1 = lambda x: int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\nINF = float('inf')\n\ndef solve():\n    a, b, c, d = MI()\n\n    for i in range(1000000):\n        c -= b\n        if c <= 0:\n            print('Yes')\n            return\n        a -= d\n        if a <= 0:\n            print('No')\n            return\n\n\nif __name__ == '__main__':\n    solve()\n","a, b, c, d = map(int, input().split())\nwhile c >0:\n  a -= d\n  c -= b\n  \nif c < 0:\n  print(\"No\")\nelse:\n  print(\"Yes\")","a, b, c, d = map(int, input().split())\nwhile True:\n\tc -= b\n\tif c <= 0:\n\t\tprint(\"Yes\")\n\t\tbreak\n\ta -= d\n\tif a <= 0:\n\t\tprint(\"No\")\n\t\tbreak","x = list(map(int, input(\"Enter a multiple value: \").split()))\nfor i in x:\n    x[1] -= x[2]\n    x[0] -= x[3]\nif x[0]<0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","A,B,C,D = map(int,input().split(' '))\ncount1 = 0\nwhile A > 0:#\u5148\u653b\u9ad8\u6a4b\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u6b7b\u306c\u307e\u3067\u306e\u56de\u6570\n    A -= D\n    count1 += 1\ncount2 = 0\nwhile C > 0:#\u5f8c\u653b\u9752\u6728\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u6b7b\u306c\u307e\u3067\u306e\u56de\u6570\n    C -= B\n    count\uff12 += 1 \nif count1>count2:\n    #\u9752\u6728\u306e\u30e2\u30f3\u30b9\u30bf\u30fc\u304c\u5148\u6b7b\u3093\u3060\u2192\u9ad8\u6a4b\u306e\u52dd\u3061\n    print('Yes')\nelif count1<count2:\n    print(\"No\")\nelif count1 == count2:\n    print(\"Yes\")","N=[int(x) for x in input().split()]\nif not N[2]%N[1]==0:\n   c=N[2]\/\/N[1]+1\nelse:\n    c=N[2]\/\/N[1]\nif not N[0]%N[3]==0:\n   c=N[0]\/\/N[3]+1\n\n   d=N[0]\/\/N[3]+1\nelse:\n    d=N[0]\/\/N[3]\nif d>=c+1:\n    print(\"Yes\")\nelse:\n    print(\"No\")","A, B, C, D = map(int, input().split())\n\nwhile True:\n    C -= B\n    if C <= 0:\n        print('Yes')\n        exit(0)\n\n    A -= D\n    if A <= 0:\n        print('No')\n        exit(0)\n","a, b, c, d = map(int, input().split())\nA = c\nT = a\nwhile(A > 0 and T > 0):\n  A -= b\n  T -= d\nif A <= 0:\n  print('Yes')\nelse:\n  print('No')\n\t\n  \n  ","a,b,c,d=map(int,input().split())\nfor _ in range(101):\n    c=c-b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a=a-d\n    if a<=0:\n        print(\"No\")\n        break","def ceiling(a, b):\n    return int((a + b - 1) \/ b)\n\n\na, b, c, d = map(int, input().split())\nif(ceiling(c, b) <= ceiling(a, d)): print('Yes')\nelse: print('No')\n","ms=[int(x) for x in input().split(' ')]\nt=[ms[0],ms[1]]\na=[ms[2],ms[3]]\nwhile True:\n    a[0]-=t[1]\n    if a[0]<1:\n        print(\"Yes\")\n        break\n    t[0]-=a[1]\n    if t[0]<1:\n        print('No')\n        break\n","A,B,C,D = map(int, input().split())\n\nif C\/B <= A\/D:\n    print(\"Yes\")\n\nelse:\n    print(\"No\")","A,B,C,D = map(int,input().split())\nfor cnt in range(100):\n  C = C - B\n  if C <= 0:\n    print(\"Yes\")\n    break\n  A = A - D\n  if A <= 0:\n    print(\"No\")\n    break","a, b, c, d = map(int, input().split())\nwhile a > 0 and c > 0:\n  c -= b\n  if c > 0:\n    a -= d\n  else:\n    print('Yes')\n  if a > 0:\n    break\n  else:\n    print('No')\n","a,b,c,d = map(int,input().split(\" \"))\nwhile True:\n  c -= b\n  if c <= 0:\n    print(\"Yes\")\n    exit()\n  a -= d\n  if a <= 0:\n    print(\"No\")\n    exit()","A, B, C, D = map(int, input().split())\n\n# while A > 0 and B > 0:\n#     print(A, C)\n#     C -= B\n#     if B <= 0:\n#         print(\"Yes\")\n#         break\n#     A -= D\n#     if A <= 0:\n#         print(\"No\")\n#         break\n\nimport math\n# print(math.ceil(A \/ D), math.ceil(C \/ B))\nif math.ceil(A \/ D) >= math.ceil(C \/ B):\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d=map(int,input().split())\ncheck=True\nwhile True:\n    if check:\n        c-=b\n        if c<=0:\n            print(\"Yes\")\n            break\n    else:\n        a-=d\n        if a<=0:\n            print(\"No\")\n            break\n    check=not check","import math\na, b, c, d = map(int, input().split())\n\nif math.ceil(c \/ b) <= math.ceil(a \/ d):\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d= map(int,input().split())\nwhile a>0 and c>0:\n  c -= b\n  if c<=0:\n    print('Yes')\n    break\n  a -= d\n  if a<=0:\n    print('No')\n    break\n","T_HP,T_Atk,A_HP,A_Atk = map(int,input().split())\n\nTakahashi = [T_HP,T_Atk]\nAsakura = [A_HP,A_Atk]\n\n    \nwhile True:    \n    Asakura[0] - Takahashi[1]\n    if Asakura[0] < 0:\n        print(\"Yes\")\n        exit()\n    \n    \n    Takahashi[0] - Asakura[1]\n    if Takahashi[0] < 0:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\n \n# X=ceil(C\/B)\u3068Y=ceil(A\/D)\u3092\u6bd4\u8f03\u3057\u3001X>=Y\u306a\u3089\u52dd\u3061\u3001X<Y\u306a\u3089\u8ca0\u3051\nX = (C+B-1) \/\/ B\nY = (A+D-1) \/\/ A\nif X >= Y: print('Yes')\nelse: print('No')","a, b, c, d = map(int, input().split())\n\ntakahashi = (a+d-1) \/\/ d\naoki = (c+b-1) \/\/ b\n\nif takahashi >= aoki:\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d = map(int, input().split())\nwhile a > 0 and c > 0:\n    c -= b\n    if c <= 0:\n        print(\"Yes\")\n        exit()\n    a -= d\nprint(\"No\")","A, B, C, D = map(int, input().split())\nwhile A > 0 and C > 0:\n    C = C - B\n    if C <= 0:\n        break\n    else:\n        A = A - D\nif A <= 0:\n    ans = 'No'\nelse:\n    ans = 'Yes'\nprint(ans)\n","a,b,c,d = map(int,input().split())\nwhile True:\n    c -= b\n    if c<=0:\n        print(\"Yes\")\n        break\n    a -= d\n    if a <=0:\n        print(\"No\")\n        break","a,b,c,d = map(int,input().split())\nwhile 1:\n    c -= b\n    if c <= 0:\n        print('Yes')\n        break\n    a -= d\n    if a <= 0:\n        print('No')\n        break","a,b,c,d=map(int,input().split())\nprint('YNeos'[-a\/\/d>-c\/\/b::2])","a, b, c, d = map(int, input().split())\nif c%b ==0 :\n    e = c\/\/d\nelse:\n    e = c\/\/d + 1\nif a%d ==0:\n    f = a\/\/d\nelse:\n    f = a\/\/d +2\nif f >e:\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d =list(map(int,input().split()))\nwhile a>0:\n  a-=d\n  if a>0:\n    c-=d\n    if c<0:\n      print(\"Yes\")\n      exit()\nprint(\"No\")","A,B,C,D = map(int,input().split())\nwhile True:\n    C-=B\n    if C<=0:\n        print(\"Yes\")\n        break\n    A-=D\n    if A<=0:\n        print(\"No\")\n        break","import math\na, b, c, d = map(int, input().split())\nprint('Yes' if math.ceil((a\/d))>=math.ceil((c\/b)) else 'No')\n","a,b,c,d=map(int,input().split())\n\nwhile a > 0:\n    c = c-b\n    print(c)\n    if c < 0:\n        print('Yes')\n        exit()\n    a = a-d\nprint('No')","A, B, C, D = map(int,input().split())\nn = 0\nm = 0\n\nwhile C > 0:\n    n += 1\n    C -= B\n\nwhile A > 0:\n    m += 1\n    A -= D\n\nif n >= m:\n    print('No')\nelse:\n    print('Yes')\n","A,B,C,D = list(map(int,input().split()))\nwhile True:\n    C -= B\n    if C <= 0:\n        print('Yes')\n        break\n    else:\n        A -= D\n        if A <= 0:\n            print('No')\n            break","a,b,c,d = map(int,input().split())\nacnt = 0\nccnt = 0\nwhile a > 0:\n    a -= d\n    acnt += 1\n    # print(a)\n    # print(acnt)\nwhile c > 0:\n    c -= b\n    ccnt +=1\n    # print(c)\n    # print(ccnt)\nif acnt >= ccnt:\n    print(\"Yes\")\nelse:\n    print(\"No\")","As,Aa,Bs,Ba = map(int,input().split())\nNa = Bs\/\/Aa\nNb = As\/\/Ba\n\nif Na <= Nb:\n  print('Yes')\nelse:\n  print('No')","a, b, c, d = map(int, input().split())\ntak = -(-c\/\/b)\naok = -(-a\/\/d)\n\nif tak > aok:\n  print(\"No\")\nelse:\n  print(\"Yes\")","A, B, C, D = map(int, input().split())\nwhile A <= 0:\n  A = A - D\nwhile C <= 0:\n  C = C - B\nif A >= C:\n  print(\"Yes\")\nelse:\n  print(\"No\")","import math\na, b, c, d = map(int, input().split())\n\ntaka = math.ceil(c\/b)\nao = math.ceil(a\/d)\n\nprint(taka, ao)\nis_true = True\nif taka < ao:\n    is_true = True\nelif taka > ao:\n    is_true = False\nelse:\n    if b > d:\n        is_true = False\n\nif is_true:\n    print('Yes')\nelse:\n    print('No')\n","a,b,c,d = map(int,input().split())\n\nwhile (b<=0) or (d<=0):\n  if d>0:\n    d -= a\n    if d<=0:\n      print(\"Yes\")\n    else:\n      pass\n    \n  elif b>0:\n    b -= c\n    if b<=0:\n      print(\"No\")\n    else:\n      pass","A,B,C,D = map(int, input().split())\nt_ta=0\nt_aa=0\n\ntatk = C\/\/B\ntss = C % B\n\naatk = A\/\/D\nass = A % D\n\nif tss == 0:\n    t_ta = tatk\nelse: \n    t_ta = tatk+1\n    \nif ass ==0:\n    t_aa = aatk\nelse:\n    t_aa = aatk+1\n    \nif t_ta -t_aa >0:\n    print(\"No\")\nelse:\n    print(\"Yes\")","from sys import setrecursionlimit, exit\nsetrecursionlimit(1000000000)\n\ndef main():\n    a, b, c, d = map(int ,input().split())\n    while a > 0 and c > 0:\n        c -= b\n        if c <= 0:\n            print('Yes')\n            break\n        a -= d\n        if a <= 0:\n            print('No')\n\nmain()","a, b, c, d = map(int, input().split())\n\nwhile True:\n    c -= b\n    if c <= 0:\n        ans = \"Yes\"\n        break\n    a -= d\n    if a <= 0:\n        ans = \"No\"\n        break\n\nprint(ans)\n","a,b,c,d=map(int, input().split())\nwhile True:\n  b -= c\n  if c<=0:\n    print(\"Yes\")\n    break\n  a -=d\n  if a<=0:\n    print(\"No\")\n    break\n","import math\na,b,c,d =map(int,input().split())\n\nif math.ceil(a\/b) >= math.ceil(c\/d):\n    print(\"Yes\")\nelse:\n    print(\"No\")","a,b,c,d = map(int,input().split())\n\nfor i in range(111111):\n  c -= b\n  if c <= 0:\n    print('Yes')\n    exit()\n  a -= d\n  if a <= 0:\n    print('No') \n    exit()","a, b, c, d = map(int, input().split())\nwhile True:\n    a -= d\n    c -= b\n    if a <= 0 or c <= 0:\n        break\nprint('Yes' if c <= 0 else 'No')","a, b, c, d = map(int, input().split())\n\nwhile a > 0 or c > 0:\n    c = c - b\n    if c <= 0:\n        print(\"Yes\")\n        exit(0)\n    a = a - d\n    if a <= 0:\n        print(\"No\")\n        exit(0)\n","import math\n\na,b,c,d = map(int, input().split())\n\nwhile(a>0 and c>0):\n    c-=b\n    a-=d\n\nif(c<=0):\n    print(\"Yes\")\nelse:\n    print(\"No\")\n","A, B, C, D = map(int, input().split())\nturn = 0\nwhile (turn := turn + 1) and ((C := C - B) if turn & 1 else (A := A - D)) > 0: pass\nprint(\"Yes\" if turn & 1 else \"No\")\n","A,B,C,D = map(int,input().split())\n\nif -A\/\/D<=-C\/\/B:\n  print(\"Yes\")\nelse:\n  print(\"No\")","\nA, B, C, D = map(int, input().split())\n\nm = C \/\/ B  # \u9752\u6728\u541b\u306e\u8010\u3048\u3046\u308b\u30bf\u30fc\u30f3\nif C % B != 0:\n    m = m + 1\n\nn = A \/\/ D  # \u9ad8\u6a4b\u541b\u306e\u8010\u3048\u3046\u308b\u30bf\u30fc\u30f3\nif A % D != 0:\n    n = n + 1\n\nif n >= m:\n    print('Yes')\nelse:\n    print('No')\n","A,B,C,D=map(int,input().split())\na=A\/D\nb=C\/B\nprint(a,b)\nif a+1\/b>=b:\n    print(\"No\")\nelse:\n    print(\"Yes\")\n","a,b,c,d=map(int,input().split())\nimport math\n\nif math.ceil(c\/b)>=math.ceil(a\/d):\n    print('Yes')\nelse:\n    print('No')","A, B, C, D = map(int, input().split())\n\nif C\/\/B == A\/\/D:\n  if C%B > A%D:\n    print('No')\n  else:\n    print('Yes')  \nelse:\n  if C\/\/B > A\/\/D:\n    if C\/\/B - A\/\/D = 1:\n      print('Yes')\n    else:\n      print('No')  \n  elif C\/\/B < A\/\/D:  \n    if A\/\/D - C\/\/B = 1:\n      print('Yes')\n    else:\n      print('No')","a,b,c,d = map(int,input().split())\nwhile a > 0 and c > 0:\n  c -= b\n  if c <= 0:\n    break\n  a -= d\nif a > 0:\n  print(\"Yes\")\nelse:\n  print(\"No\")","a, b, c, d = map(int, input().split())\nflg1 = False\nflg2 = False\nwhile True:\n    c -= b\n    a -= d\n    if c <= 0:\n        flg1 = True\n    if a <= 0:\n        flg2 = True\n\n    if flg1:\n        print(\"Yes\")\n        exit()\n    if flg2:\n        print(\"No\")\n        exit()\n","A, B, C, D = map(int, input().split())\nwhile C > 0 :\n  C = C - B\n  A = A -D\n  if A < 0:\n  print('No')  \n  break\n  \nprint('Yes')","a, b, c, d = map(int, input().split())\nfor i in range(10**9 + 7):\n    c -= b\n    if c <= 0:\n        print('Yes')\n        break\n    a -= d\n    if a <= 0:\n        print('No')\n        break\n        ","import sys\nsys.setrecursionlimit(10 ** 9)\ninput = sys.stdin.readline\nfrom itertools import permutations,  combinations, accumulate\nfrom functools import *\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heapify, heappop, heappush, heappushpop\n\nINF = float('inf')\nNIL = - 1\n\n\"\"\" Input\nS = input().rstrip()\nN = int(input())\nA = list(map(int, input().split()))\nA = np.array(input().split(), dtype=np.float64)\nD = [int(input()) for _ in range(N)]\nAB = [[int(x) for x in input().split()] for _ in range(N)]\nPX = [[int(x) for x in input().split()] for _ in range(Q)]\n\"\"\"\n\nA, B, C, D = map(int, input().split())\n\nwhile True:\n    C -= B\n    if C < 0:\n        print('No')\n        break\n    A -= D\n    if A < 0:\n        print('Yes')\n        break\n\n\n\n\n\n\n\n# def main():\n\n# if __name__ == '__main__':\n#     main()\n","a, b, c, d = map(int, input().split())\n\nwhile c or a >= 0:\n    c -= b\n    a -= b\n    if c <= 0:\n        print('Yes')\n        break\n    if a <= 0:\n        print('No')","import sys\n\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nA,B,C,D = map(int, readline().split())\n\n\nwhile True:\n  C -= B\n  if C <= 0:\n    print('Yes')\n    break\n  A -= D\n  if A <= 0:\n    print('No')\n    break\n","a,b,c,d = map(int,input().split())\ny = (a-1)\/\/d\nn = (c-1)\/\/b\nif n > y:\n  print('No')\nelse:\n  print('Yes')","a = int(input())\nb = int(input())\nc = int(input())\nd = int(input())\n\nwhile a>0 and c>0:\n  if c>0:\n    c += -b\n    \n  if c<=0:\n    break\n    print(\"Yes\")\n    \n  if a>0:\n    a += -d\n    \n  if a<=0:\n    break\n    print(\"No\")","a, b, c, d = map(int, input().split())\ni = 0\nr = ''\nwhile True:\n\tif i % 2 == 0:\n\t\tc -= b\n\t\tif c <= 0:\n\t\t\tr = 'Yes'\n\t\t\tbreak\n\telse:\n\t\ta -= d\n\t\tif a <= 0:\n\t\t\tr = 'No'\n\t\t\tbreak\n\ti += 1\nprint(r)","a, b, c, d = map(int, input().split())\ntakahashi_attack = c \/\/ b\naoki_attack = a \/\/ d\nif c % b != 0:\n    takahashi_attack += 1\nif a % d != 0:\n    aoki_attack += 1\nif takahashi_attack <= aoki_attack:\n    print('Yes')\nelse:\n    print('No')"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>400<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Given is a string <var>S<\/var>. Each character in <var>S<\/var> is either a digit (<code>0<\/code>, ..., <code>9<\/code>) or <code>?<\/code>.<\/p>\n<p>Among the integers obtained by replacing each occurrence of <code>?<\/code> with a digit, how many have a remainder of <var>5<\/var> when divided by <var>13<\/var>? An integer may begin with <var>0<\/var>.<\/p>\n<p>Since the answer can be enormous, print the count modulo <var>10^9+7<\/var>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3>\n<ul>\n<li><var>S<\/var> is a string consisting of digits (<code>0<\/code>, ..., <code>9<\/code>) and <code>?<\/code>.<\/li>\n<li><var>1 \\leq |S| \\leq 10^5<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3>\n<p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>S<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3>\n<p>Print the number of integers satisfying the condition, modulo <var>10^9+7<\/var>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>??2??5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>768\n<\/pre>\n<p>For example, <var>482305, 002865,<\/var> and <var>972665<\/var> satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>?44\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>1\n<\/pre>\n<p>Only <var>044<\/var> satisfies the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>7?4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>0\n<\/pre>\n<p>We may not be able to produce an integer satisfying the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4<\/h3><pre>?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4<\/h3><pre>153716888\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 400 points\n\n\nProblem StatementGiven is a string S. Each character in S is either a digit (0, ..., 9) or ?.\nAmong the integers obtained by replacing each occurrence of ? with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\nSince the answer can be enormous, print the count modulo 10^9+7.\n\n\n\n\nConstraints\n\nS is a string consisting of digits (0, ..., 9) and ?.\n1 \\leq |S| \\leq 10^5\n\n\n\n\n\n\n\nInput\nInput is given from Standard Input in the following format:\nS\n\n\n\n\n\nOutput\nPrint the number of integers satisfying the condition, modulo 10^9+7.\n\n\n\n\n\n\nSample Input 1??2??5\n\n\n\n\n\nSample Output 1768\n\nFor example, 482305, 002865, and 972665 satisfy the condition.\n\n\n\n\n\nSample Input 2?44\n\n\n\n\n\nSample Output 21\n\nOnly 044 satisfies the condition.\n\n\n\n\n\nSample Input 37?4\n\n\n\n\n\nSample Output 30\n\nWe may not be able to produce an integer satisfying the condition.\n\n\n\n\n\nSample Input 4?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\n\n\n\n\n\nSample Output 4153716888\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>400<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Given is a string <var>S<\/var>. Each character in <var>S<\/var> is either a digit (<code>0<\/code>, ..., <code>9<\/code>) or <code>?<\/code>.<\/p>\n<p>Among the integers obtained by replacing each occurrence of <code>?<\/code> with a digit, how many have a remainder of <var>5<\/var> when divided by <var>13<\/var>? An integer may begin with <var>0<\/var>.<\/p>\n<p>Since the answer can be enormous, print the count modulo <var>10^9+7<\/var>.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3>\n<ul>\n<li><var>S<\/var> is a string consisting of digits (<code>0<\/code>, ..., <code>9<\/code>) and <code>?<\/code>.<\/li>\n<li><var>1 \\leq |S| \\leq 10^5<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3>\n<p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>S<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3>\n<p>Print the number of integers satisfying the condition, modulo <var>10^9+7<\/var>.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>??2??5\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>768\n<\/pre>\n<p>For example, <var>482305, 002865,<\/var> and <var>972665<\/var> satisfy the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>?44\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>1\n<\/pre>\n<p>Only <var>044<\/var> satisfies the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 3<\/h3><pre>7?4\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 3<\/h3><pre>0\n<\/pre>\n<p>We may not be able to produce an integer satisfying the condition.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 4<\/h3><pre>?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 4<\/h3><pre>153716888\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 400 points\n\n\nProblem StatementGiven is a string S. Each character in S is either a digit (0, ..., 9) or ?.\nAmong the integers obtained by replacing each occurrence of ? with a digit, how many have a remainder of 5 when divided by 13? An integer may begin with 0.\nSince the answer can be enormous, print the count modulo 10^9+7.\n\n\n\n\nConstraints\n\nS is a string consisting of digits (0, ..., 9) and ?.\n1 \\leq |S| \\leq 10^5\n\n\n\n\n\n\n\nInput\nInput is given from Standard Input in the following format:\nS\n\n\n\n\n\nOutput\nPrint the number of integers satisfying the condition, modulo 10^9+7.\n\n\n\n\n\n\nSample Input 1??2??5\n\n\n\n\n\nSample Output 1768\n\nFor example, 482305, 002865, and 972665 satisfy the condition.\n\n\n\n\n\nSample Input 2?44\n\n\n\n\n\nSample Output 21\n\nOnly 044 satisfies the condition.\n\n\n\n\n\nSample Input 37?4\n\n\n\n\n\nSample Output 30\n\nWe may not be able to produce an integer satisfying the condition.\n\n\n\n\n\nSample Input 4?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\n\n\n\n\n\nSample Output 4153716888\n\n\n","solve_rate":0.5221256039,"codenet_problem_id":"p02960","input_testcases":{"99":"8?3","95":"4?4","96":"?73","83":"4?3","84":"37?","48":"???1?6","94":"2?7","74":"8?4","91":"58?","47":"?56","88":"76?","76":"4?8","98":"?67","85":"5?4","70":"?74","44":"?47","86":"?64","93":"?65","90":"7?5","6":"54?","49":"?55","97":"45?","42":"?46","100":"?44","1":"??1??5","67":"?43","64":"4?7","79":"84?","92":"?48","82":"3?7","75":"5?5"},"output_testcases":{"99":"1\n","95":"1\n","96":"1\n","83":"1\n","84":"0\n","48":"769\n","94":"0\n","74":"1\n","91":"0\n","47":"1\n","88":"0\n","76":"1\n","98":"1\n","85":"1\n","70":"1\n","44":"1\n","86":"1\n","93":"1\n","90":"1\n","6":"0\n","49":"1\n","97":"0\n","42":"1\n","100":"1\n","1":"768\n","67":"1\n","64":"1\n","79":"0\n","92":"1\n","82":"1\n","75":"1\n"},"n_missing":74,"programs":["s=input()\ndp=[[0]*13 for _ in range(10**5+5)]\ndp[0][0]=1\nfor i in range(len(s)):\n    if s[i]=='?':\n        c=-1\n    else:\n        c=int(s[i])\n    \n    for j in range(10):\n        if c!=-1 and c!=j:\n            continue\n        for k in range(13):\n            dp[i+1][(k*10+j)%13]+=dp[i][k]\n    for j in range(13):\n        dp[i+1][j]%=(10**9+7)\n\nprint(dp[len(s)][5])","#!\/usr\/bin\/env python3\nimport sys\n\nMOD = 1000000007  # type: int\n\n\ndef solve(S: str):\n    \"\"\"\n    >>> solve(\"05\")\n    1\n    >>> solve(\"18\")\n    1\n    >>> solve(\"13\")\n    0\n    \"\"\"\n    pre, cur = [0] * 13, None\n    base = 10\n    if S[-1] == \"?\":\n        cur = [1] * 10 + [0] * 3\n    else:\n        cur = [0] * 13\n        cur[int(S[-1])] = 1\n    for n in reversed(S[:-1]):\n        pre, cur = cur, pre\n        for i in range(13): # \u518d\u751f\u6210\u3092\u907f\u3051\u308b\n            cur[i] = 0\n        g = range(10) if n == \"?\" else [int(n)]\n        for i in g:\n            t = base * i % 13\n            for j in range(13):\n                cur[(j+t)%13] = (cur[(j+t)%13] + pre[j]) % MOD\n        base = (base * 10) % 13        \n        # print(n, pre, cur, base)\n    return cur[5]\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)  # type: str\n    print(solve(S))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    test()\n    main()\n","S = input()\nS = S[::-1]\nans = [[0] * 13 for _ in range(len(S))]\nMOD = 10 ** 9 + 7\nif S[0] == \"?\":\n    for i in range(10):\n        ans[0][i] = 1\nelse:\n    ans[0][int(S[0])] = 1\n\nfor i, s in enumerate(S):\n    if i == 0:\n        continue\n    if s == \"?\":\n        for n in range(10):\n            for j in range(13):\n                if ans[i - 1][j] == 0:\n                    continue\n                ans[i][(j + n * 10 ** i) % 13] += ans[i - 1][j]\n                ans[i][(j + n * 10 ** i) % 13] %= MOD\n    else:\n        for j in range(13):\n            ans[i][(j + int(s) * 10 ** i) % 13] = ans[i - 1][j]\n\nprint(ans[-1][5])\n","#!\/usr\/bin\/env python\nimport numpy as np\n\ndef main():\n    S = input()\n    \n    lenS = len(S)\n    N = 13\n    DP = np.zeros(N, dtype=np.int64)\n    DP[0] = 1\n    \n    mod = 10 ** 9 + 7\n    mul = 1\n    for i in reversed(range(lenS)):\n        nextDP = np.zeros(N, dtype=np.int64)\n        c = S[i]\n        if c == '?':\n            for k in range(10):\n                for j in range(N):\n                    nextDP[(k * mul + j) %N] += DP[j]\n                    nextDP[(k * mul + j) %N] %= mod\n\n        else:\n            k = int(S[i])\n            for j in range(N):\n                nextDP[(k * mul + j) %N] += DP[j]\n                nextDP[(k * mul + j) %N] %= mod\n\n        mul *= 10\n        mul %= N\n        DP = nextDP\n\n    return DP[5]\n\nif __name__ == '__main__':\n    print(main())\n\n","S = str(input())\nS_len = len(S)\n\nDP = [[0] * 13 for i in range(S_len+1)]\nDP[S_len][0] = 1\n\nfor i in reversed(range(S_len)):\n\n    num = 10 ** (S_len - 1 - i) % 13\n\n    if S[i] != \"?\":\n        for j in range(13):\n            if DP[i + 1][j] != 0:\n                DP[i][(j + int(S[i]) * num) % 13] = (DP[i][(j + int(S[i]) * num) % 13] + DP[i + 1][j]) % 1000000007\n    else:\n        for j in range(13):\n            for k in range(10):\n                if DP[i + 1][j] != 0:\n                    DP[i][(j + k * num) % 13] = (DP[i][\n                                                     (j + k * num) % 13] +\n                                                 DP[i + 1][j]) % 1000000007\n\nprint(DP[0][5])\n\n","import sys\nreadline = sys.stdin.readline\n\ndef main():\n\n\t#s = tuple(input())\n\ts = input()\n\tlength = len(s)\n\n\tdp = [[0]*13 for _ in range(length+1)]\n\tMOD = 10**9+7\n\tif s[-1] == '?':\n\t\tfor i in range(10):\n\t\t\tdp[1][i] = 1\n\telse:\n\t\tdp[1][int(s[-1])] = 1\n\n\tfor i in range(1,length):\n\t\tif s[-i-1] != '?':\n\t\t\tnum = (int(s[-i-1]) * (10**i)) % 13\n\t\t\tfor j in range(13):\n\t\t\t\tdp[i+1][j] = dp[i][(13-num+j)%13]\n\t\t\t\tdp[i+1][j] %= MOD\n\t\telse:\n\t\t\tnum = (10**i) % 13\n\t\t\ta = 0\n\t\t\tfor j in range(10):\n\t\t\t\tfor k in range(13):\n\t\t\t\t\tdp[i+1][k] += dp[i][(13-a+k)%13]\n\t\t\t\t\tdp[i+1][k] %= MOD\n\t\t\t\ta += num\n\n\tprint(dp[-1][5] % MOD)\n\nif __name__ == '__main__':\n\tmain()","import math\nimport copy\nfrom copy import deepcopy\nimport sys\nimport fractions\nimport numpy as np\nfrom functools import reduce\nimport statistics\nimport heapq\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\n# ===FUNCTION===\n\ndef getInputInt():\n    inputNum = int(input())\n    return inputNum\n\n\ndef getInputListInt():\n    outputData = []\n    inputData = input().split()\n    outputData = [int(n) for n in inputData]\n\n    return outputData\n\n\ndef getSomeInputInt(n):\n    outputDataList = []\n    for i in range(n):\n        inputData = int(input())\n        outputDataList.append(inputData)\n\n    return outputDataList\n\n\ndef getSomeInputListInt(n):\n    inputDataList = []\n    outputDataList = []\n    for i in range(n):\n        inputData = input().split()\n        inputDataList = [int(n) for n in inputData]\n        outputDataList.append(inputDataList)\n\n    return outputDataList\n\n\n# ===CODE===\n\ndef getInputStr():\n    inputStr = str(input())\n    return inputStr\n\ndata = getInputStr()\n\na = str(data)\nlistStr = []\nlistStr = list(a)\n\ndel listStr[len(listStr)-1]\nlistStr.reverse()\n\ndp = [[0]*13 for _ in range(len(listStr)+1)]\ndp[0][0] = 1\nordinal = 1\n\nINF = 10 ** 9 + 7\n\nfor i in range(len(listStr)):\n    if i ==0:\n        keta = 1\n    else:\n        keta = pow(10, i)\n\n    if listStr[i] == \"?\":\n        for k in range(10):\n            for j in range(13):\n                dp[i+1][int(((k*keta)%13 + j) % 13)] += dp[i][j]\n                # dp[i + 1][int(((k * ordinal) + j) % 13)] %= INF\n    else:\n        k = int(listStr[i])\n        for j in range(13):\n            dp[i + 1][int(((k*keta)%13 + j) % 13)] += dp[i][j]\n            # dp[i + 1][int(((k*ordinal) + j) % 13)] %= INF\n\n\nans = dp[len(listStr)][5] % INF\nprint(ans)","S = list(input())\nN = len(S)\ndp = [[0] * 13 for _ in range(N+1)]\nMOD = 10**9 + 7\ns = S[0]\nif s=='?':\n    for k in range(10):\n        dp[0][k] = 1\nelse:\n    dp[0][s] = 1\n \n\nfor i in range(1,N):\n    s = S[i]\n    for j in range(13):\n        if s=='?':\n            for k in range(10):\n                tmp = (j*10 + k)%13\n                dp[i][tmp] += dp[i-1][j]\n                dp[i][tmp] %= MOD\n        else:\n            tmp = (j*10 + int(s))%13\n            dp[i][tmp] += dp[i-1][j]\n            dp[i][tmp] %= MOD\n            \nprint(dp[N-1][5])","mod=10**9+7\ns=input()\nn=len(s)\nDP=[[0]*13 for _ in range(n+1)]\nDP[0][0]=1\nfor i in range(n):\n  r=pow(10,n-1-i,13)\n  if s[i]==\"?\":\n    for j in range(10):\n      rr=(r*j)%13\n      for k in range(13):\n        if k>=rr:\n          DP[i+1][k]+=DP[i][k-rr]\n        else:\n          DP[i+1][k]+=DP[i][k-rr+13]\n        DP[i+1][k]%=mod\n  else:\n    rr=(r*int(s[i]))%13\n    for k in range(13):\n      if k>=rr:\n        DP[i+1][k]+=DP[i][k-rr]\n      else:\n        DP[i+1][k]+=DP[i][k-rr+13]\n      DP[i+1][k]%=mod\nprint(DP[n][5]%mod)\n","#N=list(map(int, input().split()))\nS=input()\nbig=10**9+7\n\nlis=[0]*13\n\nif S[0]==\"?\":\n\tlis=[1]*10+[0]*3\nelse:\n\tlis[int(S[0])]=1\nS=S[1:]\n\nfor i in S:\n\tnewlis=[0]*13\n\tif i==\"?\":\n\t\tfor j in range(10):#\u306f\u3066\u306a\u306e\u4e2d\u8eab\n\t\t\tfor k in range(13):#\u524d\u306e\u3042\u307e\u308a\n\t\t\t\tnewlis[(10*k+j)%13]+=lis[k]\n\telse:\n\t\tfor k in range(13):\n\t\t\tnewlis[(10*k+int(i))%13]+=lis[k]\n\tlis=newlis.copy()\nprint(lis[5]%big)","def main():\n    MOD = 10 ** 9 + 7\n\n    s = input()\n    r = [0] * 13\n    r[0] = 1\n    p = 1\n    for c in reversed(s):\n        if c == '?':\n            tank = []\n            for x in range(10):\n                x = x * p % 13\n                tank.append(r[13 - x:] + r[:13 - x])\n            r = map(sum, zip(*tank))\n            *r, = map(lambda x: x % MOD, r)\n\n\n        else:\n            x = int(c)\n            x = x * p % 13\n            r = r[13 - x:] + r[:13 - x]\n        p = p * 10 % 13\n\n    print(r[5])\n\n\nif __name__ == '__main__':\n    main()\n","S = input()\ndp = [[0 for _ in range(13)] for _ in range(len(S)+1)]\nrank = 1\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[len(S)-i-1] == \"?\":\n            for k in range(10):\n                dp[i + 1][(k * rank + j) % 13] += dp[i][j]\n        else:\n            k = int(S[len(S)-i-1])\n            dp[i + 1][(k * rank + j) % 13] += dp[i][j]\n\n    rank *= 10\n\nans = dp[len(S)][5] % (10 ** 9 + 7)\nprint(ans)\n","# -*- coding: utf-8 -*-\nS = str(input())\nMOD = 1000000007\n\ndp = [0 for i in range(13)]\ndp[0] = 1\nfor i in range(0, len(S)):\n    next_dp = [0 for i in range(13)]\n    if S[len(S) - i - 1] == '?':\n        for k in range(10):\n            for j in range(13):\n                add = k * pow(10,i) % 13\n                next_dp[(j + add) % 13] += dp[j]\n    else:\n        for j in range(13):\n            add = int(S[len(S) - i - 1]) * pow(10,i) % 13\n            next_dp[(j + add) % 13] = dp[j]\n    dp = next_dp\n\nprint(dp[5] % MOD)","S=list(input())\nMOD=10**9+7\ndp=[0]*13\ndp[0]=1\nfor i in range(1,len(S)+1):\n    ans=[0]*13\n    if S[-i]==\"?\":\n        for j in range(10):\n            a=(j*10**(i-1))%13\n            for k in range(13):\n                ans[(k+a)%13]=ans[(k+a)%13]+dp[k]\n    else:\n        a=int(S[-i])\n        a=(a*10**(i-1))%13\n        for k in range(13):\n            ans[(k+a)%13]=ans[(k+a)%13]+dp[k]\n    dp=ans.copy()\n    print(ans)\nprint(ans[5]%MOD)","x = 1000000007\n\nS = input()\nS = [int(s) if s != '?' else s for s in S]\nS = S[::-1]\n\ndp = [[0 for j in range(13)] for i in range(len(S) + 1)]\n\ndp[0][0] = 1\n\nfor i, s in enumerate(S):\n    for j in range(10):\n        if s != '?' and s != j:\n            continue\n\n        digit_r = ((10 ** i) * j) % 13\n\n        for k in range(13):\n            r = (digit_r + k) % 13\n            dp[i + 1][r] += dp[i][k] % x\n\nprint(int(dp[-1][5] % x))\n","N=input()\na=1000000000+7\nb=[]\nfor i in N:\n    if i=='?':b.append(\"9\")\n    else:b.append(i)\nb=int(b)\nprint((b-5)\/13)","import numpy as np\n\nS = input()\n\nk = len(S)\nk0 = (len(S)%6-1)%6\nk1 = (len(S)%6-2)%6\nk2 = (len(S)%6-3)%6\nk3 = (len(S)%6-4)%6\nk4 = (len(S)%6-5)%6\nk5 = (len(S)%6-6)%6\n\na0 = S[k0::6] \na1 = S[k1::6] \na2 = S[k2::6] \na3 = S[k3::6] \na4 = S[k4::6] \na5 = S[k5::6] \n\ndef digitSum(n):\n    # \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\n    s = str(n)\n    # \uff11\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\u3002\n    array = list(map(int, s))\n    # \u5408\u8a08\u5024\u3092\u8fd4\u3059\n    return sum(array)\n\nA = np.zeros(6)\nB = np.zeros(6)\n\n\nb0 = a0.replace(\"?\", \"\")\nB[0] = int(len(a0) - len(b0))\nA[0] = digitSum(b0)\n\nb1 = a1.replace(\"?\", \"\")\nB[1] = int(len(a1) - len(b1))\nA[1] = digitSum(b1)\n\nb2 = a2.replace(\"?\", \"\")\nB[2] = int(len(a2) - len(b2))\nA[2] = digitSum(b2)\n\nb3 = a3.replace(\"?\", \"\")\nB[3] = int(len(a3) - len(b3))\nA[3] = digitSum(b3)\n\nb4 = a4.replace(\"?\", \"\")\nB[4] = int(len(a4) - len(b4))\nA[4] = digitSum(b4)\n\nb5 = a5.replace(\"?\", \"\")\nB[5] = int(len(a5) - len(b5))\nA[5] = digitSum(b5)\n\nfor i in range(6):\n    if B[i] == 0:\n        B[i] = 1\n    else:\n        B[i] = B[i] *10\n    \nans = 0\n\na = A[0] + A[1]*10 + A[2]*100 + A[3]*1000 + A[4]*10000 + A[5]*100000 \na = a%13\n    \nfor i0 in range(int(B[0])):\n    for i1 in range(int(B[1])):\n        for i2 in range(int(B[2])):\n            for i3 in range(int(B[3])):\n                for i4 in range(int(B[4])):\n                    for i5 in range(int(B[5])):\n                        if (i0 + i1*10 + i2*100 + i3*(-1) + i4*(-10) + i5*(-100) + a)%13 == 5:\n                            ans += 1\n                            \nprint(ans)","S = [int(x) if x != \"?\" else -1 for x in input()]\ng = 10 ** 9 + 7\nx = 1\nDP = [[0] * 13 for _ in range(2)]\nDP[0][0] = 1\nfor i in range(len(S)):\n    for j in range(13):\n        DP[1][j] = DP[0][j] % g\n        DP[0][j] = 0\n    for j in range(13):\n        if S[i] == -1:\n            s = (j*10)%13\n            e = (s+10)%13\n        else:\n            s = (j*10+S[i])%13\n            e = (s+1)%13\n        DP[0][s] += DP[1][j]\n        if s > e:\n            DP[0][0] += DP[1][j]\n        DP[0][e] -= DP[1][j]\n    w = 0\n    for j in range(13):\n        w += DP[0][j]\n        DP[0][j] = w\n\nprint(DP[0][5] % g)\n","S = input()\n\nl = len(S)\nMOD = 10**9+7\ndp = [[0 for i in range(13)] for j in range(l+1)]\ndp[0][0] = 1\nfor i in range(l):\n    if S[i] == '?':\n        for j in range(10):\n            for k in range(13):\n                dp[i+1][(k*10+j)%13] += dp[i][k] % MOD\n    else:\n        for k in range(13):\n            dp[i+1][(k*10+int(S[i-1]))%13] += dp[i][k] % MOD\n\nprint(dp[-1][5] % MOD)","s = list(input())\n\nMOD = pow(10, 9) + 7\n\nn = len(s)\ns.reverse()\n\ndp = [[0] * 13 for _ in range(n)]\n\n#r = list(range(10))\n\n#init\nif s[0] == \"?\":\n    for j in range(10):\n        dp[0][j] = 1\nelse:\n    q = int(s[0])\n    dp[0][q] = 1\n\nfor i in range(1, n):\n\n    # for l in range(10):\n    #     r[l] = r[l] * 10 % 13\n\n    #print(r)\n\n    if s[i] == \"?\":\n        for j in range(10):\n            q = j * pow(10, i, 13) % 13\n            for k in range(13):\n                dp[i][k] += dp[i-1][k-q]\n    \n    else:\n        q = int(s[i]) * pow(10, i, 13) % 13\n        #print(q)\n        for k in range(13):\n            dp[i][k] += dp[i-1][k-q]\n    #print(dp[i])\n\nprint(dp[n-1][5] % MOD)","z=10\nm=z**9+7\nk=13\nt=input()[::-1]\ndp=[0]*k\ndp[0]=1\nfor d in range(len(t)):\n  p=[0]*k\n  if t[d]=='?':\n    for x in range(z):\n      r=int(x)*pow(z,d,k)\n      for i in range(k):\n        p[(i+r)%k]+=dp[i]\n  else:\n    r=int(t[d])*pow(z,d,k)\n    for i in range(k):\n      p[(i+r)%k]+=dp[i]\n  dp=[j%m for j in p]\nprint(dp[5]%m)","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\nclass ModInt:\n\n    def __init__(self, x):\n        self.x = x.x if isinstance(x, ModInt) else x % MOD\n\n    __str__ = lambda self:str(self.x)\n    __repr__ = __str__\n    __int__ = lambda self: self.x\n    __index__ = __int__\n\n    __add__ = lambda self, other: ModInt(self.x + ModInt(other).x)\n    __sub__ = lambda self, other: ModInt(self.x - ModInt(other).x)\n    __mul__ = lambda self, other: ModInt(self.x * ModInt(other).x)\n    __pow__ = lambda self, other: ModInt(pow(self.x, ModInt(other).x, MOD))\n    __mod__ = lambda self, other: ModInt(self.x % ModInt(other).x)\n    __truediv__ = lambda self, other: ModInt(self.x * pow(ModInt(other).x, MOD - 2, MOD))\n    __floordiv__ = lambda self, other: ModInt(self.x \/\/ ModInt(other).x)\n    __radd__ = lambda self, other: ModInt(other + self.x)\n    __rsub__ = lambda self, other: ModInt(other - self.x)\n    __rpow__ = lambda self, other: ModInt(pow(other, self.x, MOD))\n    __rmod__ = lambda self, other: ModInt(other % self.x)\n    __rmul__ = lambda self, other: ModInt(other * self.x)\n    __rtruediv__ = lambda self, other: ModInt(other * pow(self.x, MOD - 2, MOD))\n    __rfloordiv__ = lambda self, other: ModInt(other \/\/ self.x)\n\n    __lt__ = lambda self, other: self.x < ModInt(other).x\n    __gt__ = lambda self, other: self.x > ModInt(other).x\n    __le__ = lambda self, other: self.x <= ModInt(other).x\n    __ge__ = lambda self, other: self.x >= ModInt(other).x\n    __eq__ = lambda self, other: self.x == ModInt(other).x\n    __ne__ = lambda self, other: self.x != ModInt(other).x\n\n\ndef main():\n    S = input()\n\n    dp = [[0] * 13  for _   in range(len(S)-1)]\n    dp[0] = [ModInt(0) for _ in range(13)]\n    \n    if S[0] == '?':\n        for i in range(10):\n            dp[0][i] = ModInt(1)\n    else:\n        dp[0][int(S[0])] = ModInt(1)\n\n    for i in range(1,len(S)-1):\n        if S[i] == '?':\n            for j in range(13):\n                for k in range(10):\n                    dp[i][(j * 10 + k) % 13 ] += dp[i-1][j]\n        else:\n            for j in range(13):\n                dp[i][ (j* 10 + int(S[i])) % 13 ] += dp[i-1][j]\n        \n\n    print(dp[len(S)-2][5])\n\n\n\n\n\n\n\n\n\n    pass\nif __name__ == '__main__':\n    main()","M = 10**9 + 7\na = [1] + [0] * 12\np = 1\nfor c in reversed(input()):\n    r = range(0, p * 10, p) if c == '?' else (p * int(c),)\n    a = [sum(a[(i - j) % 13] for j in r) % M for i in range(13)]\n    p = p * 10 % 13\nprint(a[5])","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\ndef main():\n    S = input()\n    N = len(S)-1\n    dp = [0] * 13\n    \n\n    if S[0] == '?':\n        R = range(10)\n    else:\n        R = [int(S[0])]\n\n    for i in R:\n        dp[i] = 1\n\n    for i in range(1,N):\n        if S[i] == '?':\n            R = range(10)\n        else:\n            R = [int(S[i])]\n\n\n        dppre = dp\n        dp = [0] * 13\n        for j in range(13):\n            for k in R:\n                dp[(j * 10 + k) % 13 ] += dppre[j]\n        for j in range(13):\n            dp[j] %= MOD\n    \n    print(dp[5])\n\n\nif __name__ == '__main__':\n    main()","S = input()\nN = len(S)\nS = list(S)\nS.reverse()\n\ndp = [[0]*13 for _ in range(100100)]\ndp[0][0] = 1\nmod = 10**9+7\nfor i in range(1, N + 1):\n    if S[i-1] == \"?\":\n        for j in range(13):\n            for k in range(10):\n                dp[i][(j + k*10**(i-1)) % 13] += dp[i-1][j]\n    else:\n        for j in range(13):\n            dp[i][(j+int(S[i-1])*10**(i-1)) % 13] = dp[i-1][j]\n\n    for j in range(13):\n        dp[i][j] %= mod\n\nprint(dp[N][5])\n","mod=10**9+7\ns=input()\n\nb=int(s.replace(\"?\",\"0\"))%13\nif b<=5:\n    cal=5-b\nelse:\n    cal=18-b\n\np=[[i*j%13 for i in range(10)] for j in range(13)]\nrev=s[::-1]\nd={i:0 for i in range(13)}\nnum=rev.find(\"?\")\ntmp=10**num%13\nfor i in p[tmp]:\n    d[i]+=1\n\nfor i,v in enumerate(rev[num+1:]):\n    #print(i+num+1)\n    if v==\"?\":\n        tmp=10**(i+num+1)%13\n        t_d={i:0 for i in range(13)}\n        #print(\"i,tmp:\",i+num+1,\",\",tmp)\n        for k in range(0,13):\n            for j in range(0,10):\n                t_d[(p[tmp][j]+k)%13]+=d[k]\n            #print(t_d.values())\n        for j in range(13):\n            d[j]=t_d[j]\n        #print(t_d)\n#print(d)\nprint(d[cal]%mod)\n        \n\n","# -*- coding: utf-8 -*-\n# D - Digits Parade\nimport sys \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nMOD = 10**9+7\nS = readline().decode().rstrip()\nN = len(S)\n\ndp = [0]*13\ndp[0] = 1\n# if S[0] == '?':\n#     rem = pow(10,N,13)\n#     for j in range(10):\n#         t = rem*j%13\n#         dp[t] += 1\n# else:\n#     s = int(S[0])\n#     rem = pow(10,N,13)*s%13\n#     dp[rem] += 1\n\nfor i in range(N):\n    s = S[i]\n    ndp = [0]*13\n    rem = pow(10,N-i-1,13)\n    if s == '?':\n        for j in range(10):\n            t = rem*j%13\n            for k in range(13):\n                ndp[(k+t)%13] += dp[k]\n                ndp[(k+t)%13] %= MOD\n    else:\n        s = int(s)\n        t = rem*s%13\n        for k in range(13):\n            ndp[(k+t)%13] += dp[k]\n            ndp[(k+t)%13] %= MOD\n    dp = ndp\nprint(dp[5]%MOD)","p = 10**9+7\nS = input().strip()\nN = len(S)\ndp = [[0 for _ in range(13)] for _ in range(N+1)]\nfor m in range(13):\n    dp[0][0] = 1\nfor i in range(1,N+1):\n    for m in range(13):\n        if S[i-1]==\"?\":\n            for j in range(10):\n                dp[i][(m*10+j)%13] = (dp[i][(m*10+j)%13]+dp[i-1][m])%p\n        else:\n            dp[i][(m*10+int(S[i-1]))%13] = (dp[i][(m*10+int(S[i-1]))%13]+dp[i-1][m])%p\nprint(dp[N][5])","import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n\n\ndef main():\n    S = input().rstrip()\n    DP = [0] * 13\n    n = len(S)\n    DP[0] = 1\n\n    for i in range(0, n):\n        preDP = DP\n        DP = [0] * 13\n        if S[i] == '?':\n            for k in range(13):\n                for x in range(10):\n                    t = (x + 10*k) % 13\n                    DP[t] += preDP[k]\n                    DP[t] %= MOD\n        else:\n            y = int(S[i])\n            for k in range(13):\n                t = (y+10*k) % 13\n                DP[t] += preDP[k]\n                DP[t] %= MOD\n\n    ans = DP[5]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","s = str(input())\nn = len(s)\nmod = (10**9)+7\n\nDP = [[0 for _ in range(13)] for _ in range(n)]\n\nif s[-1] == '?':\n    for i in range(0,10):\n        DP[0][i] += 1\nelse:\n    DP[0][int(s[-1])] = 1\n\n# \u4e0b2\u6841\u76ee\u304b\u3089\u9806\u306b\u898b\u3066\u3044\u304f\nfor i in range(1,n):\n    num_s = s[n-(i+1)]\n    if num_s != '?':\n        num = int(num_s)\n        now = num * (10**i)\n        res = now % 13\n        # \u5143\u306e\u4f59\u308aj -> (res+j)%13 \u304c\u4eca\u56de\u306e\u4f59\u308a \n        for j in range(13):\n            DP[i][(j+res)%13] += DP[i-1][j]\n            # DP[i][(j+res)%13] %= mod\n    else:\n        for k in range(10):\n            now = k * (10**i)\n            res = now % 13\n            # \u5143\u306e\u4f59\u308aj -> (res+j)%13 \u304c\u4eca\u56de\u306e\u4f59\u308a\n            for j in range(13):\n                DP[i][(j+res)%13] += DP[i-1][j]\n                # DP[i][(j+res)%13] %= mod\n\nans = DP[n-1][5] % mod\nprint(ans)        ","S = list(input())\nfor i in range(len(S)):\n    if S[i] != '?':\n        S[i] = int(S[i])\n    else:\n        S[i] = -1\n\nR = [[None]*10 for i in range(13)]\nfor i in range(13):\n    for j in range(10):\n        R[i][j] = (10*i+j) % 13\n\nQ = [[] for i in range(13)]\nfor j in range(10):\n    for i in range(13):\n        Q[R[i][j]] += [[i,j]]\n\ndp = [[0]*13 for i in range(len(S)+1)]\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[i]!=-1:\n            dp[i+1][j] += dp[i][Q[j][S[i]][0]]%1000000007\n        else:\n            for k in range(10):\n                dp[i+1][j] += dp[i][Q[j][k][0]]%1000000007\n\nprint(dp[len(S)][5]%1000000007)","MOD=10**9+7\n\nS=input()\nS=S[::-1]\nN=len(S)\n\ndef POWt(N):\n    arr=[1]\n    for i in range(1,N+1):\n        arr.append(arr[-1]*10%13)\n    return arr\n\ndp=[[0]*13 for i in range(N+1)]\ndp[0][0]=1\nPOW=POWt(N)\nfor i in range(N):\n    for j in range(13):\n        if(S[i]!='?'):\n            dp[i+1][(j+(int(S[i])*POW[i]%13))%13]=(dp[i+1][(j+(int(S[i])*POW[i])%13)%13]+dp[i][j])%MOD\n        else:\n            for k in range(10):\n                dp[i+1][(j+k*POW[i]%13)%13]=(dp[i+1][(j+k*POW[i]%13)%13]+dp[i][j])%MOD\nprint(dp[N][5])","# -*- coding utf-8 -*-\nMOD = 10 ** 9 + 7\n\nS = input()\n# S = '?' * 100000\nmods = [0] * 13\nmods[0] = 1\n\ndigit = 1\nfor s in S[::-1]:\n    next_mods = [0] * 13\n    if s == '?':\n        for i in range(10):\n            for m in range(13):\n                next_mods[(m + i * digit) % 13] += mods[m]\n    else:\n        for m in range(13):\n            next_mods[(m + int(s) * digit) % 13] += mods[m]\n\n    for m in range(13):\n        next_mods[m] %= MOD\n    mods = next_mods\n    digit *= 10\n    digit %= 13    # this line dramatically reduces calculation time\n\nans = mods[5]\n\nprint(ans)\n","def main():\n  s = input()\n  n = len(s)\n  mod = 10**9+7\n  dp = [[0]*13 for _ in range(n+1)]\n  dp[0][0] = 1\n  d = {(j, k):(10*j+k)%13 for k in range(10) for j in range(13)}\n  for i in range(n):\n    if s[i] != \"?\":\n      t = int(s[i])\n      for j in range(13):\n        dp[i+1][(10*j+t)%13] += dp[i][j]\n        dp[i+1][(10*j+t)%13] %= mod\n    else:\n      for k in range(10):\n        for j in range(13):\n          dp[i+1][(10*j+k)%13] += dp[i][j]\n          dp[i+1][(10*j+k)%13] %= mod\n  print(dp[n][5]%mod)\nif __name__ == \"__main__\":\n  main()","S = input()\ndp = [[0]*13 for i in range(len(S)+1)]\nMOD = 10**9+7\n\na = [0] + [(10**i) % 13 for i in range(len(S))]\ndp[0][0] = 1\n\ncnt = 1\nfor i, c in enumerate(S[::-1], 1):\n    t = a[i]\n    for j in range(13):\n        if c == \"?\":\n            for k in range(10):\n                nj = (k*t+j) % 13\n                dp[i][nj] = dp[i][nj] + dp[i-1][j]\n                dp[i][nj] %= MOD\n        else:\n            nj = (int(c)*t+j) % 13\n            dp[i][nj] = dp[i][nj] + dp[i-1][j]\n            dp[i][nj] %= MOD\nprint(dp[-1][5])","s=input()\n\n#i\u6841\u4ee5\u4e0b\u306e\u6570\u5b57\u3067mod\u304cj\u306e\u6570\n#dp[i][j]=\n\ndp=[[0]*13 for _ in range(len(s))]\n\nMOD=10**9+7\n\nresult=0\nfor i in range(len(s)):\n    index=len(s)-i-1\n\n    if i==0:\n        if s[index]!=\"?\":\n            #\u6570\u5b57,300\u306emod\u3092temp\u306b\n            temp=(int(s[index])*(10**i))%13\n            dp[index][temp]=1\n        else:\n            for l in range(10):\n                temp=(l*(10**i))%13\n                for j in range(13):\n                    k=(temp+j)%13\n                    dp[index][k]+=1\n\n    else:\n        if s[index]!=\"?\":\n            #\u6570\u5b57,300\u306emod\u3092temp\u306b\n            temp=(int(s[index])*(10**i))%13\n            for j in range(13):\n                k=(temp+j)%13\n                dp[index][k]+=dp[index+1][j]%MOD\n        else:\n            for l in range(10):\n                temp=(l*(10**i))%13\n                for j in range(13):\n                    k=(temp+j)%13\n                    dp[index][k]+=dp[index+1][j]%MOD\n    #print(dp[index],sum(dp[index]))\n\n\n\nprint(dp[0][5]%MOD)\n\n\n\n\n        \n\n","s = input()\n\nn = len(s)\ndp = [[0 for i in range(13)] for j in range(n+1)]\ndp[0][0] = 1\nmod = 10**9 + 7\n\nfor i in range(n):\n    m = (10**i) % 13\n    if s[n-i-1] == \"?\":\n        for j in range(13):\n            tmp = [dp[i][(j-m*k)%13] for k in range(10)]\n            dp[i+1][j] = sum(tmp) % mod\n    else:\n        num = (int(s[n-i-1])*(10**i))%13\n        for j in range(13):\n            dp[i+1][j] = dp[i][(j-num)%13] % mod\n            \nprint(dp[n][5])","def f(i,k):\n  for j in range(13):\n    dp[i+1][(j*10+k)%13]+=dp[i][j]\n    dp[i+1][(j*10+k)%13]%=mod\n  \nmod=10**9+7\ns=input()\nn=len(s)\ndp=[[0]*13 for i in range(10**5)]\ndp[0][0]=mul=1\n\nfor i in range(n):\n  if s[i]=='?':\n    for k in range(10):\n      f(i,k)\n  else:\n    f(i,int(s[i]))\n  \nprint(dp[n][5]%mod)\n","S = str(input())\ns = [i for i in S]\nans = 0\nmn = 0\nmx = len(S)\nfor i in range(mx):\n  if S[i].isnumeric():\n    mn = mx-i-1\n    break\n    \nstart = 0\nfor i in range(int(S[mx-mn-1])*10**mn, 10**mx):\n  if i % 13 == 5:\n    start = i\n    break\n    \nans = 0\nfor i in range(start, 10**mx, 13):\n  flg = True\n  for j in range(1, len(str(i))+1):\n    if (s[-j].isnumeric()) and (s[-j]!=str(i)[-j]):\n      flg = False\n      break\n  if flg:\n    ans += 1\n  if ans >= 10**9+7:\n    ans -= 10**9+7\n    \nprint(ans)","S = input()\ns = len(S)\nmod = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(s)]\n\nif S[0] == '?':\n    for i in range(10):\n        dp[0][i] += 1\nelse:\n    dp[0][int(S[0]) \/\/ 13] += 1\n\nfor i in range(1, s):\n    if S[i] == '?':\n        for j in range(13):\n            for k in range(10):\n                dp[i][(j * 10 + k) % 13] = (dp[i][(j * 10 + k) % 13] + dp[i - 1][j]) % mod\n    else:\n        for j in range(13):\n            dp[i][(j * 10 + int(S[i])) % 13] = (dp[i][(j * 10 + int(S[i])) % 13] + dp[i - 1][j]) % mod\n\nprint(dp[-1][5] % mod)","# solution\n\nmodulous=10**9+7\nr=[[(j-i)*4%13 for i in range(10)]for j in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  if c>\"9\":\n    d=[(sum(d[i] for i in j))%modulous for j in r]\n  else:\n    d=[d[((j-int(c))*4%13)] for j in range(13)]\n    \nprint(d[5])","r = [[(j - k) * 9 % 13 for j in range(10)] for k in range(13)]\nd = [1] + [0] * 12\n\nfor c in input():\n    if c == '?':\n        d = [sum(d[j] for j in k) for k in r]\n    else:\n        d = [d[(int(c) - k) * 9 % 13] for k in range(13)]\n    print(d)\nprint(d[5])","import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    S = input().strip()\n    N = len(S)\n    dp = [[0]*13 for _ in range(N+1)]\n    dp[0][0] = 1\n    for n in range(N):\n        c = S[N-n-1]\n        for i in range(10):\n            if c == \"?\" or int(c) == i:\n                for j in range(13):\n                    dp[n+1][(j + i*10**n)%13] += dp[n][j]\n        for i in range(13):\n            dp[n+1][i] %= 10**9+7\n    print(dp[N][5])\n\n\nif __name__ == '__main__':\n    main()\n","S = input()\n\nMOD = 10 ** 9 + 7\n\ndp = [0] * 13\ndp[0] = 1\nfor i in range(len(S)):\n    new_dp = [0] * 13\n    if S[i] == '?':\n        for j in range(10):\n            for k in range(13):\n                new_dp[(k * 10 + j) % 13] += dp[k]\n                new_dp[(k * 10 + j) % 13] %= MOD\n    else:\n        j = int(S[i])\n        for k in range(13):\n            new_dp[(k * 10 + j) % 13] += dp[k]\n            new_dp[(k * 10 + j) % 13] %= MOD\n    dp = new_dp[:]\nprint(dp[5])\n","amari = [i for i in range(10)]\np = 10**9 + 7\ns =  str(input())\nn = len(s)\nans = [0]*13\nans[0] = 1\nfor i in reversed(s):\n  dp = [0]*13\n  if i == '?':\n    for j in range(13):\n      for k in amari:\n        dp[(j + k)%13] += ans[j]\n  else:\n    for j in range(13):\n      dp[(j + amari[int(i)])%13] += ans[j]\n      \n  for i in range(len(dp)):\n    dp[i] %= p\n  ans = dp\n  for i in range(len(amari)):\n    amari[i] = amari[i]*10%13\nprint(ans[5])","mod=10**9+7\ns=input()\nns=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 10, 7, 4, 1, 11, 8, 5, 2, 12], [0, 9, 5, 1, 10, 6, 2, 11, 7, 3], [0, 12, 11, 10, 9, 8, 7, 6, 5, 4], [0, 3, 6, 9, 12, 2, 5, 8, 11, 1], [0, 4, 8, 12, 3, 7, 11, 2, 6, 10]]\nmiti=[0,0,0,0,0,0]\nnow=0\nfor i in range(len(s)):\n  if s[-i-1]==\"?\":\n    miti[i%6]+=1\n  else:\n    now+=ns[i%6][int(s[-i-1])]\nnow=now%13\n#print(now,miti)\n\ndp=[[0]*13 for j in range(len(s)+1)]\ndp[0][now]=1\nii=0\nfor i in range(6):\n  nsi=ns[i]\n  for j in range(miti[i]):\n    dp1=dp[ii]\n    dp2=dp[ii+1]\n    #print(dp1)\n    #print(dp2)\n    for n in range(13):\n      dp1[n]=dp1[n]%mod\n    for k in range(10):\n      nsik=nsi[k]\n      for l in range(13):\n        dp2[(l+nsik)%13]+=dp1[l]\n    ii+=1\nprint(dp[ii][5]%mod)","MOD = 10**9+7\ns = input()\nind = list(range(len(s)))\nsl = list(s)\n#print(sl)\ndsl = dict(zip(ind, sl))\n#print(dsl)\n\nind2 = list(range(13))\ndp={}\n#dp.setdefault(0, dict(zip(ind2,[0]*13)))\nfor i in range(len(s)+1):\n    #dp.append(dict(zip(ind2,[0]*13)))\n    dp.setdefault(i, dict(zip(ind2,[0]*13)))\n\n\n#print(dp)\ndp[0][0]=1\n\nfor i in range(len(s)):\n    for k in range(10):\n        if dsl[i] != \"?\" and dsl[i] != str(k):\n            continue\n        for j in range(13):\n            dp[i+1][(j*10+k)%13] += dp[i][j]%MOD\n    #for k in range(13):\n    #    dp[i+1][k] %= MOD\n\n#print(dp)\nprint(dp[len(s)][5]%MOD)\n","S = list(input())\n\nR = [[None]*10 for i in range(13)]\nfor i in range(13):\n    for j in range(10):\n        R[i][j] = (10*i+j) % 13\n        \nQ = [[] for i in range(13)]\nfor j in range(10):\n    for i in range(13):\n        Q[R[i][j]] += [[i,j]]\n\ndp = [[0]*13 for i in range(len(S)+1)]\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[i]!='?':\n            dp[i+1][j] += dp[i][Q[j][int(S[i])][0]]\n        else:\n            for k in range(10):\n                dp[i+1][j] += dp[i][Q[j][k][0]]\n                \nprint(dp[len(S)][5]%1000000007)","S = input()[::-1]\n\na = [0] * 13\nn = [0] * 13\n\ndef calc(d, num):\n    shift = (num * (10 ** d))%13\n    if d==0:\n        n[shift] = 1\n    else:\n        for i in range(13):\n            n[(i+shift)%13] += a[i]\n    \n\nfor d, s in enumerate(S):\n    if s=='?':\n        for i in range(10):\n            calc(d, i)\n    else:\n        calc(d, int(s[0]))\n    a, n = n, a\n    for i in range(13):\n        a[i] %= 1000000007\n        n[i] = 0\n\nprint(a[5])\n\n\n\n","S = input()\nMOD = 10**9 + 7\nM = 13\n\ndp = [0] * M\ndp[0] = 1\n\nfor s in S:\n    newDp = [0] * M\n    if s == '?':\n        for s in range(10):\n            for i in range(M):\n                newDp[(i * 10 + s) % M] += dp[i]\n    else:\n        s = int(s)\n        for i in range(M):\n            newDp[(i * 10 + s) % M] = dp[i]\n    for i in range(M):\n        dp[i] = newDp[i] % MOD\n\nprint(dp[5])\n","S = input()\nN = len(S)\n#dp[i][j] ... \u5148\u982di\u6587\u5b57\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u3082\u306e\u306e\u3046\u306113\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u306b\u306a\u308b\u500b\u6570\ndp = [[0] * 13 for _ in range(N+1)]\ndp[0][0] = 1\nmod = 10**9+7\n#1?2?3   0 -> 3 -> ?3 -> 2?3 -> ...\nmul = 1\nfor i in range(N): #\u5168\u3066\u306e\u6841\n    for k in range(13): #0~12\n        if S[N-i-1] == \"?\":\n            for j in range(10): #?\u306b\u5f53\u3066\u306f\u3081\u308b\u6570\u5b57\n                dp[i+1][(k + j*mul) % 13] += dp[i][k]\n                dp[i+1][(k + j*mul) % 13] %= mod\n        else:\n            j = int(S[N-i-1])\n            dp[i+1][(k + j*mul) % 13] += dp[i][k]\n            dp[i+1][(k + j*mul) % 13] %= mod\n    mul *= 10\n    mul %= 13\nprint(dp[N][5])\n#print(dp)\n","class Mod13DPTable:\n    MOD = 10**9 + 7\n    def __init__(self, length):\n        self.mod13 = [{j:0 for j in range(13)} for i in range(length)]\n        self.MOD = 10**7 + 7\n    def set_start(self, units_digit):\n        if units_digit == '?':\n            for i in range(10):\n                self.mod13[0][i] = 1\n        else:\n            self.mod13[0][int(units_digit)] = 1\n    def get_table(self, digit):\n        return self.mod13[digit]\n    def update(self, num, digit):\n        for k, v in self.mod13[digit-1].items():\n            remain = ((num * 10**digit) + k) % 13\n            self.mod13[digit][remain] = (self.mod13[digit][remain] + v) % Mod13DPTable.MOD\n            \ndef main():\n    MOD = 10**9 + 7\n    S = input()\n    mod13dp = Mod13DPTable(len(S))\n    mod13dp.set_start(S[-1])\n    for i, m in enumerate(reversed(list(S[:-1]))):\n        i += 1\n        if m == '?':\n            for j in range(10):\n                mod13dp.update(j, i)\n        else:\n            mod13dp.update(int(m), i)\n    print(mod13dp.get_table(-1)[5])\nmain()","def f(s):\n    rd = [[10, 11, 12], [3, 6, 9], [4, 8, 12], [1, 2, 3], [4, 7, 10], [1, 5, 9]]\n    k = len(s)\n    md = 10 ** 9 + 7\n    dp = [0] * 13\n    dp[0] = 1\n    for i, c in enumerate(s[::-1]):\n        if c == \"?\":\n            r1, r2, r3 = rd[i % 6]\n            sm = sum(dp)\n            dp=[(sm - (dp[j - r1] + dp[j - r2] + dp[j - r3])) % md for j in range(13)]\n        else:\n            m = int(c) * 10 ** i % 13\n            dp=[dp[j - m] for j in range(13)]\n    print(dp[5])\n\ns = input()\nf(s)\n","S=input()\nl=len(S)\nmod=10**9+7\ndp=[[0 for j in range(13)] for i in range(l+1)]\ndp[0][0]=1\n\nfor i in range(l):\n  if S[i]=='?':\n    for k in range(13): \n      for j in range(10):      \n        dp[i+1][(k*10+j)%13]+=dp[i][k]%mod\n  else:\n    for k in range(13):\n      dp[i+1][(k*10 + int(S[i]))%13]+=dp[i][k]%mod\n      \nprint(dp[-1][5]%mod)","def main():\n    S = input()\n    div = pow(10, 9) + 7\n    rem = [0 for _ in range(13)]\n    rem[0] = 1\n    for c in S:\n        temp = [0 for _ in range(13)]\n        if c != \"?\":\n            for i in range(13):\n                r = (i*10+int(c)) % 13\n                temp[r] += rem[i]\n        else:\n            for i in range(13):\n                for j in range(10):\n                    r = (i*10+j) % 13\n                    temp[r] += rem[i]\n        rem = temp\n    return rem[5] % div\n\nif __name__ == '__main__':\n    print(main())","#!\/usr\/bin\/env python3\n\nP_MOD = 1000000007\n\n\ndef solve(S):\n    # print(S)\n    # 1, 10, 100, 1000, ... \u3092 13 \u3067\u5272\u3063\u305f\u5024\u306f 1, 10, 9, 12, 3, 4 \u3067\u5de1\u56de\u3059\u308b\n    MODS = [1, 10, 9, 12, 3, 4]\n\n    # \u73fe\u5728\u306e\u6841\u306e\u4f59\u308a N \u306e\u72b6\u614b\u3092 cur[N]\n    # \u76f4\u524d\u306e\u6841\u306e\u4f59\u308a N \u306e\u72b6\u614b\u3092 priv[N] \u3068\u3059\u308b\n    priv = [1] + [0] * 12\n    # print(priv)\n    s = S[::-1]\n    for i in range(0, len(s)):\n        cur = [0] * 13\n        d = s[i]\n        # print('i=', i, 'd=', d)\n        if d == '?':\n            for j in range(13):\n                for di in range(10):\n                    m = di * MODS[i % 6]\n                    cur[(j+m) % 13] += priv[j]\n        else:\n            m = int(d) * MODS[i % 6]\n            for j in range(13):\n                cur[(m+j) % 13] = priv[j]\n        # print(cur)\n        for j in range(13):\n            priv[j] = cur[j] % P_MOD\n    return cur[5]\n\n\nif __name__ == '__main__':\n    S = input()\n\n    ans = solve(S)\n\n    print(ans % P_MOD)\n","S=list(input())\n\ndp=[[0 for i in range(13)]for j in range(len(S)+1)]\ndp[0][0]=1\n\nfor i in range(len(S)):\n    if S[i]==\"?\":\n        for j in range(13):\n            \n            for k in range(10):\n                dp[i+1][(10*j+k)%13]+=dp[i][j]\n                dp[i+1][(10*j+k)%13]%=(10**9+7)\n    else:\n        for j in range(13):\n            dp[i+1][(10*j+int(S[i]))%13]+=dp[i][j]\n            dp[i+1][(10*j+int(S[i]))%13]%=(10**9+7)\nprint(dp[-1][5])","s = input()\ndp = [[0]*13 for _ in range(len(s))]\nif s[0] == '?':\n    for i in range(10):\n        dp[0][i] = 1\nelse:\n    dp[0][s[0]] = 1\nfor k in range(len(s)-1):\n    if s[k+1] == '?':\n        for i in range(13):\n            for j in range(10):\n                dp[k+1][((i*10%13)+j)%13] += dp[k][i]\n                dp[k+1][((i*10%13)+j)%13] %= (10**9+7)\n    else:\n        for i in range(13):\n            dp[k+1][((i*10%13)+int(s[k+1]))%13] += dp[k][i]\n            dp[k+1][((i*10%13)+int(s[k+1]))%13] %= (10**9+7)\nprint(dp[-1][5])\n","a = list(input())\n\nb = [[0 for i in range(13)] for i in range(len(a) + 1)]\nb[0][0] = 1\n\ncheck = 0\nfor i in range(len(a)):\n    if a[i] == '?':\n        check = -1\n    else:\n        check = int(a[i])\n\n    for j in range(10):\n        if check == -1 or check == j:\n            for k in range(13):\n                b[i + 1][(k * 10 + j) % 13] += b[i][k]\n        \n    for l in range(13):\n        b[i + 1][l] %= 1000000007\n\nprint(b[len(a)][4])","s = input()\ns = s[::-1]\nn = len(s)\ns = '#' + s\nMOD = 10**9+7\ndp = [[0]*13 for _ in range(n+5)]\n\"\"\"\ndp[i][j] \u306f i \u6841\u76ee\u307e\u3067\u898b\u305f\u3068\u304d 13 \u3067\u5272\u3063\u305f\u3042\u307e\u308a\u304c j\u3000\u3068\u306a\u308b\u3088\u3046\u306a\u3082\u306e\u306e\u500b\u6570\n\"\"\"\ndp[0][0] = 1\nr = 1 \nfor i in range(1,n+1):\n    for j in range(13):\n        if s[i] != '?':\n            dp[i][j] = dp[i-1][(j-r*int(s[i]))%13] % MOD\n        if s[i] == '?':\n            for k in range(10):\n                dp[i][j] += dp[i-1][(j-r*k)%13]\n            dp[i][j] %= MOD\n    r = (r*10) % 13\nprint(dp[n][5])","s = input()\nn = len(s)\nmod = 10**9+7\ndp = [[0]*13 for _ in range(n+1)]\ndp[0][0] = 1\nfor i,d in enumerate(s):\n\tif d==\"?\":\n\t\tfor x in range(10):\n\t\t\tfor y in range(13):\n\t\t\t\tdp[i+1][(y*10+x)%13] += dp[i][y]\n\telse:\n\t\td = int(d)\n\t\tfor y in range(13):\n\t\t\tdp[i+1][(y*10+d)%13] += dp[i][y]\n\tfor j in range(13):\n\t\tdp[i+1][j] %= mod\nprint(dp[n][5])","import numpy as np\nN=input()\n\nlists = []\ntemp=np.asarray([i for i in range(10)])\n\ndic={0:1}\n\nfor i in N:\n    new_dic={}\n    hoge=list(dic.items())\n    if i == \"?\":\n        for amari,count in hoge:\n            amari*=10\n            for num in temp:\n                a = (amari + num) % 13\n                if a in new_dic:\n                    new_dic[a]+=count\n                else:\n                    new_dic[a]=count\n    else:\n        num=int(i)\n        for amari,count in hoge:\n            a = (amari*10 + num)%13\n            if a in new_dic:\n                new_dic[a]+=count\n            else:\n                new_dic[a]=count\n    dic = new_dic\n\ntry:\n    print(dic[5]%(10**9 + 7))\nexcept:\n    print(0)","S = input()\n\nrs = [0] * 13\n\nM = 10**9 + 7\n\nif S[-1] == \"?\":\n    rs[:10] = [1] * 10\nelse:\n    rs[int(S[-1])] = 1\n\nfor i in range(1, len(S)):\n    nrs = [0] * 13\n    c = S[-i - 1]\n    if c == \"?\":\n        ns = range(10)\n    else:\n        ns = [int(c)]\n    for n in ns:\n        r = (10 ** i) * n % 13\n        for j in range(13):\n            jj = (j + r) % 13\n            nrs[jj] = (nrs[jj] + rs[j]) % M\n    rs = nrs\n\n# print(rs)\nprint(rs[5])\n\n","def main():\n\n    \"\"\" convenient functions\n    # for i, a in enumerate(iterable)\n    # q, mod = divmod(a, b)\n    # divmod(x, y) returns the tuple (x\/\/y, x%y)\n    # Higher-order function: reduce(operator.mul, xyz_count, 1)\n    # manage median(s) using two heapq https:\/\/atcoder.jp\/contests\/abc127\/tasks\/abc127_f\n    \"\"\"\n\n    \"\"\"convenient decorator\n    # @functools.lru_cache():\n    # to facilitate use of recursive function\n        # ex:\n        # from functools import lru_cache\n        # import sys\n        # sys.setrecursionlimit(10**9)\n        # @lru_cache(maxsize=None)\n        # def fib(n):\n        #     if n < 2:\n        #         return n\n        #     return fib(n-1) + fib(n-2)\n        # print(fib(1000))\n    \"\"\"\n    \n    # import numpy as np\n    import sys\n    sys.setrecursionlimit(10**7)\n    from itertools import accumulate, combinations, permutations, product # https:\/\/docs.python.org\/ja\/3\/library\/itertools.html\n    # accumulate() returns iterator! to get list: list(accumulate())\n    from math import factorial, ceil, floor, sqrt\n    def factorize(n):\n        \"\"\"return the factors of the Arg and count of each factor\n        \n        Args:\n            n (long): number to be resolved into factors\n        \n        Returns:\n            list of tuples: factorize(220) returns [(2, 2), (5, 1), (11, 1)]\n        \"\"\"\n        fct = []  # prime factor\n        b, e = 2, 0  # base, exponent\n        while b * b <= n:\n            while n % b == 0:\n                n = n \/\/ b\n                e = e + 1\n            if e > 0:\n                fct.append((b, e))\n            b, e = b + 1, 0\n        if n > 1:\n            fct.append((n, 1))\n        return fct\n    def combinations_count(n, r):\n        \"\"\"Return the number of selecting r pieces of items from n kinds of items.\n        \n        Args:\n            n (long): number\n            r (long): number\n        \n        Raises:\n            Exception: not defined when n or r is negative\n        \n        Returns:\n            long: number\n        \"\"\"\n        # TODO: How should I do when n - r is negative?\n        if n < 0 or r < 0:\n            raise Exception('combinations_count(n, r) not defined when n or r is negative')\n        if n - r < r: r = n - r\n        if r < 0: return 0\n        if r == 0: return 1\n        if r == 1: return n\n        numerator = [n - r + k + 1 for k in range(r)]\n        denominator = [k + 1 for k in range(r)]\n        for p in range(2,r+1):\n            pivot = denominator[p - 1]\n            if pivot > 1:\n                offset = (n - r) % p\n                for k in range(p-1,r,p):\n                    numerator[k - offset] \/= pivot\n                    denominator[k] \/= pivot\n        result = 1\n        for k in range(r):\n            if numerator[k] > 1:\n                result *= int(numerator[k])\n        return result\n    def combinations_with_replacement_count(n, r):\n        \"\"\"Return the number of selecting r pieces of items from n kinds of items allowing individual elements to be repeated more than once.\n        \n        Args:\n            n (long): number\n            r (long): number\n        \n        Raises:\n            Exception: not defined when n or r is negative\n        \n        Returns:\n            long: number\n        \"\"\"\n        if n < 0 or r < 0:\n            raise Exception('combinations_with_replacement_count(n, r) not defined when n or r is negative')\n        elif n == 0:\n            return 1\n        else:\n            return combinations_count(n + r - 1, r)\n    from bisect import bisect_left, bisect_right\n    from collections import deque, Counter, defaultdict # https:\/\/docs.python.org\/ja\/3\/library\/collections.html#collections.deque\n    from heapq import heapify, heappop, heappush, heappushpop, heapreplace,nlargest,nsmallest # https:\/\/docs.python.org\/ja\/3\/library\/heapq.html\n    from copy import deepcopy, copy # https:\/\/docs.python.org\/ja\/3\/library\/copy.html\n    import operator\n    from operator import itemgetter\n    # ex1: List.sort(key=itemgetter(1))\n    # ex2: sorted(tuples, key=itemgetter(1,2))\n    from functools import reduce, lru_cache\n    def chmin(x, y):\n        \"\"\"change minimum\n        if x > y, x = y and return (x, True).\n        convenient when solving problems of dp[i]\n        \n        Args:\n            x (long): current minimum value\n            y (long): potential minimum value\n        \n        Returns:\n            (x, bool): (x, True) when updated, else (x, False)\n        \"\"\"\n        if x > y:\n            x = y\n            return (x, True)\n        else:\n            return (x, False)\n    def chmax(x, y):\n        \"\"\"change maximum\n        if x < y, x = y and return (x, True).\n        convenient when solving problems of dp[i]\n        \n        Args:\n            x (long): current maximum value\n            y (long): potential maximum value\n        \n        Returns:\n            (x, bool): (x, True) when updated, else (x, False)\n        \"\"\"\n        if x < y:\n            x = y\n            return (x, True)\n        else:\n            return (x, False)\n\n    from fractions import gcd # Deprecated since version 3.5: Use math.gcd() instead.\n    def gcds(numbers):\n        return reduce(gcd, numbers)\n    def lcm(x, y):\n        return (x * y) \/\/ gcd(x, y)\n    def lcms(numbers):\n        return reduce(lcm, numbers, 1)\n\n    # first create factorial_list\n    # fac_list = mod_factorial_list(n)\n    INF = 10 ** 18\n    MOD = 10 ** 9 + 7\n    modpow = lambda a, n, p = MOD: pow(a, n, p) # Recursive function in python is slow!\n    def modinv(a, p = MOD):\n        # evaluate reciprocal using Fermat's little theorem:\n        # a**(p-1) is identical to 1 (mod p) when a and p is coprime\n        return modpow(a, p-2, p)\n    def modinv_list(n, p = MOD):\n        if n <= 1:\n            return [0,1][:n+1]\n        else:\n            inv_t = [0,1]\n            for i in range(2, n+1):\n                inv_t += [inv_t[p % i] * (p - int(p \/ i)) % p]\n            return inv_t\n    def modfactorial_list(n, p = MOD):\n        if n == 0:\n            return [1]\n        else:\n            l = [0] * (n+1)\n            tmp = 1\n            for i in range(1, n+1):\n                tmp = tmp * i % p\n                l[i] = tmp\n            return l\n    def modcomb(n, k, fac_list = [], p = MOD):\n        # fac_list = modfactorial_list(100)\n        # print(modcomb(100, 5, modfactorial_list(100)))\n        from math import factorial\n        if n < 0 or k < 0 or n < k: return 0\n        if n == 0 or k == 0: return 1\n        if len(fac_list) <= n:\n            a = factorial(n) % p\n            b = factorial(k) % p\n            c = factorial(n-k) % p\n        else:\n            a = fac_list[n]\n            b = fac_list[k]\n            c = fac_list[n-k]\n        return (a * modpow(b, p-2, p) * modpow(c, p-2, p)) % p\n    def modadd(a, b, p = MOD):\n        return (a + b) % MOD\n    def modsub(a, b, p = MOD):\n        return (a - b) % p\n    def modmul(a, b, p = MOD):\n        return ((a % p) * (b % p)) % p\n    def moddiv(a, b, p = MOD):\n        return modmul(a, modpow(b, p-2, p))\n\n    class UnionFindTree:\n        \"\"\"union find tree class\n        TODO: fix this description...\n        how to use (example):\n        >>  uf = UnionFindTree(N) \n        >>  if uf.find_root(a) == uf.find_root(b):\n        >>      do something\n        >>  else:\n        >>      do something\n        >>      uf.unite(a, b)\n        \"\"\"\n        def __init__(self, N):\n            self.root = [-1] * (N+1)\n            self.rank   = [0]  * (N+1)\n            self.connected_num = [1] * (N+1)\n    \n        def find_root(self,x):\n            root = self.root\n            while root[x] != -1:\n                x = root[x]\n            return x\n    \n        def unite(self,x,y):\n            root = self.root\n            rank = self.rank\n            connected_num = self.connected_num\n            find_root = self.find_root\n    \n            rx = find_root(x)\n            ry = find_root(y)\n            if rx != ry:\n                if rank[rx] < rank[ry]:\n                    root[rx] = ry\n                    rx,ry = ry,rx\n                else:\n                    if rank[rx] == rank[ry]:\n                        rank[rx] += 1\n                    root[ry] = rx       \n                connected_num[rx] += connected_num[ry]\n\n    \"\"\" initialize variables and set inputs\n    # initialize variables\n        # to initialize list, use [0] * n\n        # to initialize two dimentional array, use [[0] * N for _ in range(N)]\n    # set inputs\n        # open(0).read() is a convenient method:\n        # ex) n, m, *x = map(int, open(0).read().split())\n        #     min(x[::2]) - max(x[1::2])\n        # ex2) *x, = map(int, open(0).read().split())\n        #     don't forget to add comma after *x if only one variable is used\n    # preprocessing\n        # transpose = [x for x in zip(*data)]\n        # ex) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] => [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n        # flat = [flatten for inner in data for flatten in inner]\n        # ex) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # calculate and output\n        # output pattern\n        # ex1) print(*l) => when l = [2, 5, 6], printed 2 5 6\n    \"\"\"\n\n    # functions used\n    r = lambda: sys.stdin.readline().strip()\n    r_int = lambda: int(r())\n    R = lambda: list(map(int, r().split()))\n    Rmap = lambda: map(int, r().split())\n    Rfloat = lambda: list(map(float, r().split()))\n    Rtuple = lambda: tuple(map(int, r().split()))\n\n    \"\"\" how to treat input\n    # single int: int(r())\n    # single string: r()\n    # single float: float(r())\n    # line int: R()\n    # line string: r().split()\n    # line (str, int, int): [j if i == 0 else int(j) for i, j in enumerate(r().split())]\n    # lines int: [R() for _ in range(n)]\n    \"\"\"\n\n    if __name__ != '__main__':\n        # for test\n        sys.stdin = open('sample.txt')\n        \n    # ----------------------------------\n    # main\n\n    S = r()\n    lenS = len(S)\n    target_digit_S = lenS - 1\n    dp = [[0]*13 for _ in range(lenS)] \n    \n    # initialize\n    res = (10**target_digit_S)%13\n    if S[0] == '?':\n        for i in range(10):\n            dp[0][(i*res)%13] += 1\n    else:\n        intS = int(S[0])\n        dp[0][(intS*res)%13] += 1\n    \n    for i in range(1, lenS):\n        target_digit_S -= 1\n        res = (10**target_digit_S)%13\n        if S[i] == '?':\n            for k in range(10):\n                for j in range(13):\n                    dp[i][(k*res+j)%13] = (dp[i][(k*res+j)%13] + dp[i-1][j]) % MOD\n        else:\n            intS = int(S[i])\n            for j in range(13):\n                dp[i][(intS*res+j)%13] += (dp[i][(intS*res+j)%13] + dp[i-1][j]) % MOD\n    print(dp[lenS-1][5])\n    \n    # end of main\n    # ----------------------------------\n\n    \"\"\"memo: how to use defaultdict of list\n    # initialize\n    Dic = defaultdict(list)\n    # append \/ extend\n    Dic[x].append(y)\n    # for\n    for k, v in Dic.items():\n    \"\"\"\n    \n    \"\"\"memo: how to solve binary problems\n    # to make binary digits text\n    >>> a = 5\n    >>> bin_str_a = format(a, '#06b')\n    >>> print(bin_str_a)\n    0b0101 # first 2 strings (='0b') indicates it is binary\n    \"\"\"\n\nif __name__ == '__main__':\n    main()","INF = 10 ** 9 + 7\n\nS = input()\n# dp[i][j]\u306f\u3046\u3057\u308d(\u5c0f\u3055\u3044\u4f4d)\u304b\u3089i\u6841\u309213\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\ndp = [[0] * 13 for _ in range(len(S) + 1)]\ndp[0][0] = 1\nmul = 1\n\nfor i in range(len(S)):\n    x = S[-(i + 1)]\n    if x == \"?\":\n        for k in range(10):\n            for j in range(13):\n                dp[i + 1][(mul * k + j) % 13] += dp[i][j]\n                dp[i + 1][(mul * k + j) % 13] %= INF\n    else:\n        k = int(x)\n        for j in range(13):\n            dp[i + 1][(mul * k + j) % 13] += dp[i][j]\n            dp[i + 1][(mul * k + j) % 13] %= INF\n    mul = mul * 10\n\nprint(dp[len(S)][5])","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\nclass ModInt:\n\n    def __init__(self, x):\n        self.x = x.x if isinstance(x, ModInt) else x % MOD\n\n    __str__ = lambda self:str(self.x)\n    __repr__ = __str__\n    __int__ = lambda self: self.x\n    __index__ = __int__\n\n    __add__ = lambda self, other: ModInt(self.x + ModInt(other).x)\n    __sub__ = lambda self, other: ModInt(self.x - ModInt(other).x)\n    __mul__ = lambda self, other: ModInt(self.x * ModInt(other).x)\n    __pow__ = lambda self, other: ModInt(pow(self.x, ModInt(other).x, MOD))\n    __mod__ = lambda self, other: ModInt(self.x % ModInt(other).x)\n    __truediv__ = lambda self, other: ModInt(self.x * pow(ModInt(other).x, MOD - 2, MOD))\n    __floordiv__ = lambda self, other: ModInt(self.x \/\/ ModInt(other).x)\n    __radd__ = lambda self, other: ModInt(other + self.x)\n    __rsub__ = lambda self, other: ModInt(other - self.x)\n    __rpow__ = lambda self, other: ModInt(pow(other, self.x, MOD))\n    __rmod__ = lambda self, other: ModInt(other % self.x)\n    __rmul__ = lambda self, other: ModInt(other * self.x)\n    __rtruediv__ = lambda self, other: ModInt(other * pow(self.x, MOD - 2, MOD))\n    __rfloordiv__ = lambda self, other: ModInt(other \/\/ self.x)\n\n    __lt__ = lambda self, other: self.x < ModInt(other).x\n    __gt__ = lambda self, other: self.x > ModInt(other).x\n    __le__ = lambda self, other: self.x <= ModInt(other).x\n    __ge__ = lambda self, other: self.x >= ModInt(other).x\n    __eq__ = lambda self, other: self.x == ModInt(other).x\n    __ne__ = lambda self, other: self.x != ModInt(other).x\n\n\ndef main():\n    S = list(input())\n    N = len(S)-1\n    dp = [[0] * 13  for _   in range(N)]\n    dp[0] = [ModInt(0) for _ in range(13)]\n    \n    if S[0] == '?':\n        for i in range(10):\n            dp[0][i] = ModInt(1)\n    else:\n        dp[0][int(S[0])] = ModInt(1)\n\n    for i in range(1,N):\n        if S[i] == '?':\n            for j in range(13):\n                for k in range(10):\n                    dp[i][(j * 10 + k) % 13 ] += dp[i-1][j]\n        else:\n            for j in range(13):\n                dp[i][ (j* 10 + int(S[i])) % 13 ] += dp[i-1][j]\n        \n\n    print(dp[len(S)-2][5])\n\n\n\n\n\n\n\n\n\n    pass\nif __name__ == '__main__':\n    main()"," ","d=[0]*13\nd[0]=1\nmul=1\nmulmod=1\nt=input()[::-1]\n\nzero=[0]*13\nl=len(t)\nmodlist=[10**i%13 for i in range(l)]\nfor n,c in enumerate(t):\n    e=zero[:]\n\n    for i in (range(10) if c==\"?\" else[int(c)]):\n        for j in range(13):\n            #e[(i*mul+j)%13]+=d[j]\n            k=(i*mulmod+j)%13\n            e[k]+=d[j]\n            e[k]%=1000000007\n    d=e\n    mul*=10\n    mulmod=mul%13","import numpy as np\nMOD = 10 ** 9 + 7\n\ndp = np.zeros(13, dtype = np.int64)\ndp[0] = 1\n\nmove = np.arange(0,52,4) % 13\nten = np.ones(10, dtype=np.int64)\nfor s in input():\n  dp = dp[move]\n  if s == '?':\n    dp = np.convolve(dp, ten)\n    dp[:9] += dp[13:22]\n    dp %= MOD\n  else:\n    s = int(s)\n    dp = np.roll(dp, s)\n  \nprint(dp[5])\n","x = 1000000007\n\nS = input()\nS = [int(s) if s != '?' else s for s in S]\nS = S[::-1]\n\ndp = [[0 for j in range(13)] for i in range(len(S) + 1)]\n\ndp[0][0] = 1\n\nfor i, s in enumerate(S):\n    for j in range(10):\n        if s != '?' and s != j:\n            continue\n\n        digit_r = ((10 ** i) * j) % 13\n\n        for k in range(13):\n            r = (digit_r + k) % 13\n            dp[i + 1][r] += dp[i][k]\n\n    dp[i + 1][r] %= 13\n\nprint(int(dp[-1][5] % x))\n","MOD = 10 ** 9 + 7\n \ns = str(input())\n \ns = list(s)\n \ncur = [0] * 13\n \nif s[0] != \"?\":\n    cur[int(s[0])] = 1\nelse:\n    for j in range(10):\n        cur[j] = 1\n \nfor i in range(1,len(s)):\n    pre = cur[:]\n    cur = [0] * 13\n    if s[i] != \"?\":\n        for j in range(13):\n            q = (j * 10 + int(s[i])) % 13\n            cur[q] += pre[j] % MOD\n    else:\n        for j in range(13):\n            for k in range(10):\n                p = (j * 10 + k) % 13\n                cur[p] += pre[j] % MOD\n \nprint(cur[5] % MOD)","S=input()\nx=0\nM=13\nMOD=10**9+7\ndp=[[0]*M for i in range(2)]\ndp[1][0]=1\nfor i in range(len(S)):\n  dp[0]=[0]*13\n  s=S[i]\n  if s=='?':\n    for s in range(10):\n      for j,d in enumerate(dp[1]):\n        dp[0][(j+s)%M]+=d\n        dp[0][(j+s)%M]%=MOD\n  else:\n    s=int(s)\n    for j,d in enumerate(dp[1]):\n      dp[0][(j+s)%M]=d\n  for j,d in enumerate(dp[0]):\n    dp[1][(10*j)%M]=d\nprint(dp[0][5]%MOD)\n\n","S = input()[::-1]\n\ndp = [[1]]\nMOD = 10**9+7\n\nfor i in range(1,len(S)+1):\n  s = S[i-1]\n  dp += [[0]*13]\n  if s=='?':\n    for j in range(13):\n      for h in range(10):\n        x = h*(10**(i-1))%13\n        dp[i][(j+x)%13] += dp[i-1][j]\n    for j in range(13):\n      dp[i][j] = dp[i][j]%MOD\n  else:\n    c = int(s)\n    x = c*(10**(i-1))%13\n    for j in range(13):\n      dp[i][(j+x)%13] = dp[i-1][j]\n    for j in range(13):\n      dp[i][j] = dp[i][j]%13\nprint(dp[-1][5])","import numpy as np\nS = input()\nINF = 10 ** 9 + 7\ndp = [np.array([0 for _ in range(13)]) for l in range(len(S))]\nS_li = [_ for _ in S]\nS_li = S_li[::-1]\nif S_li[0] == '?':\n    dp[0][0:10] = [1,1,1,1,1,1,1,1,1,1]\nelse:\n    dp[0][int(S_li[0])] = 1\nfor _ in range(1,len(S)):\n    if S_li[_] == '?':\n        for x in range(10):\n            mod = (x * (10 ** (_ % 6))) % 13\n            add = list(dp[_ - 1][(13 - mod):13]) + list(dp[_ - 1][0:(13 - mod)])\n            dp[_] += np.array(add)\n    else:\n        s = int(S_li[_])\n        mod = (s * (10 ** (_ % 6))) % 13\n        add = list(dp[_ - 1][(13 - mod):13]) + list(dp[_ - 1][0:(13 - mod)])\n        dp[_] += np.array(add)\nprint(dp[-1][5] % INF)\nprint(dp[-1])","import sys,math,copy\n\ndef main():\n    # import numpy as np\n    input = sys.stdin.readline\n    S = ''.join(reversed(input().strip()))\n\n    # dp = np.zeros((13), dtype=int)\n    # dp_ = np.zeros((13), dtype=int)\n    dp = [0] * 13\n    dp_ = [0] * 13\n    mod13_tuple = tuple([i % 13 for i in range(12 ** 2 + 1)])\n    tuple10 = tuple(range(10))\n    tuple13 = tuple(range(13))\n    divisor = 10 ** 9 + 7\n    dp_[0] = 1\n    mul = 1\n    for i in range(len(S)):\n        s = S[i]\n        if s == '?':\n            for d in tuple10:\n                m = mod13_tuple[(d * mul)]\n                for pm in tuple13:\n                    dp[mod13_tuple[(pm+m)]] += dp_[pm]\n\n        else:\n            si = int(s)\n            m = mod13_tuple[(si * mul)]\n            for pm in tuple13:\n                dp[mod13_tuple[(pm+m)]] = dp_[pm]\n\n        # dp_ = dp % divisor\n        # dp = dp * 0 # np.zeros((13), dtype=int)\n        for j in tuple13:\n            dp_[j] = dp[j] % divisor\n            dp[j] = 0\n        mul = mod13_tuple[(mul * 10)]\n    print(dp_[5])\n\nmain()","import numpy as np\n\nA = list(input())\nNUM=13\n\nDP = np.zeros((len(A),NUM), dtype=np.int64)\nANS = np.zeros(NUM, dtype=np.int64)\n\n\nfor i in range(len(A)):\n        if(A[i]==\"?\"):\n                for j in range(10):\n                        DP[i][(j * (10**(len(A)-i-1)))%NUM]+=1\n        else:\n                #print((int(A[i])*(10**(len(A)-i-1)))%NUM)\n                DP[i][(int(A[i])*(10**(len(A)-i-1)))%NUM]+=1\n\nfor i in range(len(A)-1,0,-1):    \n        for j in range(NUM):\n                for k in range(NUM):\n                        ANS[j] += DP[i][(k)%NUM]*DP[i-1][(NUM-k+j)%NUM]\n                        ANS[j]=ANS[j]%(10**9+7)\n        DP[i-1] = ANS[:]\n        ANS = [0]*NUM\n\nANS = DP[0][:]\n\n#print(ANS)\nprint(ANS[5])\n\n\n","import sys\nfrom io import StringIO\nimport unittest\nimport os\n\n# \u518d\u5e30\u51e6\u7406\u4e0a\u9650(dfs\u4f5c\u6210\u6642\u306b\u8a2d\u5b9a\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u9650\u5ea6\u8fd1\u3044\u5024\u3092\u7d44\u307f\u8fbc\u3080)\nsys.setrecursionlimit(999999999)\n\n\n# \u5b9f\u88c5\u3092\u884c\u3046\u95a2\u6570\ndef resolve(test_def_name=\"\"):\n    s = list(input())\n\n    s.reverse()\n\n    devval = pow(10, 9) + 7\n\n    dp = [[0 for i in range(13)] for i in range(100001)]\n\n    # \u521d\u671f\u5024\u8a2d\u5b9a\n    if s[0] == \"?\":\n        for j in range(10):\n            dp[0][j] += 1\n    else:\n        dp[0][int(s[0]) % 13] += 1\n\n    # DP\n    for i in range(1, len(s)):\n        for j in range(10):\n            if s[i] != \"?\" and s[i] != str(j):\n                continue\n\n            aaa = j * pow(10, i) % 13  # 100\/13\u306e\u4f59\u308a\u306a 200\/13\u306e\u4f59\u308a\u306a\u3069\n\n            # \u524dDP\u306e\u5024\u3092\u4ecaDP\u306b\u52a0\u7b97\n            for k in range(13):\n                dp[i][(aaa + k) % 13] = (dp[i][(aaa + k) % 13] + dp[i - 1][k] % devval) % devval\n\n    # \u4f59\u308a5\u306e\u8981\u7d20\u6570\u304c\u7b54\u3048\n    print(dp[len(s) - 1][5])\n\n\n# \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\nclass TestClass(unittest.TestCase):\n    def assertIO(self, assert_input, output):\n        stdout, sat_in = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(assert_input)\n        resolve(sys._getframe().f_back.f_code.co_name)\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, sat_in\n        self.assertEqual(out, output)\n\n    def test_input_1(self):\n        test_input = \"\"\"??2??5\"\"\"\n        output = \"\"\"768\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_2(self):\n        test_input = \"\"\"?44\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_3(self):\n        test_input = \"\"\"7?4\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_4(self):\n        test_input = \"\"\"?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\"\"\"\n        output = \"\"\"153716888\"\"\"\n        self.assertIO(test_input, output)\n\n    # \u81ea\u4f5c\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306e\u3072\u306a\u5f62(\u5229\u7528\u6642\u306f\u300ctes_t\u300d\u306e\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u3092\u524a\u9664\u3059\u308b\u3053\u3068\n    def test_1original_1(self):\n        test_input = \"\"\"?\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(test_input, output)\n\n\n# \u5b9f\u88c5or\u30c6\u30b9\u30c8\u306e\u547c\u3073\u51fa\u3057\nif __name__ == \"__main__\":\n    if os.environ.get(\"USERNAME\") is None:\n        # AtCoder\u63d0\u51fa\u6642\u306e\u5834\u5408\n        resolve()\n\n    else:\n        # \u81eaPC\u306e\u5834\u5408\n        unittest.main()\n","s=input()[::-1]\nls=len(s)\ndp=[[0]*13 for i in range(ls)]\n\nif s[0]=='?':\n    for i in range(10):dp[0][i]=1\nelse:dp[0][int(s[0])]=1\n\nfor i in range(1,ls):\n    if s[i]!='?':\n        for k in range(13):\n            dp[i][(k+(int(s[i])*10**i)%13)%13]+=dp[i-1][k]\n    else:\n        for j in range(10):\n            for k in range(13):\n                dp[i][(k+(j*10**i)%13)%13]+=dp[i-1][k]\n    for k in range(13):\n        dp[i][k]%=10**9+7\nprint(dp[-1][5])","import sys,collections as cl,bisect as bs\nsys.setrecursionlimit(100000)\nMax = sys.maxsize\nmod = 10**9+7\ndef l(): #int\u306elist\n\treturn list(map(int,input().split()))\ndef m(): #\u8907\u6570\u6587\u5b57\n\treturn map(int,input().split())\ndef onem(): #N\u3068\u304b\u306e\u53d6\u5f97\n\treturn int(input())\ndef s(x): #\u5727\u7e2e\n\ta = []\n\taa = x[0]\n\tsu = 1\n\tfor i in range(len(x)-1):\n\t\tif aa == x[i+1]:\n\t\t\ta.append([aa,su])\n\t\t\taa = x[i+1]\n\t\t\tsu = 1\n\t\telse:\n\t\t\tsu += 1\n\ta.append([aa,su])\n\treturn a\ndef jo(x): #list\u3092\u30b9\u30da\u30fc\u30b9\u3054\u3068\u306b\u5206\u3051\u308b\n\treturn \" \".join(map(str,x))\ndef max2(x): #\u4ed6\u306e\u3068\u304d\u3082\u3069\u3046\u3088\u3046\u306b\u4f5c\u6210\u53ef\u80fd\n\treturn max(map(max,x))\n\nn = list(input())\nn.reverse()\nnnn = len(n)\ndi = 1\ndp = [0 for i in range(13)]\nd = [0 for i in range(13)]\n\nif n[0] == '?':\n\tfor i in range(10):\n\t\td[i] = 1\nelse:\n\td[int(n[0])] = 1\n\nfor i in range(1,nnn):\n\tdp = [0 for i in range(13)]\n\tdi *= 10\n\tdi %= 13\n\tif n[i] == \"?\":\n\t\tfor j in range(10):\n\t\t\tj = j * di\n\t\t\tj %= 13\n\t\t\tfor kk in range(13):\n\t\t\t\tdp[(j + kk)%13] += d[kk]\n\t\t\t\tdp[(j + kk)%13] %= mod\n\telse:\n\t\tk = int(n[i])\n\t\tk = k * di\n\t\tk %= 13\n\t\tfor kk in range(13):\n\t\t\tdp[(k + kk)%13] += d[kk]\n\t\t\tdp[(k + kk)%13] %= mod\n\td = dp[:]\nprint(d[5]%mod)\n\n\n\n\n\n\n\n\n\n\n\n","def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n    #from itertools import product\n    from bisect import bisect_left,bisect_right\n    import heapq\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #inf = 10**17\n    mod = 10**9 + 7\n\n    s = input().rstrip()\n    n = len(s)\n    dp = [[0]*13 for _ in range(n)]\n\n    if s[-1]=='?':\n        for i in range(10):\n            dp[0][i] = 1\n    else:\n        a = int(s[-1])\n        dp[0][a] = 1\n\n    for i in range(1, n):\n        if s[-(i+1)] == '?':\n            for j in range(10):\n                a = (10**i) * j % 13\n                for k in range(13):\n                    dp[i][(a+k)%13] += dp[i-1][k]\n                    dp[i][(a+k)%13] %= mod\n        else:\n            a = int(s[-(i+1)])\n            a = (10**i) * a % 13\n            for k in range(13):\n                dp[i][(a+k)%13] += dp[i-1][k]\n                dp[i][(a+k)%13] %= mod\n                \n    print(dp[-1][5])\n\n\nif __name__ == '__main__':\n    main()","mod = 10 ** 9 + 7\n\ns = input()\ndp = [0] * 13\ndp[0] = 1\nfor i in range(len(s)):\n    dp2 = [0] * 13\n    for j in range(10):\n        if (s[i] == '?') | (s[i] == str(j)):\n            for k in range(13):\n                dp2[(10 * k + j) % 13] += dp[k]\n                dp2[(10 * k + j) % 13] %= mod\n    dp = dp2\nprint(dp[5])","N=input()\n\nlists = []\ntemp=[i for i in range(10)]\n\ndic={0:1}\n\nfor i in N:\n    new_dic={}\n    hoge=list(dic.items())\n    if i == \"?\":\n        for amari,count in hoge:\n            amari*=10\n            for num in temp:\n                a = (amari + num) % 13\n                if a in new_dic:\n                    new_dic[a]+=count\n                else:\n                    new_dic[a]=count\n    else:\n        num=int(i)\n        for amari,count in hoge:\n            a = (amari*10 + num)%13\n            if a in new_dic:\n                new_dic[a]+=count\n            else:\n                new_dic[a]=count\n    dic = new_dic\n\ntry:\n    print(dic[5]%(10**9 + 7))\nexcept:\n    print(0)","s = input()\n\nmod = 1000000007\nlength = len(s)\nans = list([0]*13 for i in range(length+1))\nans[0][0] = 1\n\nfor i in range(length):\n    for j in range(13):\n        if s[i] == '?':\n            for k in range(10):\n                x = (j*10 + k)%13\n                ans[i+1][x] = (ans[i+1][x] + ans[i][j]) % mod\n        else:\n            x = (j*10 + int(s[i])) % 13\n            ans[i+1][x] = (ans[i+1][x] + ans[i][j]) % mod\n\nprint(ans[length][5])\n","#N=list(map(int, input().split()))\nS=input()\nbig=10**9+7\n\nlis=[0]*13\n\nif S[0]==\"?\":\n\tlis=[1]*10+[0]*3\nelse:\n\tlis[int(S[0])]=1\nS=S[1:]\n\nfor i in S:\n\tnewlis=[0]*13\n\tif i==\"?\":\n\t\tfor j in range(10):#\u306f\u3066\u306a\u306e\u4e2d\u8eab\n\t\t\tfor k in range(13):#\u524d\u306e\u3042\u307e\u308a\n\t\t\t\tnewlis[(10*k+j)%13]+=lis[k]\n\telse:\n\t\tfor k in range(13):\n\t\t\tnewlis[(10*k+int(i))%13]+=lis[k]\n\tlis=newlis\nprint(lis[5]%big)\n","import numpy as np\nimport sys\ndef input():\n    return sys.stdin.readline()[:-1]\n\nS = input()\n\ndiv_num = 10 ** 9 + 7\narr = np.arange(13, dtype = int)\n# dp = [[0 for _ in range(13)] for _ in range(len(S))]\ndp = np.zeros([len(S), 13], dtype = int)\n\nif S[-1] == \"?\":\n    for ii in range(10): dp[0, ii] = 1\nelse:\n    dp[0, int(S[-1])] = 1\n\nfor ii in range(1, len(S)):\n    ind = -ii-1\n    if S[ind] == '?':\n        for n in range(10):\n            res = ((10 ** ii) * n) % 13\n            res = (arr + res) % 13\n            for jj in range(13):\n                dp[ii, res[jj]] += dp[ii - 1, jj]\n                if dp[ii, res[jj]] > div_num: dp[ii, res[jj]] -= div_num\n    else:\n        res = ((10 ** ii) * int(S[ind])) % 13\n        res = (arr + res) % 13\n        for jj in range(13):\n            dp[ii, res[jj]] += dp[ii - 1, jj]\n            if dp[ii, res[jj]] > div_num: dp[ii, res[jj]] -= div_num\n\nprint (dp[-1, 5])\n","M=10**9+7\n#\u30ea\u30b9\u30c8\u306b\u5165\u529b\uff08\u6587\u5b57\u5217\uff09\ntext=input()\nlst=list(text)\nlst.reverse()\ndigit=len(lst)\n\n######\u516d\u6841\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u3001?\u306e\u6570\u3068\u305d\u306e\u4ed6\u306e\u6570\u5b57\u3092\u6570\u3048\u308b\n######\u305f\u3068\u3048\u3070\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304c\u300c9?????81????\u300d\u3060\u3063\u305f\u3089\n######[[17,0],[8,1],[0,2],[0,2],[0,2],[0,2]]\u306b\u306a\u308b\nsix=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]\nfor i in range(digit):\n  if(lst[i]==\"?\"):\n    six[i%6][1]=six[i%6][1]+1\n  else:\n    six[i%6][0]=(six[i%6][0]+int(lst[i]))%13\n\n    \n######\u6570\u5b57\u90e8\u5206\u306e\u4f59\u308a\u304b\u30895\u3092\u5f15\u304f    \nrem=-(six[0][0]-3*six[1][0]-4*six[2][0]\n      -1*six[3][0]+3*six[4][0]+4*six[5][0]-5)%13\n\n######\u6f38\u5316\u5f0f\u30926\u500b\u7528\u610f\ndef mat1(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-1)%13]+ls[(i-2)%13]\n               +ls[(i-3)%13]+ls[(i-4)%13]+ls[(i-5)%13]\n               +ls[(i-6)%13]+ls[(i-7)%13]+ls[(i-8)%13]\n               +ls[(i-9)%13])%M\n  return val_ls\ndef mat10(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+3)%13]+ls[(i+6)%13]\n               +ls[(i+9)%13]+ls[(i+12)%13]+ls[(i+15)%13]\n               +ls[(i+18)%13]+ls[(i+21)%13]+ls[(i+24)%13]\n               +ls[(i+27)%13])%M\n  return val_ls\ndef mat100(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+4)%13]+ls[(i+8)%13]\n               +ls[(i+12)%13]+ls[(i+16)%13]+ls[(i+20)%13]\n               +ls[(i+24)%13]+ls[(i+28)%13]+ls[(i+32)%13]\n               +ls[(i+36)%13])%M\n  return val_ls\ndef mat1000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+1)%13]+ls[(i+2)%13]\n               +ls[(i+3)%13]+ls[(i+4)%13]+ls[(i+5)%13]\n               +ls[(i+6)%13]+ls[(i+7)%13]+ls[(i+8)%13]\n               +ls[(i+9)%13])%M\n  return val_ls\ndef mat10000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-3)%13]+ls[(i-6)%13]\n               +ls[(i-9)%13]+ls[(i-12)%13]+ls[(i-15)%13]\n               +ls[(i-18)%13]+ls[(i-21)%13]+ls[(i-24)%13]\n               +ls[(i-27)%13])%M\n  return val_ls\ndef mat100000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-4)%13]+ls[(i-8)%13]\n               +ls[(i-12)%13]+ls[(i-16)%13]+ls[(i-20)%13]\n               +ls[(i-24)%13]+ls[(i-28)%13]+ls[(i-32)%13]\n               +ls[(i-36)%13])%M\n  return val_ls\n\n\n######\u6f38\u5316\u5f0f\u3092\u9069\u7528\nmodulos=[1,0,0,0,0,0,0,0,0,0,0,0,0]\nfor j in range(six[0][1]):\n  modulos=mat1(modulos)\nfor j in range(six[1][1]):\n  modulos=mat10(modulos)\nfor j in range(six[2][1]):\n  modulos=mat100(modulos)\nfor j in range(six[3][1]):\n  modulos=mat1000(modulos)\nfor j in range(six[4][1]):\n  modulos=mat10000(modulos)\nfor j in range(six[5][1]):\n  modulos=mat100000(modulos)\nprint(modulos[rem])\n","s = input()\n\nmod = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(len(s))]\n\nif s[0] == '?':\n    dp[0] = [1] * 10 + [0] * 3\nelse:\n    dp[0][int(s[0])] = 1\n\nfor i in range(len(s)-1):\n    if s[i+1] == '?':\n        for j in range(13):\n            for k in range(10):\n                dp[i+1][(j*10+k)%13] = (dp[i+1][(j*10+k)%13] + dp[i][j]) % mod\n    else:\n        n = int(s[i+1])\n        for j in range(13):\n            dp[i+1][(j*10+n)%13] = (dp[i+1][(j*10+n)%13] + dp[i][j]) % mod\n\nprint(dp[len(s)-1][5])","def slove():\n    import sys\n    input = sys.stdin.readline\n    s = str(input().rstrip('\\n'))\n    is_first = True\n    ls = [[0] * 13 for _ in range(len(s))]\n    mod = 10 ** 9 + 7\n    for i in range(len(s)):\n        if is_first:\n            is_first = False\n            if s[-i-1] == \"?\":\n                for j in range(10):\n                    ls[i][j] += 1\n            else:\n                t = int(s[-i-1])\n                ls[i][t] += 1\n        else:\n            mlt = pow(10, i)\n            if s[-i-1] == \"?\":\n                for j in range(13):\n                    for k in range(10):\n                        r = (j + mlt * k) % 13\n                        ls[i][r] += ls[i-1][j]\n                        ls[i][r] %= mod\n            else:\n                t = int(s[-i-1])\n                for j in range(13):\n                    r = (j + mlt * t) % 13\n                    ls[i][r] += ls[i-1][j]\n                    ls[i][r] %= mod\n    print(ls[-1][5])\n\n\nif __name__ == '__main__':\n    slove()\n","s=input()\nmod = 1000000007\n\ndp = [[0 for l in range(13)] for m in range(len(s)+1)]\ndp[0][0] = 1\nfor i in range(1,len(s)+1):\n  if s[-i] == '?':\n    for j in range(10):\n      for k in range(13):\n        dp[i][(k+j*10**(i-1))%13] += dp[i-1][k] %mod\n  else:\n    for k in range(13):\n      dp[i][(int(s[-i])*10**(i-1) +k)%13] += dp[i-1][k] %mod\n\nprint(dp[len(s)][5] %mod)","import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef SMI(): return input().split()\ndef SLI(): return list(input())\n\ndef printlist(lst, k=' '): print(k.join(list(map(str, lst))))\nINF = float('inf')\n\n# from math import ceil, floor, log2\n# from collections import deque\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np\n# from numpy import cumsum  # accumulate\n\ndef solve():\n    S = SLI()\n    l = len(S)\n    MOD = 1000000007\n    dp = [[0]*13 for _ in range(l+1)]\n    dp[0][0] = 1\n    mul = 1\n    for i in range(l):\n        s = S[-(i + 1)]\n        if s == '?':\n            for q in range(10):\n                for j in range(13):\n                    dp[i+1][(q*mul + j)%13] += dp[i][j]\n                    dp[i+1][(q*mul + j)%13] %= MOD\n        else:\n            for j in range(13):\n                k = int(s)\n                dp[i+1][(k*mul + j)%13] += dp[i][j]\n                dp[i+1][(k*mul + j)%13] %= MOD\n\n        mul = mul * 10 % 13\n    # print(dp[-1])\n    print(dp[-1][5] % MOD)\n\nif __name__ == '__main__':\n    solve()\n","s = input()\nmod = 10**9 + 7\n\ndp = [[0] * 13 for _ in range(2)]\ntmp = 0\nfor si in s:\n    if(si != '?'):\n        tmp = (tmp*10 + int(si)) % 13\n    else:\n        tmp = tmp*10 % 13\n\ndp[0][tmp] = 1\nexp10 = 1\npointer = 0\nfor i,si in enumerate(s[::-1]):\n\n    if(si!='?'):\n        exp10 = exp10 * 10 % 13\n        continue\n\n    pointer = 1 - pointer\n    for j in range(13):\n        dp[pointer][j] = 0\n\n    for j in range(13):\n        for k in range(10):\n            dp[pointer][(j + exp10*k)%13] += dp[1-pointer][j]\n\n    for j in range(13):\n        dp[pointer][j] %= mod\n\n    exp10 = exp10 * 10 % 13\n\nprint(dp[pointer][5])\n","s = input()\nMOD = 10**9+7\n\ndp = [[0 for i in range(13)] for i in range(len(s)+1)]\ndp[0][0] = 1\n\nfor i in range(len(s)):\n  if s[i]=='?':\n    for k in range(10):\n      for j in range(13):\n        dp[i+1][(j*10+k)%13] = (dp[i+1][(j*10+k)%13] + dp[i][j])%MOD\n  else:\n    t = int(s[i])\n    for j in range(13):\n      dp[i+1][(j*10+t)%13] = (dp[i+1][(j*10+t)%13] + dp[i][j])%MOD\nprint(dp[len(s)][5])","import numpy as np\nS=input()\nN=len(S)\nmod=10**9+7\ndp=[[0]*13 for _ in range(N+1)]\ndp=np.array(dp)\nS=S[::-1]\ndp[0][0]=1\nfor i in range(1,N+1):\n    if i==1:\n        p=1\n    else:\n        p*=10\n        p%=mod\n    s=S[i-1]\n    if s!=\"?\":\n        now=(p*int(s))%mod\n        idx=(13-now)%13\n        add=np.concatenate([dp[i-1][idx:],dp[i-1][:idx]])\n        p#rint(add)\n        dp[i]+=add%mod\n    else:\n        for j in range(10):\n            now=(p*j)%mod\n            idx=(13-now)%13\n            #print(idx)\n            add=np.concatenate([dp[i-1][idx:],dp[i-1][:idx]])\n            #print(add)\n            dp[i]+=add%mod\n    dp[i]%=mod\n#print(dp)\nprint(dp[N][5])","S = input()\n\nC, qi = [1] + [0] * 12, 1\n\nfor i in range(len(S)):\n    if S[-(i + 1)] == '?':\n        tC = [0] * 13\n        for j in range(10):\n            q = (j * qi) % 13\n            for c in range(13):\n                tC[(c + q) % 13] += C[c]\n        C = tC\n    else:\n        q, tC = (int(S[-(i + 1)]) * qi) % 13, [0] * 13\n        for c in range(13):\n            tC[(c + q) % 13] = C[c]\n        C = tC\n    qi = (qi * 10) % 13\n\nprint(C[5] % (10 ** 9 + 7))\n","# D - Digits Parade\n\n# dp[i][j] S\u306e\u5927\u304d\u3044\u4f4d\u304b\u3089i\u6841\u306e\u6570\u3067\u3001\u3042\u308a\u5f97\u308b\u3082\u306e\u306e\u3046\u3061\u300113\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u306b\u306a\u308b\u3082\u306e\u306e\u500b\u6570\u30020\u6841\u30b9\u30bf\u30fc\u30c8\n# \u5927\u304d\u3044\u4f4d\u304b\u3089\u9806\u306b\u59cb\u3081\u306a\u3044\u306813\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u4f59\u308a\u3092\u6c42\u3081\u308b\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308b\n\nS = input()\n\nMOD = 10**9 + 7\ndp = [[0]*13 for _ in range(len(S))]\n\nif S[0] == \"?\":\n    for j in range(10):\n        dp[0][j] = 1\nelse:\n    dp[0][int(S[0])] = 1\n\nfor i in range(1, len(S)):\n    if S[i] == \"?\":\n        for q_number in range(10): # ?\u306e\u4e2d\u8eab\u3068\u3057\u3066\u3042\u308a\u5f97\u308b\u6570\u5b57\n            for front_number in range(13):\n                dp[i][(10 * front_number + q_number) % 13] += dp[i-1][front_number]\n                dp[i][(10 * front_number + q_number) % 13] %= MOD\n    else:\n        for front_number in range(13):\n            dp[i][(10 * front_number + int(S[i])) % 13] += dp[i-1][front_number]\n            dp[i][(10 * front_number + int(S[i])) % 13] %= MOD\n\nprint(dp[len(S)-1][5] % MOD)","import copy\nS = input()\ns = len(S)\nMOD = 10**9+7\nD = [0]*13\nS = S[::-1]\nfor i in range(s):\n    if i==0:\n        if S[i]==\"?\":\n            for j in range(10):\n                D[j]+=1\n        else:\n            D[int(S[i])]+=1\n    else:\n        P = copy.copy(D)\n        if S[i]==\"?\":\n            p = 10**i\n            for j in range(1,10):\n                q = (j*p)%13\n                for k in range(13):\n                    D[(k+q)%13] += P[k]\n            continue\n        else:\n            p = int(S[i])*(10**i)\n            D = P[13-p%13:]+P[:13-p%13]\nprint(D[5]%MOD)","s = input()\nn = len(s)\nMOD = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(n):\n    x = s[i]\n    for j in range(13):\n        if x == '?':\n            for k in range(10):\n                dp[i + 1][(10 * j + k) % 13] += dp[i][j]\n                dp[i + 1][(10 * j + k) % 13] %= MOD\n        else:\n            k = int(x)\n            dp[i + 1][(10 * j + k) % 13] += dp[i][j]\n            dp[i + 1][(10 * j + k) % 13] %= MOD\n\nprint(dp[n][5])","import sys,math,copy\n# import numpy as np\ninput = sys.stdin.readline\nS = reversed(input().strip())\n\n# dp = np.zeros((13), dtype=int)\n# dp_ = np.zeros((13), dtype=int)\ndp = [0] * 13\ndp_ = [0] * 13\nmod13_list = [i % 13 for i in range(12 ** 2 + 1)]\nrange10 = range(10)\nrange13 = range(13)\ndivisor = 10 ** 9 + 7\ndp_[0] = 1\nmul = 1\nfor s in S:\n    if s == '?':\n        for d in range10:\n            m = mod13_list[(d * mul)]\n            for pm in range13:\n                dp[mod13_list[(pm+m)]] += dp_[pm]\n\n    else:\n        si = int(s)\n        m = mod13_list[(si * mul)]\n        for pm in range13:\n            dp[mod13_list[(pm+m)]] = dp_[pm]\n\n    # dp_ = dp % divisor\n    # dp = dp * 0 # np.zeros((13), dtype=int)\n    for i in range13:\n        dp_[i] = dp[i] % divisor\n        dp[i] = 0\n    mul = mod13_list[(mul * 10)]\nprint(dp_[5])","import sys\nsys.setrecursionlimit(10 ** 7)\nread = sys.stdin.buffer.read \ninp = sys.stdin.buffer.readline\ndef inpS(): return inp().rstrip().decode()\nreadlines = sys.stdin.buffer.readlines \nMOD = 10**9+7\n\nS = inpS()\nN = len(S)\ndp = [[0]*13 for _ in range(N+1)]\n\ndp[0][0] = 1\nfor dgt in range(N):\n  for mo in range(13):\n    if S[dgt] == \"?\":\n      for nxt in range(10):\n        ind = (mo*10 + nxt) % 13\n        dp[dgt+1][ind] += dp[dgt][mo]\n        dp[dgt+1][ind] %= MOD\n    else:\n      ind = (mo*10 + int(S[dgt])) % 13\n      dp[dgt+1][ind] += dp[dgt][mo]\n      dp[dgt+1][ind] %= MOD\nprint(dp[N][5])        ","#!\/usr\/bin\/env python\nfrom collections import defaultdict, deque\nimport math\nfrom math import factorial\nimport fractions\nimport re\n\nBIGNUM = 10 ** 9 + 7\n\nMOD13 = {}\nfor i in range(13):\n    for j in range(13):\n        MOD13[(i, j)] = (i + j) % 13\n\ndef main():\n    S = input().strip()\n\n    dp = {0: 1}\n    for i in range(len(S)):\n        s = S[-(i+1)]\n        if s == \"?\":\n            snums = [(k * 10 ** i) % 13 for k in range(10)]\n        else:\n            snums = [(int(s) * 10 ** i) % 13]\n\n        new_dp = defaultdict(int)\n        for snum in snums:\n            for n, v in dp.items():\n                mod = MOD13[(snum, n)]\n                new_dp[mod] += v\n        \n        dp = new_dp\n\n    if not 5 in dp:\n        dp[5] = 0\n    print(dp[5] % BIGNUM)\n\nif __name__ == '__main__':\n    main()\n"],"raw_generations":["s=input()\ndp=[[0]*13 for _ in range(10**5+5)]\ndp[0][0]=1\nfor i in range(len(s)):\n    if s[i]=='?':\n        c=-1\n    else:\n        c=int(s[i])\n    \n    for j in range(10):\n        if c!=-1 and c!=j:\n            continue\n        for k in range(13):\n            dp[i+1][(k*10+j)%13]+=dp[i][k]\n    for j in range(13):\n        dp[i+1][j]%=(10**9+7)\n\nprint(dp[len(s)][5])","#!\/usr\/bin\/env python3\nimport sys\n\nMOD = 1000000007  # type: int\n\n\ndef solve(S: str):\n    \"\"\"\n    >>> solve(\"05\")\n    1\n    >>> solve(\"18\")\n    1\n    >>> solve(\"13\")\n    0\n    \"\"\"\n    pre, cur = [0] * 13, None\n    base = 10\n    if S[-1] == \"?\":\n        cur = [1] * 10 + [0] * 3\n    else:\n        cur = [0] * 13\n        cur[int(S[-1])] = 1\n    for n in reversed(S[:-1]):\n        pre, cur = cur, pre\n        for i in range(13): # \u518d\u751f\u6210\u3092\u907f\u3051\u308b\n            cur[i] = 0\n        g = range(10) if n == \"?\" else [int(n)]\n        for i in g:\n            t = base * i % 13\n            for j in range(13):\n                cur[(j+t)%13] = (cur[(j+t)%13] + pre[j]) % MOD\n        base = (base * 10) % 13        \n        # print(n, pre, cur, base)\n    return cur[5]\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)  # type: str\n    print(solve(S))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    test()\n    main()\n","S = input()\nS = S[::-1]\nans = [[0] * 13 for _ in range(len(S))]\nMOD = 10 ** 9 + 7\nif S[0] == \"?\":\n    for i in range(10):\n        ans[0][i] = 1\nelse:\n    ans[0][int(S[0])] = 1\n\nfor i, s in enumerate(S):\n    if i == 0:\n        continue\n    if s == \"?\":\n        for n in range(10):\n            for j in range(13):\n                if ans[i - 1][j] == 0:\n                    continue\n                ans[i][(j + n * 10 ** i) % 13] += ans[i - 1][j]\n                ans[i][(j + n * 10 ** i) % 13] %= MOD\n    else:\n        for j in range(13):\n            ans[i][(j + int(s) * 10 ** i) % 13] = ans[i - 1][j]\n\nprint(ans[-1][5])\n","#!\/usr\/bin\/env python\nimport numpy as np\n\ndef main():\n    S = input()\n    \n    lenS = len(S)\n    N = 13\n    DP = np.zeros(N, dtype=np.int64)\n    DP[0] = 1\n    \n    mod = 10 ** 9 + 7\n    mul = 1\n    for i in reversed(range(lenS)):\n        nextDP = np.zeros(N, dtype=np.int64)\n        c = S[i]\n        if c == '?':\n            for k in range(10):\n                for j in range(N):\n                    nextDP[(k * mul + j) %N] += DP[j]\n                    nextDP[(k * mul + j) %N] %= mod\n\n        else:\n            k = int(S[i])\n            for j in range(N):\n                nextDP[(k * mul + j) %N] += DP[j]\n                nextDP[(k * mul + j) %N] %= mod\n\n        mul *= 10\n        mul %= N\n        DP = nextDP\n\n    return DP[5]\n\nif __name__ == '__main__':\n    print(main())\n\n","S = str(input())\nS_len = len(S)\n\nDP = [[0] * 13 for i in range(S_len+1)]\nDP[S_len][0] = 1\n\nfor i in reversed(range(S_len)):\n\n    num = 10 ** (S_len - 1 - i) % 13\n\n    if S[i] != \"?\":\n        for j in range(13):\n            if DP[i + 1][j] != 0:\n                DP[i][(j + int(S[i]) * num) % 13] = (DP[i][(j + int(S[i]) * num) % 13] + DP[i + 1][j]) % 1000000007\n    else:\n        for j in range(13):\n            for k in range(10):\n                if DP[i + 1][j] != 0:\n                    DP[i][(j + k * num) % 13] = (DP[i][\n                                                     (j + k * num) % 13] +\n                                                 DP[i + 1][j]) % 1000000007\n\nprint(DP[0][5])\n\n","import sys\nreadline = sys.stdin.readline\n\ndef main():\n\n\t#s = tuple(input())\n\ts = input()\n\tlength = len(s)\n\n\tdp = [[0]*13 for _ in range(length+1)]\n\tMOD = 10**9+7\n\tif s[-1] == '?':\n\t\tfor i in range(10):\n\t\t\tdp[1][i] = 1\n\telse:\n\t\tdp[1][int(s[-1])] = 1\n\n\tfor i in range(1,length):\n\t\tif s[-i-1] != '?':\n\t\t\tnum = (int(s[-i-1]) * (10**i)) % 13\n\t\t\tfor j in range(13):\n\t\t\t\tdp[i+1][j] = dp[i][(13-num+j)%13]\n\t\t\t\tdp[i+1][j] %= MOD\n\t\telse:\n\t\t\tnum = (10**i) % 13\n\t\t\ta = 0\n\t\t\tfor j in range(10):\n\t\t\t\tfor k in range(13):\n\t\t\t\t\tdp[i+1][k] += dp[i][(13-a+k)%13]\n\t\t\t\t\tdp[i+1][k] %= MOD\n\t\t\t\ta += num\n\n\tprint(dp[-1][5] % MOD)\n\nif __name__ == '__main__':\n\tmain()","import math\nimport copy\nfrom copy import deepcopy\nimport sys\nimport fractions\nimport numpy as np\nfrom functools import reduce\nimport statistics\nimport heapq\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\n# ===FUNCTION===\n\ndef getInputInt():\n    inputNum = int(input())\n    return inputNum\n\n\ndef getInputListInt():\n    outputData = []\n    inputData = input().split()\n    outputData = [int(n) for n in inputData]\n\n    return outputData\n\n\ndef getSomeInputInt(n):\n    outputDataList = []\n    for i in range(n):\n        inputData = int(input())\n        outputDataList.append(inputData)\n\n    return outputDataList\n\n\ndef getSomeInputListInt(n):\n    inputDataList = []\n    outputDataList = []\n    for i in range(n):\n        inputData = input().split()\n        inputDataList = [int(n) for n in inputData]\n        outputDataList.append(inputDataList)\n\n    return outputDataList\n\n\n# ===CODE===\n\ndef getInputStr():\n    inputStr = str(input())\n    return inputStr\n\ndata = getInputStr()\n\na = str(data)\nlistStr = []\nlistStr = list(a)\n\ndel listStr[len(listStr)-1]\nlistStr.reverse()\n\ndp = [[0]*13 for _ in range(len(listStr)+1)]\ndp[0][0] = 1\nordinal = 1\n\nINF = 10 ** 9 + 7\n\nfor i in range(len(listStr)):\n    if i ==0:\n        keta = 1\n    else:\n        keta = pow(10, i)\n\n    if listStr[i] == \"?\":\n        for k in range(10):\n            for j in range(13):\n                dp[i+1][int(((k*keta)%13 + j) % 13)] += dp[i][j]\n                # dp[i + 1][int(((k * ordinal) + j) % 13)] %= INF\n    else:\n        k = int(listStr[i])\n        for j in range(13):\n            dp[i + 1][int(((k*keta)%13 + j) % 13)] += dp[i][j]\n            # dp[i + 1][int(((k*ordinal) + j) % 13)] %= INF\n\n\nans = dp[len(listStr)][5] % INF\nprint(ans)","S = list(input())\nN = len(S)\ndp = [[0] * 13 for _ in range(N+1)]\nMOD = 10**9 + 7\ns = S[0]\nif s=='?':\n    for k in range(10):\n        dp[0][k] = 1\nelse:\n    dp[0][s] = 1\n \n\nfor i in range(1,N):\n    s = S[i]\n    for j in range(13):\n        if s=='?':\n            for k in range(10):\n                tmp = (j*10 + k)%13\n                dp[i][tmp] += dp[i-1][j]\n                dp[i][tmp] %= MOD\n        else:\n            tmp = (j*10 + int(s))%13\n            dp[i][tmp] += dp[i-1][j]\n            dp[i][tmp] %= MOD\n            \nprint(dp[N-1][5])","mod=10**9+7\ns=input()\nn=len(s)\nDP=[[0]*13 for _ in range(n+1)]\nDP[0][0]=1\nfor i in range(n):\n  r=pow(10,n-1-i,13)\n  if s[i]==\"?\":\n    for j in range(10):\n      rr=(r*j)%13\n      for k in range(13):\n        if k>=rr:\n          DP[i+1][k]+=DP[i][k-rr]\n        else:\n          DP[i+1][k]+=DP[i][k-rr+13]\n        DP[i+1][k]%=mod\n  else:\n    rr=(r*int(s[i]))%13\n    for k in range(13):\n      if k>=rr:\n        DP[i+1][k]+=DP[i][k-rr]\n      else:\n        DP[i+1][k]+=DP[i][k-rr+13]\n      DP[i+1][k]%=mod\nprint(DP[n][5]%mod)\n","#N=list(map(int, input().split()))\nS=input()\nbig=10**9+7\n\nlis=[0]*13\n\nif S[0]==\"?\":\n\tlis=[1]*10+[0]*3\nelse:\n\tlis[int(S[0])]=1\nS=S[1:]\n\nfor i in S:\n\tnewlis=[0]*13\n\tif i==\"?\":\n\t\tfor j in range(10):#\u306f\u3066\u306a\u306e\u4e2d\u8eab\n\t\t\tfor k in range(13):#\u524d\u306e\u3042\u307e\u308a\n\t\t\t\tnewlis[(10*k+j)%13]+=lis[k]\n\telse:\n\t\tfor k in range(13):\n\t\t\tnewlis[(10*k+int(i))%13]+=lis[k]\n\tlis=newlis.copy()\nprint(lis[5]%big)","def main():\n    MOD = 10 ** 9 + 7\n\n    s = input()\n    r = [0] * 13\n    r[0] = 1\n    p = 1\n    for c in reversed(s):\n        if c == '?':\n            tank = []\n            for x in range(10):\n                x = x * p % 13\n                tank.append(r[13 - x:] + r[:13 - x])\n            r = map(sum, zip(*tank))\n            *r, = map(lambda x: x % MOD, r)\n\n\n        else:\n            x = int(c)\n            x = x * p % 13\n            r = r[13 - x:] + r[:13 - x]\n        p = p * 10 % 13\n\n    print(r[5])\n\n\nif __name__ == '__main__':\n    main()\n","S = input()\ndp = [[0 for _ in range(13)] for _ in range(len(S)+1)]\nrank = 1\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[len(S)-i-1] == \"?\":\n            for k in range(10):\n                dp[i + 1][(k * rank + j) % 13] += dp[i][j]\n        else:\n            k = int(S[len(S)-i-1])\n            dp[i + 1][(k * rank + j) % 13] += dp[i][j]\n\n    rank *= 10\n\nans = dp[len(S)][5] % (10 ** 9 + 7)\nprint(ans)\n","# -*- coding: utf-8 -*-\nS = str(input())\nMOD = 1000000007\n\ndp = [0 for i in range(13)]\ndp[0] = 1\nfor i in range(0, len(S)):\n    next_dp = [0 for i in range(13)]\n    if S[len(S) - i - 1] == '?':\n        for k in range(10):\n            for j in range(13):\n                add = k * pow(10,i) % 13\n                next_dp[(j + add) % 13] += dp[j]\n    else:\n        for j in range(13):\n            add = int(S[len(S) - i - 1]) * pow(10,i) % 13\n            next_dp[(j + add) % 13] = dp[j]\n    dp = next_dp\n\nprint(dp[5] % MOD)","S=list(input())\nMOD=10**9+7\ndp=[0]*13\ndp[0]=1\nfor i in range(1,len(S)+1):\n    ans=[0]*13\n    if S[-i]==\"?\":\n        for j in range(10):\n            a=(j*10**(i-1))%13\n            for k in range(13):\n                ans[(k+a)%13]=ans[(k+a)%13]+dp[k]\n    else:\n        a=int(S[-i])\n        a=(a*10**(i-1))%13\n        for k in range(13):\n            ans[(k+a)%13]=ans[(k+a)%13]+dp[k]\n    dp=ans.copy()\n    print(ans)\nprint(ans[5]%MOD)","x = 1000000007\n\nS = input()\nS = [int(s) if s != '?' else s for s in S]\nS = S[::-1]\n\ndp = [[0 for j in range(13)] for i in range(len(S) + 1)]\n\ndp[0][0] = 1\n\nfor i, s in enumerate(S):\n    for j in range(10):\n        if s != '?' and s != j:\n            continue\n\n        digit_r = ((10 ** i) * j) % 13\n\n        for k in range(13):\n            r = (digit_r + k) % 13\n            dp[i + 1][r] += dp[i][k] % x\n\nprint(int(dp[-1][5] % x))\n","N=input()\na=1000000000+7\nb=[]\nfor i in N:\n    if i=='?':b.append(\"9\")\n    else:b.append(i)\nb=int(b)\nprint((b-5)\/13)","import numpy as np\n\nS = input()\n\nk = len(S)\nk0 = (len(S)%6-1)%6\nk1 = (len(S)%6-2)%6\nk2 = (len(S)%6-3)%6\nk3 = (len(S)%6-4)%6\nk4 = (len(S)%6-5)%6\nk5 = (len(S)%6-6)%6\n\na0 = S[k0::6] \na1 = S[k1::6] \na2 = S[k2::6] \na3 = S[k3::6] \na4 = S[k4::6] \na5 = S[k5::6] \n\ndef digitSum(n):\n    # \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\n    s = str(n)\n    # \uff11\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\u3002\n    array = list(map(int, s))\n    # \u5408\u8a08\u5024\u3092\u8fd4\u3059\n    return sum(array)\n\nA = np.zeros(6)\nB = np.zeros(6)\n\n\nb0 = a0.replace(\"?\", \"\")\nB[0] = int(len(a0) - len(b0))\nA[0] = digitSum(b0)\n\nb1 = a1.replace(\"?\", \"\")\nB[1] = int(len(a1) - len(b1))\nA[1] = digitSum(b1)\n\nb2 = a2.replace(\"?\", \"\")\nB[2] = int(len(a2) - len(b2))\nA[2] = digitSum(b2)\n\nb3 = a3.replace(\"?\", \"\")\nB[3] = int(len(a3) - len(b3))\nA[3] = digitSum(b3)\n\nb4 = a4.replace(\"?\", \"\")\nB[4] = int(len(a4) - len(b4))\nA[4] = digitSum(b4)\n\nb5 = a5.replace(\"?\", \"\")\nB[5] = int(len(a5) - len(b5))\nA[5] = digitSum(b5)\n\nfor i in range(6):\n    if B[i] == 0:\n        B[i] = 1\n    else:\n        B[i] = B[i] *10\n    \nans = 0\n\na = A[0] + A[1]*10 + A[2]*100 + A[3]*1000 + A[4]*10000 + A[5]*100000 \na = a%13\n    \nfor i0 in range(int(B[0])):\n    for i1 in range(int(B[1])):\n        for i2 in range(int(B[2])):\n            for i3 in range(int(B[3])):\n                for i4 in range(int(B[4])):\n                    for i5 in range(int(B[5])):\n                        if (i0 + i1*10 + i2*100 + i3*(-1) + i4*(-10) + i5*(-100) + a)%13 == 5:\n                            ans += 1\n                            \nprint(ans)","S = [int(x) if x != \"?\" else -1 for x in input()]\ng = 10 ** 9 + 7\nx = 1\nDP = [[0] * 13 for _ in range(2)]\nDP[0][0] = 1\nfor i in range(len(S)):\n    for j in range(13):\n        DP[1][j] = DP[0][j] % g\n        DP[0][j] = 0\n    for j in range(13):\n        if S[i] == -1:\n            s = (j*10)%13\n            e = (s+10)%13\n        else:\n            s = (j*10+S[i])%13\n            e = (s+1)%13\n        DP[0][s] += DP[1][j]\n        if s > e:\n            DP[0][0] += DP[1][j]\n        DP[0][e] -= DP[1][j]\n    w = 0\n    for j in range(13):\n        w += DP[0][j]\n        DP[0][j] = w\n\nprint(DP[0][5] % g)\n","S = input()\n\nl = len(S)\nMOD = 10**9+7\ndp = [[0 for i in range(13)] for j in range(l+1)]\ndp[0][0] = 1\nfor i in range(l):\n    if S[i] == '?':\n        for j in range(10):\n            for k in range(13):\n                dp[i+1][(k*10+j)%13] += dp[i][k] % MOD\n    else:\n        for k in range(13):\n            dp[i+1][(k*10+int(S[i-1]))%13] += dp[i][k] % MOD\n\nprint(dp[-1][5] % MOD)","s = list(input())\n\nMOD = pow(10, 9) + 7\n\nn = len(s)\ns.reverse()\n\ndp = [[0] * 13 for _ in range(n)]\n\n#r = list(range(10))\n\n#init\nif s[0] == \"?\":\n    for j in range(10):\n        dp[0][j] = 1\nelse:\n    q = int(s[0])\n    dp[0][q] = 1\n\nfor i in range(1, n):\n\n    # for l in range(10):\n    #     r[l] = r[l] * 10 % 13\n\n    #print(r)\n\n    if s[i] == \"?\":\n        for j in range(10):\n            q = j * pow(10, i, 13) % 13\n            for k in range(13):\n                dp[i][k] += dp[i-1][k-q]\n    \n    else:\n        q = int(s[i]) * pow(10, i, 13) % 13\n        #print(q)\n        for k in range(13):\n            dp[i][k] += dp[i-1][k-q]\n    #print(dp[i])\n\nprint(dp[n-1][5] % MOD)","z=10\nm=z**9+7\nk=13\nt=input()[::-1]\ndp=[0]*k\ndp[0]=1\nfor d in range(len(t)):\n  p=[0]*k\n  if t[d]=='?':\n    for x in range(z):\n      r=int(x)*pow(z,d,k)\n      for i in range(k):\n        p[(i+r)%k]+=dp[i]\n  else:\n    r=int(t[d])*pow(z,d,k)\n    for i in range(k):\n      p[(i+r)%k]+=dp[i]\n  dp=[j%m for j in p]\nprint(dp[5]%m)","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\nclass ModInt:\n\n    def __init__(self, x):\n        self.x = x.x if isinstance(x, ModInt) else x % MOD\n\n    __str__ = lambda self:str(self.x)\n    __repr__ = __str__\n    __int__ = lambda self: self.x\n    __index__ = __int__\n\n    __add__ = lambda self, other: ModInt(self.x + ModInt(other).x)\n    __sub__ = lambda self, other: ModInt(self.x - ModInt(other).x)\n    __mul__ = lambda self, other: ModInt(self.x * ModInt(other).x)\n    __pow__ = lambda self, other: ModInt(pow(self.x, ModInt(other).x, MOD))\n    __mod__ = lambda self, other: ModInt(self.x % ModInt(other).x)\n    __truediv__ = lambda self, other: ModInt(self.x * pow(ModInt(other).x, MOD - 2, MOD))\n    __floordiv__ = lambda self, other: ModInt(self.x \/\/ ModInt(other).x)\n    __radd__ = lambda self, other: ModInt(other + self.x)\n    __rsub__ = lambda self, other: ModInt(other - self.x)\n    __rpow__ = lambda self, other: ModInt(pow(other, self.x, MOD))\n    __rmod__ = lambda self, other: ModInt(other % self.x)\n    __rmul__ = lambda self, other: ModInt(other * self.x)\n    __rtruediv__ = lambda self, other: ModInt(other * pow(self.x, MOD - 2, MOD))\n    __rfloordiv__ = lambda self, other: ModInt(other \/\/ self.x)\n\n    __lt__ = lambda self, other: self.x < ModInt(other).x\n    __gt__ = lambda self, other: self.x > ModInt(other).x\n    __le__ = lambda self, other: self.x <= ModInt(other).x\n    __ge__ = lambda self, other: self.x >= ModInt(other).x\n    __eq__ = lambda self, other: self.x == ModInt(other).x\n    __ne__ = lambda self, other: self.x != ModInt(other).x\n\n\ndef main():\n    S = input()\n\n    dp = [[0] * 13  for _   in range(len(S)-1)]\n    dp[0] = [ModInt(0) for _ in range(13)]\n    \n    if S[0] == '?':\n        for i in range(10):\n            dp[0][i] = ModInt(1)\n    else:\n        dp[0][int(S[0])] = ModInt(1)\n\n    for i in range(1,len(S)-1):\n        if S[i] == '?':\n            for j in range(13):\n                for k in range(10):\n                    dp[i][(j * 10 + k) % 13 ] += dp[i-1][j]\n        else:\n            for j in range(13):\n                dp[i][ (j* 10 + int(S[i])) % 13 ] += dp[i-1][j]\n        \n\n    print(dp[len(S)-2][5])\n\n\n\n\n\n\n\n\n\n    pass\nif __name__ == '__main__':\n    main()","M = 10**9 + 7\na = [1] + [0] * 12\np = 1\nfor c in reversed(input()):\n    r = range(0, p * 10, p) if c == '?' else (p * int(c),)\n    a = [sum(a[(i - j) % 13] for j in r) % M for i in range(13)]\n    p = p * 10 % 13\nprint(a[5])","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\ndef main():\n    S = input()\n    N = len(S)-1\n    dp = [0] * 13\n    \n\n    if S[0] == '?':\n        R = range(10)\n    else:\n        R = [int(S[0])]\n\n    for i in R:\n        dp[i] = 1\n\n    for i in range(1,N):\n        if S[i] == '?':\n            R = range(10)\n        else:\n            R = [int(S[i])]\n\n\n        dppre = dp\n        dp = [0] * 13\n        for j in range(13):\n            for k in R:\n                dp[(j * 10 + k) % 13 ] += dppre[j]\n        for j in range(13):\n            dp[j] %= MOD\n    \n    print(dp[5])\n\n\nif __name__ == '__main__':\n    main()","S = input()\nN = len(S)\nS = list(S)\nS.reverse()\n\ndp = [[0]*13 for _ in range(100100)]\ndp[0][0] = 1\nmod = 10**9+7\nfor i in range(1, N + 1):\n    if S[i-1] == \"?\":\n        for j in range(13):\n            for k in range(10):\n                dp[i][(j + k*10**(i-1)) % 13] += dp[i-1][j]\n    else:\n        for j in range(13):\n            dp[i][(j+int(S[i-1])*10**(i-1)) % 13] = dp[i-1][j]\n\n    for j in range(13):\n        dp[i][j] %= mod\n\nprint(dp[N][5])\n","mod=10**9+7\ns=input()\n\nb=int(s.replace(\"?\",\"0\"))%13\nif b<=5:\n    cal=5-b\nelse:\n    cal=18-b\n\np=[[i*j%13 for i in range(10)] for j in range(13)]\nrev=s[::-1]\nd={i:0 for i in range(13)}\nnum=rev.find(\"?\")\ntmp=10**num%13\nfor i in p[tmp]:\n    d[i]+=1\n\nfor i,v in enumerate(rev[num+1:]):\n    #print(i+num+1)\n    if v==\"?\":\n        tmp=10**(i+num+1)%13\n        t_d={i:0 for i in range(13)}\n        #print(\"i,tmp:\",i+num+1,\",\",tmp)\n        for k in range(0,13):\n            for j in range(0,10):\n                t_d[(p[tmp][j]+k)%13]+=d[k]\n            #print(t_d.values())\n        for j in range(13):\n            d[j]=t_d[j]\n        #print(t_d)\n#print(d)\nprint(d[cal]%mod)\n        \n\n","# -*- coding: utf-8 -*-\n# D - Digits Parade\nimport sys \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nMOD = 10**9+7\nS = readline().decode().rstrip()\nN = len(S)\n\ndp = [0]*13\ndp[0] = 1\n# if S[0] == '?':\n#     rem = pow(10,N,13)\n#     for j in range(10):\n#         t = rem*j%13\n#         dp[t] += 1\n# else:\n#     s = int(S[0])\n#     rem = pow(10,N,13)*s%13\n#     dp[rem] += 1\n\nfor i in range(N):\n    s = S[i]\n    ndp = [0]*13\n    rem = pow(10,N-i-1,13)\n    if s == '?':\n        for j in range(10):\n            t = rem*j%13\n            for k in range(13):\n                ndp[(k+t)%13] += dp[k]\n                ndp[(k+t)%13] %= MOD\n    else:\n        s = int(s)\n        t = rem*s%13\n        for k in range(13):\n            ndp[(k+t)%13] += dp[k]\n            ndp[(k+t)%13] %= MOD\n    dp = ndp\nprint(dp[5]%MOD)","p = 10**9+7\nS = input().strip()\nN = len(S)\ndp = [[0 for _ in range(13)] for _ in range(N+1)]\nfor m in range(13):\n    dp[0][0] = 1\nfor i in range(1,N+1):\n    for m in range(13):\n        if S[i-1]==\"?\":\n            for j in range(10):\n                dp[i][(m*10+j)%13] = (dp[i][(m*10+j)%13]+dp[i-1][m])%p\n        else:\n            dp[i][(m*10+int(S[i-1]))%13] = (dp[i][(m*10+int(S[i-1]))%13]+dp[i-1][m])%p\nprint(dp[N][5])","import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n\n\ndef main():\n    S = input().rstrip()\n    DP = [0] * 13\n    n = len(S)\n    DP[0] = 1\n\n    for i in range(0, n):\n        preDP = DP\n        DP = [0] * 13\n        if S[i] == '?':\n            for k in range(13):\n                for x in range(10):\n                    t = (x + 10*k) % 13\n                    DP[t] += preDP[k]\n                    DP[t] %= MOD\n        else:\n            y = int(S[i])\n            for k in range(13):\n                t = (y+10*k) % 13\n                DP[t] += preDP[k]\n                DP[t] %= MOD\n\n    ans = DP[5]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","s = str(input())\nn = len(s)\nmod = (10**9)+7\n\nDP = [[0 for _ in range(13)] for _ in range(n)]\n\nif s[-1] == '?':\n    for i in range(0,10):\n        DP[0][i] += 1\nelse:\n    DP[0][int(s[-1])] = 1\n\n# \u4e0b2\u6841\u76ee\u304b\u3089\u9806\u306b\u898b\u3066\u3044\u304f\nfor i in range(1,n):\n    num_s = s[n-(i+1)]\n    if num_s != '?':\n        num = int(num_s)\n        now = num * (10**i)\n        res = now % 13\n        # \u5143\u306e\u4f59\u308aj -> (res+j)%13 \u304c\u4eca\u56de\u306e\u4f59\u308a \n        for j in range(13):\n            DP[i][(j+res)%13] += DP[i-1][j]\n            # DP[i][(j+res)%13] %= mod\n    else:\n        for k in range(10):\n            now = k * (10**i)\n            res = now % 13\n            # \u5143\u306e\u4f59\u308aj -> (res+j)%13 \u304c\u4eca\u56de\u306e\u4f59\u308a\n            for j in range(13):\n                DP[i][(j+res)%13] += DP[i-1][j]\n                # DP[i][(j+res)%13] %= mod\n\nans = DP[n-1][5] % mod\nprint(ans)        ","S = list(input())\nfor i in range(len(S)):\n    if S[i] != '?':\n        S[i] = int(S[i])\n    else:\n        S[i] = -1\n\nR = [[None]*10 for i in range(13)]\nfor i in range(13):\n    for j in range(10):\n        R[i][j] = (10*i+j) % 13\n\nQ = [[] for i in range(13)]\nfor j in range(10):\n    for i in range(13):\n        Q[R[i][j]] += [[i,j]]\n\ndp = [[0]*13 for i in range(len(S)+1)]\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[i]!=-1:\n            dp[i+1][j] += dp[i][Q[j][S[i]][0]]%1000000007\n        else:\n            for k in range(10):\n                dp[i+1][j] += dp[i][Q[j][k][0]]%1000000007\n\nprint(dp[len(S)][5]%1000000007)","MOD=10**9+7\n\nS=input()\nS=S[::-1]\nN=len(S)\n\ndef POWt(N):\n    arr=[1]\n    for i in range(1,N+1):\n        arr.append(arr[-1]*10%13)\n    return arr\n\ndp=[[0]*13 for i in range(N+1)]\ndp[0][0]=1\nPOW=POWt(N)\nfor i in range(N):\n    for j in range(13):\n        if(S[i]!='?'):\n            dp[i+1][(j+(int(S[i])*POW[i]%13))%13]=(dp[i+1][(j+(int(S[i])*POW[i])%13)%13]+dp[i][j])%MOD\n        else:\n            for k in range(10):\n                dp[i+1][(j+k*POW[i]%13)%13]=(dp[i+1][(j+k*POW[i]%13)%13]+dp[i][j])%MOD\nprint(dp[N][5])","# -*- coding utf-8 -*-\nMOD = 10 ** 9 + 7\n\nS = input()\n# S = '?' * 100000\nmods = [0] * 13\nmods[0] = 1\n\ndigit = 1\nfor s in S[::-1]:\n    next_mods = [0] * 13\n    if s == '?':\n        for i in range(10):\n            for m in range(13):\n                next_mods[(m + i * digit) % 13] += mods[m]\n    else:\n        for m in range(13):\n            next_mods[(m + int(s) * digit) % 13] += mods[m]\n\n    for m in range(13):\n        next_mods[m] %= MOD\n    mods = next_mods\n    digit *= 10\n    digit %= 13    # this line dramatically reduces calculation time\n\nans = mods[5]\n\nprint(ans)\n","def main():\n  s = input()\n  n = len(s)\n  mod = 10**9+7\n  dp = [[0]*13 for _ in range(n+1)]\n  dp[0][0] = 1\n  d = {(j, k):(10*j+k)%13 for k in range(10) for j in range(13)}\n  for i in range(n):\n    if s[i] != \"?\":\n      t = int(s[i])\n      for j in range(13):\n        dp[i+1][(10*j+t)%13] += dp[i][j]\n        dp[i+1][(10*j+t)%13] %= mod\n    else:\n      for k in range(10):\n        for j in range(13):\n          dp[i+1][(10*j+k)%13] += dp[i][j]\n          dp[i+1][(10*j+k)%13] %= mod\n  print(dp[n][5]%mod)\nif __name__ == \"__main__\":\n  main()","S = input()\ndp = [[0]*13 for i in range(len(S)+1)]\nMOD = 10**9+7\n\na = [0] + [(10**i) % 13 for i in range(len(S))]\ndp[0][0] = 1\n\ncnt = 1\nfor i, c in enumerate(S[::-1], 1):\n    t = a[i]\n    for j in range(13):\n        if c == \"?\":\n            for k in range(10):\n                nj = (k*t+j) % 13\n                dp[i][nj] = dp[i][nj] + dp[i-1][j]\n                dp[i][nj] %= MOD\n        else:\n            nj = (int(c)*t+j) % 13\n            dp[i][nj] = dp[i][nj] + dp[i-1][j]\n            dp[i][nj] %= MOD\nprint(dp[-1][5])","s=input()\n\n#i\u6841\u4ee5\u4e0b\u306e\u6570\u5b57\u3067mod\u304cj\u306e\u6570\n#dp[i][j]=\n\ndp=[[0]*13 for _ in range(len(s))]\n\nMOD=10**9+7\n\nresult=0\nfor i in range(len(s)):\n    index=len(s)-i-1\n\n    if i==0:\n        if s[index]!=\"?\":\n            #\u6570\u5b57,300\u306emod\u3092temp\u306b\n            temp=(int(s[index])*(10**i))%13\n            dp[index][temp]=1\n        else:\n            for l in range(10):\n                temp=(l*(10**i))%13\n                for j in range(13):\n                    k=(temp+j)%13\n                    dp[index][k]+=1\n\n    else:\n        if s[index]!=\"?\":\n            #\u6570\u5b57,300\u306emod\u3092temp\u306b\n            temp=(int(s[index])*(10**i))%13\n            for j in range(13):\n                k=(temp+j)%13\n                dp[index][k]+=dp[index+1][j]%MOD\n        else:\n            for l in range(10):\n                temp=(l*(10**i))%13\n                for j in range(13):\n                    k=(temp+j)%13\n                    dp[index][k]+=dp[index+1][j]%MOD\n    #print(dp[index],sum(dp[index]))\n\n\n\nprint(dp[0][5]%MOD)\n\n\n\n\n        \n\n","s = input()\n\nn = len(s)\ndp = [[0 for i in range(13)] for j in range(n+1)]\ndp[0][0] = 1\nmod = 10**9 + 7\n\nfor i in range(n):\n    m = (10**i) % 13\n    if s[n-i-1] == \"?\":\n        for j in range(13):\n            tmp = [dp[i][(j-m*k)%13] for k in range(10)]\n            dp[i+1][j] = sum(tmp) % mod\n    else:\n        num = (int(s[n-i-1])*(10**i))%13\n        for j in range(13):\n            dp[i+1][j] = dp[i][(j-num)%13] % mod\n            \nprint(dp[n][5])","def f(i,k):\n  for j in range(13):\n    dp[i+1][(j*10+k)%13]+=dp[i][j]\n    dp[i+1][(j*10+k)%13]%=mod\n  \nmod=10**9+7\ns=input()\nn=len(s)\ndp=[[0]*13 for i in range(10**5)]\ndp[0][0]=mul=1\n\nfor i in range(n):\n  if s[i]=='?':\n    for k in range(10):\n      f(i,k)\n  else:\n    f(i,int(s[i]))\n  \nprint(dp[n][5]%mod)\n","S = str(input())\ns = [i for i in S]\nans = 0\nmn = 0\nmx = len(S)\nfor i in range(mx):\n  if S[i].isnumeric():\n    mn = mx-i-1\n    break\n    \nstart = 0\nfor i in range(int(S[mx-mn-1])*10**mn, 10**mx):\n  if i % 13 == 5:\n    start = i\n    break\n    \nans = 0\nfor i in range(start, 10**mx, 13):\n  flg = True\n  for j in range(1, len(str(i))+1):\n    if (s[-j].isnumeric()) and (s[-j]!=str(i)[-j]):\n      flg = False\n      break\n  if flg:\n    ans += 1\n  if ans >= 10**9+7:\n    ans -= 10**9+7\n    \nprint(ans)","S = input()\ns = len(S)\nmod = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(s)]\n\nif S[0] == '?':\n    for i in range(10):\n        dp[0][i] += 1\nelse:\n    dp[0][int(S[0]) \/\/ 13] += 1\n\nfor i in range(1, s):\n    if S[i] == '?':\n        for j in range(13):\n            for k in range(10):\n                dp[i][(j * 10 + k) % 13] = (dp[i][(j * 10 + k) % 13] + dp[i - 1][j]) % mod\n    else:\n        for j in range(13):\n            dp[i][(j * 10 + int(S[i])) % 13] = (dp[i][(j * 10 + int(S[i])) % 13] + dp[i - 1][j]) % mod\n\nprint(dp[-1][5] % mod)","# solution\n\nmodulous=10**9+7\nr=[[(j-i)*4%13 for i in range(10)]for j in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  if c>\"9\":\n    d=[(sum(d[i] for i in j))%modulous for j in r]\n  else:\n    d=[d[((j-int(c))*4%13)] for j in range(13)]\n    \nprint(d[5])","r = [[(j - k) * 9 % 13 for j in range(10)] for k in range(13)]\nd = [1] + [0] * 12\n\nfor c in input():\n    if c == '?':\n        d = [sum(d[j] for j in k) for k in r]\n    else:\n        d = [d[(int(c) - k) * 9 % 13] for k in range(13)]\n    print(d)\nprint(d[5])","import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    S = input().strip()\n    N = len(S)\n    dp = [[0]*13 for _ in range(N+1)]\n    dp[0][0] = 1\n    for n in range(N):\n        c = S[N-n-1]\n        for i in range(10):\n            if c == \"?\" or int(c) == i:\n                for j in range(13):\n                    dp[n+1][(j + i*10**n)%13] += dp[n][j]\n        for i in range(13):\n            dp[n+1][i] %= 10**9+7\n    print(dp[N][5])\n\n\nif __name__ == '__main__':\n    main()\n","S = input()\n\nMOD = 10 ** 9 + 7\n\ndp = [0] * 13\ndp[0] = 1\nfor i in range(len(S)):\n    new_dp = [0] * 13\n    if S[i] == '?':\n        for j in range(10):\n            for k in range(13):\n                new_dp[(k * 10 + j) % 13] += dp[k]\n                new_dp[(k * 10 + j) % 13] %= MOD\n    else:\n        j = int(S[i])\n        for k in range(13):\n            new_dp[(k * 10 + j) % 13] += dp[k]\n            new_dp[(k * 10 + j) % 13] %= MOD\n    dp = new_dp[:]\nprint(dp[5])\n","amari = [i for i in range(10)]\np = 10**9 + 7\ns =  str(input())\nn = len(s)\nans = [0]*13\nans[0] = 1\nfor i in reversed(s):\n  dp = [0]*13\n  if i == '?':\n    for j in range(13):\n      for k in amari:\n        dp[(j + k)%13] += ans[j]\n  else:\n    for j in range(13):\n      dp[(j + amari[int(i)])%13] += ans[j]\n      \n  for i in range(len(dp)):\n    dp[i] %= p\n  ans = dp\n  for i in range(len(amari)):\n    amari[i] = amari[i]*10%13\nprint(ans[5])","mod=10**9+7\ns=input()\nns=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 10, 7, 4, 1, 11, 8, 5, 2, 12], [0, 9, 5, 1, 10, 6, 2, 11, 7, 3], [0, 12, 11, 10, 9, 8, 7, 6, 5, 4], [0, 3, 6, 9, 12, 2, 5, 8, 11, 1], [0, 4, 8, 12, 3, 7, 11, 2, 6, 10]]\nmiti=[0,0,0,0,0,0]\nnow=0\nfor i in range(len(s)):\n  if s[-i-1]==\"?\":\n    miti[i%6]+=1\n  else:\n    now+=ns[i%6][int(s[-i-1])]\nnow=now%13\n#print(now,miti)\n\ndp=[[0]*13 for j in range(len(s)+1)]\ndp[0][now]=1\nii=0\nfor i in range(6):\n  nsi=ns[i]\n  for j in range(miti[i]):\n    dp1=dp[ii]\n    dp2=dp[ii+1]\n    #print(dp1)\n    #print(dp2)\n    for n in range(13):\n      dp1[n]=dp1[n]%mod\n    for k in range(10):\n      nsik=nsi[k]\n      for l in range(13):\n        dp2[(l+nsik)%13]+=dp1[l]\n    ii+=1\nprint(dp[ii][5]%mod)","MOD = 10**9+7\ns = input()\nind = list(range(len(s)))\nsl = list(s)\n#print(sl)\ndsl = dict(zip(ind, sl))\n#print(dsl)\n\nind2 = list(range(13))\ndp={}\n#dp.setdefault(0, dict(zip(ind2,[0]*13)))\nfor i in range(len(s)+1):\n    #dp.append(dict(zip(ind2,[0]*13)))\n    dp.setdefault(i, dict(zip(ind2,[0]*13)))\n\n\n#print(dp)\ndp[0][0]=1\n\nfor i in range(len(s)):\n    for k in range(10):\n        if dsl[i] != \"?\" and dsl[i] != str(k):\n            continue\n        for j in range(13):\n            dp[i+1][(j*10+k)%13] += dp[i][j]%MOD\n    #for k in range(13):\n    #    dp[i+1][k] %= MOD\n\n#print(dp)\nprint(dp[len(s)][5]%MOD)\n","S = list(input())\n\nR = [[None]*10 for i in range(13)]\nfor i in range(13):\n    for j in range(10):\n        R[i][j] = (10*i+j) % 13\n        \nQ = [[] for i in range(13)]\nfor j in range(10):\n    for i in range(13):\n        Q[R[i][j]] += [[i,j]]\n\ndp = [[0]*13 for i in range(len(S)+1)]\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[i]!='?':\n            dp[i+1][j] += dp[i][Q[j][int(S[i])][0]]\n        else:\n            for k in range(10):\n                dp[i+1][j] += dp[i][Q[j][k][0]]\n                \nprint(dp[len(S)][5]%1000000007)","S = input()[::-1]\n\na = [0] * 13\nn = [0] * 13\n\ndef calc(d, num):\n    shift = (num * (10 ** d))%13\n    if d==0:\n        n[shift] = 1\n    else:\n        for i in range(13):\n            n[(i+shift)%13] += a[i]\n    \n\nfor d, s in enumerate(S):\n    if s=='?':\n        for i in range(10):\n            calc(d, i)\n    else:\n        calc(d, int(s[0]))\n    a, n = n, a\n    for i in range(13):\n        a[i] %= 1000000007\n        n[i] = 0\n\nprint(a[5])\n\n\n\n","S = input()\nMOD = 10**9 + 7\nM = 13\n\ndp = [0] * M\ndp[0] = 1\n\nfor s in S:\n    newDp = [0] * M\n    if s == '?':\n        for s in range(10):\n            for i in range(M):\n                newDp[(i * 10 + s) % M] += dp[i]\n    else:\n        s = int(s)\n        for i in range(M):\n            newDp[(i * 10 + s) % M] = dp[i]\n    for i in range(M):\n        dp[i] = newDp[i] % MOD\n\nprint(dp[5])\n","S = input()\nN = len(S)\n#dp[i][j] ... \u5148\u982di\u6587\u5b57\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u3082\u306e\u306e\u3046\u306113\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u306b\u306a\u308b\u500b\u6570\ndp = [[0] * 13 for _ in range(N+1)]\ndp[0][0] = 1\nmod = 10**9+7\n#1?2?3   0 -> 3 -> ?3 -> 2?3 -> ...\nmul = 1\nfor i in range(N): #\u5168\u3066\u306e\u6841\n    for k in range(13): #0~12\n        if S[N-i-1] == \"?\":\n            for j in range(10): #?\u306b\u5f53\u3066\u306f\u3081\u308b\u6570\u5b57\n                dp[i+1][(k + j*mul) % 13] += dp[i][k]\n                dp[i+1][(k + j*mul) % 13] %= mod\n        else:\n            j = int(S[N-i-1])\n            dp[i+1][(k + j*mul) % 13] += dp[i][k]\n            dp[i+1][(k + j*mul) % 13] %= mod\n    mul *= 10\n    mul %= 13\nprint(dp[N][5])\n#print(dp)\n","class Mod13DPTable:\n    MOD = 10**9 + 7\n    def __init__(self, length):\n        self.mod13 = [{j:0 for j in range(13)} for i in range(length)]\n        self.MOD = 10**7 + 7\n    def set_start(self, units_digit):\n        if units_digit == '?':\n            for i in range(10):\n                self.mod13[0][i] = 1\n        else:\n            self.mod13[0][int(units_digit)] = 1\n    def get_table(self, digit):\n        return self.mod13[digit]\n    def update(self, num, digit):\n        for k, v in self.mod13[digit-1].items():\n            remain = ((num * 10**digit) + k) % 13\n            self.mod13[digit][remain] = (self.mod13[digit][remain] + v) % Mod13DPTable.MOD\n            \ndef main():\n    MOD = 10**9 + 7\n    S = input()\n    mod13dp = Mod13DPTable(len(S))\n    mod13dp.set_start(S[-1])\n    for i, m in enumerate(reversed(list(S[:-1]))):\n        i += 1\n        if m == '?':\n            for j in range(10):\n                mod13dp.update(j, i)\n        else:\n            mod13dp.update(int(m), i)\n    print(mod13dp.get_table(-1)[5])\nmain()","def f(s):\n    rd = [[10, 11, 12], [3, 6, 9], [4, 8, 12], [1, 2, 3], [4, 7, 10], [1, 5, 9]]\n    k = len(s)\n    md = 10 ** 9 + 7\n    dp = [0] * 13\n    dp[0] = 1\n    for i, c in enumerate(s[::-1]):\n        if c == \"?\":\n            r1, r2, r3 = rd[i % 6]\n            sm = sum(dp)\n            dp=[(sm - (dp[j - r1] + dp[j - r2] + dp[j - r3])) % md for j in range(13)]\n        else:\n            m = int(c) * 10 ** i % 13\n            dp=[dp[j - m] for j in range(13)]\n    print(dp[5])\n\ns = input()\nf(s)\n","S=input()\nl=len(S)\nmod=10**9+7\ndp=[[0 for j in range(13)] for i in range(l+1)]\ndp[0][0]=1\n\nfor i in range(l):\n  if S[i]=='?':\n    for k in range(13): \n      for j in range(10):      \n        dp[i+1][(k*10+j)%13]+=dp[i][k]%mod\n  else:\n    for k in range(13):\n      dp[i+1][(k*10 + int(S[i]))%13]+=dp[i][k]%mod\n      \nprint(dp[-1][5]%mod)","def main():\n    S = input()\n    div = pow(10, 9) + 7\n    rem = [0 for _ in range(13)]\n    rem[0] = 1\n    for c in S:\n        temp = [0 for _ in range(13)]\n        if c != \"?\":\n            for i in range(13):\n                r = (i*10+int(c)) % 13\n                temp[r] += rem[i]\n        else:\n            for i in range(13):\n                for j in range(10):\n                    r = (i*10+j) % 13\n                    temp[r] += rem[i]\n        rem = temp\n    return rem[5] % div\n\nif __name__ == '__main__':\n    print(main())","#!\/usr\/bin\/env python3\n\nP_MOD = 1000000007\n\n\ndef solve(S):\n    # print(S)\n    # 1, 10, 100, 1000, ... \u3092 13 \u3067\u5272\u3063\u305f\u5024\u306f 1, 10, 9, 12, 3, 4 \u3067\u5de1\u56de\u3059\u308b\n    MODS = [1, 10, 9, 12, 3, 4]\n\n    # \u73fe\u5728\u306e\u6841\u306e\u4f59\u308a N \u306e\u72b6\u614b\u3092 cur[N]\n    # \u76f4\u524d\u306e\u6841\u306e\u4f59\u308a N \u306e\u72b6\u614b\u3092 priv[N] \u3068\u3059\u308b\n    priv = [1] + [0] * 12\n    # print(priv)\n    s = S[::-1]\n    for i in range(0, len(s)):\n        cur = [0] * 13\n        d = s[i]\n        # print('i=', i, 'd=', d)\n        if d == '?':\n            for j in range(13):\n                for di in range(10):\n                    m = di * MODS[i % 6]\n                    cur[(j+m) % 13] += priv[j]\n        else:\n            m = int(d) * MODS[i % 6]\n            for j in range(13):\n                cur[(m+j) % 13] = priv[j]\n        # print(cur)\n        for j in range(13):\n            priv[j] = cur[j] % P_MOD\n    return cur[5]\n\n\nif __name__ == '__main__':\n    S = input()\n\n    ans = solve(S)\n\n    print(ans % P_MOD)\n","S=list(input())\n\ndp=[[0 for i in range(13)]for j in range(len(S)+1)]\ndp[0][0]=1\n\nfor i in range(len(S)):\n    if S[i]==\"?\":\n        for j in range(13):\n            \n            for k in range(10):\n                dp[i+1][(10*j+k)%13]+=dp[i][j]\n                dp[i+1][(10*j+k)%13]%=(10**9+7)\n    else:\n        for j in range(13):\n            dp[i+1][(10*j+int(S[i]))%13]+=dp[i][j]\n            dp[i+1][(10*j+int(S[i]))%13]%=(10**9+7)\nprint(dp[-1][5])","s = input()\ndp = [[0]*13 for _ in range(len(s))]\nif s[0] == '?':\n    for i in range(10):\n        dp[0][i] = 1\nelse:\n    dp[0][s[0]] = 1\nfor k in range(len(s)-1):\n    if s[k+1] == '?':\n        for i in range(13):\n            for j in range(10):\n                dp[k+1][((i*10%13)+j)%13] += dp[k][i]\n                dp[k+1][((i*10%13)+j)%13] %= (10**9+7)\n    else:\n        for i in range(13):\n            dp[k+1][((i*10%13)+int(s[k+1]))%13] += dp[k][i]\n            dp[k+1][((i*10%13)+int(s[k+1]))%13] %= (10**9+7)\nprint(dp[-1][5])\n","a = list(input())\n\nb = [[0 for i in range(13)] for i in range(len(a) + 1)]\nb[0][0] = 1\n\ncheck = 0\nfor i in range(len(a)):\n    if a[i] == '?':\n        check = -1\n    else:\n        check = int(a[i])\n\n    for j in range(10):\n        if check == -1 or check == j:\n            for k in range(13):\n                b[i + 1][(k * 10 + j) % 13] += b[i][k]\n        \n    for l in range(13):\n        b[i + 1][l] %= 1000000007\n\nprint(b[len(a)][4])","s = input()\ns = s[::-1]\nn = len(s)\ns = '#' + s\nMOD = 10**9+7\ndp = [[0]*13 for _ in range(n+5)]\n\"\"\"\ndp[i][j] \u306f i \u6841\u76ee\u307e\u3067\u898b\u305f\u3068\u304d 13 \u3067\u5272\u3063\u305f\u3042\u307e\u308a\u304c j\u3000\u3068\u306a\u308b\u3088\u3046\u306a\u3082\u306e\u306e\u500b\u6570\n\"\"\"\ndp[0][0] = 1\nr = 1 \nfor i in range(1,n+1):\n    for j in range(13):\n        if s[i] != '?':\n            dp[i][j] = dp[i-1][(j-r*int(s[i]))%13] % MOD\n        if s[i] == '?':\n            for k in range(10):\n                dp[i][j] += dp[i-1][(j-r*k)%13]\n            dp[i][j] %= MOD\n    r = (r*10) % 13\nprint(dp[n][5])","s = input()\nn = len(s)\nmod = 10**9+7\ndp = [[0]*13 for _ in range(n+1)]\ndp[0][0] = 1\nfor i,d in enumerate(s):\n\tif d==\"?\":\n\t\tfor x in range(10):\n\t\t\tfor y in range(13):\n\t\t\t\tdp[i+1][(y*10+x)%13] += dp[i][y]\n\telse:\n\t\td = int(d)\n\t\tfor y in range(13):\n\t\t\tdp[i+1][(y*10+d)%13] += dp[i][y]\n\tfor j in range(13):\n\t\tdp[i+1][j] %= mod\nprint(dp[n][5])","import numpy as np\nN=input()\n\nlists = []\ntemp=np.asarray([i for i in range(10)])\n\ndic={0:1}\n\nfor i in N:\n    new_dic={}\n    hoge=list(dic.items())\n    if i == \"?\":\n        for amari,count in hoge:\n            amari*=10\n            for num in temp:\n                a = (amari + num) % 13\n                if a in new_dic:\n                    new_dic[a]+=count\n                else:\n                    new_dic[a]=count\n    else:\n        num=int(i)\n        for amari,count in hoge:\n            a = (amari*10 + num)%13\n            if a in new_dic:\n                new_dic[a]+=count\n            else:\n                new_dic[a]=count\n    dic = new_dic\n\ntry:\n    print(dic[5]%(10**9 + 7))\nexcept:\n    print(0)","S = input()\n\nrs = [0] * 13\n\nM = 10**9 + 7\n\nif S[-1] == \"?\":\n    rs[:10] = [1] * 10\nelse:\n    rs[int(S[-1])] = 1\n\nfor i in range(1, len(S)):\n    nrs = [0] * 13\n    c = S[-i - 1]\n    if c == \"?\":\n        ns = range(10)\n    else:\n        ns = [int(c)]\n    for n in ns:\n        r = (10 ** i) * n % 13\n        for j in range(13):\n            jj = (j + r) % 13\n            nrs[jj] = (nrs[jj] + rs[j]) % M\n    rs = nrs\n\n# print(rs)\nprint(rs[5])\n\n","def main():\n\n    \"\"\" convenient functions\n    # for i, a in enumerate(iterable)\n    # q, mod = divmod(a, b)\n    # divmod(x, y) returns the tuple (x\/\/y, x%y)\n    # Higher-order function: reduce(operator.mul, xyz_count, 1)\n    # manage median(s) using two heapq https:\/\/atcoder.jp\/contests\/abc127\/tasks\/abc127_f\n    \"\"\"\n\n    \"\"\"convenient decorator\n    # @functools.lru_cache():\n    # to facilitate use of recursive function\n        # ex:\n        # from functools import lru_cache\n        # import sys\n        # sys.setrecursionlimit(10**9)\n        # @lru_cache(maxsize=None)\n        # def fib(n):\n        #     if n < 2:\n        #         return n\n        #     return fib(n-1) + fib(n-2)\n        # print(fib(1000))\n    \"\"\"\n    \n    # import numpy as np\n    import sys\n    sys.setrecursionlimit(10**7)\n    from itertools import accumulate, combinations, permutations, product # https:\/\/docs.python.org\/ja\/3\/library\/itertools.html\n    # accumulate() returns iterator! to get list: list(accumulate())\n    from math import factorial, ceil, floor, sqrt\n    def factorize(n):\n        \"\"\"return the factors of the Arg and count of each factor\n        \n        Args:\n            n (long): number to be resolved into factors\n        \n        Returns:\n            list of tuples: factorize(220) returns [(2, 2), (5, 1), (11, 1)]\n        \"\"\"\n        fct = []  # prime factor\n        b, e = 2, 0  # base, exponent\n        while b * b <= n:\n            while n % b == 0:\n                n = n \/\/ b\n                e = e + 1\n            if e > 0:\n                fct.append((b, e))\n            b, e = b + 1, 0\n        if n > 1:\n            fct.append((n, 1))\n        return fct\n    def combinations_count(n, r):\n        \"\"\"Return the number of selecting r pieces of items from n kinds of items.\n        \n        Args:\n            n (long): number\n            r (long): number\n        \n        Raises:\n            Exception: not defined when n or r is negative\n        \n        Returns:\n            long: number\n        \"\"\"\n        # TODO: How should I do when n - r is negative?\n        if n < 0 or r < 0:\n            raise Exception('combinations_count(n, r) not defined when n or r is negative')\n        if n - r < r: r = n - r\n        if r < 0: return 0\n        if r == 0: return 1\n        if r == 1: return n\n        numerator = [n - r + k + 1 for k in range(r)]\n        denominator = [k + 1 for k in range(r)]\n        for p in range(2,r+1):\n            pivot = denominator[p - 1]\n            if pivot > 1:\n                offset = (n - r) % p\n                for k in range(p-1,r,p):\n                    numerator[k - offset] \/= pivot\n                    denominator[k] \/= pivot\n        result = 1\n        for k in range(r):\n            if numerator[k] > 1:\n                result *= int(numerator[k])\n        return result\n    def combinations_with_replacement_count(n, r):\n        \"\"\"Return the number of selecting r pieces of items from n kinds of items allowing individual elements to be repeated more than once.\n        \n        Args:\n            n (long): number\n            r (long): number\n        \n        Raises:\n            Exception: not defined when n or r is negative\n        \n        Returns:\n            long: number\n        \"\"\"\n        if n < 0 or r < 0:\n            raise Exception('combinations_with_replacement_count(n, r) not defined when n or r is negative')\n        elif n == 0:\n            return 1\n        else:\n            return combinations_count(n + r - 1, r)\n    from bisect import bisect_left, bisect_right\n    from collections import deque, Counter, defaultdict # https:\/\/docs.python.org\/ja\/3\/library\/collections.html#collections.deque\n    from heapq import heapify, heappop, heappush, heappushpop, heapreplace,nlargest,nsmallest # https:\/\/docs.python.org\/ja\/3\/library\/heapq.html\n    from copy import deepcopy, copy # https:\/\/docs.python.org\/ja\/3\/library\/copy.html\n    import operator\n    from operator import itemgetter\n    # ex1: List.sort(key=itemgetter(1))\n    # ex2: sorted(tuples, key=itemgetter(1,2))\n    from functools import reduce, lru_cache\n    def chmin(x, y):\n        \"\"\"change minimum\n        if x > y, x = y and return (x, True).\n        convenient when solving problems of dp[i]\n        \n        Args:\n            x (long): current minimum value\n            y (long): potential minimum value\n        \n        Returns:\n            (x, bool): (x, True) when updated, else (x, False)\n        \"\"\"\n        if x > y:\n            x = y\n            return (x, True)\n        else:\n            return (x, False)\n    def chmax(x, y):\n        \"\"\"change maximum\n        if x < y, x = y and return (x, True).\n        convenient when solving problems of dp[i]\n        \n        Args:\n            x (long): current maximum value\n            y (long): potential maximum value\n        \n        Returns:\n            (x, bool): (x, True) when updated, else (x, False)\n        \"\"\"\n        if x < y:\n            x = y\n            return (x, True)\n        else:\n            return (x, False)\n\n    from fractions import gcd # Deprecated since version 3.5: Use math.gcd() instead.\n    def gcds(numbers):\n        return reduce(gcd, numbers)\n    def lcm(x, y):\n        return (x * y) \/\/ gcd(x, y)\n    def lcms(numbers):\n        return reduce(lcm, numbers, 1)\n\n    # first create factorial_list\n    # fac_list = mod_factorial_list(n)\n    INF = 10 ** 18\n    MOD = 10 ** 9 + 7\n    modpow = lambda a, n, p = MOD: pow(a, n, p) # Recursive function in python is slow!\n    def modinv(a, p = MOD):\n        # evaluate reciprocal using Fermat's little theorem:\n        # a**(p-1) is identical to 1 (mod p) when a and p is coprime\n        return modpow(a, p-2, p)\n    def modinv_list(n, p = MOD):\n        if n <= 1:\n            return [0,1][:n+1]\n        else:\n            inv_t = [0,1]\n            for i in range(2, n+1):\n                inv_t += [inv_t[p % i] * (p - int(p \/ i)) % p]\n            return inv_t\n    def modfactorial_list(n, p = MOD):\n        if n == 0:\n            return [1]\n        else:\n            l = [0] * (n+1)\n            tmp = 1\n            for i in range(1, n+1):\n                tmp = tmp * i % p\n                l[i] = tmp\n            return l\n    def modcomb(n, k, fac_list = [], p = MOD):\n        # fac_list = modfactorial_list(100)\n        # print(modcomb(100, 5, modfactorial_list(100)))\n        from math import factorial\n        if n < 0 or k < 0 or n < k: return 0\n        if n == 0 or k == 0: return 1\n        if len(fac_list) <= n:\n            a = factorial(n) % p\n            b = factorial(k) % p\n            c = factorial(n-k) % p\n        else:\n            a = fac_list[n]\n            b = fac_list[k]\n            c = fac_list[n-k]\n        return (a * modpow(b, p-2, p) * modpow(c, p-2, p)) % p\n    def modadd(a, b, p = MOD):\n        return (a + b) % MOD\n    def modsub(a, b, p = MOD):\n        return (a - b) % p\n    def modmul(a, b, p = MOD):\n        return ((a % p) * (b % p)) % p\n    def moddiv(a, b, p = MOD):\n        return modmul(a, modpow(b, p-2, p))\n\n    class UnionFindTree:\n        \"\"\"union find tree class\n        TODO: fix this description...\n        how to use (example):\n        >>  uf = UnionFindTree(N) \n        >>  if uf.find_root(a) == uf.find_root(b):\n        >>      do something\n        >>  else:\n        >>      do something\n        >>      uf.unite(a, b)\n        \"\"\"\n        def __init__(self, N):\n            self.root = [-1] * (N+1)\n            self.rank   = [0]  * (N+1)\n            self.connected_num = [1] * (N+1)\n    \n        def find_root(self,x):\n            root = self.root\n            while root[x] != -1:\n                x = root[x]\n            return x\n    \n        def unite(self,x,y):\n            root = self.root\n            rank = self.rank\n            connected_num = self.connected_num\n            find_root = self.find_root\n    \n            rx = find_root(x)\n            ry = find_root(y)\n            if rx != ry:\n                if rank[rx] < rank[ry]:\n                    root[rx] = ry\n                    rx,ry = ry,rx\n                else:\n                    if rank[rx] == rank[ry]:\n                        rank[rx] += 1\n                    root[ry] = rx       \n                connected_num[rx] += connected_num[ry]\n\n    \"\"\" initialize variables and set inputs\n    # initialize variables\n        # to initialize list, use [0] * n\n        # to initialize two dimentional array, use [[0] * N for _ in range(N)]\n    # set inputs\n        # open(0).read() is a convenient method:\n        # ex) n, m, *x = map(int, open(0).read().split())\n        #     min(x[::2]) - max(x[1::2])\n        # ex2) *x, = map(int, open(0).read().split())\n        #     don't forget to add comma after *x if only one variable is used\n    # preprocessing\n        # transpose = [x for x in zip(*data)]\n        # ex) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] => [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n        # flat = [flatten for inner in data for flatten in inner]\n        # ex) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # calculate and output\n        # output pattern\n        # ex1) print(*l) => when l = [2, 5, 6], printed 2 5 6\n    \"\"\"\n\n    # functions used\n    r = lambda: sys.stdin.readline().strip()\n    r_int = lambda: int(r())\n    R = lambda: list(map(int, r().split()))\n    Rmap = lambda: map(int, r().split())\n    Rfloat = lambda: list(map(float, r().split()))\n    Rtuple = lambda: tuple(map(int, r().split()))\n\n    \"\"\" how to treat input\n    # single int: int(r())\n    # single string: r()\n    # single float: float(r())\n    # line int: R()\n    # line string: r().split()\n    # line (str, int, int): [j if i == 0 else int(j) for i, j in enumerate(r().split())]\n    # lines int: [R() for _ in range(n)]\n    \"\"\"\n\n    if __name__ != '__main__':\n        # for test\n        sys.stdin = open('sample.txt')\n        \n    # ----------------------------------\n    # main\n\n    S = r()\n    lenS = len(S)\n    target_digit_S = lenS - 1\n    dp = [[0]*13 for _ in range(lenS)] \n    \n    # initialize\n    res = (10**target_digit_S)%13\n    if S[0] == '?':\n        for i in range(10):\n            dp[0][(i*res)%13] += 1\n    else:\n        intS = int(S[0])\n        dp[0][(intS*res)%13] += 1\n    \n    for i in range(1, lenS):\n        target_digit_S -= 1\n        res = (10**target_digit_S)%13\n        if S[i] == '?':\n            for k in range(10):\n                for j in range(13):\n                    dp[i][(k*res+j)%13] = (dp[i][(k*res+j)%13] + dp[i-1][j]) % MOD\n        else:\n            intS = int(S[i])\n            for j in range(13):\n                dp[i][(intS*res+j)%13] += (dp[i][(intS*res+j)%13] + dp[i-1][j]) % MOD\n    print(dp[lenS-1][5])\n    \n    # end of main\n    # ----------------------------------\n\n    \"\"\"memo: how to use defaultdict of list\n    # initialize\n    Dic = defaultdict(list)\n    # append \/ extend\n    Dic[x].append(y)\n    # for\n    for k, v in Dic.items():\n    \"\"\"\n    \n    \"\"\"memo: how to solve binary problems\n    # to make binary digits text\n    >>> a = 5\n    >>> bin_str_a = format(a, '#06b')\n    >>> print(bin_str_a)\n    0b0101 # first 2 strings (='0b') indicates it is binary\n    \"\"\"\n\nif __name__ == '__main__':\n    main()","INF = 10 ** 9 + 7\n\nS = input()\n# dp[i][j]\u306f\u3046\u3057\u308d(\u5c0f\u3055\u3044\u4f4d)\u304b\u3089i\u6841\u309213\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\ndp = [[0] * 13 for _ in range(len(S) + 1)]\ndp[0][0] = 1\nmul = 1\n\nfor i in range(len(S)):\n    x = S[-(i + 1)]\n    if x == \"?\":\n        for k in range(10):\n            for j in range(13):\n                dp[i + 1][(mul * k + j) % 13] += dp[i][j]\n                dp[i + 1][(mul * k + j) % 13] %= INF\n    else:\n        k = int(x)\n        for j in range(13):\n            dp[i + 1][(mul * k + j) % 13] += dp[i][j]\n            dp[i + 1][(mul * k + j) % 13] %= INF\n    mul = mul * 10\n\nprint(dp[len(S)][5])","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\nclass ModInt:\n\n    def __init__(self, x):\n        self.x = x.x if isinstance(x, ModInt) else x % MOD\n\n    __str__ = lambda self:str(self.x)\n    __repr__ = __str__\n    __int__ = lambda self: self.x\n    __index__ = __int__\n\n    __add__ = lambda self, other: ModInt(self.x + ModInt(other).x)\n    __sub__ = lambda self, other: ModInt(self.x - ModInt(other).x)\n    __mul__ = lambda self, other: ModInt(self.x * ModInt(other).x)\n    __pow__ = lambda self, other: ModInt(pow(self.x, ModInt(other).x, MOD))\n    __mod__ = lambda self, other: ModInt(self.x % ModInt(other).x)\n    __truediv__ = lambda self, other: ModInt(self.x * pow(ModInt(other).x, MOD - 2, MOD))\n    __floordiv__ = lambda self, other: ModInt(self.x \/\/ ModInt(other).x)\n    __radd__ = lambda self, other: ModInt(other + self.x)\n    __rsub__ = lambda self, other: ModInt(other - self.x)\n    __rpow__ = lambda self, other: ModInt(pow(other, self.x, MOD))\n    __rmod__ = lambda self, other: ModInt(other % self.x)\n    __rmul__ = lambda self, other: ModInt(other * self.x)\n    __rtruediv__ = lambda self, other: ModInt(other * pow(self.x, MOD - 2, MOD))\n    __rfloordiv__ = lambda self, other: ModInt(other \/\/ self.x)\n\n    __lt__ = lambda self, other: self.x < ModInt(other).x\n    __gt__ = lambda self, other: self.x > ModInt(other).x\n    __le__ = lambda self, other: self.x <= ModInt(other).x\n    __ge__ = lambda self, other: self.x >= ModInt(other).x\n    __eq__ = lambda self, other: self.x == ModInt(other).x\n    __ne__ = lambda self, other: self.x != ModInt(other).x\n\n\ndef main():\n    S = list(input())\n    N = len(S)-1\n    dp = [[0] * 13  for _   in range(N)]\n    dp[0] = [ModInt(0) for _ in range(13)]\n    \n    if S[0] == '?':\n        for i in range(10):\n            dp[0][i] = ModInt(1)\n    else:\n        dp[0][int(S[0])] = ModInt(1)\n\n    for i in range(1,N):\n        if S[i] == '?':\n            for j in range(13):\n                for k in range(10):\n                    dp[i][(j * 10 + k) % 13 ] += dp[i-1][j]\n        else:\n            for j in range(13):\n                dp[i][ (j* 10 + int(S[i])) % 13 ] += dp[i-1][j]\n        \n\n    print(dp[len(S)-2][5])\n\n\n\n\n\n\n\n\n\n    pass\nif __name__ == '__main__':\n    main()"," ","d=[0]*13\nd[0]=1\nmul=1\nmulmod=1\nt=input()[::-1]\n\nzero=[0]*13\nl=len(t)\nmodlist=[10**i%13 for i in range(l)]\nfor n,c in enumerate(t):\n    e=zero[:]\n\n    for i in (range(10) if c==\"?\" else[int(c)]):\n        for j in range(13):\n            #e[(i*mul+j)%13]+=d[j]\n            k=(i*mulmod+j)%13\n            e[k]+=d[j]\n            e[k]%=1000000007\n    d=e\n    mul*=10\n    mulmod=mul%13","import numpy as np\nMOD = 10 ** 9 + 7\n\ndp = np.zeros(13, dtype = np.int64)\ndp[0] = 1\n\nmove = np.arange(0,52,4) % 13\nten = np.ones(10, dtype=np.int64)\nfor s in input():\n  dp = dp[move]\n  if s == '?':\n    dp = np.convolve(dp, ten)\n    dp[:9] += dp[13:22]\n    dp %= MOD\n  else:\n    s = int(s)\n    dp = np.roll(dp, s)\n  \nprint(dp[5])\n","x = 1000000007\n\nS = input()\nS = [int(s) if s != '?' else s for s in S]\nS = S[::-1]\n\ndp = [[0 for j in range(13)] for i in range(len(S) + 1)]\n\ndp[0][0] = 1\n\nfor i, s in enumerate(S):\n    for j in range(10):\n        if s != '?' and s != j:\n            continue\n\n        digit_r = ((10 ** i) * j) % 13\n\n        for k in range(13):\n            r = (digit_r + k) % 13\n            dp[i + 1][r] += dp[i][k]\n\n    dp[i + 1][r] %= 13\n\nprint(int(dp[-1][5] % x))\n","MOD = 10 ** 9 + 7\n \ns = str(input())\n \ns = list(s)\n \ncur = [0] * 13\n \nif s[0] != \"?\":\n    cur[int(s[0])] = 1\nelse:\n    for j in range(10):\n        cur[j] = 1\n \nfor i in range(1,len(s)):\n    pre = cur[:]\n    cur = [0] * 13\n    if s[i] != \"?\":\n        for j in range(13):\n            q = (j * 10 + int(s[i])) % 13\n            cur[q] += pre[j] % MOD\n    else:\n        for j in range(13):\n            for k in range(10):\n                p = (j * 10 + k) % 13\n                cur[p] += pre[j] % MOD\n \nprint(cur[5] % MOD)","S=input()\nx=0\nM=13\nMOD=10**9+7\ndp=[[0]*M for i in range(2)]\ndp[1][0]=1\nfor i in range(len(S)):\n  dp[0]=[0]*13\n  s=S[i]\n  if s=='?':\n    for s in range(10):\n      for j,d in enumerate(dp[1]):\n        dp[0][(j+s)%M]+=d\n        dp[0][(j+s)%M]%=MOD\n  else:\n    s=int(s)\n    for j,d in enumerate(dp[1]):\n      dp[0][(j+s)%M]=d\n  for j,d in enumerate(dp[0]):\n    dp[1][(10*j)%M]=d\nprint(dp[0][5]%MOD)\n\n","S = input()[::-1]\n\ndp = [[1]]\nMOD = 10**9+7\n\nfor i in range(1,len(S)+1):\n  s = S[i-1]\n  dp += [[0]*13]\n  if s=='?':\n    for j in range(13):\n      for h in range(10):\n        x = h*(10**(i-1))%13\n        dp[i][(j+x)%13] += dp[i-1][j]\n    for j in range(13):\n      dp[i][j] = dp[i][j]%MOD\n  else:\n    c = int(s)\n    x = c*(10**(i-1))%13\n    for j in range(13):\n      dp[i][(j+x)%13] = dp[i-1][j]\n    for j in range(13):\n      dp[i][j] = dp[i][j]%13\nprint(dp[-1][5])","import numpy as np\nS = input()\nINF = 10 ** 9 + 7\ndp = [np.array([0 for _ in range(13)]) for l in range(len(S))]\nS_li = [_ for _ in S]\nS_li = S_li[::-1]\nif S_li[0] == '?':\n    dp[0][0:10] = [1,1,1,1,1,1,1,1,1,1]\nelse:\n    dp[0][int(S_li[0])] = 1\nfor _ in range(1,len(S)):\n    if S_li[_] == '?':\n        for x in range(10):\n            mod = (x * (10 ** (_ % 6))) % 13\n            add = list(dp[_ - 1][(13 - mod):13]) + list(dp[_ - 1][0:(13 - mod)])\n            dp[_] += np.array(add)\n    else:\n        s = int(S_li[_])\n        mod = (s * (10 ** (_ % 6))) % 13\n        add = list(dp[_ - 1][(13 - mod):13]) + list(dp[_ - 1][0:(13 - mod)])\n        dp[_] += np.array(add)\nprint(dp[-1][5] % INF)\nprint(dp[-1])","import sys,math,copy\n\ndef main():\n    # import numpy as np\n    input = sys.stdin.readline\n    S = ''.join(reversed(input().strip()))\n\n    # dp = np.zeros((13), dtype=int)\n    # dp_ = np.zeros((13), dtype=int)\n    dp = [0] * 13\n    dp_ = [0] * 13\n    mod13_tuple = tuple([i % 13 for i in range(12 ** 2 + 1)])\n    tuple10 = tuple(range(10))\n    tuple13 = tuple(range(13))\n    divisor = 10 ** 9 + 7\n    dp_[0] = 1\n    mul = 1\n    for i in range(len(S)):\n        s = S[i]\n        if s == '?':\n            for d in tuple10:\n                m = mod13_tuple[(d * mul)]\n                for pm in tuple13:\n                    dp[mod13_tuple[(pm+m)]] += dp_[pm]\n\n        else:\n            si = int(s)\n            m = mod13_tuple[(si * mul)]\n            for pm in tuple13:\n                dp[mod13_tuple[(pm+m)]] = dp_[pm]\n\n        # dp_ = dp % divisor\n        # dp = dp * 0 # np.zeros((13), dtype=int)\n        for j in tuple13:\n            dp_[j] = dp[j] % divisor\n            dp[j] = 0\n        mul = mod13_tuple[(mul * 10)]\n    print(dp_[5])\n\nmain()","import numpy as np\n\nA = list(input())\nNUM=13\n\nDP = np.zeros((len(A),NUM), dtype=np.int64)\nANS = np.zeros(NUM, dtype=np.int64)\n\n\nfor i in range(len(A)):\n        if(A[i]==\"?\"):\n                for j in range(10):\n                        DP[i][(j * (10**(len(A)-i-1)))%NUM]+=1\n        else:\n                #print((int(A[i])*(10**(len(A)-i-1)))%NUM)\n                DP[i][(int(A[i])*(10**(len(A)-i-1)))%NUM]+=1\n\nfor i in range(len(A)-1,0,-1):    \n        for j in range(NUM):\n                for k in range(NUM):\n                        ANS[j] += DP[i][(k)%NUM]*DP[i-1][(NUM-k+j)%NUM]\n                        ANS[j]=ANS[j]%(10**9+7)\n        DP[i-1] = ANS[:]\n        ANS = [0]*NUM\n\nANS = DP[0][:]\n\n#print(ANS)\nprint(ANS[5])\n\n\n","import sys\nfrom io import StringIO\nimport unittest\nimport os\n\n# \u518d\u5e30\u51e6\u7406\u4e0a\u9650(dfs\u4f5c\u6210\u6642\u306b\u8a2d\u5b9a\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u9650\u5ea6\u8fd1\u3044\u5024\u3092\u7d44\u307f\u8fbc\u3080)\nsys.setrecursionlimit(999999999)\n\n\n# \u5b9f\u88c5\u3092\u884c\u3046\u95a2\u6570\ndef resolve(test_def_name=\"\"):\n    s = list(input())\n\n    s.reverse()\n\n    devval = pow(10, 9) + 7\n\n    dp = [[0 for i in range(13)] for i in range(100001)]\n\n    # \u521d\u671f\u5024\u8a2d\u5b9a\n    if s[0] == \"?\":\n        for j in range(10):\n            dp[0][j] += 1\n    else:\n        dp[0][int(s[0]) % 13] += 1\n\n    # DP\n    for i in range(1, len(s)):\n        for j in range(10):\n            if s[i] != \"?\" and s[i] != str(j):\n                continue\n\n            aaa = j * pow(10, i) % 13  # 100\/13\u306e\u4f59\u308a\u306a 200\/13\u306e\u4f59\u308a\u306a\u3069\n\n            # \u524dDP\u306e\u5024\u3092\u4ecaDP\u306b\u52a0\u7b97\n            for k in range(13):\n                dp[i][(aaa + k) % 13] = (dp[i][(aaa + k) % 13] + dp[i - 1][k] % devval) % devval\n\n    # \u4f59\u308a5\u306e\u8981\u7d20\u6570\u304c\u7b54\u3048\n    print(dp[len(s) - 1][5])\n\n\n# \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\nclass TestClass(unittest.TestCase):\n    def assertIO(self, assert_input, output):\n        stdout, sat_in = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(assert_input)\n        resolve(sys._getframe().f_back.f_code.co_name)\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, sat_in\n        self.assertEqual(out, output)\n\n    def test_input_1(self):\n        test_input = \"\"\"??2??5\"\"\"\n        output = \"\"\"768\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_2(self):\n        test_input = \"\"\"?44\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_3(self):\n        test_input = \"\"\"7?4\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_4(self):\n        test_input = \"\"\"?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\"\"\"\n        output = \"\"\"153716888\"\"\"\n        self.assertIO(test_input, output)\n\n    # \u81ea\u4f5c\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306e\u3072\u306a\u5f62(\u5229\u7528\u6642\u306f\u300ctes_t\u300d\u306e\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u3092\u524a\u9664\u3059\u308b\u3053\u3068\n    def test_1original_1(self):\n        test_input = \"\"\"?\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(test_input, output)\n\n\n# \u5b9f\u88c5or\u30c6\u30b9\u30c8\u306e\u547c\u3073\u51fa\u3057\nif __name__ == \"__main__\":\n    if os.environ.get(\"USERNAME\") is None:\n        # AtCoder\u63d0\u51fa\u6642\u306e\u5834\u5408\n        resolve()\n\n    else:\n        # \u81eaPC\u306e\u5834\u5408\n        unittest.main()\n","s=input()[::-1]\nls=len(s)\ndp=[[0]*13 for i in range(ls)]\n\nif s[0]=='?':\n    for i in range(10):dp[0][i]=1\nelse:dp[0][int(s[0])]=1\n\nfor i in range(1,ls):\n    if s[i]!='?':\n        for k in range(13):\n            dp[i][(k+(int(s[i])*10**i)%13)%13]+=dp[i-1][k]\n    else:\n        for j in range(10):\n            for k in range(13):\n                dp[i][(k+(j*10**i)%13)%13]+=dp[i-1][k]\n    for k in range(13):\n        dp[i][k]%=10**9+7\nprint(dp[-1][5])","import sys,collections as cl,bisect as bs\nsys.setrecursionlimit(100000)\nMax = sys.maxsize\nmod = 10**9+7\ndef l(): #int\u306elist\n\treturn list(map(int,input().split()))\ndef m(): #\u8907\u6570\u6587\u5b57\n\treturn map(int,input().split())\ndef onem(): #N\u3068\u304b\u306e\u53d6\u5f97\n\treturn int(input())\ndef s(x): #\u5727\u7e2e\n\ta = []\n\taa = x[0]\n\tsu = 1\n\tfor i in range(len(x)-1):\n\t\tif aa == x[i+1]:\n\t\t\ta.append([aa,su])\n\t\t\taa = x[i+1]\n\t\t\tsu = 1\n\t\telse:\n\t\t\tsu += 1\n\ta.append([aa,su])\n\treturn a\ndef jo(x): #list\u3092\u30b9\u30da\u30fc\u30b9\u3054\u3068\u306b\u5206\u3051\u308b\n\treturn \" \".join(map(str,x))\ndef max2(x): #\u4ed6\u306e\u3068\u304d\u3082\u3069\u3046\u3088\u3046\u306b\u4f5c\u6210\u53ef\u80fd\n\treturn max(map(max,x))\n\nn = list(input())\nn.reverse()\nnnn = len(n)\ndi = 1\ndp = [0 for i in range(13)]\nd = [0 for i in range(13)]\n\nif n[0] == '?':\n\tfor i in range(10):\n\t\td[i] = 1\nelse:\n\td[int(n[0])] = 1\n\nfor i in range(1,nnn):\n\tdp = [0 for i in range(13)]\n\tdi *= 10\n\tdi %= 13\n\tif n[i] == \"?\":\n\t\tfor j in range(10):\n\t\t\tj = j * di\n\t\t\tj %= 13\n\t\t\tfor kk in range(13):\n\t\t\t\tdp[(j + kk)%13] += d[kk]\n\t\t\t\tdp[(j + kk)%13] %= mod\n\telse:\n\t\tk = int(n[i])\n\t\tk = k * di\n\t\tk %= 13\n\t\tfor kk in range(13):\n\t\t\tdp[(k + kk)%13] += d[kk]\n\t\t\tdp[(k + kk)%13] %= mod\n\td = dp[:]\nprint(d[5]%mod)\n\n\n\n\n\n\n\n\n\n\n\n","def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n    #from itertools import product\n    from bisect import bisect_left,bisect_right\n    import heapq\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #inf = 10**17\n    mod = 10**9 + 7\n\n    s = input().rstrip()\n    n = len(s)\n    dp = [[0]*13 for _ in range(n)]\n\n    if s[-1]=='?':\n        for i in range(10):\n            dp[0][i] = 1\n    else:\n        a = int(s[-1])\n        dp[0][a] = 1\n\n    for i in range(1, n):\n        if s[-(i+1)] == '?':\n            for j in range(10):\n                a = (10**i) * j % 13\n                for k in range(13):\n                    dp[i][(a+k)%13] += dp[i-1][k]\n                    dp[i][(a+k)%13] %= mod\n        else:\n            a = int(s[-(i+1)])\n            a = (10**i) * a % 13\n            for k in range(13):\n                dp[i][(a+k)%13] += dp[i-1][k]\n                dp[i][(a+k)%13] %= mod\n                \n    print(dp[-1][5])\n\n\nif __name__ == '__main__':\n    main()","mod = 10 ** 9 + 7\n\ns = input()\ndp = [0] * 13\ndp[0] = 1\nfor i in range(len(s)):\n    dp2 = [0] * 13\n    for j in range(10):\n        if (s[i] == '?') | (s[i] == str(j)):\n            for k in range(13):\n                dp2[(10 * k + j) % 13] += dp[k]\n                dp2[(10 * k + j) % 13] %= mod\n    dp = dp2\nprint(dp[5])","N=input()\n\nlists = []\ntemp=[i for i in range(10)]\n\ndic={0:1}\n\nfor i in N:\n    new_dic={}\n    hoge=list(dic.items())\n    if i == \"?\":\n        for amari,count in hoge:\n            amari*=10\n            for num in temp:\n                a = (amari + num) % 13\n                if a in new_dic:\n                    new_dic[a]+=count\n                else:\n                    new_dic[a]=count\n    else:\n        num=int(i)\n        for amari,count in hoge:\n            a = (amari*10 + num)%13\n            if a in new_dic:\n                new_dic[a]+=count\n            else:\n                new_dic[a]=count\n    dic = new_dic\n\ntry:\n    print(dic[5]%(10**9 + 7))\nexcept:\n    print(0)","s = input()\n\nmod = 1000000007\nlength = len(s)\nans = list([0]*13 for i in range(length+1))\nans[0][0] = 1\n\nfor i in range(length):\n    for j in range(13):\n        if s[i] == '?':\n            for k in range(10):\n                x = (j*10 + k)%13\n                ans[i+1][x] = (ans[i+1][x] + ans[i][j]) % mod\n        else:\n            x = (j*10 + int(s[i])) % 13\n            ans[i+1][x] = (ans[i+1][x] + ans[i][j]) % mod\n\nprint(ans[length][5])\n","#N=list(map(int, input().split()))\nS=input()\nbig=10**9+7\n\nlis=[0]*13\n\nif S[0]==\"?\":\n\tlis=[1]*10+[0]*3\nelse:\n\tlis[int(S[0])]=1\nS=S[1:]\n\nfor i in S:\n\tnewlis=[0]*13\n\tif i==\"?\":\n\t\tfor j in range(10):#\u306f\u3066\u306a\u306e\u4e2d\u8eab\n\t\t\tfor k in range(13):#\u524d\u306e\u3042\u307e\u308a\n\t\t\t\tnewlis[(10*k+j)%13]+=lis[k]\n\telse:\n\t\tfor k in range(13):\n\t\t\tnewlis[(10*k+int(i))%13]+=lis[k]\n\tlis=newlis\nprint(lis[5]%big)\n","import numpy as np\nimport sys\ndef input():\n    return sys.stdin.readline()[:-1]\n\nS = input()\n\ndiv_num = 10 ** 9 + 7\narr = np.arange(13, dtype = int)\n# dp = [[0 for _ in range(13)] for _ in range(len(S))]\ndp = np.zeros([len(S), 13], dtype = int)\n\nif S[-1] == \"?\":\n    for ii in range(10): dp[0, ii] = 1\nelse:\n    dp[0, int(S[-1])] = 1\n\nfor ii in range(1, len(S)):\n    ind = -ii-1\n    if S[ind] == '?':\n        for n in range(10):\n            res = ((10 ** ii) * n) % 13\n            res = (arr + res) % 13\n            for jj in range(13):\n                dp[ii, res[jj]] += dp[ii - 1, jj]\n                if dp[ii, res[jj]] > div_num: dp[ii, res[jj]] -= div_num\n    else:\n        res = ((10 ** ii) * int(S[ind])) % 13\n        res = (arr + res) % 13\n        for jj in range(13):\n            dp[ii, res[jj]] += dp[ii - 1, jj]\n            if dp[ii, res[jj]] > div_num: dp[ii, res[jj]] -= div_num\n\nprint (dp[-1, 5])\n","M=10**9+7\n#\u30ea\u30b9\u30c8\u306b\u5165\u529b\uff08\u6587\u5b57\u5217\uff09\ntext=input()\nlst=list(text)\nlst.reverse()\ndigit=len(lst)\n\n######\u516d\u6841\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u3001?\u306e\u6570\u3068\u305d\u306e\u4ed6\u306e\u6570\u5b57\u3092\u6570\u3048\u308b\n######\u305f\u3068\u3048\u3070\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304c\u300c9?????81????\u300d\u3060\u3063\u305f\u3089\n######[[17,0],[8,1],[0,2],[0,2],[0,2],[0,2]]\u306b\u306a\u308b\nsix=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]\nfor i in range(digit):\n  if(lst[i]==\"?\"):\n    six[i%6][1]=six[i%6][1]+1\n  else:\n    six[i%6][0]=(six[i%6][0]+int(lst[i]))%13\n\n    \n######\u6570\u5b57\u90e8\u5206\u306e\u4f59\u308a\u304b\u30895\u3092\u5f15\u304f    \nrem=-(six[0][0]-3*six[1][0]-4*six[2][0]\n      -1*six[3][0]+3*six[4][0]+4*six[5][0]-5)%13\n\n######\u6f38\u5316\u5f0f\u30926\u500b\u7528\u610f\ndef mat1(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-1)%13]+ls[(i-2)%13]\n               +ls[(i-3)%13]+ls[(i-4)%13]+ls[(i-5)%13]\n               +ls[(i-6)%13]+ls[(i-7)%13]+ls[(i-8)%13]\n               +ls[(i-9)%13])%M\n  return val_ls\ndef mat10(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+3)%13]+ls[(i+6)%13]\n               +ls[(i+9)%13]+ls[(i+12)%13]+ls[(i+15)%13]\n               +ls[(i+18)%13]+ls[(i+21)%13]+ls[(i+24)%13]\n               +ls[(i+27)%13])%M\n  return val_ls\ndef mat100(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+4)%13]+ls[(i+8)%13]\n               +ls[(i+12)%13]+ls[(i+16)%13]+ls[(i+20)%13]\n               +ls[(i+24)%13]+ls[(i+28)%13]+ls[(i+32)%13]\n               +ls[(i+36)%13])%M\n  return val_ls\ndef mat1000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+1)%13]+ls[(i+2)%13]\n               +ls[(i+3)%13]+ls[(i+4)%13]+ls[(i+5)%13]\n               +ls[(i+6)%13]+ls[(i+7)%13]+ls[(i+8)%13]\n               +ls[(i+9)%13])%M\n  return val_ls\ndef mat10000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-3)%13]+ls[(i-6)%13]\n               +ls[(i-9)%13]+ls[(i-12)%13]+ls[(i-15)%13]\n               +ls[(i-18)%13]+ls[(i-21)%13]+ls[(i-24)%13]\n               +ls[(i-27)%13])%M\n  return val_ls\ndef mat100000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-4)%13]+ls[(i-8)%13]\n               +ls[(i-12)%13]+ls[(i-16)%13]+ls[(i-20)%13]\n               +ls[(i-24)%13]+ls[(i-28)%13]+ls[(i-32)%13]\n               +ls[(i-36)%13])%M\n  return val_ls\n\n\n######\u6f38\u5316\u5f0f\u3092\u9069\u7528\nmodulos=[1,0,0,0,0,0,0,0,0,0,0,0,0]\nfor j in range(six[0][1]):\n  modulos=mat1(modulos)\nfor j in range(six[1][1]):\n  modulos=mat10(modulos)\nfor j in range(six[2][1]):\n  modulos=mat100(modulos)\nfor j in range(six[3][1]):\n  modulos=mat1000(modulos)\nfor j in range(six[4][1]):\n  modulos=mat10000(modulos)\nfor j in range(six[5][1]):\n  modulos=mat100000(modulos)\nprint(modulos[rem])\n","s = input()\n\nmod = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(len(s))]\n\nif s[0] == '?':\n    dp[0] = [1] * 10 + [0] * 3\nelse:\n    dp[0][int(s[0])] = 1\n\nfor i in range(len(s)-1):\n    if s[i+1] == '?':\n        for j in range(13):\n            for k in range(10):\n                dp[i+1][(j*10+k)%13] = (dp[i+1][(j*10+k)%13] + dp[i][j]) % mod\n    else:\n        n = int(s[i+1])\n        for j in range(13):\n            dp[i+1][(j*10+n)%13] = (dp[i+1][(j*10+n)%13] + dp[i][j]) % mod\n\nprint(dp[len(s)-1][5])","def slove():\n    import sys\n    input = sys.stdin.readline\n    s = str(input().rstrip('\\n'))\n    is_first = True\n    ls = [[0] * 13 for _ in range(len(s))]\n    mod = 10 ** 9 + 7\n    for i in range(len(s)):\n        if is_first:\n            is_first = False\n            if s[-i-1] == \"?\":\n                for j in range(10):\n                    ls[i][j] += 1\n            else:\n                t = int(s[-i-1])\n                ls[i][t] += 1\n        else:\n            mlt = pow(10, i)\n            if s[-i-1] == \"?\":\n                for j in range(13):\n                    for k in range(10):\n                        r = (j + mlt * k) % 13\n                        ls[i][r] += ls[i-1][j]\n                        ls[i][r] %= mod\n            else:\n                t = int(s[-i-1])\n                for j in range(13):\n                    r = (j + mlt * t) % 13\n                    ls[i][r] += ls[i-1][j]\n                    ls[i][r] %= mod\n    print(ls[-1][5])\n\n\nif __name__ == '__main__':\n    slove()\n","s=input()\nmod = 1000000007\n\ndp = [[0 for l in range(13)] for m in range(len(s)+1)]\ndp[0][0] = 1\nfor i in range(1,len(s)+1):\n  if s[-i] == '?':\n    for j in range(10):\n      for k in range(13):\n        dp[i][(k+j*10**(i-1))%13] += dp[i-1][k] %mod\n  else:\n    for k in range(13):\n      dp[i][(int(s[-i])*10**(i-1) +k)%13] += dp[i-1][k] %mod\n\nprint(dp[len(s)][5] %mod)","import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef SMI(): return input().split()\ndef SLI(): return list(input())\n\ndef printlist(lst, k=' '): print(k.join(list(map(str, lst))))\nINF = float('inf')\n\n# from math import ceil, floor, log2\n# from collections import deque\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np\n# from numpy import cumsum  # accumulate\n\ndef solve():\n    S = SLI()\n    l = len(S)\n    MOD = 1000000007\n    dp = [[0]*13 for _ in range(l+1)]\n    dp[0][0] = 1\n    mul = 1\n    for i in range(l):\n        s = S[-(i + 1)]\n        if s == '?':\n            for q in range(10):\n                for j in range(13):\n                    dp[i+1][(q*mul + j)%13] += dp[i][j]\n                    dp[i+1][(q*mul + j)%13] %= MOD\n        else:\n            for j in range(13):\n                k = int(s)\n                dp[i+1][(k*mul + j)%13] += dp[i][j]\n                dp[i+1][(k*mul + j)%13] %= MOD\n\n        mul = mul * 10 % 13\n    # print(dp[-1])\n    print(dp[-1][5] % MOD)\n\nif __name__ == '__main__':\n    solve()\n","s = input()\nmod = 10**9 + 7\n\ndp = [[0] * 13 for _ in range(2)]\ntmp = 0\nfor si in s:\n    if(si != '?'):\n        tmp = (tmp*10 + int(si)) % 13\n    else:\n        tmp = tmp*10 % 13\n\ndp[0][tmp] = 1\nexp10 = 1\npointer = 0\nfor i,si in enumerate(s[::-1]):\n\n    if(si!='?'):\n        exp10 = exp10 * 10 % 13\n        continue\n\n    pointer = 1 - pointer\n    for j in range(13):\n        dp[pointer][j] = 0\n\n    for j in range(13):\n        for k in range(10):\n            dp[pointer][(j + exp10*k)%13] += dp[1-pointer][j]\n\n    for j in range(13):\n        dp[pointer][j] %= mod\n\n    exp10 = exp10 * 10 % 13\n\nprint(dp[pointer][5])\n","s = input()\nMOD = 10**9+7\n\ndp = [[0 for i in range(13)] for i in range(len(s)+1)]\ndp[0][0] = 1\n\nfor i in range(len(s)):\n  if s[i]=='?':\n    for k in range(10):\n      for j in range(13):\n        dp[i+1][(j*10+k)%13] = (dp[i+1][(j*10+k)%13] + dp[i][j])%MOD\n  else:\n    t = int(s[i])\n    for j in range(13):\n      dp[i+1][(j*10+t)%13] = (dp[i+1][(j*10+t)%13] + dp[i][j])%MOD\nprint(dp[len(s)][5])","import numpy as np\nS=input()\nN=len(S)\nmod=10**9+7\ndp=[[0]*13 for _ in range(N+1)]\ndp=np.array(dp)\nS=S[::-1]\ndp[0][0]=1\nfor i in range(1,N+1):\n    if i==1:\n        p=1\n    else:\n        p*=10\n        p%=mod\n    s=S[i-1]\n    if s!=\"?\":\n        now=(p*int(s))%mod\n        idx=(13-now)%13\n        add=np.concatenate([dp[i-1][idx:],dp[i-1][:idx]])\n        p#rint(add)\n        dp[i]+=add%mod\n    else:\n        for j in range(10):\n            now=(p*j)%mod\n            idx=(13-now)%13\n            #print(idx)\n            add=np.concatenate([dp[i-1][idx:],dp[i-1][:idx]])\n            #print(add)\n            dp[i]+=add%mod\n    dp[i]%=mod\n#print(dp)\nprint(dp[N][5])","S = input()\n\nC, qi = [1] + [0] * 12, 1\n\nfor i in range(len(S)):\n    if S[-(i + 1)] == '?':\n        tC = [0] * 13\n        for j in range(10):\n            q = (j * qi) % 13\n            for c in range(13):\n                tC[(c + q) % 13] += C[c]\n        C = tC\n    else:\n        q, tC = (int(S[-(i + 1)]) * qi) % 13, [0] * 13\n        for c in range(13):\n            tC[(c + q) % 13] = C[c]\n        C = tC\n    qi = (qi * 10) % 13\n\nprint(C[5] % (10 ** 9 + 7))\n","# D - Digits Parade\n\n# dp[i][j] S\u306e\u5927\u304d\u3044\u4f4d\u304b\u3089i\u6841\u306e\u6570\u3067\u3001\u3042\u308a\u5f97\u308b\u3082\u306e\u306e\u3046\u3061\u300113\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u306b\u306a\u308b\u3082\u306e\u306e\u500b\u6570\u30020\u6841\u30b9\u30bf\u30fc\u30c8\n# \u5927\u304d\u3044\u4f4d\u304b\u3089\u9806\u306b\u59cb\u3081\u306a\u3044\u306813\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u4f59\u308a\u3092\u6c42\u3081\u308b\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308b\n\nS = input()\n\nMOD = 10**9 + 7\ndp = [[0]*13 for _ in range(len(S))]\n\nif S[0] == \"?\":\n    for j in range(10):\n        dp[0][j] = 1\nelse:\n    dp[0][int(S[0])] = 1\n\nfor i in range(1, len(S)):\n    if S[i] == \"?\":\n        for q_number in range(10): # ?\u306e\u4e2d\u8eab\u3068\u3057\u3066\u3042\u308a\u5f97\u308b\u6570\u5b57\n            for front_number in range(13):\n                dp[i][(10 * front_number + q_number) % 13] += dp[i-1][front_number]\n                dp[i][(10 * front_number + q_number) % 13] %= MOD\n    else:\n        for front_number in range(13):\n            dp[i][(10 * front_number + int(S[i])) % 13] += dp[i-1][front_number]\n            dp[i][(10 * front_number + int(S[i])) % 13] %= MOD\n\nprint(dp[len(S)-1][5] % MOD)","import copy\nS = input()\ns = len(S)\nMOD = 10**9+7\nD = [0]*13\nS = S[::-1]\nfor i in range(s):\n    if i==0:\n        if S[i]==\"?\":\n            for j in range(10):\n                D[j]+=1\n        else:\n            D[int(S[i])]+=1\n    else:\n        P = copy.copy(D)\n        if S[i]==\"?\":\n            p = 10**i\n            for j in range(1,10):\n                q = (j*p)%13\n                for k in range(13):\n                    D[(k+q)%13] += P[k]\n            continue\n        else:\n            p = int(S[i])*(10**i)\n            D = P[13-p%13:]+P[:13-p%13]\nprint(D[5]%MOD)","s = input()\nn = len(s)\nMOD = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(n):\n    x = s[i]\n    for j in range(13):\n        if x == '?':\n            for k in range(10):\n                dp[i + 1][(10 * j + k) % 13] += dp[i][j]\n                dp[i + 1][(10 * j + k) % 13] %= MOD\n        else:\n            k = int(x)\n            dp[i + 1][(10 * j + k) % 13] += dp[i][j]\n            dp[i + 1][(10 * j + k) % 13] %= MOD\n\nprint(dp[n][5])","import sys,math,copy\n# import numpy as np\ninput = sys.stdin.readline\nS = reversed(input().strip())\n\n# dp = np.zeros((13), dtype=int)\n# dp_ = np.zeros((13), dtype=int)\ndp = [0] * 13\ndp_ = [0] * 13\nmod13_list = [i % 13 for i in range(12 ** 2 + 1)]\nrange10 = range(10)\nrange13 = range(13)\ndivisor = 10 ** 9 + 7\ndp_[0] = 1\nmul = 1\nfor s in S:\n    if s == '?':\n        for d in range10:\n            m = mod13_list[(d * mul)]\n            for pm in range13:\n                dp[mod13_list[(pm+m)]] += dp_[pm]\n\n    else:\n        si = int(s)\n        m = mod13_list[(si * mul)]\n        for pm in range13:\n            dp[mod13_list[(pm+m)]] = dp_[pm]\n\n    # dp_ = dp % divisor\n    # dp = dp * 0 # np.zeros((13), dtype=int)\n    for i in range13:\n        dp_[i] = dp[i] % divisor\n        dp[i] = 0\n    mul = mod13_list[(mul * 10)]\nprint(dp_[5])","import sys\nsys.setrecursionlimit(10 ** 7)\nread = sys.stdin.buffer.read \ninp = sys.stdin.buffer.readline\ndef inpS(): return inp().rstrip().decode()\nreadlines = sys.stdin.buffer.readlines \nMOD = 10**9+7\n\nS = inpS()\nN = len(S)\ndp = [[0]*13 for _ in range(N+1)]\n\ndp[0][0] = 1\nfor dgt in range(N):\n  for mo in range(13):\n    if S[dgt] == \"?\":\n      for nxt in range(10):\n        ind = (mo*10 + nxt) % 13\n        dp[dgt+1][ind] += dp[dgt][mo]\n        dp[dgt+1][ind] %= MOD\n    else:\n      ind = (mo*10 + int(S[dgt])) % 13\n      dp[dgt+1][ind] += dp[dgt][mo]\n      dp[dgt+1][ind] %= MOD\nprint(dp[N][5])        ","#!\/usr\/bin\/env python\nfrom collections import defaultdict, deque\nimport math\nfrom math import factorial\nimport fractions\nimport re\n\nBIGNUM = 10 ** 9 + 7\n\nMOD13 = {}\nfor i in range(13):\n    for j in range(13):\n        MOD13[(i, j)] = (i + j) % 13\n\ndef main():\n    S = input().strip()\n\n    dp = {0: 1}\n    for i in range(len(S)):\n        s = S[-(i+1)]\n        if s == \"?\":\n            snums = [(k * 10 ** i) % 13 for k in range(10)]\n        else:\n            snums = [(int(s) * 10 ** i) % 13]\n\n        new_dp = defaultdict(int)\n        for snum in snums:\n            for n, v in dp.items():\n                mod = MOD13[(snum, n)]\n                new_dp[mod] += v\n        \n        dp = new_dp\n\n    if not 5 in dp:\n        dp[5] = 0\n    print(dp[5] % BIGNUM)\n\nif __name__ == '__main__':\n    main()\n"],"formatted_programs":["s=input()\ndp=[[0]*13 for _ in range(10**5+5)]\ndp[0][0]=1\nfor i in range(len(s)):\n    if s[i]=='?':\n        c=-1\n    else:\n        c=int(s[i])\n    \n    for j in range(10):\n        if c!=-1 and c!=j:\n            continue\n        for k in range(13):\n            dp[i+1][(k*10+j)%13]+=dp[i][k]\n    for j in range(13):\n        dp[i+1][j]%=(10**9+7)\n\nprint(dp[len(s)][5])","#!\/usr\/bin\/env python3\nimport sys\n\nMOD = 1000000007  # type: int\n\n\ndef solve(S: str):\n    \"\"\"\n    >>> solve(\"05\")\n    1\n    >>> solve(\"18\")\n    1\n    >>> solve(\"13\")\n    0\n    \"\"\"\n    pre, cur = [0] * 13, None\n    base = 10\n    if S[-1] == \"?\":\n        cur = [1] * 10 + [0] * 3\n    else:\n        cur = [0] * 13\n        cur[int(S[-1])] = 1\n    for n in reversed(S[:-1]):\n        pre, cur = cur, pre\n        for i in range(13): # \u518d\u751f\u6210\u3092\u907f\u3051\u308b\n            cur[i] = 0\n        g = range(10) if n == \"?\" else [int(n)]\n        for i in g:\n            t = base * i % 13\n            for j in range(13):\n                cur[(j+t)%13] = (cur[(j+t)%13] + pre[j]) % MOD\n        base = (base * 10) % 13        \n        # print(n, pre, cur, base)\n    return cur[5]\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    S = next(tokens)  # type: str\n    print(solve(S))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    test()\n    main()\n","S = input()\nS = S[::-1]\nans = [[0] * 13 for _ in range(len(S))]\nMOD = 10 ** 9 + 7\nif S[0] == \"?\":\n    for i in range(10):\n        ans[0][i] = 1\nelse:\n    ans[0][int(S[0])] = 1\n\nfor i, s in enumerate(S):\n    if i == 0:\n        continue\n    if s == \"?\":\n        for n in range(10):\n            for j in range(13):\n                if ans[i - 1][j] == 0:\n                    continue\n                ans[i][(j + n * 10 ** i) % 13] += ans[i - 1][j]\n                ans[i][(j + n * 10 ** i) % 13] %= MOD\n    else:\n        for j in range(13):\n            ans[i][(j + int(s) * 10 ** i) % 13] = ans[i - 1][j]\n\nprint(ans[-1][5])\n","#!\/usr\/bin\/env python\nimport numpy as np\n\ndef main():\n    S = input()\n    \n    lenS = len(S)\n    N = 13\n    DP = np.zeros(N, dtype=np.int64)\n    DP[0] = 1\n    \n    mod = 10 ** 9 + 7\n    mul = 1\n    for i in reversed(range(lenS)):\n        nextDP = np.zeros(N, dtype=np.int64)\n        c = S[i]\n        if c == '?':\n            for k in range(10):\n                for j in range(N):\n                    nextDP[(k * mul + j) %N] += DP[j]\n                    nextDP[(k * mul + j) %N] %= mod\n\n        else:\n            k = int(S[i])\n            for j in range(N):\n                nextDP[(k * mul + j) %N] += DP[j]\n                nextDP[(k * mul + j) %N] %= mod\n\n        mul *= 10\n        mul %= N\n        DP = nextDP\n\n    return DP[5]\n\nif __name__ == '__main__':\n    print(main())\n\n","S = str(input())\nS_len = len(S)\n\nDP = [[0] * 13 for i in range(S_len+1)]\nDP[S_len][0] = 1\n\nfor i in reversed(range(S_len)):\n\n    num = 10 ** (S_len - 1 - i) % 13\n\n    if S[i] != \"?\":\n        for j in range(13):\n            if DP[i + 1][j] != 0:\n                DP[i][(j + int(S[i]) * num) % 13] = (DP[i][(j + int(S[i]) * num) % 13] + DP[i + 1][j]) % 1000000007\n    else:\n        for j in range(13):\n            for k in range(10):\n                if DP[i + 1][j] != 0:\n                    DP[i][(j + k * num) % 13] = (DP[i][\n                                                     (j + k * num) % 13] +\n                                                 DP[i + 1][j]) % 1000000007\n\nprint(DP[0][5])\n\n","import sys\nreadline = sys.stdin.readline\n\ndef main():\n\n\t#s = tuple(input())\n\ts = input()\n\tlength = len(s)\n\n\tdp = [[0]*13 for _ in range(length+1)]\n\tMOD = 10**9+7\n\tif s[-1] == '?':\n\t\tfor i in range(10):\n\t\t\tdp[1][i] = 1\n\telse:\n\t\tdp[1][int(s[-1])] = 1\n\n\tfor i in range(1,length):\n\t\tif s[-i-1] != '?':\n\t\t\tnum = (int(s[-i-1]) * (10**i)) % 13\n\t\t\tfor j in range(13):\n\t\t\t\tdp[i+1][j] = dp[i][(13-num+j)%13]\n\t\t\t\tdp[i+1][j] %= MOD\n\t\telse:\n\t\t\tnum = (10**i) % 13\n\t\t\ta = 0\n\t\t\tfor j in range(10):\n\t\t\t\tfor k in range(13):\n\t\t\t\t\tdp[i+1][k] += dp[i][(13-a+k)%13]\n\t\t\t\t\tdp[i+1][k] %= MOD\n\t\t\t\ta += num\n\n\tprint(dp[-1][5] % MOD)\n\nif __name__ == '__main__':\n\tmain()","import math\nimport copy\nfrom copy import deepcopy\nimport sys\nimport fractions\nimport numpy as np\nfrom functools import reduce\nimport statistics\nimport heapq\n\ninput = sys.stdin.readline\nsys.setrecursionlimit(10**6)\n\n# ===FUNCTION===\n\ndef getInputInt():\n    inputNum = int(input())\n    return inputNum\n\n\ndef getInputListInt():\n    outputData = []\n    inputData = input().split()\n    outputData = [int(n) for n in inputData]\n\n    return outputData\n\n\ndef getSomeInputInt(n):\n    outputDataList = []\n    for i in range(n):\n        inputData = int(input())\n        outputDataList.append(inputData)\n\n    return outputDataList\n\n\ndef getSomeInputListInt(n):\n    inputDataList = []\n    outputDataList = []\n    for i in range(n):\n        inputData = input().split()\n        inputDataList = [int(n) for n in inputData]\n        outputDataList.append(inputDataList)\n\n    return outputDataList\n\n\n# ===CODE===\n\ndef getInputStr():\n    inputStr = str(input())\n    return inputStr\n\ndata = getInputStr()\n\na = str(data)\nlistStr = []\nlistStr = list(a)\n\ndel listStr[len(listStr)-1]\nlistStr.reverse()\n\ndp = [[0]*13 for _ in range(len(listStr)+1)]\ndp[0][0] = 1\nordinal = 1\n\nINF = 10 ** 9 + 7\n\nfor i in range(len(listStr)):\n    if i ==0:\n        keta = 1\n    else:\n        keta = pow(10, i)\n\n    if listStr[i] == \"?\":\n        for k in range(10):\n            for j in range(13):\n                dp[i+1][int(((k*keta)%13 + j) % 13)] += dp[i][j]\n                # dp[i + 1][int(((k * ordinal) + j) % 13)] %= INF\n    else:\n        k = int(listStr[i])\n        for j in range(13):\n            dp[i + 1][int(((k*keta)%13 + j) % 13)] += dp[i][j]\n            # dp[i + 1][int(((k*ordinal) + j) % 13)] %= INF\n\n\nans = dp[len(listStr)][5] % INF\nprint(ans)","S = list(input())\nN = len(S)\ndp = [[0] * 13 for _ in range(N+1)]\nMOD = 10**9 + 7\ns = S[0]\nif s=='?':\n    for k in range(10):\n        dp[0][k] = 1\nelse:\n    dp[0][s] = 1\n \n\nfor i in range(1,N):\n    s = S[i]\n    for j in range(13):\n        if s=='?':\n            for k in range(10):\n                tmp = (j*10 + k)%13\n                dp[i][tmp] += dp[i-1][j]\n                dp[i][tmp] %= MOD\n        else:\n            tmp = (j*10 + int(s))%13\n            dp[i][tmp] += dp[i-1][j]\n            dp[i][tmp] %= MOD\n            \nprint(dp[N-1][5])","mod=10**9+7\ns=input()\nn=len(s)\nDP=[[0]*13 for _ in range(n+1)]\nDP[0][0]=1\nfor i in range(n):\n  r=pow(10,n-1-i,13)\n  if s[i]==\"?\":\n    for j in range(10):\n      rr=(r*j)%13\n      for k in range(13):\n        if k>=rr:\n          DP[i+1][k]+=DP[i][k-rr]\n        else:\n          DP[i+1][k]+=DP[i][k-rr+13]\n        DP[i+1][k]%=mod\n  else:\n    rr=(r*int(s[i]))%13\n    for k in range(13):\n      if k>=rr:\n        DP[i+1][k]+=DP[i][k-rr]\n      else:\n        DP[i+1][k]+=DP[i][k-rr+13]\n      DP[i+1][k]%=mod\nprint(DP[n][5]%mod)\n","#N=list(map(int, input().split()))\nS=input()\nbig=10**9+7\n\nlis=[0]*13\n\nif S[0]==\"?\":\n\tlis=[1]*10+[0]*3\nelse:\n\tlis[int(S[0])]=1\nS=S[1:]\n\nfor i in S:\n\tnewlis=[0]*13\n\tif i==\"?\":\n\t\tfor j in range(10):#\u306f\u3066\u306a\u306e\u4e2d\u8eab\n\t\t\tfor k in range(13):#\u524d\u306e\u3042\u307e\u308a\n\t\t\t\tnewlis[(10*k+j)%13]+=lis[k]\n\telse:\n\t\tfor k in range(13):\n\t\t\tnewlis[(10*k+int(i))%13]+=lis[k]\n\tlis=newlis.copy()\nprint(lis[5]%big)","def main():\n    MOD = 10 ** 9 + 7\n\n    s = input()\n    r = [0] * 13\n    r[0] = 1\n    p = 1\n    for c in reversed(s):\n        if c == '?':\n            tank = []\n            for x in range(10):\n                x = x * p % 13\n                tank.append(r[13 - x:] + r[:13 - x])\n            r = map(sum, zip(*tank))\n            *r, = map(lambda x: x % MOD, r)\n\n\n        else:\n            x = int(c)\n            x = x * p % 13\n            r = r[13 - x:] + r[:13 - x]\n        p = p * 10 % 13\n\n    print(r[5])\n\n\nif __name__ == '__main__':\n    main()\n","S = input()\ndp = [[0 for _ in range(13)] for _ in range(len(S)+1)]\nrank = 1\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[len(S)-i-1] == \"?\":\n            for k in range(10):\n                dp[i + 1][(k * rank + j) % 13] += dp[i][j]\n        else:\n            k = int(S[len(S)-i-1])\n            dp[i + 1][(k * rank + j) % 13] += dp[i][j]\n\n    rank *= 10\n\nans = dp[len(S)][5] % (10 ** 9 + 7)\nprint(ans)\n","# -*- coding: utf-8 -*-\nS = str(input())\nMOD = 1000000007\n\ndp = [0 for i in range(13)]\ndp[0] = 1\nfor i in range(0, len(S)):\n    next_dp = [0 for i in range(13)]\n    if S[len(S) - i - 1] == '?':\n        for k in range(10):\n            for j in range(13):\n                add = k * pow(10,i) % 13\n                next_dp[(j + add) % 13] += dp[j]\n    else:\n        for j in range(13):\n            add = int(S[len(S) - i - 1]) * pow(10,i) % 13\n            next_dp[(j + add) % 13] = dp[j]\n    dp = next_dp\n\nprint(dp[5] % MOD)","S=list(input())\nMOD=10**9+7\ndp=[0]*13\ndp[0]=1\nfor i in range(1,len(S)+1):\n    ans=[0]*13\n    if S[-i]==\"?\":\n        for j in range(10):\n            a=(j*10**(i-1))%13\n            for k in range(13):\n                ans[(k+a)%13]=ans[(k+a)%13]+dp[k]\n    else:\n        a=int(S[-i])\n        a=(a*10**(i-1))%13\n        for k in range(13):\n            ans[(k+a)%13]=ans[(k+a)%13]+dp[k]\n    dp=ans.copy()\n    print(ans)\nprint(ans[5]%MOD)","x = 1000000007\n\nS = input()\nS = [int(s) if s != '?' else s for s in S]\nS = S[::-1]\n\ndp = [[0 for j in range(13)] for i in range(len(S) + 1)]\n\ndp[0][0] = 1\n\nfor i, s in enumerate(S):\n    for j in range(10):\n        if s != '?' and s != j:\n            continue\n\n        digit_r = ((10 ** i) * j) % 13\n\n        for k in range(13):\n            r = (digit_r + k) % 13\n            dp[i + 1][r] += dp[i][k] % x\n\nprint(int(dp[-1][5] % x))\n","N=input()\na=1000000000+7\nb=[]\nfor i in N:\n    if i=='?':b.append(\"9\")\n    else:b.append(i)\nb=int(b)\nprint((b-5)\/13)","import numpy as np\n\nS = input()\n\nk = len(S)\nk0 = (len(S)%6-1)%6\nk1 = (len(S)%6-2)%6\nk2 = (len(S)%6-3)%6\nk3 = (len(S)%6-4)%6\nk4 = (len(S)%6-5)%6\nk5 = (len(S)%6-6)%6\n\na0 = S[k0::6] \na1 = S[k1::6] \na2 = S[k2::6] \na3 = S[k3::6] \na4 = S[k4::6] \na5 = S[k5::6] \n\ndef digitSum(n):\n    # \u6570\u5024\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\n    s = str(n)\n    # \uff11\u6587\u5b57\u305a\u3064\u6570\u5024\u5316\u3057\u914d\u5217\u306b\u3059\u308b\u3002\n    array = list(map(int, s))\n    # \u5408\u8a08\u5024\u3092\u8fd4\u3059\n    return sum(array)\n\nA = np.zeros(6)\nB = np.zeros(6)\n\n\nb0 = a0.replace(\"?\", \"\")\nB[0] = int(len(a0) - len(b0))\nA[0] = digitSum(b0)\n\nb1 = a1.replace(\"?\", \"\")\nB[1] = int(len(a1) - len(b1))\nA[1] = digitSum(b1)\n\nb2 = a2.replace(\"?\", \"\")\nB[2] = int(len(a2) - len(b2))\nA[2] = digitSum(b2)\n\nb3 = a3.replace(\"?\", \"\")\nB[3] = int(len(a3) - len(b3))\nA[3] = digitSum(b3)\n\nb4 = a4.replace(\"?\", \"\")\nB[4] = int(len(a4) - len(b4))\nA[4] = digitSum(b4)\n\nb5 = a5.replace(\"?\", \"\")\nB[5] = int(len(a5) - len(b5))\nA[5] = digitSum(b5)\n\nfor i in range(6):\n    if B[i] == 0:\n        B[i] = 1\n    else:\n        B[i] = B[i] *10\n    \nans = 0\n\na = A[0] + A[1]*10 + A[2]*100 + A[3]*1000 + A[4]*10000 + A[5]*100000 \na = a%13\n    \nfor i0 in range(int(B[0])):\n    for i1 in range(int(B[1])):\n        for i2 in range(int(B[2])):\n            for i3 in range(int(B[3])):\n                for i4 in range(int(B[4])):\n                    for i5 in range(int(B[5])):\n                        if (i0 + i1*10 + i2*100 + i3*(-1) + i4*(-10) + i5*(-100) + a)%13 == 5:\n                            ans += 1\n                            \nprint(ans)","S = [int(x) if x != \"?\" else -1 for x in input()]\ng = 10 ** 9 + 7\nx = 1\nDP = [[0] * 13 for _ in range(2)]\nDP[0][0] = 1\nfor i in range(len(S)):\n    for j in range(13):\n        DP[1][j] = DP[0][j] % g\n        DP[0][j] = 0\n    for j in range(13):\n        if S[i] == -1:\n            s = (j*10)%13\n            e = (s+10)%13\n        else:\n            s = (j*10+S[i])%13\n            e = (s+1)%13\n        DP[0][s] += DP[1][j]\n        if s > e:\n            DP[0][0] += DP[1][j]\n        DP[0][e] -= DP[1][j]\n    w = 0\n    for j in range(13):\n        w += DP[0][j]\n        DP[0][j] = w\n\nprint(DP[0][5] % g)\n","S = input()\n\nl = len(S)\nMOD = 10**9+7\ndp = [[0 for i in range(13)] for j in range(l+1)]\ndp[0][0] = 1\nfor i in range(l):\n    if S[i] == '?':\n        for j in range(10):\n            for k in range(13):\n                dp[i+1][(k*10+j)%13] += dp[i][k] % MOD\n    else:\n        for k in range(13):\n            dp[i+1][(k*10+int(S[i-1]))%13] += dp[i][k] % MOD\n\nprint(dp[-1][5] % MOD)","s = list(input())\n\nMOD = pow(10, 9) + 7\n\nn = len(s)\ns.reverse()\n\ndp = [[0] * 13 for _ in range(n)]\n\n#r = list(range(10))\n\n#init\nif s[0] == \"?\":\n    for j in range(10):\n        dp[0][j] = 1\nelse:\n    q = int(s[0])\n    dp[0][q] = 1\n\nfor i in range(1, n):\n\n    # for l in range(10):\n    #     r[l] = r[l] * 10 % 13\n\n    #print(r)\n\n    if s[i] == \"?\":\n        for j in range(10):\n            q = j * pow(10, i, 13) % 13\n            for k in range(13):\n                dp[i][k] += dp[i-1][k-q]\n    \n    else:\n        q = int(s[i]) * pow(10, i, 13) % 13\n        #print(q)\n        for k in range(13):\n            dp[i][k] += dp[i-1][k-q]\n    #print(dp[i])\n\nprint(dp[n-1][5] % MOD)","z=10\nm=z**9+7\nk=13\nt=input()[::-1]\ndp=[0]*k\ndp[0]=1\nfor d in range(len(t)):\n  p=[0]*k\n  if t[d]=='?':\n    for x in range(z):\n      r=int(x)*pow(z,d,k)\n      for i in range(k):\n        p[(i+r)%k]+=dp[i]\n  else:\n    r=int(t[d])*pow(z,d,k)\n    for i in range(k):\n      p[(i+r)%k]+=dp[i]\n  dp=[j%m for j in p]\nprint(dp[5]%m)","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\nclass ModInt:\n\n    def __init__(self, x):\n        self.x = x.x if isinstance(x, ModInt) else x % MOD\n\n    __str__ = lambda self:str(self.x)\n    __repr__ = __str__\n    __int__ = lambda self: self.x\n    __index__ = __int__\n\n    __add__ = lambda self, other: ModInt(self.x + ModInt(other).x)\n    __sub__ = lambda self, other: ModInt(self.x - ModInt(other).x)\n    __mul__ = lambda self, other: ModInt(self.x * ModInt(other).x)\n    __pow__ = lambda self, other: ModInt(pow(self.x, ModInt(other).x, MOD))\n    __mod__ = lambda self, other: ModInt(self.x % ModInt(other).x)\n    __truediv__ = lambda self, other: ModInt(self.x * pow(ModInt(other).x, MOD - 2, MOD))\n    __floordiv__ = lambda self, other: ModInt(self.x \/\/ ModInt(other).x)\n    __radd__ = lambda self, other: ModInt(other + self.x)\n    __rsub__ = lambda self, other: ModInt(other - self.x)\n    __rpow__ = lambda self, other: ModInt(pow(other, self.x, MOD))\n    __rmod__ = lambda self, other: ModInt(other % self.x)\n    __rmul__ = lambda self, other: ModInt(other * self.x)\n    __rtruediv__ = lambda self, other: ModInt(other * pow(self.x, MOD - 2, MOD))\n    __rfloordiv__ = lambda self, other: ModInt(other \/\/ self.x)\n\n    __lt__ = lambda self, other: self.x < ModInt(other).x\n    __gt__ = lambda self, other: self.x > ModInt(other).x\n    __le__ = lambda self, other: self.x <= ModInt(other).x\n    __ge__ = lambda self, other: self.x >= ModInt(other).x\n    __eq__ = lambda self, other: self.x == ModInt(other).x\n    __ne__ = lambda self, other: self.x != ModInt(other).x\n\n\ndef main():\n    S = input()\n\n    dp = [[0] * 13  for _   in range(len(S)-1)]\n    dp[0] = [ModInt(0) for _ in range(13)]\n    \n    if S[0] == '?':\n        for i in range(10):\n            dp[0][i] = ModInt(1)\n    else:\n        dp[0][int(S[0])] = ModInt(1)\n\n    for i in range(1,len(S)-1):\n        if S[i] == '?':\n            for j in range(13):\n                for k in range(10):\n                    dp[i][(j * 10 + k) % 13 ] += dp[i-1][j]\n        else:\n            for j in range(13):\n                dp[i][ (j* 10 + int(S[i])) % 13 ] += dp[i-1][j]\n        \n\n    print(dp[len(S)-2][5])\n\n\n\n\n\n\n\n\n\n    pass\nif __name__ == '__main__':\n    main()","M = 10**9 + 7\na = [1] + [0] * 12\np = 1\nfor c in reversed(input()):\n    r = range(0, p * 10, p) if c == '?' else (p * int(c),)\n    a = [sum(a[(i - j) % 13] for j in r) % M for i in range(13)]\n    p = p * 10 % 13\nprint(a[5])","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\ndef main():\n    S = input()\n    N = len(S)-1\n    dp = [0] * 13\n    \n\n    if S[0] == '?':\n        R = range(10)\n    else:\n        R = [int(S[0])]\n\n    for i in R:\n        dp[i] = 1\n\n    for i in range(1,N):\n        if S[i] == '?':\n            R = range(10)\n        else:\n            R = [int(S[i])]\n\n\n        dppre = dp\n        dp = [0] * 13\n        for j in range(13):\n            for k in R:\n                dp[(j * 10 + k) % 13 ] += dppre[j]\n        for j in range(13):\n            dp[j] %= MOD\n    \n    print(dp[5])\n\n\nif __name__ == '__main__':\n    main()","S = input()\nN = len(S)\nS = list(S)\nS.reverse()\n\ndp = [[0]*13 for _ in range(100100)]\ndp[0][0] = 1\nmod = 10**9+7\nfor i in range(1, N + 1):\n    if S[i-1] == \"?\":\n        for j in range(13):\n            for k in range(10):\n                dp[i][(j + k*10**(i-1)) % 13] += dp[i-1][j]\n    else:\n        for j in range(13):\n            dp[i][(j+int(S[i-1])*10**(i-1)) % 13] = dp[i-1][j]\n\n    for j in range(13):\n        dp[i][j] %= mod\n\nprint(dp[N][5])\n","mod=10**9+7\ns=input()\n\nb=int(s.replace(\"?\",\"0\"))%13\nif b<=5:\n    cal=5-b\nelse:\n    cal=18-b\n\np=[[i*j%13 for i in range(10)] for j in range(13)]\nrev=s[::-1]\nd={i:0 for i in range(13)}\nnum=rev.find(\"?\")\ntmp=10**num%13\nfor i in p[tmp]:\n    d[i]+=1\n\nfor i,v in enumerate(rev[num+1:]):\n    #print(i+num+1)\n    if v==\"?\":\n        tmp=10**(i+num+1)%13\n        t_d={i:0 for i in range(13)}\n        #print(\"i,tmp:\",i+num+1,\",\",tmp)\n        for k in range(0,13):\n            for j in range(0,10):\n                t_d[(p[tmp][j]+k)%13]+=d[k]\n            #print(t_d.values())\n        for j in range(13):\n            d[j]=t_d[j]\n        #print(t_d)\n#print(d)\nprint(d[cal]%mod)\n        \n\n","# -*- coding: utf-8 -*-\n# D - Digits Parade\nimport sys \nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\nMOD = 10**9+7\nS = readline().decode().rstrip()\nN = len(S)\n\ndp = [0]*13\ndp[0] = 1\n# if S[0] == '?':\n#     rem = pow(10,N,13)\n#     for j in range(10):\n#         t = rem*j%13\n#         dp[t] += 1\n# else:\n#     s = int(S[0])\n#     rem = pow(10,N,13)*s%13\n#     dp[rem] += 1\n\nfor i in range(N):\n    s = S[i]\n    ndp = [0]*13\n    rem = pow(10,N-i-1,13)\n    if s == '?':\n        for j in range(10):\n            t = rem*j%13\n            for k in range(13):\n                ndp[(k+t)%13] += dp[k]\n                ndp[(k+t)%13] %= MOD\n    else:\n        s = int(s)\n        t = rem*s%13\n        for k in range(13):\n            ndp[(k+t)%13] += dp[k]\n            ndp[(k+t)%13] %= MOD\n    dp = ndp\nprint(dp[5]%MOD)","p = 10**9+7\nS = input().strip()\nN = len(S)\ndp = [[0 for _ in range(13)] for _ in range(N+1)]\nfor m in range(13):\n    dp[0][0] = 1\nfor i in range(1,N+1):\n    for m in range(13):\n        if S[i-1]==\"?\":\n            for j in range(10):\n                dp[i][(m*10+j)%13] = (dp[i][(m*10+j)%13]+dp[i-1][m])%p\n        else:\n            dp[i][(m*10+int(S[i-1]))%13] = (dp[i][(m*10+int(S[i-1]))%13]+dp[i-1][m])%p\nprint(dp[N][5])","import sys\ninput = sys.stdin.readline\nMOD = 10**9 + 7\n\n\ndef main():\n    S = input().rstrip()\n    DP = [0] * 13\n    n = len(S)\n    DP[0] = 1\n\n    for i in range(0, n):\n        preDP = DP\n        DP = [0] * 13\n        if S[i] == '?':\n            for k in range(13):\n                for x in range(10):\n                    t = (x + 10*k) % 13\n                    DP[t] += preDP[k]\n                    DP[t] %= MOD\n        else:\n            y = int(S[i])\n            for k in range(13):\n                t = (y+10*k) % 13\n                DP[t] += preDP[k]\n                DP[t] %= MOD\n\n    ans = DP[5]\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()","s = str(input())\nn = len(s)\nmod = (10**9)+7\n\nDP = [[0 for _ in range(13)] for _ in range(n)]\n\nif s[-1] == '?':\n    for i in range(0,10):\n        DP[0][i] += 1\nelse:\n    DP[0][int(s[-1])] = 1\n\n# \u4e0b2\u6841\u76ee\u304b\u3089\u9806\u306b\u898b\u3066\u3044\u304f\nfor i in range(1,n):\n    num_s = s[n-(i+1)]\n    if num_s != '?':\n        num = int(num_s)\n        now = num * (10**i)\n        res = now % 13\n        # \u5143\u306e\u4f59\u308aj -> (res+j)%13 \u304c\u4eca\u56de\u306e\u4f59\u308a \n        for j in range(13):\n            DP[i][(j+res)%13] += DP[i-1][j]\n            # DP[i][(j+res)%13] %= mod\n    else:\n        for k in range(10):\n            now = k * (10**i)\n            res = now % 13\n            # \u5143\u306e\u4f59\u308aj -> (res+j)%13 \u304c\u4eca\u56de\u306e\u4f59\u308a\n            for j in range(13):\n                DP[i][(j+res)%13] += DP[i-1][j]\n                # DP[i][(j+res)%13] %= mod\n\nans = DP[n-1][5] % mod\nprint(ans)        ","S = list(input())\nfor i in range(len(S)):\n    if S[i] != '?':\n        S[i] = int(S[i])\n    else:\n        S[i] = -1\n\nR = [[None]*10 for i in range(13)]\nfor i in range(13):\n    for j in range(10):\n        R[i][j] = (10*i+j) % 13\n\nQ = [[] for i in range(13)]\nfor j in range(10):\n    for i in range(13):\n        Q[R[i][j]] += [[i,j]]\n\ndp = [[0]*13 for i in range(len(S)+1)]\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[i]!=-1:\n            dp[i+1][j] += dp[i][Q[j][S[i]][0]]%1000000007\n        else:\n            for k in range(10):\n                dp[i+1][j] += dp[i][Q[j][k][0]]%1000000007\n\nprint(dp[len(S)][5]%1000000007)","MOD=10**9+7\n\nS=input()\nS=S[::-1]\nN=len(S)\n\ndef POWt(N):\n    arr=[1]\n    for i in range(1,N+1):\n        arr.append(arr[-1]*10%13)\n    return arr\n\ndp=[[0]*13 for i in range(N+1)]\ndp[0][0]=1\nPOW=POWt(N)\nfor i in range(N):\n    for j in range(13):\n        if(S[i]!='?'):\n            dp[i+1][(j+(int(S[i])*POW[i]%13))%13]=(dp[i+1][(j+(int(S[i])*POW[i])%13)%13]+dp[i][j])%MOD\n        else:\n            for k in range(10):\n                dp[i+1][(j+k*POW[i]%13)%13]=(dp[i+1][(j+k*POW[i]%13)%13]+dp[i][j])%MOD\nprint(dp[N][5])","# -*- coding utf-8 -*-\nMOD = 10 ** 9 + 7\n\nS = input()\n# S = '?' * 100000\nmods = [0] * 13\nmods[0] = 1\n\ndigit = 1\nfor s in S[::-1]:\n    next_mods = [0] * 13\n    if s == '?':\n        for i in range(10):\n            for m in range(13):\n                next_mods[(m + i * digit) % 13] += mods[m]\n    else:\n        for m in range(13):\n            next_mods[(m + int(s) * digit) % 13] += mods[m]\n\n    for m in range(13):\n        next_mods[m] %= MOD\n    mods = next_mods\n    digit *= 10\n    digit %= 13    # this line dramatically reduces calculation time\n\nans = mods[5]\n\nprint(ans)\n","def main():\n  s = input()\n  n = len(s)\n  mod = 10**9+7\n  dp = [[0]*13 for _ in range(n+1)]\n  dp[0][0] = 1\n  d = {(j, k):(10*j+k)%13 for k in range(10) for j in range(13)}\n  for i in range(n):\n    if s[i] != \"?\":\n      t = int(s[i])\n      for j in range(13):\n        dp[i+1][(10*j+t)%13] += dp[i][j]\n        dp[i+1][(10*j+t)%13] %= mod\n    else:\n      for k in range(10):\n        for j in range(13):\n          dp[i+1][(10*j+k)%13] += dp[i][j]\n          dp[i+1][(10*j+k)%13] %= mod\n  print(dp[n][5]%mod)\nif __name__ == \"__main__\":\n  main()","S = input()\ndp = [[0]*13 for i in range(len(S)+1)]\nMOD = 10**9+7\n\na = [0] + [(10**i) % 13 for i in range(len(S))]\ndp[0][0] = 1\n\ncnt = 1\nfor i, c in enumerate(S[::-1], 1):\n    t = a[i]\n    for j in range(13):\n        if c == \"?\":\n            for k in range(10):\n                nj = (k*t+j) % 13\n                dp[i][nj] = dp[i][nj] + dp[i-1][j]\n                dp[i][nj] %= MOD\n        else:\n            nj = (int(c)*t+j) % 13\n            dp[i][nj] = dp[i][nj] + dp[i-1][j]\n            dp[i][nj] %= MOD\nprint(dp[-1][5])","s=input()\n\n#i\u6841\u4ee5\u4e0b\u306e\u6570\u5b57\u3067mod\u304cj\u306e\u6570\n#dp[i][j]=\n\ndp=[[0]*13 for _ in range(len(s))]\n\nMOD=10**9+7\n\nresult=0\nfor i in range(len(s)):\n    index=len(s)-i-1\n\n    if i==0:\n        if s[index]!=\"?\":\n            #\u6570\u5b57,300\u306emod\u3092temp\u306b\n            temp=(int(s[index])*(10**i))%13\n            dp[index][temp]=1\n        else:\n            for l in range(10):\n                temp=(l*(10**i))%13\n                for j in range(13):\n                    k=(temp+j)%13\n                    dp[index][k]+=1\n\n    else:\n        if s[index]!=\"?\":\n            #\u6570\u5b57,300\u306emod\u3092temp\u306b\n            temp=(int(s[index])*(10**i))%13\n            for j in range(13):\n                k=(temp+j)%13\n                dp[index][k]+=dp[index+1][j]%MOD\n        else:\n            for l in range(10):\n                temp=(l*(10**i))%13\n                for j in range(13):\n                    k=(temp+j)%13\n                    dp[index][k]+=dp[index+1][j]%MOD\n    #print(dp[index],sum(dp[index]))\n\n\n\nprint(dp[0][5]%MOD)\n\n\n\n\n        \n\n","s = input()\n\nn = len(s)\ndp = [[0 for i in range(13)] for j in range(n+1)]\ndp[0][0] = 1\nmod = 10**9 + 7\n\nfor i in range(n):\n    m = (10**i) % 13\n    if s[n-i-1] == \"?\":\n        for j in range(13):\n            tmp = [dp[i][(j-m*k)%13] for k in range(10)]\n            dp[i+1][j] = sum(tmp) % mod\n    else:\n        num = (int(s[n-i-1])*(10**i))%13\n        for j in range(13):\n            dp[i+1][j] = dp[i][(j-num)%13] % mod\n            \nprint(dp[n][5])","def f(i,k):\n  for j in range(13):\n    dp[i+1][(j*10+k)%13]+=dp[i][j]\n    dp[i+1][(j*10+k)%13]%=mod\n  \nmod=10**9+7\ns=input()\nn=len(s)\ndp=[[0]*13 for i in range(10**5)]\ndp[0][0]=mul=1\n\nfor i in range(n):\n  if s[i]=='?':\n    for k in range(10):\n      f(i,k)\n  else:\n    f(i,int(s[i]))\n  \nprint(dp[n][5]%mod)\n","S = str(input())\ns = [i for i in S]\nans = 0\nmn = 0\nmx = len(S)\nfor i in range(mx):\n  if S[i].isnumeric():\n    mn = mx-i-1\n    break\n    \nstart = 0\nfor i in range(int(S[mx-mn-1])*10**mn, 10**mx):\n  if i % 13 == 5:\n    start = i\n    break\n    \nans = 0\nfor i in range(start, 10**mx, 13):\n  flg = True\n  for j in range(1, len(str(i))+1):\n    if (s[-j].isnumeric()) and (s[-j]!=str(i)[-j]):\n      flg = False\n      break\n  if flg:\n    ans += 1\n  if ans >= 10**9+7:\n    ans -= 10**9+7\n    \nprint(ans)","S = input()\ns = len(S)\nmod = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(s)]\n\nif S[0] == '?':\n    for i in range(10):\n        dp[0][i] += 1\nelse:\n    dp[0][int(S[0]) \/\/ 13] += 1\n\nfor i in range(1, s):\n    if S[i] == '?':\n        for j in range(13):\n            for k in range(10):\n                dp[i][(j * 10 + k) % 13] = (dp[i][(j * 10 + k) % 13] + dp[i - 1][j]) % mod\n    else:\n        for j in range(13):\n            dp[i][(j * 10 + int(S[i])) % 13] = (dp[i][(j * 10 + int(S[i])) % 13] + dp[i - 1][j]) % mod\n\nprint(dp[-1][5] % mod)","# solution\n\nmodulous=10**9+7\nr=[[(j-i)*4%13 for i in range(10)]for j in range(13)]\nd=[1]+[0]*12\nfor c in input():\n  if c>\"9\":\n    d=[(sum(d[i] for i in j))%modulous for j in r]\n  else:\n    d=[d[((j-int(c))*4%13)] for j in range(13)]\n    \nprint(d[5])","r = [[(j - k) * 9 % 13 for j in range(10)] for k in range(13)]\nd = [1] + [0] * 12\n\nfor c in input():\n    if c == '?':\n        d = [sum(d[j] for j in k) for k in r]\n    else:\n        d = [d[(int(c) - k) * 9 % 13] for k in range(13)]\n    print(d)\nprint(d[5])","import sys\ninput = sys.stdin.readline\n\n\ndef main():\n    S = input().strip()\n    N = len(S)\n    dp = [[0]*13 for _ in range(N+1)]\n    dp[0][0] = 1\n    for n in range(N):\n        c = S[N-n-1]\n        for i in range(10):\n            if c == \"?\" or int(c) == i:\n                for j in range(13):\n                    dp[n+1][(j + i*10**n)%13] += dp[n][j]\n        for i in range(13):\n            dp[n+1][i] %= 10**9+7\n    print(dp[N][5])\n\n\nif __name__ == '__main__':\n    main()\n","S = input()\n\nMOD = 10 ** 9 + 7\n\ndp = [0] * 13\ndp[0] = 1\nfor i in range(len(S)):\n    new_dp = [0] * 13\n    if S[i] == '?':\n        for j in range(10):\n            for k in range(13):\n                new_dp[(k * 10 + j) % 13] += dp[k]\n                new_dp[(k * 10 + j) % 13] %= MOD\n    else:\n        j = int(S[i])\n        for k in range(13):\n            new_dp[(k * 10 + j) % 13] += dp[k]\n            new_dp[(k * 10 + j) % 13] %= MOD\n    dp = new_dp[:]\nprint(dp[5])\n","amari = [i for i in range(10)]\np = 10**9 + 7\ns =  str(input())\nn = len(s)\nans = [0]*13\nans[0] = 1\nfor i in reversed(s):\n  dp = [0]*13\n  if i == '?':\n    for j in range(13):\n      for k in amari:\n        dp[(j + k)%13] += ans[j]\n  else:\n    for j in range(13):\n      dp[(j + amari[int(i)])%13] += ans[j]\n      \n  for i in range(len(dp)):\n    dp[i] %= p\n  ans = dp\n  for i in range(len(amari)):\n    amari[i] = amari[i]*10%13\nprint(ans[5])","mod=10**9+7\ns=input()\nns=[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 10, 7, 4, 1, 11, 8, 5, 2, 12], [0, 9, 5, 1, 10, 6, 2, 11, 7, 3], [0, 12, 11, 10, 9, 8, 7, 6, 5, 4], [0, 3, 6, 9, 12, 2, 5, 8, 11, 1], [0, 4, 8, 12, 3, 7, 11, 2, 6, 10]]\nmiti=[0,0,0,0,0,0]\nnow=0\nfor i in range(len(s)):\n  if s[-i-1]==\"?\":\n    miti[i%6]+=1\n  else:\n    now+=ns[i%6][int(s[-i-1])]\nnow=now%13\n#print(now,miti)\n\ndp=[[0]*13 for j in range(len(s)+1)]\ndp[0][now]=1\nii=0\nfor i in range(6):\n  nsi=ns[i]\n  for j in range(miti[i]):\n    dp1=dp[ii]\n    dp2=dp[ii+1]\n    #print(dp1)\n    #print(dp2)\n    for n in range(13):\n      dp1[n]=dp1[n]%mod\n    for k in range(10):\n      nsik=nsi[k]\n      for l in range(13):\n        dp2[(l+nsik)%13]+=dp1[l]\n    ii+=1\nprint(dp[ii][5]%mod)","MOD = 10**9+7\ns = input()\nind = list(range(len(s)))\nsl = list(s)\n#print(sl)\ndsl = dict(zip(ind, sl))\n#print(dsl)\n\nind2 = list(range(13))\ndp={}\n#dp.setdefault(0, dict(zip(ind2,[0]*13)))\nfor i in range(len(s)+1):\n    #dp.append(dict(zip(ind2,[0]*13)))\n    dp.setdefault(i, dict(zip(ind2,[0]*13)))\n\n\n#print(dp)\ndp[0][0]=1\n\nfor i in range(len(s)):\n    for k in range(10):\n        if dsl[i] != \"?\" and dsl[i] != str(k):\n            continue\n        for j in range(13):\n            dp[i+1][(j*10+k)%13] += dp[i][j]%MOD\n    #for k in range(13):\n    #    dp[i+1][k] %= MOD\n\n#print(dp)\nprint(dp[len(s)][5]%MOD)\n","S = list(input())\n\nR = [[None]*10 for i in range(13)]\nfor i in range(13):\n    for j in range(10):\n        R[i][j] = (10*i+j) % 13\n        \nQ = [[] for i in range(13)]\nfor j in range(10):\n    for i in range(13):\n        Q[R[i][j]] += [[i,j]]\n\ndp = [[0]*13 for i in range(len(S)+1)]\ndp[0][0] = 1\n\nfor i in range(len(S)):\n    for j in range(13):\n        if S[i]!='?':\n            dp[i+1][j] += dp[i][Q[j][int(S[i])][0]]\n        else:\n            for k in range(10):\n                dp[i+1][j] += dp[i][Q[j][k][0]]\n                \nprint(dp[len(S)][5]%1000000007)","S = input()[::-1]\n\na = [0] * 13\nn = [0] * 13\n\ndef calc(d, num):\n    shift = (num * (10 ** d))%13\n    if d==0:\n        n[shift] = 1\n    else:\n        for i in range(13):\n            n[(i+shift)%13] += a[i]\n    \n\nfor d, s in enumerate(S):\n    if s=='?':\n        for i in range(10):\n            calc(d, i)\n    else:\n        calc(d, int(s[0]))\n    a, n = n, a\n    for i in range(13):\n        a[i] %= 1000000007\n        n[i] = 0\n\nprint(a[5])\n\n\n\n","S = input()\nMOD = 10**9 + 7\nM = 13\n\ndp = [0] * M\ndp[0] = 1\n\nfor s in S:\n    newDp = [0] * M\n    if s == '?':\n        for s in range(10):\n            for i in range(M):\n                newDp[(i * 10 + s) % M] += dp[i]\n    else:\n        s = int(s)\n        for i in range(M):\n            newDp[(i * 10 + s) % M] = dp[i]\n    for i in range(M):\n        dp[i] = newDp[i] % MOD\n\nprint(dp[5])\n","S = input()\nN = len(S)\n#dp[i][j] ... \u5148\u982di\u6587\u5b57\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\u3082\u306e\u306e\u3046\u306113\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u306b\u306a\u308b\u500b\u6570\ndp = [[0] * 13 for _ in range(N+1)]\ndp[0][0] = 1\nmod = 10**9+7\n#1?2?3   0 -> 3 -> ?3 -> 2?3 -> ...\nmul = 1\nfor i in range(N): #\u5168\u3066\u306e\u6841\n    for k in range(13): #0~12\n        if S[N-i-1] == \"?\":\n            for j in range(10): #?\u306b\u5f53\u3066\u306f\u3081\u308b\u6570\u5b57\n                dp[i+1][(k + j*mul) % 13] += dp[i][k]\n                dp[i+1][(k + j*mul) % 13] %= mod\n        else:\n            j = int(S[N-i-1])\n            dp[i+1][(k + j*mul) % 13] += dp[i][k]\n            dp[i+1][(k + j*mul) % 13] %= mod\n    mul *= 10\n    mul %= 13\nprint(dp[N][5])\n#print(dp)\n","class Mod13DPTable:\n    MOD = 10**9 + 7\n    def __init__(self, length):\n        self.mod13 = [{j:0 for j in range(13)} for i in range(length)]\n        self.MOD = 10**7 + 7\n    def set_start(self, units_digit):\n        if units_digit == '?':\n            for i in range(10):\n                self.mod13[0][i] = 1\n        else:\n            self.mod13[0][int(units_digit)] = 1\n    def get_table(self, digit):\n        return self.mod13[digit]\n    def update(self, num, digit):\n        for k, v in self.mod13[digit-1].items():\n            remain = ((num * 10**digit) + k) % 13\n            self.mod13[digit][remain] = (self.mod13[digit][remain] + v) % Mod13DPTable.MOD\n            \ndef main():\n    MOD = 10**9 + 7\n    S = input()\n    mod13dp = Mod13DPTable(len(S))\n    mod13dp.set_start(S[-1])\n    for i, m in enumerate(reversed(list(S[:-1]))):\n        i += 1\n        if m == '?':\n            for j in range(10):\n                mod13dp.update(j, i)\n        else:\n            mod13dp.update(int(m), i)\n    print(mod13dp.get_table(-1)[5])\nmain()","def f(s):\n    rd = [[10, 11, 12], [3, 6, 9], [4, 8, 12], [1, 2, 3], [4, 7, 10], [1, 5, 9]]\n    k = len(s)\n    md = 10 ** 9 + 7\n    dp = [0] * 13\n    dp[0] = 1\n    for i, c in enumerate(s[::-1]):\n        if c == \"?\":\n            r1, r2, r3 = rd[i % 6]\n            sm = sum(dp)\n            dp=[(sm - (dp[j - r1] + dp[j - r2] + dp[j - r3])) % md for j in range(13)]\n        else:\n            m = int(c) * 10 ** i % 13\n            dp=[dp[j - m] for j in range(13)]\n    print(dp[5])\n\ns = input()\nf(s)\n","S=input()\nl=len(S)\nmod=10**9+7\ndp=[[0 for j in range(13)] for i in range(l+1)]\ndp[0][0]=1\n\nfor i in range(l):\n  if S[i]=='?':\n    for k in range(13): \n      for j in range(10):      \n        dp[i+1][(k*10+j)%13]+=dp[i][k]%mod\n  else:\n    for k in range(13):\n      dp[i+1][(k*10 + int(S[i]))%13]+=dp[i][k]%mod\n      \nprint(dp[-1][5]%mod)","def main():\n    S = input()\n    div = pow(10, 9) + 7\n    rem = [0 for _ in range(13)]\n    rem[0] = 1\n    for c in S:\n        temp = [0 for _ in range(13)]\n        if c != \"?\":\n            for i in range(13):\n                r = (i*10+int(c)) % 13\n                temp[r] += rem[i]\n        else:\n            for i in range(13):\n                for j in range(10):\n                    r = (i*10+j) % 13\n                    temp[r] += rem[i]\n        rem = temp\n    return rem[5] % div\n\nif __name__ == '__main__':\n    print(main())","#!\/usr\/bin\/env python3\n\nP_MOD = 1000000007\n\n\ndef solve(S):\n    # print(S)\n    # 1, 10, 100, 1000, ... \u3092 13 \u3067\u5272\u3063\u305f\u5024\u306f 1, 10, 9, 12, 3, 4 \u3067\u5de1\u56de\u3059\u308b\n    MODS = [1, 10, 9, 12, 3, 4]\n\n    # \u73fe\u5728\u306e\u6841\u306e\u4f59\u308a N \u306e\u72b6\u614b\u3092 cur[N]\n    # \u76f4\u524d\u306e\u6841\u306e\u4f59\u308a N \u306e\u72b6\u614b\u3092 priv[N] \u3068\u3059\u308b\n    priv = [1] + [0] * 12\n    # print(priv)\n    s = S[::-1]\n    for i in range(0, len(s)):\n        cur = [0] * 13\n        d = s[i]\n        # print('i=', i, 'd=', d)\n        if d == '?':\n            for j in range(13):\n                for di in range(10):\n                    m = di * MODS[i % 6]\n                    cur[(j+m) % 13] += priv[j]\n        else:\n            m = int(d) * MODS[i % 6]\n            for j in range(13):\n                cur[(m+j) % 13] = priv[j]\n        # print(cur)\n        for j in range(13):\n            priv[j] = cur[j] % P_MOD\n    return cur[5]\n\n\nif __name__ == '__main__':\n    S = input()\n\n    ans = solve(S)\n\n    print(ans % P_MOD)\n","S=list(input())\n\ndp=[[0 for i in range(13)]for j in range(len(S)+1)]\ndp[0][0]=1\n\nfor i in range(len(S)):\n    if S[i]==\"?\":\n        for j in range(13):\n            \n            for k in range(10):\n                dp[i+1][(10*j+k)%13]+=dp[i][j]\n                dp[i+1][(10*j+k)%13]%=(10**9+7)\n    else:\n        for j in range(13):\n            dp[i+1][(10*j+int(S[i]))%13]+=dp[i][j]\n            dp[i+1][(10*j+int(S[i]))%13]%=(10**9+7)\nprint(dp[-1][5])","s = input()\ndp = [[0]*13 for _ in range(len(s))]\nif s[0] == '?':\n    for i in range(10):\n        dp[0][i] = 1\nelse:\n    dp[0][s[0]] = 1\nfor k in range(len(s)-1):\n    if s[k+1] == '?':\n        for i in range(13):\n            for j in range(10):\n                dp[k+1][((i*10%13)+j)%13] += dp[k][i]\n                dp[k+1][((i*10%13)+j)%13] %= (10**9+7)\n    else:\n        for i in range(13):\n            dp[k+1][((i*10%13)+int(s[k+1]))%13] += dp[k][i]\n            dp[k+1][((i*10%13)+int(s[k+1]))%13] %= (10**9+7)\nprint(dp[-1][5])\n","a = list(input())\n\nb = [[0 for i in range(13)] for i in range(len(a) + 1)]\nb[0][0] = 1\n\ncheck = 0\nfor i in range(len(a)):\n    if a[i] == '?':\n        check = -1\n    else:\n        check = int(a[i])\n\n    for j in range(10):\n        if check == -1 or check == j:\n            for k in range(13):\n                b[i + 1][(k * 10 + j) % 13] += b[i][k]\n        \n    for l in range(13):\n        b[i + 1][l] %= 1000000007\n\nprint(b[len(a)][4])","s = input()\ns = s[::-1]\nn = len(s)\ns = '#' + s\nMOD = 10**9+7\ndp = [[0]*13 for _ in range(n+5)]\n\"\"\"\ndp[i][j] \u306f i \u6841\u76ee\u307e\u3067\u898b\u305f\u3068\u304d 13 \u3067\u5272\u3063\u305f\u3042\u307e\u308a\u304c j\u3000\u3068\u306a\u308b\u3088\u3046\u306a\u3082\u306e\u306e\u500b\u6570\n\"\"\"\ndp[0][0] = 1\nr = 1 \nfor i in range(1,n+1):\n    for j in range(13):\n        if s[i] != '?':\n            dp[i][j] = dp[i-1][(j-r*int(s[i]))%13] % MOD\n        if s[i] == '?':\n            for k in range(10):\n                dp[i][j] += dp[i-1][(j-r*k)%13]\n            dp[i][j] %= MOD\n    r = (r*10) % 13\nprint(dp[n][5])","s = input()\nn = len(s)\nmod = 10**9+7\ndp = [[0]*13 for _ in range(n+1)]\ndp[0][0] = 1\nfor i,d in enumerate(s):\n\tif d==\"?\":\n\t\tfor x in range(10):\n\t\t\tfor y in range(13):\n\t\t\t\tdp[i+1][(y*10+x)%13] += dp[i][y]\n\telse:\n\t\td = int(d)\n\t\tfor y in range(13):\n\t\t\tdp[i+1][(y*10+d)%13] += dp[i][y]\n\tfor j in range(13):\n\t\tdp[i+1][j] %= mod\nprint(dp[n][5])","import numpy as np\nN=input()\n\nlists = []\ntemp=np.asarray([i for i in range(10)])\n\ndic={0:1}\n\nfor i in N:\n    new_dic={}\n    hoge=list(dic.items())\n    if i == \"?\":\n        for amari,count in hoge:\n            amari*=10\n            for num in temp:\n                a = (amari + num) % 13\n                if a in new_dic:\n                    new_dic[a]+=count\n                else:\n                    new_dic[a]=count\n    else:\n        num=int(i)\n        for amari,count in hoge:\n            a = (amari*10 + num)%13\n            if a in new_dic:\n                new_dic[a]+=count\n            else:\n                new_dic[a]=count\n    dic = new_dic\n\ntry:\n    print(dic[5]%(10**9 + 7))\nexcept:\n    print(0)","S = input()\n\nrs = [0] * 13\n\nM = 10**9 + 7\n\nif S[-1] == \"?\":\n    rs[:10] = [1] * 10\nelse:\n    rs[int(S[-1])] = 1\n\nfor i in range(1, len(S)):\n    nrs = [0] * 13\n    c = S[-i - 1]\n    if c == \"?\":\n        ns = range(10)\n    else:\n        ns = [int(c)]\n    for n in ns:\n        r = (10 ** i) * n % 13\n        for j in range(13):\n            jj = (j + r) % 13\n            nrs[jj] = (nrs[jj] + rs[j]) % M\n    rs = nrs\n\n# print(rs)\nprint(rs[5])\n\n","def main():\n\n    \"\"\" convenient functions\n    # for i, a in enumerate(iterable)\n    # q, mod = divmod(a, b)\n    # divmod(x, y) returns the tuple (x\/\/y, x%y)\n    # Higher-order function: reduce(operator.mul, xyz_count, 1)\n    # manage median(s) using two heapq https:\/\/atcoder.jp\/contests\/abc127\/tasks\/abc127_f\n    \"\"\"\n\n    \"\"\"convenient decorator\n    # @functools.lru_cache():\n    # to facilitate use of recursive function\n        # ex:\n        # from functools import lru_cache\n        # import sys\n        # sys.setrecursionlimit(10**9)\n        # @lru_cache(maxsize=None)\n        # def fib(n):\n        #     if n < 2:\n        #         return n\n        #     return fib(n-1) + fib(n-2)\n        # print(fib(1000))\n    \"\"\"\n    \n    # import numpy as np\n    import sys\n    sys.setrecursionlimit(10**7)\n    from itertools import accumulate, combinations, permutations, product # https:\/\/docs.python.org\/ja\/3\/library\/itertools.html\n    # accumulate() returns iterator! to get list: list(accumulate())\n    from math import factorial, ceil, floor, sqrt\n    def factorize(n):\n        \"\"\"return the factors of the Arg and count of each factor\n        \n        Args:\n            n (long): number to be resolved into factors\n        \n        Returns:\n            list of tuples: factorize(220) returns [(2, 2), (5, 1), (11, 1)]\n        \"\"\"\n        fct = []  # prime factor\n        b, e = 2, 0  # base, exponent\n        while b * b <= n:\n            while n % b == 0:\n                n = n \/\/ b\n                e = e + 1\n            if e > 0:\n                fct.append((b, e))\n            b, e = b + 1, 0\n        if n > 1:\n            fct.append((n, 1))\n        return fct\n    def combinations_count(n, r):\n        \"\"\"Return the number of selecting r pieces of items from n kinds of items.\n        \n        Args:\n            n (long): number\n            r (long): number\n        \n        Raises:\n            Exception: not defined when n or r is negative\n        \n        Returns:\n            long: number\n        \"\"\"\n        # TODO: How should I do when n - r is negative?\n        if n < 0 or r < 0:\n            raise Exception('combinations_count(n, r) not defined when n or r is negative')\n        if n - r < r: r = n - r\n        if r < 0: return 0\n        if r == 0: return 1\n        if r == 1: return n\n        numerator = [n - r + k + 1 for k in range(r)]\n        denominator = [k + 1 for k in range(r)]\n        for p in range(2,r+1):\n            pivot = denominator[p - 1]\n            if pivot > 1:\n                offset = (n - r) % p\n                for k in range(p-1,r,p):\n                    numerator[k - offset] \/= pivot\n                    denominator[k] \/= pivot\n        result = 1\n        for k in range(r):\n            if numerator[k] > 1:\n                result *= int(numerator[k])\n        return result\n    def combinations_with_replacement_count(n, r):\n        \"\"\"Return the number of selecting r pieces of items from n kinds of items allowing individual elements to be repeated more than once.\n        \n        Args:\n            n (long): number\n            r (long): number\n        \n        Raises:\n            Exception: not defined when n or r is negative\n        \n        Returns:\n            long: number\n        \"\"\"\n        if n < 0 or r < 0:\n            raise Exception('combinations_with_replacement_count(n, r) not defined when n or r is negative')\n        elif n == 0:\n            return 1\n        else:\n            return combinations_count(n + r - 1, r)\n    from bisect import bisect_left, bisect_right\n    from collections import deque, Counter, defaultdict # https:\/\/docs.python.org\/ja\/3\/library\/collections.html#collections.deque\n    from heapq import heapify, heappop, heappush, heappushpop, heapreplace,nlargest,nsmallest # https:\/\/docs.python.org\/ja\/3\/library\/heapq.html\n    from copy import deepcopy, copy # https:\/\/docs.python.org\/ja\/3\/library\/copy.html\n    import operator\n    from operator import itemgetter\n    # ex1: List.sort(key=itemgetter(1))\n    # ex2: sorted(tuples, key=itemgetter(1,2))\n    from functools import reduce, lru_cache\n    def chmin(x, y):\n        \"\"\"change minimum\n        if x > y, x = y and return (x, True).\n        convenient when solving problems of dp[i]\n        \n        Args:\n            x (long): current minimum value\n            y (long): potential minimum value\n        \n        Returns:\n            (x, bool): (x, True) when updated, else (x, False)\n        \"\"\"\n        if x > y:\n            x = y\n            return (x, True)\n        else:\n            return (x, False)\n    def chmax(x, y):\n        \"\"\"change maximum\n        if x < y, x = y and return (x, True).\n        convenient when solving problems of dp[i]\n        \n        Args:\n            x (long): current maximum value\n            y (long): potential maximum value\n        \n        Returns:\n            (x, bool): (x, True) when updated, else (x, False)\n        \"\"\"\n        if x < y:\n            x = y\n            return (x, True)\n        else:\n            return (x, False)\n\n    from fractions import gcd # Deprecated since version 3.5: Use math.gcd() instead.\n    def gcds(numbers):\n        return reduce(gcd, numbers)\n    def lcm(x, y):\n        return (x * y) \/\/ gcd(x, y)\n    def lcms(numbers):\n        return reduce(lcm, numbers, 1)\n\n    # first create factorial_list\n    # fac_list = mod_factorial_list(n)\n    INF = 10 ** 18\n    MOD = 10 ** 9 + 7\n    modpow = lambda a, n, p = MOD: pow(a, n, p) # Recursive function in python is slow!\n    def modinv(a, p = MOD):\n        # evaluate reciprocal using Fermat's little theorem:\n        # a**(p-1) is identical to 1 (mod p) when a and p is coprime\n        return modpow(a, p-2, p)\n    def modinv_list(n, p = MOD):\n        if n <= 1:\n            return [0,1][:n+1]\n        else:\n            inv_t = [0,1]\n            for i in range(2, n+1):\n                inv_t += [inv_t[p % i] * (p - int(p \/ i)) % p]\n            return inv_t\n    def modfactorial_list(n, p = MOD):\n        if n == 0:\n            return [1]\n        else:\n            l = [0] * (n+1)\n            tmp = 1\n            for i in range(1, n+1):\n                tmp = tmp * i % p\n                l[i] = tmp\n            return l\n    def modcomb(n, k, fac_list = [], p = MOD):\n        # fac_list = modfactorial_list(100)\n        # print(modcomb(100, 5, modfactorial_list(100)))\n        from math import factorial\n        if n < 0 or k < 0 or n < k: return 0\n        if n == 0 or k == 0: return 1\n        if len(fac_list) <= n:\n            a = factorial(n) % p\n            b = factorial(k) % p\n            c = factorial(n-k) % p\n        else:\n            a = fac_list[n]\n            b = fac_list[k]\n            c = fac_list[n-k]\n        return (a * modpow(b, p-2, p) * modpow(c, p-2, p)) % p\n    def modadd(a, b, p = MOD):\n        return (a + b) % MOD\n    def modsub(a, b, p = MOD):\n        return (a - b) % p\n    def modmul(a, b, p = MOD):\n        return ((a % p) * (b % p)) % p\n    def moddiv(a, b, p = MOD):\n        return modmul(a, modpow(b, p-2, p))\n\n    class UnionFindTree:\n        \"\"\"union find tree class\n        TODO: fix this description...\n        how to use (example):\n        >>  uf = UnionFindTree(N) \n        >>  if uf.find_root(a) == uf.find_root(b):\n        >>      do something\n        >>  else:\n        >>      do something\n        >>      uf.unite(a, b)\n        \"\"\"\n        def __init__(self, N):\n            self.root = [-1] * (N+1)\n            self.rank   = [0]  * (N+1)\n            self.connected_num = [1] * (N+1)\n    \n        def find_root(self,x):\n            root = self.root\n            while root[x] != -1:\n                x = root[x]\n            return x\n    \n        def unite(self,x,y):\n            root = self.root\n            rank = self.rank\n            connected_num = self.connected_num\n            find_root = self.find_root\n    \n            rx = find_root(x)\n            ry = find_root(y)\n            if rx != ry:\n                if rank[rx] < rank[ry]:\n                    root[rx] = ry\n                    rx,ry = ry,rx\n                else:\n                    if rank[rx] == rank[ry]:\n                        rank[rx] += 1\n                    root[ry] = rx       \n                connected_num[rx] += connected_num[ry]\n\n    \"\"\" initialize variables and set inputs\n    # initialize variables\n        # to initialize list, use [0] * n\n        # to initialize two dimentional array, use [[0] * N for _ in range(N)]\n    # set inputs\n        # open(0).read() is a convenient method:\n        # ex) n, m, *x = map(int, open(0).read().split())\n        #     min(x[::2]) - max(x[1::2])\n        # ex2) *x, = map(int, open(0).read().split())\n        #     don't forget to add comma after *x if only one variable is used\n    # preprocessing\n        # transpose = [x for x in zip(*data)]\n        # ex) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] => [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n        # flat = [flatten for inner in data for flatten in inner]\n        # ex) [[1, 2, 3], [4, 5, 6], [7, 8, 9]] => [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    # calculate and output\n        # output pattern\n        # ex1) print(*l) => when l = [2, 5, 6], printed 2 5 6\n    \"\"\"\n\n    # functions used\n    r = lambda: sys.stdin.readline().strip()\n    r_int = lambda: int(r())\n    R = lambda: list(map(int, r().split()))\n    Rmap = lambda: map(int, r().split())\n    Rfloat = lambda: list(map(float, r().split()))\n    Rtuple = lambda: tuple(map(int, r().split()))\n\n    \"\"\" how to treat input\n    # single int: int(r())\n    # single string: r()\n    # single float: float(r())\n    # line int: R()\n    # line string: r().split()\n    # line (str, int, int): [j if i == 0 else int(j) for i, j in enumerate(r().split())]\n    # lines int: [R() for _ in range(n)]\n    \"\"\"\n\n    if __name__ != '__main__':\n        # for test\n        sys.stdin = open('sample.txt')\n        \n    # ----------------------------------\n    # main\n\n    S = r()\n    lenS = len(S)\n    target_digit_S = lenS - 1\n    dp = [[0]*13 for _ in range(lenS)] \n    \n    # initialize\n    res = (10**target_digit_S)%13\n    if S[0] == '?':\n        for i in range(10):\n            dp[0][(i*res)%13] += 1\n    else:\n        intS = int(S[0])\n        dp[0][(intS*res)%13] += 1\n    \n    for i in range(1, lenS):\n        target_digit_S -= 1\n        res = (10**target_digit_S)%13\n        if S[i] == '?':\n            for k in range(10):\n                for j in range(13):\n                    dp[i][(k*res+j)%13] = (dp[i][(k*res+j)%13] + dp[i-1][j]) % MOD\n        else:\n            intS = int(S[i])\n            for j in range(13):\n                dp[i][(intS*res+j)%13] += (dp[i][(intS*res+j)%13] + dp[i-1][j]) % MOD\n    print(dp[lenS-1][5])\n    \n    # end of main\n    # ----------------------------------\n\n    \"\"\"memo: how to use defaultdict of list\n    # initialize\n    Dic = defaultdict(list)\n    # append \/ extend\n    Dic[x].append(y)\n    # for\n    for k, v in Dic.items():\n    \"\"\"\n    \n    \"\"\"memo: how to solve binary problems\n    # to make binary digits text\n    >>> a = 5\n    >>> bin_str_a = format(a, '#06b')\n    >>> print(bin_str_a)\n    0b0101 # first 2 strings (='0b') indicates it is binary\n    \"\"\"\n\nif __name__ == '__main__':\n    main()","INF = 10 ** 9 + 7\n\nS = input()\n# dp[i][j]\u306f\u3046\u3057\u308d(\u5c0f\u3055\u3044\u4f4d)\u304b\u3089i\u6841\u309213\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u3067\u3042\u308b\u3082\u306e\u306e\u500b\u6570\ndp = [[0] * 13 for _ in range(len(S) + 1)]\ndp[0][0] = 1\nmul = 1\n\nfor i in range(len(S)):\n    x = S[-(i + 1)]\n    if x == \"?\":\n        for k in range(10):\n            for j in range(13):\n                dp[i + 1][(mul * k + j) % 13] += dp[i][j]\n                dp[i + 1][(mul * k + j) % 13] %= INF\n    else:\n        k = int(x)\n        for j in range(13):\n            dp[i + 1][(mul * k + j) % 13] += dp[i][j]\n            dp[i + 1][(mul * k + j) % 13] %= INF\n    mul = mul * 10\n\nprint(dp[len(S)][5])","import sys\nsys.setrecursionlimit(2**31-1)\ninput = sys.stdin.readline\nwrite = sys.stdout.write\nLMIIS = lambda : list(map(int,input().split()))\nII = lambda : int(input())\ndbg = lambda *something : print(*something) if DEBUG is True else 0\nDEBUG = True\n\n\n\nMOD = 10**9 + 7\nclass ModInt:\n\n    def __init__(self, x):\n        self.x = x.x if isinstance(x, ModInt) else x % MOD\n\n    __str__ = lambda self:str(self.x)\n    __repr__ = __str__\n    __int__ = lambda self: self.x\n    __index__ = __int__\n\n    __add__ = lambda self, other: ModInt(self.x + ModInt(other).x)\n    __sub__ = lambda self, other: ModInt(self.x - ModInt(other).x)\n    __mul__ = lambda self, other: ModInt(self.x * ModInt(other).x)\n    __pow__ = lambda self, other: ModInt(pow(self.x, ModInt(other).x, MOD))\n    __mod__ = lambda self, other: ModInt(self.x % ModInt(other).x)\n    __truediv__ = lambda self, other: ModInt(self.x * pow(ModInt(other).x, MOD - 2, MOD))\n    __floordiv__ = lambda self, other: ModInt(self.x \/\/ ModInt(other).x)\n    __radd__ = lambda self, other: ModInt(other + self.x)\n    __rsub__ = lambda self, other: ModInt(other - self.x)\n    __rpow__ = lambda self, other: ModInt(pow(other, self.x, MOD))\n    __rmod__ = lambda self, other: ModInt(other % self.x)\n    __rmul__ = lambda self, other: ModInt(other * self.x)\n    __rtruediv__ = lambda self, other: ModInt(other * pow(self.x, MOD - 2, MOD))\n    __rfloordiv__ = lambda self, other: ModInt(other \/\/ self.x)\n\n    __lt__ = lambda self, other: self.x < ModInt(other).x\n    __gt__ = lambda self, other: self.x > ModInt(other).x\n    __le__ = lambda self, other: self.x <= ModInt(other).x\n    __ge__ = lambda self, other: self.x >= ModInt(other).x\n    __eq__ = lambda self, other: self.x == ModInt(other).x\n    __ne__ = lambda self, other: self.x != ModInt(other).x\n\n\ndef main():\n    S = list(input())\n    N = len(S)-1\n    dp = [[0] * 13  for _   in range(N)]\n    dp[0] = [ModInt(0) for _ in range(13)]\n    \n    if S[0] == '?':\n        for i in range(10):\n            dp[0][i] = ModInt(1)\n    else:\n        dp[0][int(S[0])] = ModInt(1)\n\n    for i in range(1,N):\n        if S[i] == '?':\n            for j in range(13):\n                for k in range(10):\n                    dp[i][(j * 10 + k) % 13 ] += dp[i-1][j]\n        else:\n            for j in range(13):\n                dp[i][ (j* 10 + int(S[i])) % 13 ] += dp[i-1][j]\n        \n\n    print(dp[len(S)-2][5])\n\n\n\n\n\n\n\n\n\n    pass\nif __name__ == '__main__':\n    main()"," ","d=[0]*13\nd[0]=1\nmul=1\nmulmod=1\nt=input()[::-1]\n\nzero=[0]*13\nl=len(t)\nmodlist=[10**i%13 for i in range(l)]\nfor n,c in enumerate(t):\n    e=zero[:]\n\n    for i in (range(10) if c==\"?\" else[int(c)]):\n        for j in range(13):\n            #e[(i*mul+j)%13]+=d[j]\n            k=(i*mulmod+j)%13\n            e[k]+=d[j]\n            e[k]%=1000000007\n    d=e\n    mul*=10\n    mulmod=mul%13","import numpy as np\nMOD = 10 ** 9 + 7\n\ndp = np.zeros(13, dtype = np.int64)\ndp[0] = 1\n\nmove = np.arange(0,52,4) % 13\nten = np.ones(10, dtype=np.int64)\nfor s in input():\n  dp = dp[move]\n  if s == '?':\n    dp = np.convolve(dp, ten)\n    dp[:9] += dp[13:22]\n    dp %= MOD\n  else:\n    s = int(s)\n    dp = np.roll(dp, s)\n  \nprint(dp[5])\n","x = 1000000007\n\nS = input()\nS = [int(s) if s != '?' else s for s in S]\nS = S[::-1]\n\ndp = [[0 for j in range(13)] for i in range(len(S) + 1)]\n\ndp[0][0] = 1\n\nfor i, s in enumerate(S):\n    for j in range(10):\n        if s != '?' and s != j:\n            continue\n\n        digit_r = ((10 ** i) * j) % 13\n\n        for k in range(13):\n            r = (digit_r + k) % 13\n            dp[i + 1][r] += dp[i][k]\n\n    dp[i + 1][r] %= 13\n\nprint(int(dp[-1][5] % x))\n","MOD = 10 ** 9 + 7\n \ns = str(input())\n \ns = list(s)\n \ncur = [0] * 13\n \nif s[0] != \"?\":\n    cur[int(s[0])] = 1\nelse:\n    for j in range(10):\n        cur[j] = 1\n \nfor i in range(1,len(s)):\n    pre = cur[:]\n    cur = [0] * 13\n    if s[i] != \"?\":\n        for j in range(13):\n            q = (j * 10 + int(s[i])) % 13\n            cur[q] += pre[j] % MOD\n    else:\n        for j in range(13):\n            for k in range(10):\n                p = (j * 10 + k) % 13\n                cur[p] += pre[j] % MOD\n \nprint(cur[5] % MOD)","S=input()\nx=0\nM=13\nMOD=10**9+7\ndp=[[0]*M for i in range(2)]\ndp[1][0]=1\nfor i in range(len(S)):\n  dp[0]=[0]*13\n  s=S[i]\n  if s=='?':\n    for s in range(10):\n      for j,d in enumerate(dp[1]):\n        dp[0][(j+s)%M]+=d\n        dp[0][(j+s)%M]%=MOD\n  else:\n    s=int(s)\n    for j,d in enumerate(dp[1]):\n      dp[0][(j+s)%M]=d\n  for j,d in enumerate(dp[0]):\n    dp[1][(10*j)%M]=d\nprint(dp[0][5]%MOD)\n\n","S = input()[::-1]\n\ndp = [[1]]\nMOD = 10**9+7\n\nfor i in range(1,len(S)+1):\n  s = S[i-1]\n  dp += [[0]*13]\n  if s=='?':\n    for j in range(13):\n      for h in range(10):\n        x = h*(10**(i-1))%13\n        dp[i][(j+x)%13] += dp[i-1][j]\n    for j in range(13):\n      dp[i][j] = dp[i][j]%MOD\n  else:\n    c = int(s)\n    x = c*(10**(i-1))%13\n    for j in range(13):\n      dp[i][(j+x)%13] = dp[i-1][j]\n    for j in range(13):\n      dp[i][j] = dp[i][j]%13\nprint(dp[-1][5])","import numpy as np\nS = input()\nINF = 10 ** 9 + 7\ndp = [np.array([0 for _ in range(13)]) for l in range(len(S))]\nS_li = [_ for _ in S]\nS_li = S_li[::-1]\nif S_li[0] == '?':\n    dp[0][0:10] = [1,1,1,1,1,1,1,1,1,1]\nelse:\n    dp[0][int(S_li[0])] = 1\nfor _ in range(1,len(S)):\n    if S_li[_] == '?':\n        for x in range(10):\n            mod = (x * (10 ** (_ % 6))) % 13\n            add = list(dp[_ - 1][(13 - mod):13]) + list(dp[_ - 1][0:(13 - mod)])\n            dp[_] += np.array(add)\n    else:\n        s = int(S_li[_])\n        mod = (s * (10 ** (_ % 6))) % 13\n        add = list(dp[_ - 1][(13 - mod):13]) + list(dp[_ - 1][0:(13 - mod)])\n        dp[_] += np.array(add)\nprint(dp[-1][5] % INF)\nprint(dp[-1])","import sys,math,copy\n\ndef main():\n    # import numpy as np\n    input = sys.stdin.readline\n    S = ''.join(reversed(input().strip()))\n\n    # dp = np.zeros((13), dtype=int)\n    # dp_ = np.zeros((13), dtype=int)\n    dp = [0] * 13\n    dp_ = [0] * 13\n    mod13_tuple = tuple([i % 13 for i in range(12 ** 2 + 1)])\n    tuple10 = tuple(range(10))\n    tuple13 = tuple(range(13))\n    divisor = 10 ** 9 + 7\n    dp_[0] = 1\n    mul = 1\n    for i in range(len(S)):\n        s = S[i]\n        if s == '?':\n            for d in tuple10:\n                m = mod13_tuple[(d * mul)]\n                for pm in tuple13:\n                    dp[mod13_tuple[(pm+m)]] += dp_[pm]\n\n        else:\n            si = int(s)\n            m = mod13_tuple[(si * mul)]\n            for pm in tuple13:\n                dp[mod13_tuple[(pm+m)]] = dp_[pm]\n\n        # dp_ = dp % divisor\n        # dp = dp * 0 # np.zeros((13), dtype=int)\n        for j in tuple13:\n            dp_[j] = dp[j] % divisor\n            dp[j] = 0\n        mul = mod13_tuple[(mul * 10)]\n    print(dp_[5])\n\nmain()","import numpy as np\n\nA = list(input())\nNUM=13\n\nDP = np.zeros((len(A),NUM), dtype=np.int64)\nANS = np.zeros(NUM, dtype=np.int64)\n\n\nfor i in range(len(A)):\n        if(A[i]==\"?\"):\n                for j in range(10):\n                        DP[i][(j * (10**(len(A)-i-1)))%NUM]+=1\n        else:\n                #print((int(A[i])*(10**(len(A)-i-1)))%NUM)\n                DP[i][(int(A[i])*(10**(len(A)-i-1)))%NUM]+=1\n\nfor i in range(len(A)-1,0,-1):    \n        for j in range(NUM):\n                for k in range(NUM):\n                        ANS[j] += DP[i][(k)%NUM]*DP[i-1][(NUM-k+j)%NUM]\n                        ANS[j]=ANS[j]%(10**9+7)\n        DP[i-1] = ANS[:]\n        ANS = [0]*NUM\n\nANS = DP[0][:]\n\n#print(ANS)\nprint(ANS[5])\n\n\n","import sys\nfrom io import StringIO\nimport unittest\nimport os\n\n# \u518d\u5e30\u51e6\u7406\u4e0a\u9650(dfs\u4f5c\u6210\u6642\u306b\u8a2d\u5b9a\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u9650\u5ea6\u8fd1\u3044\u5024\u3092\u7d44\u307f\u8fbc\u3080)\nsys.setrecursionlimit(999999999)\n\n\n# \u5b9f\u88c5\u3092\u884c\u3046\u95a2\u6570\ndef resolve(test_def_name=\"\"):\n    s = list(input())\n\n    s.reverse()\n\n    devval = pow(10, 9) + 7\n\n    dp = [[0 for i in range(13)] for i in range(100001)]\n\n    # \u521d\u671f\u5024\u8a2d\u5b9a\n    if s[0] == \"?\":\n        for j in range(10):\n            dp[0][j] += 1\n    else:\n        dp[0][int(s[0]) % 13] += 1\n\n    # DP\n    for i in range(1, len(s)):\n        for j in range(10):\n            if s[i] != \"?\" and s[i] != str(j):\n                continue\n\n            aaa = j * pow(10, i) % 13  # 100\/13\u306e\u4f59\u308a\u306a 200\/13\u306e\u4f59\u308a\u306a\u3069\n\n            # \u524dDP\u306e\u5024\u3092\u4ecaDP\u306b\u52a0\u7b97\n            for k in range(13):\n                dp[i][(aaa + k) % 13] = (dp[i][(aaa + k) % 13] + dp[i - 1][k] % devval) % devval\n\n    # \u4f59\u308a5\u306e\u8981\u7d20\u6570\u304c\u7b54\u3048\n    print(dp[len(s) - 1][5])\n\n\n# \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\nclass TestClass(unittest.TestCase):\n    def assertIO(self, assert_input, output):\n        stdout, sat_in = sys.stdout, sys.stdin\n        sys.stdout, sys.stdin = StringIO(), StringIO(assert_input)\n        resolve(sys._getframe().f_back.f_code.co_name)\n        sys.stdout.seek(0)\n        out = sys.stdout.read()[:-1]\n        sys.stdout, sys.stdin = stdout, sat_in\n        self.assertEqual(out, output)\n\n    def test_input_1(self):\n        test_input = \"\"\"??2??5\"\"\"\n        output = \"\"\"768\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_2(self):\n        test_input = \"\"\"?44\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_3(self):\n        test_input = \"\"\"7?4\"\"\"\n        output = \"\"\"0\"\"\"\n        self.assertIO(test_input, output)\n\n    def test_input_4(self):\n        test_input = \"\"\"?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???\"\"\"\n        output = \"\"\"153716888\"\"\"\n        self.assertIO(test_input, output)\n\n    # \u81ea\u4f5c\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306e\u3072\u306a\u5f62(\u5229\u7528\u6642\u306f\u300ctes_t\u300d\u306e\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc\u3092\u524a\u9664\u3059\u308b\u3053\u3068\n    def test_1original_1(self):\n        test_input = \"\"\"?\"\"\"\n        output = \"\"\"1\"\"\"\n        self.assertIO(test_input, output)\n\n\n# \u5b9f\u88c5or\u30c6\u30b9\u30c8\u306e\u547c\u3073\u51fa\u3057\nif __name__ == \"__main__\":\n    if os.environ.get(\"USERNAME\") is None:\n        # AtCoder\u63d0\u51fa\u6642\u306e\u5834\u5408\n        resolve()\n\n    else:\n        # \u81eaPC\u306e\u5834\u5408\n        unittest.main()\n","s=input()[::-1]\nls=len(s)\ndp=[[0]*13 for i in range(ls)]\n\nif s[0]=='?':\n    for i in range(10):dp[0][i]=1\nelse:dp[0][int(s[0])]=1\n\nfor i in range(1,ls):\n    if s[i]!='?':\n        for k in range(13):\n            dp[i][(k+(int(s[i])*10**i)%13)%13]+=dp[i-1][k]\n    else:\n        for j in range(10):\n            for k in range(13):\n                dp[i][(k+(j*10**i)%13)%13]+=dp[i-1][k]\n    for k in range(13):\n        dp[i][k]%=10**9+7\nprint(dp[-1][5])","import sys,collections as cl,bisect as bs\nsys.setrecursionlimit(100000)\nMax = sys.maxsize\nmod = 10**9+7\ndef l(): #int\u306elist\n\treturn list(map(int,input().split()))\ndef m(): #\u8907\u6570\u6587\u5b57\n\treturn map(int,input().split())\ndef onem(): #N\u3068\u304b\u306e\u53d6\u5f97\n\treturn int(input())\ndef s(x): #\u5727\u7e2e\n\ta = []\n\taa = x[0]\n\tsu = 1\n\tfor i in range(len(x)-1):\n\t\tif aa == x[i+1]:\n\t\t\ta.append([aa,su])\n\t\t\taa = x[i+1]\n\t\t\tsu = 1\n\t\telse:\n\t\t\tsu += 1\n\ta.append([aa,su])\n\treturn a\ndef jo(x): #list\u3092\u30b9\u30da\u30fc\u30b9\u3054\u3068\u306b\u5206\u3051\u308b\n\treturn \" \".join(map(str,x))\ndef max2(x): #\u4ed6\u306e\u3068\u304d\u3082\u3069\u3046\u3088\u3046\u306b\u4f5c\u6210\u53ef\u80fd\n\treturn max(map(max,x))\n\nn = list(input())\nn.reverse()\nnnn = len(n)\ndi = 1\ndp = [0 for i in range(13)]\nd = [0 for i in range(13)]\n\nif n[0] == '?':\n\tfor i in range(10):\n\t\td[i] = 1\nelse:\n\td[int(n[0])] = 1\n\nfor i in range(1,nnn):\n\tdp = [0 for i in range(13)]\n\tdi *= 10\n\tdi %= 13\n\tif n[i] == \"?\":\n\t\tfor j in range(10):\n\t\t\tj = j * di\n\t\t\tj %= 13\n\t\t\tfor kk in range(13):\n\t\t\t\tdp[(j + kk)%13] += d[kk]\n\t\t\t\tdp[(j + kk)%13] %= mod\n\telse:\n\t\tk = int(n[i])\n\t\tk = k * di\n\t\tk %= 13\n\t\tfor kk in range(13):\n\t\t\tdp[(k + kk)%13] += d[kk]\n\t\t\tdp[(k + kk)%13] %= mod\n\td = dp[:]\nprint(d[5]%mod)\n\n\n\n\n\n\n\n\n\n\n\n","def main():\n    import sys\n    input = sys.stdin.readline\n    sys.setrecursionlimit(10**7)\n    from collections import Counter, deque\n    #from collections import defaultdict\n    from itertools import combinations, permutations, accumulate, groupby\n    #from itertools import product\n    from bisect import bisect_left,bisect_right\n    import heapq\n    from math import floor, ceil\n    #from operator import itemgetter\n\n    #inf = 10**17\n    mod = 10**9 + 7\n\n    s = input().rstrip()\n    n = len(s)\n    dp = [[0]*13 for _ in range(n)]\n\n    if s[-1]=='?':\n        for i in range(10):\n            dp[0][i] = 1\n    else:\n        a = int(s[-1])\n        dp[0][a] = 1\n\n    for i in range(1, n):\n        if s[-(i+1)] == '?':\n            for j in range(10):\n                a = (10**i) * j % 13\n                for k in range(13):\n                    dp[i][(a+k)%13] += dp[i-1][k]\n                    dp[i][(a+k)%13] %= mod\n        else:\n            a = int(s[-(i+1)])\n            a = (10**i) * a % 13\n            for k in range(13):\n                dp[i][(a+k)%13] += dp[i-1][k]\n                dp[i][(a+k)%13] %= mod\n                \n    print(dp[-1][5])\n\n\nif __name__ == '__main__':\n    main()","mod = 10 ** 9 + 7\n\ns = input()\ndp = [0] * 13\ndp[0] = 1\nfor i in range(len(s)):\n    dp2 = [0] * 13\n    for j in range(10):\n        if (s[i] == '?') | (s[i] == str(j)):\n            for k in range(13):\n                dp2[(10 * k + j) % 13] += dp[k]\n                dp2[(10 * k + j) % 13] %= mod\n    dp = dp2\nprint(dp[5])","N=input()\n\nlists = []\ntemp=[i for i in range(10)]\n\ndic={0:1}\n\nfor i in N:\n    new_dic={}\n    hoge=list(dic.items())\n    if i == \"?\":\n        for amari,count in hoge:\n            amari*=10\n            for num in temp:\n                a = (amari + num) % 13\n                if a in new_dic:\n                    new_dic[a]+=count\n                else:\n                    new_dic[a]=count\n    else:\n        num=int(i)\n        for amari,count in hoge:\n            a = (amari*10 + num)%13\n            if a in new_dic:\n                new_dic[a]+=count\n            else:\n                new_dic[a]=count\n    dic = new_dic\n\ntry:\n    print(dic[5]%(10**9 + 7))\nexcept:\n    print(0)","s = input()\n\nmod = 1000000007\nlength = len(s)\nans = list([0]*13 for i in range(length+1))\nans[0][0] = 1\n\nfor i in range(length):\n    for j in range(13):\n        if s[i] == '?':\n            for k in range(10):\n                x = (j*10 + k)%13\n                ans[i+1][x] = (ans[i+1][x] + ans[i][j]) % mod\n        else:\n            x = (j*10 + int(s[i])) % 13\n            ans[i+1][x] = (ans[i+1][x] + ans[i][j]) % mod\n\nprint(ans[length][5])\n","#N=list(map(int, input().split()))\nS=input()\nbig=10**9+7\n\nlis=[0]*13\n\nif S[0]==\"?\":\n\tlis=[1]*10+[0]*3\nelse:\n\tlis[int(S[0])]=1\nS=S[1:]\n\nfor i in S:\n\tnewlis=[0]*13\n\tif i==\"?\":\n\t\tfor j in range(10):#\u306f\u3066\u306a\u306e\u4e2d\u8eab\n\t\t\tfor k in range(13):#\u524d\u306e\u3042\u307e\u308a\n\t\t\t\tnewlis[(10*k+j)%13]+=lis[k]\n\telse:\n\t\tfor k in range(13):\n\t\t\tnewlis[(10*k+int(i))%13]+=lis[k]\n\tlis=newlis\nprint(lis[5]%big)\n","import numpy as np\nimport sys\ndef input():\n    return sys.stdin.readline()[:-1]\n\nS = input()\n\ndiv_num = 10 ** 9 + 7\narr = np.arange(13, dtype = int)\n# dp = [[0 for _ in range(13)] for _ in range(len(S))]\ndp = np.zeros([len(S), 13], dtype = int)\n\nif S[-1] == \"?\":\n    for ii in range(10): dp[0, ii] = 1\nelse:\n    dp[0, int(S[-1])] = 1\n\nfor ii in range(1, len(S)):\n    ind = -ii-1\n    if S[ind] == '?':\n        for n in range(10):\n            res = ((10 ** ii) * n) % 13\n            res = (arr + res) % 13\n            for jj in range(13):\n                dp[ii, res[jj]] += dp[ii - 1, jj]\n                if dp[ii, res[jj]] > div_num: dp[ii, res[jj]] -= div_num\n    else:\n        res = ((10 ** ii) * int(S[ind])) % 13\n        res = (arr + res) % 13\n        for jj in range(13):\n            dp[ii, res[jj]] += dp[ii - 1, jj]\n            if dp[ii, res[jj]] > div_num: dp[ii, res[jj]] -= div_num\n\nprint (dp[-1, 5])\n","M=10**9+7\n#\u30ea\u30b9\u30c8\u306b\u5165\u529b\uff08\u6587\u5b57\u5217\uff09\ntext=input()\nlst=list(text)\nlst.reverse()\ndigit=len(lst)\n\n######\u516d\u6841\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u3001?\u306e\u6570\u3068\u305d\u306e\u4ed6\u306e\u6570\u5b57\u3092\u6570\u3048\u308b\n######\u305f\u3068\u3048\u3070\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304c\u300c9?????81????\u300d\u3060\u3063\u305f\u3089\n######[[17,0],[8,1],[0,2],[0,2],[0,2],[0,2]]\u306b\u306a\u308b\nsix=[[0,0],[0,0],[0,0],[0,0],[0,0],[0,0]]\nfor i in range(digit):\n  if(lst[i]==\"?\"):\n    six[i%6][1]=six[i%6][1]+1\n  else:\n    six[i%6][0]=(six[i%6][0]+int(lst[i]))%13\n\n    \n######\u6570\u5b57\u90e8\u5206\u306e\u4f59\u308a\u304b\u30895\u3092\u5f15\u304f    \nrem=-(six[0][0]-3*six[1][0]-4*six[2][0]\n      -1*six[3][0]+3*six[4][0]+4*six[5][0]-5)%13\n\n######\u6f38\u5316\u5f0f\u30926\u500b\u7528\u610f\ndef mat1(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-1)%13]+ls[(i-2)%13]\n               +ls[(i-3)%13]+ls[(i-4)%13]+ls[(i-5)%13]\n               +ls[(i-6)%13]+ls[(i-7)%13]+ls[(i-8)%13]\n               +ls[(i-9)%13])%M\n  return val_ls\ndef mat10(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+3)%13]+ls[(i+6)%13]\n               +ls[(i+9)%13]+ls[(i+12)%13]+ls[(i+15)%13]\n               +ls[(i+18)%13]+ls[(i+21)%13]+ls[(i+24)%13]\n               +ls[(i+27)%13])%M\n  return val_ls\ndef mat100(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+4)%13]+ls[(i+8)%13]\n               +ls[(i+12)%13]+ls[(i+16)%13]+ls[(i+20)%13]\n               +ls[(i+24)%13]+ls[(i+28)%13]+ls[(i+32)%13]\n               +ls[(i+36)%13])%M\n  return val_ls\ndef mat1000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i+1)%13]+ls[(i+2)%13]\n               +ls[(i+3)%13]+ls[(i+4)%13]+ls[(i+5)%13]\n               +ls[(i+6)%13]+ls[(i+7)%13]+ls[(i+8)%13]\n               +ls[(i+9)%13])%M\n  return val_ls\ndef mat10000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-3)%13]+ls[(i-6)%13]\n               +ls[(i-9)%13]+ls[(i-12)%13]+ls[(i-15)%13]\n               +ls[(i-18)%13]+ls[(i-21)%13]+ls[(i-24)%13]\n               +ls[(i-27)%13])%M\n  return val_ls\ndef mat100000(ls):\n  val_ls=[0]*13\n  for i in range(13):\n    val_ls[i]=(ls[i]+ls[(i-4)%13]+ls[(i-8)%13]\n               +ls[(i-12)%13]+ls[(i-16)%13]+ls[(i-20)%13]\n               +ls[(i-24)%13]+ls[(i-28)%13]+ls[(i-32)%13]\n               +ls[(i-36)%13])%M\n  return val_ls\n\n\n######\u6f38\u5316\u5f0f\u3092\u9069\u7528\nmodulos=[1,0,0,0,0,0,0,0,0,0,0,0,0]\nfor j in range(six[0][1]):\n  modulos=mat1(modulos)\nfor j in range(six[1][1]):\n  modulos=mat10(modulos)\nfor j in range(six[2][1]):\n  modulos=mat100(modulos)\nfor j in range(six[3][1]):\n  modulos=mat1000(modulos)\nfor j in range(six[4][1]):\n  modulos=mat10000(modulos)\nfor j in range(six[5][1]):\n  modulos=mat100000(modulos)\nprint(modulos[rem])\n","s = input()\n\nmod = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(len(s))]\n\nif s[0] == '?':\n    dp[0] = [1] * 10 + [0] * 3\nelse:\n    dp[0][int(s[0])] = 1\n\nfor i in range(len(s)-1):\n    if s[i+1] == '?':\n        for j in range(13):\n            for k in range(10):\n                dp[i+1][(j*10+k)%13] = (dp[i+1][(j*10+k)%13] + dp[i][j]) % mod\n    else:\n        n = int(s[i+1])\n        for j in range(13):\n            dp[i+1][(j*10+n)%13] = (dp[i+1][(j*10+n)%13] + dp[i][j]) % mod\n\nprint(dp[len(s)-1][5])","def slove():\n    import sys\n    input = sys.stdin.readline\n    s = str(input().rstrip('\\n'))\n    is_first = True\n    ls = [[0] * 13 for _ in range(len(s))]\n    mod = 10 ** 9 + 7\n    for i in range(len(s)):\n        if is_first:\n            is_first = False\n            if s[-i-1] == \"?\":\n                for j in range(10):\n                    ls[i][j] += 1\n            else:\n                t = int(s[-i-1])\n                ls[i][t] += 1\n        else:\n            mlt = pow(10, i)\n            if s[-i-1] == \"?\":\n                for j in range(13):\n                    for k in range(10):\n                        r = (j + mlt * k) % 13\n                        ls[i][r] += ls[i-1][j]\n                        ls[i][r] %= mod\n            else:\n                t = int(s[-i-1])\n                for j in range(13):\n                    r = (j + mlt * t) % 13\n                    ls[i][r] += ls[i-1][j]\n                    ls[i][r] %= mod\n    print(ls[-1][5])\n\n\nif __name__ == '__main__':\n    slove()\n","s=input()\nmod = 1000000007\n\ndp = [[0 for l in range(13)] for m in range(len(s)+1)]\ndp[0][0] = 1\nfor i in range(1,len(s)+1):\n  if s[-i] == '?':\n    for j in range(10):\n      for k in range(13):\n        dp[i][(k+j*10**(i-1))%13] += dp[i-1][k] %mod\n  else:\n    for k in range(13):\n      dp[i][(int(s[-i])*10**(i-1) +k)%13] += dp[i-1][k] %mod\n\nprint(dp[len(s)][5] %mod)","import sys\nsys.setrecursionlimit(10 ** 9)\n# input = sys.stdin.readline    ####\ndef int1(x): return int(x) - 1\ndef II(): return int(input())\n\ndef MI(): return map(int, input().split())\ndef MI1(): return map(int1, input().split())\n\ndef LI(): return list(map(int, input().split()))\ndef LI1(): return list(map(int1, input().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef SMI(): return input().split()\ndef SLI(): return list(input())\n\ndef printlist(lst, k=' '): print(k.join(list(map(str, lst))))\nINF = float('inf')\n\n# from math import ceil, floor, log2\n# from collections import deque\n# from itertools import combinations as comb, combinations_with_replacement as comb_w, accumulate, product, permutations\n# from heapq import heapify, heappop, heappush\n# import numpy as np\n# from numpy import cumsum  # accumulate\n\ndef solve():\n    S = SLI()\n    l = len(S)\n    MOD = 1000000007\n    dp = [[0]*13 for _ in range(l+1)]\n    dp[0][0] = 1\n    mul = 1\n    for i in range(l):\n        s = S[-(i + 1)]\n        if s == '?':\n            for q in range(10):\n                for j in range(13):\n                    dp[i+1][(q*mul + j)%13] += dp[i][j]\n                    dp[i+1][(q*mul + j)%13] %= MOD\n        else:\n            for j in range(13):\n                k = int(s)\n                dp[i+1][(k*mul + j)%13] += dp[i][j]\n                dp[i+1][(k*mul + j)%13] %= MOD\n\n        mul = mul * 10 % 13\n    # print(dp[-1])\n    print(dp[-1][5] % MOD)\n\nif __name__ == '__main__':\n    solve()\n","s = input()\nmod = 10**9 + 7\n\ndp = [[0] * 13 for _ in range(2)]\ntmp = 0\nfor si in s:\n    if(si != '?'):\n        tmp = (tmp*10 + int(si)) % 13\n    else:\n        tmp = tmp*10 % 13\n\ndp[0][tmp] = 1\nexp10 = 1\npointer = 0\nfor i,si in enumerate(s[::-1]):\n\n    if(si!='?'):\n        exp10 = exp10 * 10 % 13\n        continue\n\n    pointer = 1 - pointer\n    for j in range(13):\n        dp[pointer][j] = 0\n\n    for j in range(13):\n        for k in range(10):\n            dp[pointer][(j + exp10*k)%13] += dp[1-pointer][j]\n\n    for j in range(13):\n        dp[pointer][j] %= mod\n\n    exp10 = exp10 * 10 % 13\n\nprint(dp[pointer][5])\n","s = input()\nMOD = 10**9+7\n\ndp = [[0 for i in range(13)] for i in range(len(s)+1)]\ndp[0][0] = 1\n\nfor i in range(len(s)):\n  if s[i]=='?':\n    for k in range(10):\n      for j in range(13):\n        dp[i+1][(j*10+k)%13] = (dp[i+1][(j*10+k)%13] + dp[i][j])%MOD\n  else:\n    t = int(s[i])\n    for j in range(13):\n      dp[i+1][(j*10+t)%13] = (dp[i+1][(j*10+t)%13] + dp[i][j])%MOD\nprint(dp[len(s)][5])","import numpy as np\nS=input()\nN=len(S)\nmod=10**9+7\ndp=[[0]*13 for _ in range(N+1)]\ndp=np.array(dp)\nS=S[::-1]\ndp[0][0]=1\nfor i in range(1,N+1):\n    if i==1:\n        p=1\n    else:\n        p*=10\n        p%=mod\n    s=S[i-1]\n    if s!=\"?\":\n        now=(p*int(s))%mod\n        idx=(13-now)%13\n        add=np.concatenate([dp[i-1][idx:],dp[i-1][:idx]])\n        p#rint(add)\n        dp[i]+=add%mod\n    else:\n        for j in range(10):\n            now=(p*j)%mod\n            idx=(13-now)%13\n            #print(idx)\n            add=np.concatenate([dp[i-1][idx:],dp[i-1][:idx]])\n            #print(add)\n            dp[i]+=add%mod\n    dp[i]%=mod\n#print(dp)\nprint(dp[N][5])","S = input()\n\nC, qi = [1] + [0] * 12, 1\n\nfor i in range(len(S)):\n    if S[-(i + 1)] == '?':\n        tC = [0] * 13\n        for j in range(10):\n            q = (j * qi) % 13\n            for c in range(13):\n                tC[(c + q) % 13] += C[c]\n        C = tC\n    else:\n        q, tC = (int(S[-(i + 1)]) * qi) % 13, [0] * 13\n        for c in range(13):\n            tC[(c + q) % 13] = C[c]\n        C = tC\n    qi = (qi * 10) % 13\n\nprint(C[5] % (10 ** 9 + 7))\n","# D - Digits Parade\n\n# dp[i][j] S\u306e\u5927\u304d\u3044\u4f4d\u304b\u3089i\u6841\u306e\u6570\u3067\u3001\u3042\u308a\u5f97\u308b\u3082\u306e\u306e\u3046\u3061\u300113\u3067\u5272\u3063\u305f\u4f59\u308a\u304cj\u306b\u306a\u308b\u3082\u306e\u306e\u500b\u6570\u30020\u6841\u30b9\u30bf\u30fc\u30c8\n# \u5927\u304d\u3044\u4f4d\u304b\u3089\u9806\u306b\u59cb\u3081\u306a\u3044\u306813\u3067\u5272\u3063\u305f\u3068\u304d\u306e\u4f59\u308a\u3092\u6c42\u3081\u308b\u8a08\u7b97\u91cf\u304c\u5927\u304d\u304f\u306a\u308b\n\nS = input()\n\nMOD = 10**9 + 7\ndp = [[0]*13 for _ in range(len(S))]\n\nif S[0] == \"?\":\n    for j in range(10):\n        dp[0][j] = 1\nelse:\n    dp[0][int(S[0])] = 1\n\nfor i in range(1, len(S)):\n    if S[i] == \"?\":\n        for q_number in range(10): # ?\u306e\u4e2d\u8eab\u3068\u3057\u3066\u3042\u308a\u5f97\u308b\u6570\u5b57\n            for front_number in range(13):\n                dp[i][(10 * front_number + q_number) % 13] += dp[i-1][front_number]\n                dp[i][(10 * front_number + q_number) % 13] %= MOD\n    else:\n        for front_number in range(13):\n            dp[i][(10 * front_number + int(S[i])) % 13] += dp[i-1][front_number]\n            dp[i][(10 * front_number + int(S[i])) % 13] %= MOD\n\nprint(dp[len(S)-1][5] % MOD)","import copy\nS = input()\ns = len(S)\nMOD = 10**9+7\nD = [0]*13\nS = S[::-1]\nfor i in range(s):\n    if i==0:\n        if S[i]==\"?\":\n            for j in range(10):\n                D[j]+=1\n        else:\n            D[int(S[i])]+=1\n    else:\n        P = copy.copy(D)\n        if S[i]==\"?\":\n            p = 10**i\n            for j in range(1,10):\n                q = (j*p)%13\n                for k in range(13):\n                    D[(k+q)%13] += P[k]\n            continue\n        else:\n            p = int(S[i])*(10**i)\n            D = P[13-p%13:]+P[:13-p%13]\nprint(D[5]%MOD)","s = input()\nn = len(s)\nMOD = 10 ** 9 + 7\n\ndp = [[0] * 13 for _ in range(n + 1)]\ndp[0][0] = 1\n\nfor i in range(n):\n    x = s[i]\n    for j in range(13):\n        if x == '?':\n            for k in range(10):\n                dp[i + 1][(10 * j + k) % 13] += dp[i][j]\n                dp[i + 1][(10 * j + k) % 13] %= MOD\n        else:\n            k = int(x)\n            dp[i + 1][(10 * j + k) % 13] += dp[i][j]\n            dp[i + 1][(10 * j + k) % 13] %= MOD\n\nprint(dp[n][5])","import sys,math,copy\n# import numpy as np\ninput = sys.stdin.readline\nS = reversed(input().strip())\n\n# dp = np.zeros((13), dtype=int)\n# dp_ = np.zeros((13), dtype=int)\ndp = [0] * 13\ndp_ = [0] * 13\nmod13_list = [i % 13 for i in range(12 ** 2 + 1)]\nrange10 = range(10)\nrange13 = range(13)\ndivisor = 10 ** 9 + 7\ndp_[0] = 1\nmul = 1\nfor s in S:\n    if s == '?':\n        for d in range10:\n            m = mod13_list[(d * mul)]\n            for pm in range13:\n                dp[mod13_list[(pm+m)]] += dp_[pm]\n\n    else:\n        si = int(s)\n        m = mod13_list[(si * mul)]\n        for pm in range13:\n            dp[mod13_list[(pm+m)]] = dp_[pm]\n\n    # dp_ = dp % divisor\n    # dp = dp * 0 # np.zeros((13), dtype=int)\n    for i in range13:\n        dp_[i] = dp[i] % divisor\n        dp[i] = 0\n    mul = mod13_list[(mul * 10)]\nprint(dp_[5])","import sys\nsys.setrecursionlimit(10 ** 7)\nread = sys.stdin.buffer.read \ninp = sys.stdin.buffer.readline\ndef inpS(): return inp().rstrip().decode()\nreadlines = sys.stdin.buffer.readlines \nMOD = 10**9+7\n\nS = inpS()\nN = len(S)\ndp = [[0]*13 for _ in range(N+1)]\n\ndp[0][0] = 1\nfor dgt in range(N):\n  for mo in range(13):\n    if S[dgt] == \"?\":\n      for nxt in range(10):\n        ind = (mo*10 + nxt) % 13\n        dp[dgt+1][ind] += dp[dgt][mo]\n        dp[dgt+1][ind] %= MOD\n    else:\n      ind = (mo*10 + int(S[dgt])) % 13\n      dp[dgt+1][ind] += dp[dgt][mo]\n      dp[dgt+1][ind] %= MOD\nprint(dp[N][5])        ","#!\/usr\/bin\/env python\nfrom collections import defaultdict, deque\nimport math\nfrom math import factorial\nimport fractions\nimport re\n\nBIGNUM = 10 ** 9 + 7\n\nMOD13 = {}\nfor i in range(13):\n    for j in range(13):\n        MOD13[(i, j)] = (i + j) % 13\n\ndef main():\n    S = input().strip()\n\n    dp = {0: 1}\n    for i in range(len(S)):\n        s = S[-(i+1)]\n        if s == \"?\":\n            snums = [(k * 10 ** i) % 13 for k in range(10)]\n        else:\n            snums = [(int(s) * 10 ** i) % 13]\n\n        new_dp = defaultdict(int)\n        for snum in snums:\n            for n, v in dp.items():\n                mod = MOD13[(snum, n)]\n                new_dp[mod] += v\n        \n        dp = new_dp\n\n    if not 5 in dp:\n        dp[5] = 0\n    print(dp[5] % BIGNUM)\n\nif __name__ == '__main__':\n    main()\n"]}
{"description_html":"<h1>Social Game<\/h1>\n\n<!-- Time limit: 2 sec \/ Memory limit: 256MB-->\n\n<h2>Problem Statement<\/h2>\n\n<p>\nJOI has decided to start playing a new social game from tomorrow.\n<\/p>\n\n<p>\nIn this social game, you can log in up to once a day and get <var>A<\/var> coins each time.\n<\/p>\n\n<p>\nAlso, if you log in continuously from Monday to Sunday for 7 consecutive days, you can get an additional <var>B<\/var> coins each time.\n<\/p>\n\n<p>\nThere is no other way to get coins.\n<\/p>\n\n<p>\nTomorrow is Monday. Find the minimum number of times JOI must log in to get at least <var>C<\/var> coins.\n<\/p>\n\n\n<h2>Constraints<\/h2>\n\n<ul>\n<li><var>1 \u2266 A \u2266 1000<\/var><\/li>\n<li><var>0 \u2266 B \u2266 1000<\/var><\/li>\n<li><var>1 \u2266 C \u2266 1000000 (= 10^6)<\/var><\/li>\n<\/ul>\n\n<h2>Input and Output<\/h2>\n\n<p>\n<b>Input<\/b><br>\nThe input is given in the following format from the standard input.<br>\n<var>A<\/var> <var>B<\/var> <var>C<\/var>\n<\/p>\n\n<p>\n<b>Output<\/b><br>\nFind the minimum number of times JOI must log in to get at least <var>C<\/var> coins.\n<\/p>\n\n\n<h2>Input and Output Examples<\/h2>\n\n<h3>Input Example 1<\/h3>\n<pre>\n3 0 10\n<\/pre>\n\n<h3>Output Example 1<\/h3>\n<pre>\n4\n<\/pre>\n\n<ul>\n<li>You can get <var>3<\/var> coins per login, and you want to get <var>10<\/var> coins or more.<\/li>\n<li>JOI can get <var>12<\/var> coins by logging in for <var>4<\/var> consecutive days from Monday to Thursday.<\/li>\n<li>Since you cannot get <var>10<\/var> or more coins in less than <var>3<\/var> logins, the minimum number of times JOI must log in is <var>4<\/var>. Therefore, output <var>4<\/var>.<\/li>\n<\/ul>\n\n<h3>Input Example 2<\/h3>\n<pre>\n1 2 10\n<\/pre>\n\n<h3>Output Example 2<\/h3>\n<pre>\n8\n<\/pre>\n\n<ul>\n<li>You can get <var>1<\/var> coin per login, and you can get an additional <var>2<\/var> coins by logging in continuously for a week. You want to get <var>10<\/var> coins or more.<\/li>\n<li>If you log in continuously from Monday to Sunday, you can get a total of <var>9<\/var> coins, including <var>7<\/var> coins per day and <var>2<\/var> additional coins. Therefore, by logging in one more time, you can get <var>10<\/var> coins.<\/li>\n<li>Since you cannot get <var>10<\/var> or more coins in less than <var>7<\/var> logins, the minimum number of times JOI must log in is <var>8<\/var>. Therefore, output <var>8<\/var>.<\/li>\n<\/ul>\n\n<br\/>\n<div class=\"source\">\n<p class=\"source\">\n<a rel=\"license\" href=\"http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/\"><img alt=\"Creative Commons License\" style=\"border-width:0\" src=\"https:\/\/i.creativecommons.org\/l\/by-sa\/4.0\/80x15.png\"\/><\/a>\n<\/p>\n<p class=\"source\">\n<a href=\"https:\/\/www.ioi-jp.org\/joi\/2018\/2019-yo\/index.html\">Provided by the JOI Japan Committee, \"18th JOI 2018\/2019 Qualifying Round Tasks\"<\/a>\n<\/p>\n<\/div>","description_string":"Social Game\n\nProblem Statement\n\nJOI has decided to start playing a new social game from tomorrow.\n\n\nIn this social game, you can log in up to once a day and get A coins each time.\n\n\nAlso, if you log in continuously from Monday to Sunday for 7 consecutive days, you can get an additional B coins each time.\n\n\nThere is no other way to get coins.\n\n\nTomorrow is Monday. Find the minimum number of times JOI must log in to get at least C coins.\n\nConstraints\n\n1 \u2266 A \u2266 1000\n0 \u2266 B \u2266 1000\n1 \u2266 C \u2266 1000000 (= 10^6)\n\nInput and Output\n\nInput\nThe input is given in the following format from the standard input.\nA B C\n\n\nOutput\nFind the minimum number of times JOI must log in to get at least C coins.\n\nInput and Output Examples\nInput Example 1\n\n3 0 10\n\nOutput Example 1\n\n4\n\n\nYou can get 3 coins per login, and you want to get 10 coins or more.\nJOI can get 12 coins by logging in for 4 consecutive days from Monday to Thursday.\nSince you cannot get 10 or more coins in less than 3 logins, the minimum number of times JOI must log in is 4. Therefore, output 4.\n\nInput Example 2\n\n1 2 10\n\nOutput Example 2\n\n8\n\n\nYou can get 1 coin per login, and you can get an additional 2 coins by logging in continuously for a week. You want to get 10 coins or more.\nIf you log in continuously from Monday to Sunday, you can get a total of 9 coins, including 7 coins per day and 2 additional coins. Therefore, by logging in one more time, you can get 10 coins.\nSince you cannot get 10 or more coins in less than 7 logins, the minimum number of times JOI must log in is 8. Therefore, output 8.\n\n\n\n\n\n\n\nProvided by the JOI Japan Committee, \"18th JOI 2018\/2019 Qualifying Round Tasks\"\n\n","orig_lang_html":"<h1>\u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0 (Social Game)<\/h1>\n\n<!--\u3000\u3000\u6642\u9593\u5236\u9650 : 2sec \/ \u30e1\u30e2\u30ea\u5236\u9650 : 256MB-->\n\n<h2> \u554f\u984c\u6587<\/h2>\n\n<p>\nJOI \u541b\u306f\u660e\u65e5\u304b\u3089\u65b0\u305f\u306b\u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\u3092\u59cb\u3081\u308b\u3053\u3068\u306b\u3057\u305f\uff0e\n<\/p>\n\n<p>\n\u3053\u306e\u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\u3067\u306f\uff0c<var>1<\/var> \u65e5\u306b\u3064\u304d <var>1<\/var> \u56de\u307e\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u305f\u3073\u306b <var>A<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\n<\/p>\n\n<p>\n\u307e\u305f\uff0c\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067 <var>7<\/var> \u65e5\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\uff0c\u305d\u306e\u305f\u3073\u306b\uff0c\u8ffd\u52a0\u3067 <var>B<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\n<\/p>\n\n<p>\n\u3053\u308c\u4ee5\u5916\u306b\u30b3\u30a4\u30f3\u304c\u3082\u3089\u3048\u308b\u3053\u3068\u306f\u306a\u3044\uff0e\n<\/p>\n\n<p>\n\u660e\u65e5\u306f\u6708\u66dc\u65e5\u3067\u3042\u308b\uff0eJOI \u541b\u304c\u5c11\u306a\u304f\u3068\u3082 <var>C<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u305f\u3081\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3088\uff0e\n<\/p>\n\n\n<h2> \u5236\u7d04<\/h2>\n\n<ul>\n<li><var>1 \u2266 A \u2266 1000<\/var><\/li>\n<li><var>0 \u2266 B \u2266 1000<\/var><\/li>\n<li><var>1 \u2266 C \u2266 1000000 (= 10^6)<\/var><\/li>\n<\/ul>\n\n<h2>  \u5165\u529b\u30fb\u51fa\u529b<\/h2>\n\n<p>\n<b>\u5165\u529b<\/b><br>\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\uff0e<br>\n<var>A<\/var> <var>B<\/var> <var>C<\/var>\n<\/p>\n\n<p>\n<b>\u51fa\u529b<\/b><br>\nJOI \u541b\u304c\u5c11\u306a\u304f\u3068\u3082 <var>C<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u305f\u3081\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u51fa\u529b\u305b\u3088\uff0e\n<\/p>\n\n<!--\n<h2> \u5c0f\u8ab2\u984c<\/h2>\n<p style=\"line-height: 200%;  margin-left: 30px; margin-right: 30px;\">\n<\/p>\n\n<p style=\"line-height: 200%;  margin-left: 30px; margin-right: 30px;\">\n<ol style=\"line-height: 200%;  margin-left: 30px; margin-right: 30px;\">\n<li>(<var>40<\/var> \u70b9) <var>B = 0<\/var><\/li>\n<li>(<var>60<\/var> \u70b9) \u8ffd\u52a0\u306e\u5236\u7d04\u306f\u306a\u3044\uff0e<\/li>\n<\/ol>\n<\/p>\n-->\n\n<h2> \u5165\u51fa\u529b\u4f8b<\/h2>\n\n<h3>\u5165\u529b\u4f8b 1<\/h3>\n<pre>\n3 0 10\n<\/pre>\n\n<h3>\u51fa\u529b\u4f8b 1<\/h3>\n<pre>\n4\n<\/pre>\n\n<ul>\n<li><var>1<\/var> \u56de\u306e\u30ed\u30b0\u30a4\u30f3\u3042\u305f\u308a <var>3<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\uff0c<var>10<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u3092\u96c6\u3081\u305f\u3044\uff0e<\/li>\n<li>JOI \u541b\u306f\uff0c\u6708\u66dc\u65e5\u304b\u3089\u9023\u7d9a <var>4<\/var> \u65e5\u9593\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u3067 <var>12<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e<\/li>\n<li><var>3<\/var> \u56de\u4ee5\u4e0b\u306e\u30ed\u30b0\u30a4\u30f3\u3067 <var>10<\/var> \u679a\u4ee5\u4e0a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\uff0cJOI \u541b\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u306f <var>4<\/var> \u3067\u3042\u308b\uff0e\u5f93\u3063\u3066\uff0c<var>4<\/var> \u3092\u51fa\u529b\u3059\u308b\uff0e<\/li>\n<\/ul>\n<\/p>\n\n<h3>\u5165\u529b\u4f8b 2<\/h3>\n<pre>\n1 2 10\n<\/pre>\n\n<h3>\u51fa\u529b\u4f8b 2<\/h3>\n<pre>\n8\n<\/pre>\n\n<ul>\n<li><var>1<\/var> \u56de\u306e\u30ed\u30b0\u30a4\u30f3\u3042\u305f\u308a <var>1<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\u305d\u308c\u3068\u306f\u5225\u306b\uff0c1 \u9031\u9593\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u3067 <var>2<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e<var>10<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u3092\u96c6\u3081\u305f\u3044\uff0e<\/li>\n<li>\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\uff0c\u65e5\u3005\u306e\u30b3\u30a4\u30f3 <var>7<\/var> \u679a\u306b\u52a0\u3048\u3066\uff0c<var>2<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\u305f\u3081\uff0c\u5408\u8a08 <var>9<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\u5f93\u3063\u3066\uff0c\u66f4\u306b\u3082\u3046 <var>1<\/var> \u56de\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u306b\u3088\u308a\uff0c<var>10<\/var> \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e<\/li>\n<li><var>7<\/var> \u56de\u4ee5\u4e0b\u306e\u30ed\u30b0\u30a4\u30f3\u3067 <var>10<\/var> \u679a\u4ee5\u4e0a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\uff0cJOI \u541b\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u306f <var>8<\/var> \u3067\u3042\u308b\uff0e\u5f93\u3063\u3066\uff0c<var>8<\/var> \u3092\u51fa\u529b\u3059\u308b\uff0e<\/li>\n<\/ul>\n\n<br\/>\n<div class=\"source\">\n<p class=\"source\">\n<a rel=\"license\" href=\"http:\/\/creativecommons.org\/licenses\/by-sa\/4.0\/\"><img alt=\"\u30af\u30ea\u30a8\u30a4\u30c6\u30a3\u30d6\u30fb\u30b3\u30e2\u30f3\u30ba\u30fb\u30e9\u30a4\u30bb\u30f3\u30b9\" style=\"border-width:0\" src=\"https:\/\/i.creativecommons.org\/l\/by-sa\/4.0\/80x15.png\"\/><\/a>\n<\/p>\n<p class=\"source\">\n<a href=\"https:\/\/www.ioi-jp.org\/joi\/2018\/2019-yo\/index.html\">\u60c5\u5831\u30aa\u30ea\u30f3\u30d4\u30c3\u30af\u65e5\u672c\u59d4\u54e1\u4f1a\u4f5c \u300e\u7b2c 18 \u56de\u65e5\u672c\u60c5\u5831\u30aa\u30ea\u30f3\u30d4\u30c3\u30af JOI 2018\/2019 \u4e88\u9078\u7af6\u6280\u8ab2\u984c\u300f<\/a>\n<\/p>\n<\/div>\n","orig_lang_string":"\u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0 (Social Game)\n\n \u554f\u984c\u6587\n\nJOI \u541b\u306f\u660e\u65e5\u304b\u3089\u65b0\u305f\u306b\u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\u3092\u59cb\u3081\u308b\u3053\u3068\u306b\u3057\u305f\uff0e\n\n\n\u3053\u306e\u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\u3067\u306f\uff0c1 \u65e5\u306b\u3064\u304d 1 \u56de\u307e\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u305f\u3073\u306b A \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\n\n\n\u307e\u305f\uff0c\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067 7 \u65e5\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\uff0c\u305d\u306e\u305f\u3073\u306b\uff0c\u8ffd\u52a0\u3067 B \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\n\n\n\u3053\u308c\u4ee5\u5916\u306b\u30b3\u30a4\u30f3\u304c\u3082\u3089\u3048\u308b\u3053\u3068\u306f\u306a\u3044\uff0e\n\n\n\u660e\u65e5\u306f\u6708\u66dc\u65e5\u3067\u3042\u308b\uff0eJOI \u541b\u304c\u5c11\u306a\u304f\u3068\u3082 C \u679a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u305f\u3081\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u6c42\u3081\u3088\uff0e\n\n \u5236\u7d04\n\n1 \u2266 A \u2266 1000\n0 \u2266 B \u2266 1000\n1 \u2266 C \u2266 1000000 (= 10^6)\n\n  \u5165\u529b\u30fb\u51fa\u529b\n\n\u5165\u529b\n\u5165\u529b\u306f\u4ee5\u4e0b\u306e\u5f62\u5f0f\u3067\u6a19\u6e96\u5165\u529b\u304b\u3089\u4e0e\u3048\u3089\u308c\u308b\uff0e\nA B C\n\n\n\u51fa\u529b\nJOI \u541b\u304c\u5c11\u306a\u304f\u3068\u3082 C \u679a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u305f\u3081\u306b\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u3092\u51fa\u529b\u305b\u3088\uff0e\n\n\n \u5165\u51fa\u529b\u4f8b\n\u5165\u529b\u4f8b 1\n\n3 0 10\n\n\u51fa\u529b\u4f8b 1\n\n4\n\n\n1 \u56de\u306e\u30ed\u30b0\u30a4\u30f3\u3042\u305f\u308a 3 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\uff0c10 \u679a\u306e\u30b3\u30a4\u30f3\u3092\u96c6\u3081\u305f\u3044\uff0e\nJOI \u541b\u306f\uff0c\u6708\u66dc\u65e5\u304b\u3089\u9023\u7d9a 4 \u65e5\u9593\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u3067 12 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\n3 \u56de\u4ee5\u4e0b\u306e\u30ed\u30b0\u30a4\u30f3\u3067 10 \u679a\u4ee5\u4e0a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\uff0cJOI \u541b\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u306f 4 \u3067\u3042\u308b\uff0e\u5f93\u3063\u3066\uff0c4 \u3092\u51fa\u529b\u3059\u308b\uff0e\n\n\n\u5165\u529b\u4f8b 2\n\n1 2 10\n\n\u51fa\u529b\u4f8b 2\n\n8\n\n\n1 \u56de\u306e\u30ed\u30b0\u30a4\u30f3\u3042\u305f\u308a 1 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\u305d\u308c\u3068\u306f\u5225\u306b\uff0c1 \u9031\u9593\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u3067 2 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e10 \u679a\u306e\u30b3\u30a4\u30f3\u3092\u96c6\u3081\u305f\u3044\uff0e\n\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\uff0c\u65e5\u3005\u306e\u30b3\u30a4\u30f3 7 \u679a\u306b\u52a0\u3048\u3066\uff0c2 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\u305f\u3081\uff0c\u5408\u8a08 9 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\u5f93\u3063\u3066\uff0c\u66f4\u306b\u3082\u3046 1 \u56de\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3053\u3068\u306b\u3088\u308a\uff0c10 \u679a\u306e\u30b3\u30a4\u30f3\u304c\u5f97\u3089\u308c\u308b\uff0e\n7 \u56de\u4ee5\u4e0b\u306e\u30ed\u30b0\u30a4\u30f3\u3067 10 \u679a\u4ee5\u4e0a\u306e\u30b3\u30a4\u30f3\u3092\u5f97\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\uff0cJOI \u541b\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u56de\u6570\u306e\u6700\u5c0f\u5024\u306f 8 \u3067\u3042\u308b\uff0e\u5f93\u3063\u3066\uff0c8 \u3092\u51fa\u529b\u3059\u308b\uff0e\n\n\n\n\n\n\n\n\u60c5\u5831\u30aa\u30ea\u30f3\u30d4\u30c3\u30af\u65e5\u672c\u59d4\u54e1\u4f1a\u4f5c \u300e\u7b2c 18 \u56de\u65e5\u672c\u60c5\u5831\u30aa\u30ea\u30f3\u30d4\u30c3\u30af JOI 2018\/2019 \u4e88\u9078\u7af6\u6280\u8ab2\u984c\u300f\n\n\n","solve_rate":0.953125,"codenet_problem_id":"p00575","input_testcases":{"9":"2 0 31","94":"5 0 19","47":"1 0 28","73":"7 1 351","29":"4 0 156","88":"4 0 22","84":"2 0 278","89":"7 0 22","65":"1 1 128","14":"5 0 43","78":"3 4 102","21":"1 0 35","49":"1 0 163","0":"3 0 19","72":"2 0 161","18":"5 0 10","24":"1 1 163","90":"7 1 22","53":"5 0 156","12":"4 0 2","80":"1 1 53","93":"3 1 10","25":"1 1 183","19":"1 0 19","77":"1 1 154","101":"3 0 10","26":"1 1 85","66":"1 0 37","38":"4 0 229","87":"4 0 58","7":"8 0 22","100":"3 0 10","95":"4 1 19","43":"3 0 58","76":"1 1 299","44":"2 0 43","2":"4 0 19","86":"5 0 30","92":"6 0 14","1":"2 0 19","11":"4 1 58","91":"8 0 43"},"output_testcases":{"9":"16\n","94":"4\n","47":"28\n","73":"50\n","29":"39\n","88":"6\n","84":"139\n","89":"4\n","65":"112\n","14":"9\n","78":"29\n","21":"35\n","49":"163\n","0":"7\n","72":"81\n","18":"2\n","24":"143\n","90":"4\n","53":"32\n","12":"1\n","80":"47\n","93":"4\n","25":"161\n","19":"19\n","77":"135\n","101":"4\n","26":"75\n","66":"37\n","38":"58\n","87":"15\n","7":"3\n","100":"4\n","95":"5\n","43":"20\n","76":"262\n","44":"22\n","2":"5\n","86":"6\n","92":"3\n","1":"10\n","11":"14\n","91":"6\n"},"n_missing":60,"programs":["import math\na,b,c=map(int,input().split())\nq,m=divmod(c,a*7+b)\nprint(7*q+min(7,math.ceil(m\/a)))\n","a,b,c=map(int,input().split())\ni=0\ncnt=0\nwhile cnt<c:\n    i+=1\n    cnt+=a\n    if i%7==0:\n        cnt+=b\nprint(i)\n","A, B, C = map(int, input().split())\ni = 0\nsum = 0\ncnt = 0\nwhile True:\n    sum  += A\n    i += 1\n    cnt += 1\n    if sum >= C:\n        break\n    if i%6 == 0:\n        sum += A+B\n        i = 0\n        cnt += 1\n        if sum >= C:\n            break\nprint(cnt)\n","s = 0\nd = 1\nA, B, C = map(int, input().split())\n\nwhile True:\n    if s >= C:\n        break\n\n    s += A\n\n    if d % 7 == 0:\n        s += B\n\n    d += 1\n\nprint(d - 1)\n","a,b,c=map(int,input().split())\nans=0\nwhile c>0:\n\tc-=a\n\tif ans%7==6:\n\t\tc-=b\n\tans+=1\nprint(ans)\n\n","a,b,c=map(int,input().split())\nx=0\ny=0\nwhile x<c:\n    y+=1\n    x+=a\n    if y%7==0:\n        x+=b\nprint(y)\n","# -*- coding: utf-8 -*-\ncoin_day, coin_week, goal = map(int, input().split())\ntotal_coin_per_week = coin_week + (7 * coin_day)\nres_week, rest_coin = divmod(goal, total_coin_per_week)\n\nres_day, residual = divmod(rest_coin, coin_day)\nif residual >= 1:\n    res_day += 1\nif res_day >= 7:\n    res_day = 7\n\nprint(res_week * 7 + res_day)\n\n","A, B, C = map(int, input(). split())\n\ni = 1\nsum = 0\nwhile True:\n    if i%7 == 0:\n        sum += A + B\n    if i%7 != 0:\n        sum += A\n    if sum >= C:\n        break\n    i += 1\n    \nprint(i)\n","a,b,c = map(int,input().split())\n\nday = 0\ncoin = 0\n\nwhile coin < c:\n    day += 1\n    coin += a\n    if day % 7 == 0:\n        coin += b\n\n\nprint(day)\n","A,B,C=map(int,input().split())\n\nsum=0\ni=0\nwhile True:\n    sum+=A\n    i+=1\n    if sum>=C:\n        print(i)\n        break\n    if i%7==0:\n        sum+=B\n        if sum>=C:\n            print(i)\n            break\n","#0652\na , b , c = map(int,input().split())\nsum = 0\ncount = 0 \nwhile True:\n    if sum >= c:\n        break\n    sum += a\n    count += 1\n    if count%7 == 0:\n        sum += b \n        \nprint(count)\n","A,B,C = map(int, input().split())\n\ndays = int(C\/(A+(B\/7)))\n\nwhile 1:\n    coins = A* days + B * (days\/\/7)\n\n    if ( coins >= C):\n        break\n    else:\n        days += 1\n\nprint(days)\n","A,B,C=map(int,input().split(\" \"))\n\ncount=0\nwhile C>0:\n    count+=1\n    C-=A\n    if count%7==0:\n        C-=B\nprint(count)\n","A,B,C=map(int,input().split())\ncoin=0\nday=1\nwhile True:\n    coin+=A\n    if day%7==0:\n        coin+=B\n    if coin>C or coin==C:\n        break\n    day+=1\nprint(day)\n","A,B,C=map(int,input().split())\nS=0\ni=0\nwhile C>S:\n    S=S+A\n    if C>S and i+1>=7 and (i+1)%7==0:\n        S=S+B\n    i=i+1\nprint(i)\n\n","A, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range(1,C+1):\n    coin += A\n    \n    if day % 7 == 0:\n        coin += B\n    if coin >= C:break\n\nprint(day)\n","a,b,c=map(int,input().split())\nif c<(7*a+b):\n    if c<=6*a:\n        if c%a==0:\n            print(c\/\/a)\n        else:\n            print(c\/\/a+1)\n    else:\n        print(7)\nelse:\n    if c%(7*a+b)==0:\n        print(int(7*c\/(7*a+b)))\n    else:\n        if (c%(7*a+b))<=6*a:\n            if c%(7*a+b)%a==0:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a))\n            else:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a)+1)\n        else:\n            print(int(c\/\/(7*a+b)*7+7))\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nv=C-z\n\nif (A*7)<v<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<v:\n        coin+=A\n        day+=1\n    print(y*7+day)\n","d, b, t = [int(x) for x in input().split()]\n\nw = 7 * d + b\n\nc = 0\nc += (t \/\/ w) * 7\nt %= w\n\nif t >= 7*d:\n    c +=7\n    t = 0\nelse:\n    c += t\/\/d\n    t %= d\n    if t > 0:\n        c += 1\n\nprint(c)\n\n","a,b,c=map(int,input().split())\ncnt=0\nd=0\nwhile cnt < c:\n    d+=1\n    if d % 7 == 0:\n        cnt+=b\n    cnt+=a\nprint(d)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day % 7 ==0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","A, B, C = map(int, input().split())\nn = 0  # \u30ed\u30b0\u30a4\u30f3\u56de\u6570\ntemp = 0  # n\u56de\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u306e\u5408\u8a08\u679a\u6570\nwhile temp < C:\n\tn = n + 1\n\tif n % 7 == 0:\n\t\ttemp = temp + A + B\n\telse:\n\t\ttemp = temp + A\n\nprint(n)\n\n","A,B,C = map(int,input().split())\nans = 0\nn = C \/\/ (7*A+B)\nr = C %  (7*A+B)\nans += 7*n\nif r == 0:\n    pass\nelif r <= 6*A:\n    ans += r\/\/A\n    if r % A != 0:\n        ans += 1\nelse:\n    ans += 7\nprint(ans)\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nw=C-z\nif (A*7)<w<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<w:\n        coin+=A\n        day+=1\n    print(y*7+day)\n","A, B, C = map(int, input().split())\n\nday = 0\nlogin = 0\nwhile True:\n    day += 1\n    login += A\n    if day % 7 == 0:\n        login += B\n    if login >= C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nans = c\/\/(a*7+b)*7+min((c%(a*7+b)+a-1)\/\/a,7)\nprint(ans)\n","A,B,C=map(int,input().split())\npoint=0\nif C>7*A+B:\n    warareru=C%((7*A)+B)\n    ans=C\/\/((7*A)+B)\n    while warareru>0:\n        point+=1\n        if point%7!=0:\n            warareru-=A\n\n        else:\n            warareru-=A+B\n\n\n    print(ans*7+point)\nelif C>=7*A and C<=7*A+B:\n    print(\"7\")\nelse:\n    if C%A==0:\n        print(C\/\/A)\n    else:print((C\/\/A)+1)\n","import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef main():\n    a,b,c=MI()\n    week,r=divmod(c,7*a+b)\n    day=(r+a-1)\/\/a\n    print(week*7+min(7,day))\n\nmain()\n","a,b,c=map(int,input().split())\nd=1\ncoin=0\nwhile coin<c:\n    if d%7==0:\n        coin+=b\n    coin+=a\n    d+=1\nprint(d-1)\n","A,B,C=(int(x) for x in input().split())\n\nif B==0:\n    x=C\/\/A\n    if C%A!=0:\n        x=x+1\n\nelif A>C:\n    x=1\nelif C\/\/A<7:\n    x=C\/\/A+1\nelse:\n    t=0\n    y=A*7\n    y=y+B\n    z=C%y\n    if 0<z<A:\n        t=1\n    z=z\/\/A\n    if z>7:\n        t=7-z\n    s=C\/\/y\n    s=s*7\n    x=z+s+t\nprint(x)\n","A,B,C=map(int,input().split())\nC_7=7*A+B\nweek_day,week_rem,day_0,day_rem=C\/\/C_7*7,C%C_7,C\/\/A,C%A\n\nif C<=A:\n    print(1)\nelif C<C_7:\n    if A*7<week_rem<=C:\n        print(7)\n    elif 0<day_rem<=A:\n        print(day_0+1) \n    elif day_rem==0:\n        print(day_0)\n    else:\n        print(day_0+day_rem)\nelif B==0:\n    if day_rem==0:\n        print(day_0)\n    else:\n        print(day_0+1)\nelif week_rem==0:\n    print(week_day)\nelif C>C_7:\n    if 0<week_rem<=A:\n        print(week_day+1)\n    elif A*7<week_rem<=C_7:\n        print(week_day+7)\n    else:\n        print(week_day+week_rem)  \n","#20 \u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\n\nA, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range (1, 1+C):\n        coin += A\n        \n        if day % 7 == 0:\n                coin += B\n        if coin >= C:\n                break\n\nprint(day)\n","A, B, C = map(int, input().split())\nn = 0 \ntemp = 0 \nwhile temp < C:\n\tn = n + 1\n\tif n % 7 == 0:\n\t\ttemp = temp + A + B\n\telse:\n\t\ttemp = temp + A\n\nprint(n)\n","a, b, c = map(int, input().split())\nans = c\/\/(a*7+b)*7+min((c%(a*7+b)+a-1)\/\/a,7)\nprint(ans)\n","A,B,C = map(int, input().split())\n\ncoin = 0\nfor day in range(1, C+1):\n    coin=coin+A\n    if day % 7 == 0:\n        coin = coin + B\n    if coin >= C:\n        break\nprint(day)\n","A,B,C=map(int,input().split())\ni=0\nwhile A*i+i\/\/7*B<C:\n    i+=1\nprint(i)\n","input_str = input(\"\")\ninput_elms = input_str.split(\" \")\nfor login_cnt in range(1, int(input_elms[2]) + 1):\n    if int(input_elms[0]) * login_cnt + int(input_elms[1]) * int(login_cnt\/7) >= int(input_elms[2]):\n        print(login_cnt)\n        break\n","import math\n\na,b,c = map(int,input().split())\nd=1\nr=0\nw=0\n\nw = c\/\/(7*a+b)\nr = c%(7*a+b)\nd = (math.ceil(r\/a))\n\nif d>7:\n    d = 7\nd += 7*w\nprint(d)\n","s = input().split()\nl = 0\nN = int(s[0])#\uff11\u65e5\nA = int(s[1])#\u30dc\u30fc\u30ca\u30b9\nB = int(s[2])#\u307b\u3057\u3044\nW = N*7+A\nif B%W == 0:\n  l = B\/\/W*7\nelse:\n  if int(B%W) > int(N*7):\n    l = (1+B\/\/W)*7\n  else:\n    if int(B%W%N) == 0:\n      l = B\/\/W*7+B%W\/\/N\n    else:\n      l = B\/\/W*7+B%W\/\/N+1\nprint(l)\n","a, b, c = map(int, input().split())\nweek = a * 7 + b\nd = c \/\/ week\nans = d * 7\nc -= d * week\n\ncnt = 0\nwhile(c > 0):\n    c -= a\n    ans += 1\n    cnt += 1\n    if(cnt == 7):\n        c -= b\n        cnt = 0\nprint(ans) \n","a,b,c=map(int,input().split())\nn=0\nfor i in range(1,c+1):\n    n+=a\n    if i%7==0:\n        n+=b\n    if n>=c:\n        break\nprint(i)\n\n","def main():\n    a,b,c = map(int,input().split())\n    target = c\n    daily_coin = a\n    weekly_coin = b\n    weekly_daily_total_coin = 7 * a + b\n    counter = 0\n\n    counter += (target \/\/ weekly_daily_total_coin) * 7\n    target %= weekly_daily_total_coin\n    #print(counter,target)\n    temp = 0\n    if target % daily_coin != 0 :\n        temp += 1\n    counter += min(target \/\/ daily_coin + temp,7)\n    print(counter)\n\n\n\nif __name__ == '__main__':\n    main()\n\n","A,B,C=map(int,input().split())\nsum=0\ni=0\nwhile True:\n    sum+=A\n    i+=1\n    if sum>=C:\n        print(i)\n        break\n    if i%7==0:\n        sum+=B\n        if sum>=C:\n            print(i)\n            break\n","a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\n\ni=0;\nwhile c>0:\n\ti=i+1\n\tc=c-a\n\tif i%7==0:\n\t\tc=c-b\nprint(i)\n\n","a,b,c=map(int,input().split())\nd=c\/\/(a*7+b)*7\nc%=a*7+b\ne=0\nwhile c>0 and e<7:\n    d+=1\n    c-=a\n    e+=1\nprint(d)\n","def eval(A, B, C):\n    rest = C\n    count = 0\n    \n    while True:\n        for i in range(7):\n            rest -= A\n            if i == 6:\n                rest -= B\n                \n            count += 1\n            if rest <= 0:\n                return count\n\n\nA, B, C = tuple(map(int, input().split()))\nprint(eval(A, B, C))\n","# coding: utf-8\n# Your code here!\n\nA,B,C =map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","A,B,C = map(int,input().split())\n\ncoin=0\nfor day in range(1, C+1):\n    coin+=A\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","# coding: utf-8\n# Your code here!\n\nA, B, C = map(int, input().split())\n\nd = 0\ncnt = 0\nwhile True:\n   d += 1\n   if d % 7 == 0:\n      cnt += (A + B)\n   else:\n      cnt += A\n   if cnt >= C:\n      print(d)\n      break\n\n","A,B,C = map(int,input().split())\nx = 0\ny = 0\nwhile x < C:\n    y += 1\n    if y%7 == 0:\n        x += B\n    x += A\nprint(y)\n","A,B,C = map(int,input().split())\n\ncoin=0\nfor day in range(1, C+1):\n    coin+=A\n    #\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067 7 \u65e5\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n\n","A, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range(1, C+1):\n    coin += A\n    if day % 7 == 0:\n        coin += B\n    if coin >= C:\n        break\nprint(day)\n","a,b,c = map(int,input().split())\n\nok = 100000000\nng = 0\nwhile ok - ng > 1:\n    m = (ok + ng) \/\/ 2\n    ge = m * a + (m \/\/ 7) * b\n    if ge >= c:\n        ok = m\n    else:\n        ng = m\nprint(ok)\n","a, b, c = map(int, input().split())\nd, s = 0, 0\n\nwhile s < c:\n    d += 1\n    if d % 7 == 0:\n        s += b\n    s += a\n\nprint(d)\n","A,B,C=map(int,input().split())\ns=0\nsum=0\nwhile 1:\n    sum+=A\n    s+=1\n    if s%7==0:\n        sum+=B\n    if sum>=C:\n        break\nprint(s)\n","A,B,C=map(int,input().split())\ns=7*A+B\nw=C\/\/s\nD=C%s\n\nif D<7*A :\n    d=-(-D\/\/A)\nelif 0<=D-7*A and D-7*A<B :\n    d=7\n    \nprint(7*w+d)\n","A, B, C = map(int, input().split())\ncoin = 0\nday = 1\nwhile coin < C :\n    coin += A\n    if day % 7 == 0 :\n        coin += B\n    day += 1\nprint(day-1)\n","a,b,c=map(int,input().split())\ni=1\nwhile 1:\n    c=c-a\n    if i%7==0:\n        c=c-b\n    if c<=0:\n        break\n    i=i+1\nprint(i)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day%7 ==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(day)\n\n","a,b,c = map(int,input().split())\n\nd = 0\ns = 0\nwhile s < c:\n    d += 1\n    if d%7 == 0:\n        s += b\n    s += a\nprint(d)\n\n","# -*- coding: utf-8 -*-\n\"\"\"\nSocial Game\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0652\n\n\"\"\"\nimport sys\nfrom math import ceil\n\ndef solve(a, b, c):\n    q, r = divmod(c, (a*7 + b))\n    return q * 7 + min(ceil(r \/ a), 7)\n\n\ndef main(args):\n    a, b, c = map(int, input().split())\n    ans = solve(a, b, c)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n","a,b,c=map(int,input().split())\nd=0\ns=0\nwhile s<c:\n    d+=1\n    if d%7==0:\n        s+=b\n    s+=a\nprint(d)\n\n","a,b,c=map(int,input().split())\nd=0\nwhile c>0:\n    c=c-a\n    d=d+1\n    if d%7==0:\n        c=c-b\n    \nprint(d)\n","A,B,C=map(int,input().split())\nD=0\nE=0\nwhile True:\n    D = D+1\n    E = E+A\n    if D%7==0:\n        E = E+B\n    if E>=C:\n        print(D)\n        break\n","a,b,c=map(int,input().split())\nx=c\/\/(7*a+b)\nr=c-(7*a+b)*x\nt=r\/\/a\nif c%(7*a+b)!=0:\n    if r>=7*a:\n        print(7*x+7)    \n    else:\n        if r%a!=0:\n            print(7*x+t+1)\n        else:\n            print(7*x+t)\nelse:\n    print(7*x)\n","a, b, c = map(int, input().split())\n\ncoin=0\nfor day in range(1, c+1):\n    coin+=a\n    \n    if day % 7 == 0:\n        coin+=b\n    if coin >= c: break\n\nprint(day)\n","inputText = input().split()\na = int(inputText[0])\nb = int(inputText[1])\nc = int(inputText[2])\nweek = a*7+b\nweeks = int(c \/week)\nremain = c % week\ntotalday = weeks * 7\ntotalday += int(remain\/a)\ntotalday2 = (int(c\/week)+1)*7\nif remain%a != 0:\n    totalday +=1\nprint(min(totalday,totalday2))\n\n","\na,b,c=map(int,input().split())\n#b=int(input())\n#c=int(input())\nday=0\ncnt=0\nwhile(True):\n    day+=1\n    #print(day)\n    #print(c)\n    if day%7==0:\n        c-=b\n    c-=a\n    if c<=0:\n        break\nprint(day)\n","a,b,c=map(int,input().split())\nif c<(7*a+b):\n    if c<=6*a:\n        if c%a==0:\n            print(c\/\/a)\n        else:\n            print(c\/\/a+1)\n    else:\n        print(7)\nelse:\n    if c%(7*a+b)==0:\n        print(int(7*c\/(7*a+b)))\n    else:\n        if (c%(7*a+b))<=6*a:\n            if c%(7*a+b)%a==0:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a))\n            else:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a)+1)\n        else:\n            print(int(c\/\/(7*a+b)*7+7))\n","a,b,c=map(int,input().split())\n\nd=0\ns=0\nwhile s<c:\n    d +=1\n    if d%7==0:\n        s +=b\n    s +=a\nprint(d)\n","a,b,c=map(int,input().split())\nnowpoint=0\nday=0\nwhile 1:\n    if c-nowpoint<=a*6:\n        day+=(c-nowpoint+a-1)\/\/a\n        break\n    elif c-nowpoint<=a*7+b:\n        day+=7\n        break\n    day+=7\n    nowpoint+=a*7+b\nprint(day)\n","A,B,C = map(int, input().split())\n\nans = 0\nwhile C > 0:\n    ans += 1\n    C -= A\n    if ans % 7 == 0:\n        C -= B\n\nprint(ans)\n","a,b,c=map(int,input().split())\nans=7\nw=7*a+b\nif c<=6*a:\n    if c%a==0:\n        ans=c\/\/a\n    else:\n        ans=c\/\/a+1\nelse:\n    if c>w:\n        ans+=(c\/\/w-1)*7\n        c-=c\/\/w*w\n        if c%a==0 and c<=6*a:\n            ans+=c\/\/a\n        else:\n            if 6*a<c<=7*a+b:\n                ans+=7\n            else:\n                ans+=c\/\/a+1\nprint(ans)\n","a,b,c=(int(x) for x in input().split())\nn=0\ni=0\nwhile n<c:\n    n+=a\n    i+=1\n    if i%7==0:\n        n+=b;\nprint(i)\n","day=0\nsum=0\n\na,b,c=map(int,input().split())\n\nwhile True:\n    day+=1\n    \n    if day%7==0:\n        sum+=(a+b)\n    else:\n        sum+=a\n    \n    if sum>=c:\n        print(day)\n        break\n","import math\n\n(A, B, C) = list(map(int, input().split()))\ncnt = 0\ncoin = 0\n\nif A*7 < C:\n    if A*7+B >= C:\n        cnt = 7\n    else:\n        week_num = math.floor(C \/ (A*7+B))\n        cnt = week_num * 7\n        coin = week_num * (A*7+B)\n\n        if A*7 < C - coin:\n            cnt += 7\n        else:\n            cnt += math.ceil((C - coin) \/ A)\nelse:\n    cnt += math.ceil((C - coin) \/ A)\n    \nprint(cnt)\n\n","a, b, c = map(int, input().split())\n\nans = c \/\/ (a * 7 + b) * 7\nc %= a * 7 + b\nans += min(7, (c + a - 1) \/\/ a)\n\nprint(ans)\n","A,B,C=map(int,input().split())\ni=1\nwhile A*i + i\/\/7*B < C:\n    i+=1\nprint(i)\n","def main():\n    inp_line = input().split()\n    \n    login_coin = int(inp_line[0])       # \u30ed\u30b0\u30a4\u30f3\u306e\u5ea6\u306b\u5f97\u3089\u308c\u308b\u30b3\u30a4\u30f3\n    add_coin = int(inp_line[1])         # \u9031\u30dc\u30fc\u30ca\u30b9\u3067\u8ffd\u52a0\u3067\u5f97\u3089\u308c\u308b\u30b3\u30a4\u30f3\n    need_coin = int(inp_line[2])        # \u5c11\u306a\u304f\u3068\u3082\u5fc5\u8981\u306a\u30b3\u30a4\u30f3\u306e\u679a\u6570\n    \n    # \u5165\u529b\u30c1\u30a7\u30c3\u30af\n    if not(1 <= login_coin <= 1000)\\\n       or not(0 <= add_coin <= 1000)\\\n       or not(1 <= need_coin <= 10 ** 6):\n        print(\"\u5165\u529b\u304c\u4e0d\u6b63\u3067\u3059\u3002\")\n        return\n\n    login_count = 0\n    coin = 0\n    while True:\n        login_count += 1\n        coin += login_coin\n        # 7\u65e5Login\n        if login_count % 7 == 0:\n            coin += add_coin\n\n        if coin >= need_coin:\n            break\n\n    print(login_count)\n\nmain()\n","import math\nA, B, C = map(int, input().split())\nweek = C \/\/ (A * 7 + B)\nnum = math.ceil(C % (A * 7 + B) \/ A)\nif num > 7 :\n    num = 7\nprint(week * 7 + num)\n","a,b,c=map(int,input().split())\nif c%(a*7+b)<=7*a:\n    print(c\/\/(a*7+b)*7-(-1*(c%(a*7+b)))\/\/a)\nelse:print(-1*((-1*c)\/\/(a*7+b))*7)\n","a,b,c=input().split()\nd = int(a)*7+int(b) #\u4e00\u9031\u9593\u3067\u624b\u306b\u5165\u308b\u30b3\u30a4\u30f3\ne = int(c)\/\/d #\u5fc5\u8981\u306a\u9031\u306e\u6570\nf = int(c)-d*e #\u6b8b\u308a\u306e\u30b3\u30a4\u30f3\nif f<=6*int(a) and f%int(a)>0 : g=f\/\/int(a)+1\nelif f<=6*int(a) and f%int(a)<=0 : g=f\/int(a)\nelse : g=7\nprint(int(e*7+g))\n","a,b,c=map(int,input().split())\nd=int(a*7+b)\ne=int(c%d)\nif c<d:\n    if c%a==0:\n        if c\/a>=7:\n            print(7)\n        else:\n            print(int(c\/a))\n    else:\n        if c\/a>=6:\n            print(7)\n        else:\n            print(int(c\/a)+1)\nelse:\n    if e==0:\n        print(int(c\/d)*7)\n    else:\n        if e%a==0:\n            if e\/a>=7:\n                print(int(c\/d)*7+7)\n            else:\n                print(int(c\/d)*7+int(e\/a))\n        else:\n            if e\/a>=6:\n                print(int(c\/d)*7+7)\n            else:\n                print(int(c\/d)*7+int(e\/a)+1)\n            \n    \n","A,B,C=map(int,input().split())\n\ncoin=0\nfor i in range(1,C+1):\n    coin+=A\n    if i%7==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(i)\n","A, B, C = map(int, input().split())\ncoin = 0\ndate = 0\nwhile coin < C:\n    date += 1\n    coin += A\n    if date%7 == 0:\n        coin += B\nprint(date)\n","import sys\nfrom math import ceil\n\nsys.setrecursionlimit(100000)\nA, B, C = list(map(int, input().split()))\n\nif A * 7 >= C:\n    print(ceil(C\/A))\n    exit()\n\ncur = C\ncount = 0\ncount_i = 0\nwhile cur > 0:\n    count += 1\n    count_i += 1\n    if count_i == 7:\n        count_i = 0\n        cur -= B\n    cur -= A\n\nprint(count)\n","A,B,C=map(int,input().split())\ncoin=0\nfor day in range(1,C+1):\n    coin += A\n    if day % 7 == 0:\n        coin +=B\n    if coin >= C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nn = 0\ncount = 0\nwhile True:\n    n += 1\n    if n % 7 == 0:\n        count += (a+b)\n    else:\n        count += a\n    if count >= c:\n        print(n)\n        break\n","A,B,C=map(int,input().split())\nif C<7*A+B:         #1\u9031\u9593\u76ee\u3067\u304a\u308f\u308b\n    if  A*7<C and C<A*7+B: #\u5b9f\u306f1\u9031\u76ee\u306e\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n        print(7)\n    else:    \n        if C%A==0:          \n            print(C\/\/A)\n        else:               #\u3042\u307e\u308a\u304c\u3042\u3063\u305f\u3089\uff0b\uff11\n            print(C\/\/A+1) \nelse:                       #2\u9031\u9593\u76ee\u4ee5\u964d\n    if C%((7*A)+B)==0:              #\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n        print((C\/\/((7*A)+B))*7)\n    else :\n        if C%((7*A)+B)>=7*A and C%((7*A)+B)<7*A+B: #\u5b9f\u306f\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n            print((C\/\/((7*A)+B)+1)*7)\n        else:\n            if (C%((7*A)+B))%A==0 :\n                print(((C\/\/((7*A)+B))*7)+((C%((7*A)+B))\/\/A))\n            else:                       #\u4f59\u308a\u304c\u3042\u3063\u305f\u3089+\uff11\n             print(((C\/\/((7*A)+B))*7)+((C%((7*A)+B)))\/\/A+1)\n    \n","def main():\n    a, b, c = map(int, input().split())\n    w = a * 7 + b\n    ans = c \/\/ w * 7\n    c = c % w\n    d = c \/\/ a\n    if c % a > 0:\n        d += 1\n    if d > 7:\n        d = 7\n    ans += d\n    print(ans)\n\nif __name__ == '__main__':\n  main()\n\n","a,b,c = map(int,input().split())\n\nday=0\ncoin=0\n\nwhile coin<c:\n    day+=1\n    coin+=a\n    if day%7==0:\n        coin+=b\n        \n    \nprint(day)\n","a,b,c = map(int,input().split())\n\ntot = 0\nd = 0\nwhile tot < c:\n  d+=1\n  tot += a\n  if d%7 == 0:\n    tot += b\nprint(d)\n\n","a,b,c = map(int,input().split())\nx = 0\nx += c \/\/ (a*7 + b)*7\nc %= (a*7 + b)\nx += min(7,c\/\/a)\nif c % a and c\/\/a < 7:\n  x += 1\nprint(x)\n","# AOJ Volume6 0652\n# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0652\n\nA, B, C = list(map(int, input().split()))\n\ncoins = 0\nday = 0\nwhile coins < C:\n    day += 1\n    coins += A\n    if day % 7 == 0:\n        coins += B\nprint(day)\n","import math\n\na,b,c = map(int,input().split())\n\nx = c \/\/ (7*a + b)\ny = c - (7*a + b)*x\nz = math.ceil(y\/a)\n\nif y > 6 * a:\n    print(7 * (x + 1))\nelse:\n    print(7 * x + z)\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nw=C-z\n\nif (A*7)<w<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<w:\n        coin+=A\n        day+=1\n    print(y*7+day)\n\n","A,B,C = map(int,input().split())\nday=0\ncoin=0\n\nwhile True:\n    if coin>=C:\n        break\n    day+=1\n    coin+=A\n    if day%7==0:\n        coin+=B\nprint(day)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day%7==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nd = 0\ns = 0\nwhile s < c:\n    d += 1\n    if d%7 == 0:\n        s += b\n    s += a\nprint(d)\n","a, b, c = map(int, input().split())\nq, r = divmod(c, a*7+b)\ns = min(7, (r+a-1)\/\/a)\nprint(7*q + s)\n\n"],"raw_generations":["import math\na,b,c=map(int,input().split())\nq,m=divmod(c,a*7+b)\nprint(7*q+min(7,math.ceil(m\/a)))\n","a,b,c=map(int,input().split())\ni=0\ncnt=0\nwhile cnt<c:\n    i+=1\n    cnt+=a\n    if i%7==0:\n        cnt+=b\nprint(i)\n","A, B, C = map(int, input().split())\ni = 0\nsum = 0\ncnt = 0\nwhile True:\n    sum  += A\n    i += 1\n    cnt += 1\n    if sum >= C:\n        break\n    if i%6 == 0:\n        sum += A+B\n        i = 0\n        cnt += 1\n        if sum >= C:\n            break\nprint(cnt)\n","s = 0\nd = 1\nA, B, C = map(int, input().split())\n\nwhile True:\n    if s >= C:\n        break\n\n    s += A\n\n    if d % 7 == 0:\n        s += B\n\n    d += 1\n\nprint(d - 1)\n","a,b,c=map(int,input().split())\nans=0\nwhile c>0:\n\tc-=a\n\tif ans%7==6:\n\t\tc-=b\n\tans+=1\nprint(ans)\n\n","a,b,c=map(int,input().split())\nx=0\ny=0\nwhile x<c:\n    y+=1\n    x+=a\n    if y%7==0:\n        x+=b\nprint(y)\n","# -*- coding: utf-8 -*-\ncoin_day, coin_week, goal = map(int, input().split())\ntotal_coin_per_week = coin_week + (7 * coin_day)\nres_week, rest_coin = divmod(goal, total_coin_per_week)\n\nres_day, residual = divmod(rest_coin, coin_day)\nif residual >= 1:\n    res_day += 1\nif res_day >= 7:\n    res_day = 7\n\nprint(res_week * 7 + res_day)\n\n","A, B, C = map(int, input(). split())\n\ni = 1\nsum = 0\nwhile True:\n    if i%7 == 0:\n        sum += A + B\n    if i%7 != 0:\n        sum += A\n    if sum >= C:\n        break\n    i += 1\n    \nprint(i)\n","a,b,c = map(int,input().split())\n\nday = 0\ncoin = 0\n\nwhile coin < c:\n    day += 1\n    coin += a\n    if day % 7 == 0:\n        coin += b\n\n\nprint(day)\n","A,B,C=map(int,input().split())\n\nsum=0\ni=0\nwhile True:\n    sum+=A\n    i+=1\n    if sum>=C:\n        print(i)\n        break\n    if i%7==0:\n        sum+=B\n        if sum>=C:\n            print(i)\n            break\n","#0652\na , b , c = map(int,input().split())\nsum = 0\ncount = 0 \nwhile True:\n    if sum >= c:\n        break\n    sum += a\n    count += 1\n    if count%7 == 0:\n        sum += b \n        \nprint(count)\n","A,B,C = map(int, input().split())\n\ndays = int(C\/(A+(B\/7)))\n\nwhile 1:\n    coins = A* days + B * (days\/\/7)\n\n    if ( coins >= C):\n        break\n    else:\n        days += 1\n\nprint(days)\n","A,B,C=map(int,input().split(\" \"))\n\ncount=0\nwhile C>0:\n    count+=1\n    C-=A\n    if count%7==0:\n        C-=B\nprint(count)\n","A,B,C=map(int,input().split())\ncoin=0\nday=1\nwhile True:\n    coin+=A\n    if day%7==0:\n        coin+=B\n    if coin>C or coin==C:\n        break\n    day+=1\nprint(day)\n","A,B,C=map(int,input().split())\nS=0\ni=0\nwhile C>S:\n    S=S+A\n    if C>S and i+1>=7 and (i+1)%7==0:\n        S=S+B\n    i=i+1\nprint(i)\n\n","A, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range(1,C+1):\n    coin += A\n    \n    if day % 7 == 0:\n        coin += B\n    if coin >= C:break\n\nprint(day)\n","a,b,c=map(int,input().split())\nif c<(7*a+b):\n    if c<=6*a:\n        if c%a==0:\n            print(c\/\/a)\n        else:\n            print(c\/\/a+1)\n    else:\n        print(7)\nelse:\n    if c%(7*a+b)==0:\n        print(int(7*c\/(7*a+b)))\n    else:\n        if (c%(7*a+b))<=6*a:\n            if c%(7*a+b)%a==0:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a))\n            else:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a)+1)\n        else:\n            print(int(c\/\/(7*a+b)*7+7))\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nv=C-z\n\nif (A*7)<v<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<v:\n        coin+=A\n        day+=1\n    print(y*7+day)\n","d, b, t = [int(x) for x in input().split()]\n\nw = 7 * d + b\n\nc = 0\nc += (t \/\/ w) * 7\nt %= w\n\nif t >= 7*d:\n    c +=7\n    t = 0\nelse:\n    c += t\/\/d\n    t %= d\n    if t > 0:\n        c += 1\n\nprint(c)\n\n","a,b,c=map(int,input().split())\ncnt=0\nd=0\nwhile cnt < c:\n    d+=1\n    if d % 7 == 0:\n        cnt+=b\n    cnt+=a\nprint(d)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day % 7 ==0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","A, B, C = map(int, input().split())\nn = 0  # \u30ed\u30b0\u30a4\u30f3\u56de\u6570\ntemp = 0  # n\u56de\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u306e\u5408\u8a08\u679a\u6570\nwhile temp < C:\n\tn = n + 1\n\tif n % 7 == 0:\n\t\ttemp = temp + A + B\n\telse:\n\t\ttemp = temp + A\n\nprint(n)\n\n","A,B,C = map(int,input().split())\nans = 0\nn = C \/\/ (7*A+B)\nr = C %  (7*A+B)\nans += 7*n\nif r == 0:\n    pass\nelif r <= 6*A:\n    ans += r\/\/A\n    if r % A != 0:\n        ans += 1\nelse:\n    ans += 7\nprint(ans)\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nw=C-z\nif (A*7)<w<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<w:\n        coin+=A\n        day+=1\n    print(y*7+day)\n","A, B, C = map(int, input().split())\n\nday = 0\nlogin = 0\nwhile True:\n    day += 1\n    login += A\n    if day % 7 == 0:\n        login += B\n    if login >= C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nans = c\/\/(a*7+b)*7+min((c%(a*7+b)+a-1)\/\/a,7)\nprint(ans)\n","A,B,C=map(int,input().split())\npoint=0\nif C>7*A+B:\n    warareru=C%((7*A)+B)\n    ans=C\/\/((7*A)+B)\n    while warareru>0:\n        point+=1\n        if point%7!=0:\n            warareru-=A\n\n        else:\n            warareru-=A+B\n\n\n    print(ans*7+point)\nelif C>=7*A and C<=7*A+B:\n    print(\"7\")\nelse:\n    if C%A==0:\n        print(C\/\/A)\n    else:print((C\/\/A)+1)\n","import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef main():\n    a,b,c=MI()\n    week,r=divmod(c,7*a+b)\n    day=(r+a-1)\/\/a\n    print(week*7+min(7,day))\n\nmain()\n","a,b,c=map(int,input().split())\nd=1\ncoin=0\nwhile coin<c:\n    if d%7==0:\n        coin+=b\n    coin+=a\n    d+=1\nprint(d-1)\n","A,B,C=(int(x) for x in input().split())\n\nif B==0:\n    x=C\/\/A\n    if C%A!=0:\n        x=x+1\n\nelif A>C:\n    x=1\nelif C\/\/A<7:\n    x=C\/\/A+1\nelse:\n    t=0\n    y=A*7\n    y=y+B\n    z=C%y\n    if 0<z<A:\n        t=1\n    z=z\/\/A\n    if z>7:\n        t=7-z\n    s=C\/\/y\n    s=s*7\n    x=z+s+t\nprint(x)\n","A,B,C=map(int,input().split())\nC_7=7*A+B\nweek_day,week_rem,day_0,day_rem=C\/\/C_7*7,C%C_7,C\/\/A,C%A\n\nif C<=A:\n    print(1)\nelif C<C_7:\n    if A*7<week_rem<=C:\n        print(7)\n    elif 0<day_rem<=A:\n        print(day_0+1) \n    elif day_rem==0:\n        print(day_0)\n    else:\n        print(day_0+day_rem)\nelif B==0:\n    if day_rem==0:\n        print(day_0)\n    else:\n        print(day_0+1)\nelif week_rem==0:\n    print(week_day)\nelif C>C_7:\n    if 0<week_rem<=A:\n        print(week_day+1)\n    elif A*7<week_rem<=C_7:\n        print(week_day+7)\n    else:\n        print(week_day+week_rem)  \n","#20 \u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\n\nA, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range (1, 1+C):\n        coin += A\n        \n        if day % 7 == 0:\n                coin += B\n        if coin >= C:\n                break\n\nprint(day)\n","A, B, C = map(int, input().split())\nn = 0 \ntemp = 0 \nwhile temp < C:\n\tn = n + 1\n\tif n % 7 == 0:\n\t\ttemp = temp + A + B\n\telse:\n\t\ttemp = temp + A\n\nprint(n)\n","a, b, c = map(int, input().split())\nans = c\/\/(a*7+b)*7+min((c%(a*7+b)+a-1)\/\/a,7)\nprint(ans)\n","A,B,C = map(int, input().split())\n\ncoin = 0\nfor day in range(1, C+1):\n    coin=coin+A\n    if day % 7 == 0:\n        coin = coin + B\n    if coin >= C:\n        break\nprint(day)\n","A,B,C=map(int,input().split())\ni=0\nwhile A*i+i\/\/7*B<C:\n    i+=1\nprint(i)\n","input_str = input(\"\")\ninput_elms = input_str.split(\" \")\nfor login_cnt in range(1, int(input_elms[2]) + 1):\n    if int(input_elms[0]) * login_cnt + int(input_elms[1]) * int(login_cnt\/7) >= int(input_elms[2]):\n        print(login_cnt)\n        break\n","import math\n\na,b,c = map(int,input().split())\nd=1\nr=0\nw=0\n\nw = c\/\/(7*a+b)\nr = c%(7*a+b)\nd = (math.ceil(r\/a))\n\nif d>7:\n    d = 7\nd += 7*w\nprint(d)\n","s = input().split()\nl = 0\nN = int(s[0])#\uff11\u65e5\nA = int(s[1])#\u30dc\u30fc\u30ca\u30b9\nB = int(s[2])#\u307b\u3057\u3044\nW = N*7+A\nif B%W == 0:\n  l = B\/\/W*7\nelse:\n  if int(B%W) > int(N*7):\n    l = (1+B\/\/W)*7\n  else:\n    if int(B%W%N) == 0:\n      l = B\/\/W*7+B%W\/\/N\n    else:\n      l = B\/\/W*7+B%W\/\/N+1\nprint(l)\n","a, b, c = map(int, input().split())\nweek = a * 7 + b\nd = c \/\/ week\nans = d * 7\nc -= d * week\n\ncnt = 0\nwhile(c > 0):\n    c -= a\n    ans += 1\n    cnt += 1\n    if(cnt == 7):\n        c -= b\n        cnt = 0\nprint(ans) \n","a,b,c=map(int,input().split())\nn=0\nfor i in range(1,c+1):\n    n+=a\n    if i%7==0:\n        n+=b\n    if n>=c:\n        break\nprint(i)\n\n","def main():\n    a,b,c = map(int,input().split())\n    target = c\n    daily_coin = a\n    weekly_coin = b\n    weekly_daily_total_coin = 7 * a + b\n    counter = 0\n\n    counter += (target \/\/ weekly_daily_total_coin) * 7\n    target %= weekly_daily_total_coin\n    #print(counter,target)\n    temp = 0\n    if target % daily_coin != 0 :\n        temp += 1\n    counter += min(target \/\/ daily_coin + temp,7)\n    print(counter)\n\n\n\nif __name__ == '__main__':\n    main()\n\n","A,B,C=map(int,input().split())\nsum=0\ni=0\nwhile True:\n    sum+=A\n    i+=1\n    if sum>=C:\n        print(i)\n        break\n    if i%7==0:\n        sum+=B\n        if sum>=C:\n            print(i)\n            break\n","a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\n\ni=0;\nwhile c>0:\n\ti=i+1\n\tc=c-a\n\tif i%7==0:\n\t\tc=c-b\nprint(i)\n\n","a,b,c=map(int,input().split())\nd=c\/\/(a*7+b)*7\nc%=a*7+b\ne=0\nwhile c>0 and e<7:\n    d+=1\n    c-=a\n    e+=1\nprint(d)\n","def eval(A, B, C):\n    rest = C\n    count = 0\n    \n    while True:\n        for i in range(7):\n            rest -= A\n            if i == 6:\n                rest -= B\n                \n            count += 1\n            if rest <= 0:\n                return count\n\n\nA, B, C = tuple(map(int, input().split()))\nprint(eval(A, B, C))\n","# coding: utf-8\n# Your code here!\n\nA,B,C =map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","A,B,C = map(int,input().split())\n\ncoin=0\nfor day in range(1, C+1):\n    coin+=A\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","# coding: utf-8\n# Your code here!\n\nA, B, C = map(int, input().split())\n\nd = 0\ncnt = 0\nwhile True:\n   d += 1\n   if d % 7 == 0:\n      cnt += (A + B)\n   else:\n      cnt += A\n   if cnt >= C:\n      print(d)\n      break\n\n","A,B,C = map(int,input().split())\nx = 0\ny = 0\nwhile x < C:\n    y += 1\n    if y%7 == 0:\n        x += B\n    x += A\nprint(y)\n","A,B,C = map(int,input().split())\n\ncoin=0\nfor day in range(1, C+1):\n    coin+=A\n    #\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067 7 \u65e5\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n\n","A, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range(1, C+1):\n    coin += A\n    if day % 7 == 0:\n        coin += B\n    if coin >= C:\n        break\nprint(day)\n","a,b,c = map(int,input().split())\n\nok = 100000000\nng = 0\nwhile ok - ng > 1:\n    m = (ok + ng) \/\/ 2\n    ge = m * a + (m \/\/ 7) * b\n    if ge >= c:\n        ok = m\n    else:\n        ng = m\nprint(ok)\n","a, b, c = map(int, input().split())\nd, s = 0, 0\n\nwhile s < c:\n    d += 1\n    if d % 7 == 0:\n        s += b\n    s += a\n\nprint(d)\n","A,B,C=map(int,input().split())\ns=0\nsum=0\nwhile 1:\n    sum+=A\n    s+=1\n    if s%7==0:\n        sum+=B\n    if sum>=C:\n        break\nprint(s)\n","A,B,C=map(int,input().split())\ns=7*A+B\nw=C\/\/s\nD=C%s\n\nif D<7*A :\n    d=-(-D\/\/A)\nelif 0<=D-7*A and D-7*A<B :\n    d=7\n    \nprint(7*w+d)\n","A, B, C = map(int, input().split())\ncoin = 0\nday = 1\nwhile coin < C :\n    coin += A\n    if day % 7 == 0 :\n        coin += B\n    day += 1\nprint(day-1)\n","a,b,c=map(int,input().split())\ni=1\nwhile 1:\n    c=c-a\n    if i%7==0:\n        c=c-b\n    if c<=0:\n        break\n    i=i+1\nprint(i)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day%7 ==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(day)\n\n","a,b,c = map(int,input().split())\n\nd = 0\ns = 0\nwhile s < c:\n    d += 1\n    if d%7 == 0:\n        s += b\n    s += a\nprint(d)\n\n","# -*- coding: utf-8 -*-\n\"\"\"\nSocial Game\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0652\n\n\"\"\"\nimport sys\nfrom math import ceil\n\ndef solve(a, b, c):\n    q, r = divmod(c, (a*7 + b))\n    return q * 7 + min(ceil(r \/ a), 7)\n\n\ndef main(args):\n    a, b, c = map(int, input().split())\n    ans = solve(a, b, c)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n","a,b,c=map(int,input().split())\nd=0\ns=0\nwhile s<c:\n    d+=1\n    if d%7==0:\n        s+=b\n    s+=a\nprint(d)\n\n","a,b,c=map(int,input().split())\nd=0\nwhile c>0:\n    c=c-a\n    d=d+1\n    if d%7==0:\n        c=c-b\n    \nprint(d)\n","A,B,C=map(int,input().split())\nD=0\nE=0\nwhile True:\n    D = D+1\n    E = E+A\n    if D%7==0:\n        E = E+B\n    if E>=C:\n        print(D)\n        break\n","a,b,c=map(int,input().split())\nx=c\/\/(7*a+b)\nr=c-(7*a+b)*x\nt=r\/\/a\nif c%(7*a+b)!=0:\n    if r>=7*a:\n        print(7*x+7)    \n    else:\n        if r%a!=0:\n            print(7*x+t+1)\n        else:\n            print(7*x+t)\nelse:\n    print(7*x)\n","a, b, c = map(int, input().split())\n\ncoin=0\nfor day in range(1, c+1):\n    coin+=a\n    \n    if day % 7 == 0:\n        coin+=b\n    if coin >= c: break\n\nprint(day)\n","inputText = input().split()\na = int(inputText[0])\nb = int(inputText[1])\nc = int(inputText[2])\nweek = a*7+b\nweeks = int(c \/week)\nremain = c % week\ntotalday = weeks * 7\ntotalday += int(remain\/a)\ntotalday2 = (int(c\/week)+1)*7\nif remain%a != 0:\n    totalday +=1\nprint(min(totalday,totalday2))\n\n","\na,b,c=map(int,input().split())\n#b=int(input())\n#c=int(input())\nday=0\ncnt=0\nwhile(True):\n    day+=1\n    #print(day)\n    #print(c)\n    if day%7==0:\n        c-=b\n    c-=a\n    if c<=0:\n        break\nprint(day)\n","a,b,c=map(int,input().split())\nif c<(7*a+b):\n    if c<=6*a:\n        if c%a==0:\n            print(c\/\/a)\n        else:\n            print(c\/\/a+1)\n    else:\n        print(7)\nelse:\n    if c%(7*a+b)==0:\n        print(int(7*c\/(7*a+b)))\n    else:\n        if (c%(7*a+b))<=6*a:\n            if c%(7*a+b)%a==0:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a))\n            else:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a)+1)\n        else:\n            print(int(c\/\/(7*a+b)*7+7))\n","a,b,c=map(int,input().split())\n\nd=0\ns=0\nwhile s<c:\n    d +=1\n    if d%7==0:\n        s +=b\n    s +=a\nprint(d)\n","a,b,c=map(int,input().split())\nnowpoint=0\nday=0\nwhile 1:\n    if c-nowpoint<=a*6:\n        day+=(c-nowpoint+a-1)\/\/a\n        break\n    elif c-nowpoint<=a*7+b:\n        day+=7\n        break\n    day+=7\n    nowpoint+=a*7+b\nprint(day)\n","A,B,C = map(int, input().split())\n\nans = 0\nwhile C > 0:\n    ans += 1\n    C -= A\n    if ans % 7 == 0:\n        C -= B\n\nprint(ans)\n","a,b,c=map(int,input().split())\nans=7\nw=7*a+b\nif c<=6*a:\n    if c%a==0:\n        ans=c\/\/a\n    else:\n        ans=c\/\/a+1\nelse:\n    if c>w:\n        ans+=(c\/\/w-1)*7\n        c-=c\/\/w*w\n        if c%a==0 and c<=6*a:\n            ans+=c\/\/a\n        else:\n            if 6*a<c<=7*a+b:\n                ans+=7\n            else:\n                ans+=c\/\/a+1\nprint(ans)\n","a,b,c=(int(x) for x in input().split())\nn=0\ni=0\nwhile n<c:\n    n+=a\n    i+=1\n    if i%7==0:\n        n+=b;\nprint(i)\n","day=0\nsum=0\n\na,b,c=map(int,input().split())\n\nwhile True:\n    day+=1\n    \n    if day%7==0:\n        sum+=(a+b)\n    else:\n        sum+=a\n    \n    if sum>=c:\n        print(day)\n        break\n","import math\n\n(A, B, C) = list(map(int, input().split()))\ncnt = 0\ncoin = 0\n\nif A*7 < C:\n    if A*7+B >= C:\n        cnt = 7\n    else:\n        week_num = math.floor(C \/ (A*7+B))\n        cnt = week_num * 7\n        coin = week_num * (A*7+B)\n\n        if A*7 < C - coin:\n            cnt += 7\n        else:\n            cnt += math.ceil((C - coin) \/ A)\nelse:\n    cnt += math.ceil((C - coin) \/ A)\n    \nprint(cnt)\n\n","a, b, c = map(int, input().split())\n\nans = c \/\/ (a * 7 + b) * 7\nc %= a * 7 + b\nans += min(7, (c + a - 1) \/\/ a)\n\nprint(ans)\n","A,B,C=map(int,input().split())\ni=1\nwhile A*i + i\/\/7*B < C:\n    i+=1\nprint(i)\n","def main():\n    inp_line = input().split()\n    \n    login_coin = int(inp_line[0])       # \u30ed\u30b0\u30a4\u30f3\u306e\u5ea6\u306b\u5f97\u3089\u308c\u308b\u30b3\u30a4\u30f3\n    add_coin = int(inp_line[1])         # \u9031\u30dc\u30fc\u30ca\u30b9\u3067\u8ffd\u52a0\u3067\u5f97\u3089\u308c\u308b\u30b3\u30a4\u30f3\n    need_coin = int(inp_line[2])        # \u5c11\u306a\u304f\u3068\u3082\u5fc5\u8981\u306a\u30b3\u30a4\u30f3\u306e\u679a\u6570\n    \n    # \u5165\u529b\u30c1\u30a7\u30c3\u30af\n    if not(1 <= login_coin <= 1000)\\\n       or not(0 <= add_coin <= 1000)\\\n       or not(1 <= need_coin <= 10 ** 6):\n        print(\"\u5165\u529b\u304c\u4e0d\u6b63\u3067\u3059\u3002\")\n        return\n\n    login_count = 0\n    coin = 0\n    while True:\n        login_count += 1\n        coin += login_coin\n        # 7\u65e5Login\n        if login_count % 7 == 0:\n            coin += add_coin\n\n        if coin >= need_coin:\n            break\n\n    print(login_count)\n\nmain()\n","import math\nA, B, C = map(int, input().split())\nweek = C \/\/ (A * 7 + B)\nnum = math.ceil(C % (A * 7 + B) \/ A)\nif num > 7 :\n    num = 7\nprint(week * 7 + num)\n","a,b,c=map(int,input().split())\nif c%(a*7+b)<=7*a:\n    print(c\/\/(a*7+b)*7-(-1*(c%(a*7+b)))\/\/a)\nelse:print(-1*((-1*c)\/\/(a*7+b))*7)\n","a,b,c=input().split()\nd = int(a)*7+int(b) #\u4e00\u9031\u9593\u3067\u624b\u306b\u5165\u308b\u30b3\u30a4\u30f3\ne = int(c)\/\/d #\u5fc5\u8981\u306a\u9031\u306e\u6570\nf = int(c)-d*e #\u6b8b\u308a\u306e\u30b3\u30a4\u30f3\nif f<=6*int(a) and f%int(a)>0 : g=f\/\/int(a)+1\nelif f<=6*int(a) and f%int(a)<=0 : g=f\/int(a)\nelse : g=7\nprint(int(e*7+g))\n","a,b,c=map(int,input().split())\nd=int(a*7+b)\ne=int(c%d)\nif c<d:\n    if c%a==0:\n        if c\/a>=7:\n            print(7)\n        else:\n            print(int(c\/a))\n    else:\n        if c\/a>=6:\n            print(7)\n        else:\n            print(int(c\/a)+1)\nelse:\n    if e==0:\n        print(int(c\/d)*7)\n    else:\n        if e%a==0:\n            if e\/a>=7:\n                print(int(c\/d)*7+7)\n            else:\n                print(int(c\/d)*7+int(e\/a))\n        else:\n            if e\/a>=6:\n                print(int(c\/d)*7+7)\n            else:\n                print(int(c\/d)*7+int(e\/a)+1)\n            \n    \n","A,B,C=map(int,input().split())\n\ncoin=0\nfor i in range(1,C+1):\n    coin+=A\n    if i%7==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(i)\n","A, B, C = map(int, input().split())\ncoin = 0\ndate = 0\nwhile coin < C:\n    date += 1\n    coin += A\n    if date%7 == 0:\n        coin += B\nprint(date)\n","import sys\nfrom math import ceil\n\nsys.setrecursionlimit(100000)\nA, B, C = list(map(int, input().split()))\n\nif A * 7 >= C:\n    print(ceil(C\/A))\n    exit()\n\ncur = C\ncount = 0\ncount_i = 0\nwhile cur > 0:\n    count += 1\n    count_i += 1\n    if count_i == 7:\n        count_i = 0\n        cur -= B\n    cur -= A\n\nprint(count)\n","A,B,C=map(int,input().split())\ncoin=0\nfor day in range(1,C+1):\n    coin += A\n    if day % 7 == 0:\n        coin +=B\n    if coin >= C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nn = 0\ncount = 0\nwhile True:\n    n += 1\n    if n % 7 == 0:\n        count += (a+b)\n    else:\n        count += a\n    if count >= c:\n        print(n)\n        break\n","A,B,C=map(int,input().split())\nif C<7*A+B:         #1\u9031\u9593\u76ee\u3067\u304a\u308f\u308b\n    if  A*7<C and C<A*7+B: #\u5b9f\u306f1\u9031\u76ee\u306e\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n        print(7)\n    else:    \n        if C%A==0:          \n            print(C\/\/A)\n        else:               #\u3042\u307e\u308a\u304c\u3042\u3063\u305f\u3089\uff0b\uff11\n            print(C\/\/A+1) \nelse:                       #2\u9031\u9593\u76ee\u4ee5\u964d\n    if C%((7*A)+B)==0:              #\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n        print((C\/\/((7*A)+B))*7)\n    else :\n        if C%((7*A)+B)>=7*A and C%((7*A)+B)<7*A+B: #\u5b9f\u306f\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n            print((C\/\/((7*A)+B)+1)*7)\n        else:\n            if (C%((7*A)+B))%A==0 :\n                print(((C\/\/((7*A)+B))*7)+((C%((7*A)+B))\/\/A))\n            else:                       #\u4f59\u308a\u304c\u3042\u3063\u305f\u3089+\uff11\n             print(((C\/\/((7*A)+B))*7)+((C%((7*A)+B)))\/\/A+1)\n    \n","def main():\n    a, b, c = map(int, input().split())\n    w = a * 7 + b\n    ans = c \/\/ w * 7\n    c = c % w\n    d = c \/\/ a\n    if c % a > 0:\n        d += 1\n    if d > 7:\n        d = 7\n    ans += d\n    print(ans)\n\nif __name__ == '__main__':\n  main()\n\n","a,b,c = map(int,input().split())\n\nday=0\ncoin=0\n\nwhile coin<c:\n    day+=1\n    coin+=a\n    if day%7==0:\n        coin+=b\n        \n    \nprint(day)\n","a,b,c = map(int,input().split())\n\ntot = 0\nd = 0\nwhile tot < c:\n  d+=1\n  tot += a\n  if d%7 == 0:\n    tot += b\nprint(d)\n\n","a,b,c = map(int,input().split())\nx = 0\nx += c \/\/ (a*7 + b)*7\nc %= (a*7 + b)\nx += min(7,c\/\/a)\nif c % a and c\/\/a < 7:\n  x += 1\nprint(x)\n","# AOJ Volume6 0652\n# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0652\n\nA, B, C = list(map(int, input().split()))\n\ncoins = 0\nday = 0\nwhile coins < C:\n    day += 1\n    coins += A\n    if day % 7 == 0:\n        coins += B\nprint(day)\n","import math\n\na,b,c = map(int,input().split())\n\nx = c \/\/ (7*a + b)\ny = c - (7*a + b)*x\nz = math.ceil(y\/a)\n\nif y > 6 * a:\n    print(7 * (x + 1))\nelse:\n    print(7 * x + z)\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nw=C-z\n\nif (A*7)<w<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<w:\n        coin+=A\n        day+=1\n    print(y*7+day)\n\n","A,B,C = map(int,input().split())\nday=0\ncoin=0\n\nwhile True:\n    if coin>=C:\n        break\n    day+=1\n    coin+=A\n    if day%7==0:\n        coin+=B\nprint(day)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day%7==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nd = 0\ns = 0\nwhile s < c:\n    d += 1\n    if d%7 == 0:\n        s += b\n    s += a\nprint(d)\n","a, b, c = map(int, input().split())\nq, r = divmod(c, a*7+b)\ns = min(7, (r+a-1)\/\/a)\nprint(7*q + s)\n\n"],"formatted_programs":["import math\na,b,c=map(int,input().split())\nq,m=divmod(c,a*7+b)\nprint(7*q+min(7,math.ceil(m\/a)))\n","a,b,c=map(int,input().split())\ni=0\ncnt=0\nwhile cnt<c:\n    i+=1\n    cnt+=a\n    if i%7==0:\n        cnt+=b\nprint(i)\n","A, B, C = map(int, input().split())\ni = 0\nsum = 0\ncnt = 0\nwhile True:\n    sum  += A\n    i += 1\n    cnt += 1\n    if sum >= C:\n        break\n    if i%6 == 0:\n        sum += A+B\n        i = 0\n        cnt += 1\n        if sum >= C:\n            break\nprint(cnt)\n","s = 0\nd = 1\nA, B, C = map(int, input().split())\n\nwhile True:\n    if s >= C:\n        break\n\n    s += A\n\n    if d % 7 == 0:\n        s += B\n\n    d += 1\n\nprint(d - 1)\n","a,b,c=map(int,input().split())\nans=0\nwhile c>0:\n\tc-=a\n\tif ans%7==6:\n\t\tc-=b\n\tans+=1\nprint(ans)\n\n","a,b,c=map(int,input().split())\nx=0\ny=0\nwhile x<c:\n    y+=1\n    x+=a\n    if y%7==0:\n        x+=b\nprint(y)\n","# -*- coding: utf-8 -*-\ncoin_day, coin_week, goal = map(int, input().split())\ntotal_coin_per_week = coin_week + (7 * coin_day)\nres_week, rest_coin = divmod(goal, total_coin_per_week)\n\nres_day, residual = divmod(rest_coin, coin_day)\nif residual >= 1:\n    res_day += 1\nif res_day >= 7:\n    res_day = 7\n\nprint(res_week * 7 + res_day)\n\n","A, B, C = map(int, input(). split())\n\ni = 1\nsum = 0\nwhile True:\n    if i%7 == 0:\n        sum += A + B\n    if i%7 != 0:\n        sum += A\n    if sum >= C:\n        break\n    i += 1\n    \nprint(i)\n","a,b,c = map(int,input().split())\n\nday = 0\ncoin = 0\n\nwhile coin < c:\n    day += 1\n    coin += a\n    if day % 7 == 0:\n        coin += b\n\n\nprint(day)\n","A,B,C=map(int,input().split())\n\nsum=0\ni=0\nwhile True:\n    sum+=A\n    i+=1\n    if sum>=C:\n        print(i)\n        break\n    if i%7==0:\n        sum+=B\n        if sum>=C:\n            print(i)\n            break\n","#0652\na , b , c = map(int,input().split())\nsum = 0\ncount = 0 \nwhile True:\n    if sum >= c:\n        break\n    sum += a\n    count += 1\n    if count%7 == 0:\n        sum += b \n        \nprint(count)\n","A,B,C = map(int, input().split())\n\ndays = int(C\/(A+(B\/7)))\n\nwhile 1:\n    coins = A* days + B * (days\/\/7)\n\n    if ( coins >= C):\n        break\n    else:\n        days += 1\n\nprint(days)\n","A,B,C=map(int,input().split(\" \"))\n\ncount=0\nwhile C>0:\n    count+=1\n    C-=A\n    if count%7==0:\n        C-=B\nprint(count)\n","A,B,C=map(int,input().split())\ncoin=0\nday=1\nwhile True:\n    coin+=A\n    if day%7==0:\n        coin+=B\n    if coin>C or coin==C:\n        break\n    day+=1\nprint(day)\n","A,B,C=map(int,input().split())\nS=0\ni=0\nwhile C>S:\n    S=S+A\n    if C>S and i+1>=7 and (i+1)%7==0:\n        S=S+B\n    i=i+1\nprint(i)\n\n","A, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range(1,C+1):\n    coin += A\n    \n    if day % 7 == 0:\n        coin += B\n    if coin >= C:break\n\nprint(day)\n","a,b,c=map(int,input().split())\nif c<(7*a+b):\n    if c<=6*a:\n        if c%a==0:\n            print(c\/\/a)\n        else:\n            print(c\/\/a+1)\n    else:\n        print(7)\nelse:\n    if c%(7*a+b)==0:\n        print(int(7*c\/(7*a+b)))\n    else:\n        if (c%(7*a+b))<=6*a:\n            if c%(7*a+b)%a==0:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a))\n            else:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a)+1)\n        else:\n            print(int(c\/\/(7*a+b)*7+7))\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nv=C-z\n\nif (A*7)<v<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<v:\n        coin+=A\n        day+=1\n    print(y*7+day)\n","d, b, t = [int(x) for x in input().split()]\n\nw = 7 * d + b\n\nc = 0\nc += (t \/\/ w) * 7\nt %= w\n\nif t >= 7*d:\n    c +=7\n    t = 0\nelse:\n    c += t\/\/d\n    t %= d\n    if t > 0:\n        c += 1\n\nprint(c)\n\n","a,b,c=map(int,input().split())\ncnt=0\nd=0\nwhile cnt < c:\n    d+=1\n    if d % 7 == 0:\n        cnt+=b\n    cnt+=a\nprint(d)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day % 7 ==0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","A, B, C = map(int, input().split())\nn = 0  # \u30ed\u30b0\u30a4\u30f3\u56de\u6570\ntemp = 0  # n\u56de\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u306e\u5408\u8a08\u679a\u6570\nwhile temp < C:\n\tn = n + 1\n\tif n % 7 == 0:\n\t\ttemp = temp + A + B\n\telse:\n\t\ttemp = temp + A\n\nprint(n)\n\n","A,B,C = map(int,input().split())\nans = 0\nn = C \/\/ (7*A+B)\nr = C %  (7*A+B)\nans += 7*n\nif r == 0:\n    pass\nelif r <= 6*A:\n    ans += r\/\/A\n    if r % A != 0:\n        ans += 1\nelse:\n    ans += 7\nprint(ans)\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nw=C-z\nif (A*7)<w<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<w:\n        coin+=A\n        day+=1\n    print(y*7+day)\n","A, B, C = map(int, input().split())\n\nday = 0\nlogin = 0\nwhile True:\n    day += 1\n    login += A\n    if day % 7 == 0:\n        login += B\n    if login >= C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nans = c\/\/(a*7+b)*7+min((c%(a*7+b)+a-1)\/\/a,7)\nprint(ans)\n","A,B,C=map(int,input().split())\npoint=0\nif C>7*A+B:\n    warareru=C%((7*A)+B)\n    ans=C\/\/((7*A)+B)\n    while warareru>0:\n        point+=1\n        if point%7!=0:\n            warareru-=A\n\n        else:\n            warareru-=A+B\n\n\n    print(ans*7+point)\nelif C>=7*A and C<=7*A+B:\n    print(\"7\")\nelse:\n    if C%A==0:\n        print(C\/\/A)\n    else:print((C\/\/A)+1)\n","import sys\n\nsys.setrecursionlimit(10 ** 6)\nint1 = lambda x: int(x) - 1\np2D = lambda x: print(*x, sep=\"\\n\")\ndef MI(): return map(int, sys.stdin.readline().split())\ndef LI(): return list(map(int, sys.stdin.readline().split()))\ndef LLI(rows_number): return [LI() for _ in range(rows_number)]\n\ndef main():\n    a,b,c=MI()\n    week,r=divmod(c,7*a+b)\n    day=(r+a-1)\/\/a\n    print(week*7+min(7,day))\n\nmain()\n","a,b,c=map(int,input().split())\nd=1\ncoin=0\nwhile coin<c:\n    if d%7==0:\n        coin+=b\n    coin+=a\n    d+=1\nprint(d-1)\n","A,B,C=(int(x) for x in input().split())\n\nif B==0:\n    x=C\/\/A\n    if C%A!=0:\n        x=x+1\n\nelif A>C:\n    x=1\nelif C\/\/A<7:\n    x=C\/\/A+1\nelse:\n    t=0\n    y=A*7\n    y=y+B\n    z=C%y\n    if 0<z<A:\n        t=1\n    z=z\/\/A\n    if z>7:\n        t=7-z\n    s=C\/\/y\n    s=s*7\n    x=z+s+t\nprint(x)\n","A,B,C=map(int,input().split())\nC_7=7*A+B\nweek_day,week_rem,day_0,day_rem=C\/\/C_7*7,C%C_7,C\/\/A,C%A\n\nif C<=A:\n    print(1)\nelif C<C_7:\n    if A*7<week_rem<=C:\n        print(7)\n    elif 0<day_rem<=A:\n        print(day_0+1) \n    elif day_rem==0:\n        print(day_0)\n    else:\n        print(day_0+day_rem)\nelif B==0:\n    if day_rem==0:\n        print(day_0)\n    else:\n        print(day_0+1)\nelif week_rem==0:\n    print(week_day)\nelif C>C_7:\n    if 0<week_rem<=A:\n        print(week_day+1)\n    elif A*7<week_rem<=C_7:\n        print(week_day+7)\n    else:\n        print(week_day+week_rem)  \n","#20 \u30bd\u30fc\u30b7\u30e3\u30eb\u30b2\u30fc\u30e0\n\nA, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range (1, 1+C):\n        coin += A\n        \n        if day % 7 == 0:\n                coin += B\n        if coin >= C:\n                break\n\nprint(day)\n","A, B, C = map(int, input().split())\nn = 0 \ntemp = 0 \nwhile temp < C:\n\tn = n + 1\n\tif n % 7 == 0:\n\t\ttemp = temp + A + B\n\telse:\n\t\ttemp = temp + A\n\nprint(n)\n","a, b, c = map(int, input().split())\nans = c\/\/(a*7+b)*7+min((c%(a*7+b)+a-1)\/\/a,7)\nprint(ans)\n","A,B,C = map(int, input().split())\n\ncoin = 0\nfor day in range(1, C+1):\n    coin=coin+A\n    if day % 7 == 0:\n        coin = coin + B\n    if coin >= C:\n        break\nprint(day)\n","A,B,C=map(int,input().split())\ni=0\nwhile A*i+i\/\/7*B<C:\n    i+=1\nprint(i)\n","input_str = input(\"\")\ninput_elms = input_str.split(\" \")\nfor login_cnt in range(1, int(input_elms[2]) + 1):\n    if int(input_elms[0]) * login_cnt + int(input_elms[1]) * int(login_cnt\/7) >= int(input_elms[2]):\n        print(login_cnt)\n        break\n","import math\n\na,b,c = map(int,input().split())\nd=1\nr=0\nw=0\n\nw = c\/\/(7*a+b)\nr = c%(7*a+b)\nd = (math.ceil(r\/a))\n\nif d>7:\n    d = 7\nd += 7*w\nprint(d)\n","s = input().split()\nl = 0\nN = int(s[0])#\uff11\u65e5\nA = int(s[1])#\u30dc\u30fc\u30ca\u30b9\nB = int(s[2])#\u307b\u3057\u3044\nW = N*7+A\nif B%W == 0:\n  l = B\/\/W*7\nelse:\n  if int(B%W) > int(N*7):\n    l = (1+B\/\/W)*7\n  else:\n    if int(B%W%N) == 0:\n      l = B\/\/W*7+B%W\/\/N\n    else:\n      l = B\/\/W*7+B%W\/\/N+1\nprint(l)\n","a, b, c = map(int, input().split())\nweek = a * 7 + b\nd = c \/\/ week\nans = d * 7\nc -= d * week\n\ncnt = 0\nwhile(c > 0):\n    c -= a\n    ans += 1\n    cnt += 1\n    if(cnt == 7):\n        c -= b\n        cnt = 0\nprint(ans) \n","a,b,c=map(int,input().split())\nn=0\nfor i in range(1,c+1):\n    n+=a\n    if i%7==0:\n        n+=b\n    if n>=c:\n        break\nprint(i)\n\n","def main():\n    a,b,c = map(int,input().split())\n    target = c\n    daily_coin = a\n    weekly_coin = b\n    weekly_daily_total_coin = 7 * a + b\n    counter = 0\n\n    counter += (target \/\/ weekly_daily_total_coin) * 7\n    target %= weekly_daily_total_coin\n    #print(counter,target)\n    temp = 0\n    if target % daily_coin != 0 :\n        temp += 1\n    counter += min(target \/\/ daily_coin + temp,7)\n    print(counter)\n\n\n\nif __name__ == '__main__':\n    main()\n\n","A,B,C=map(int,input().split())\nsum=0\ni=0\nwhile True:\n    sum+=A\n    i+=1\n    if sum>=C:\n        print(i)\n        break\n    if i%7==0:\n        sum+=B\n        if sum>=C:\n            print(i)\n            break\n","a,b,c=input().split()\na=int(a)\nb=int(b)\nc=int(c)\n\ni=0;\nwhile c>0:\n\ti=i+1\n\tc=c-a\n\tif i%7==0:\n\t\tc=c-b\nprint(i)\n\n","a,b,c=map(int,input().split())\nd=c\/\/(a*7+b)*7\nc%=a*7+b\ne=0\nwhile c>0 and e<7:\n    d+=1\n    c-=a\n    e+=1\nprint(d)\n","def eval(A, B, C):\n    rest = C\n    count = 0\n    \n    while True:\n        for i in range(7):\n            rest -= A\n            if i == 6:\n                rest -= B\n                \n            count += 1\n            if rest <= 0:\n                return count\n\n\nA, B, C = tuple(map(int, input().split()))\nprint(eval(A, B, C))\n","# coding: utf-8\n# Your code here!\n\nA,B,C =map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","A,B,C = map(int,input().split())\n\ncoin=0\nfor day in range(1, C+1):\n    coin+=A\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n","# coding: utf-8\n# Your code here!\n\nA, B, C = map(int, input().split())\n\nd = 0\ncnt = 0\nwhile True:\n   d += 1\n   if d % 7 == 0:\n      cnt += (A + B)\n   else:\n      cnt += A\n   if cnt >= C:\n      print(d)\n      break\n\n","A,B,C = map(int,input().split())\nx = 0\ny = 0\nwhile x < C:\n    y += 1\n    if y%7 == 0:\n        x += B\n    x += A\nprint(y)\n","A,B,C = map(int,input().split())\n\ncoin=0\nfor day in range(1, C+1):\n    coin+=A\n    #\u6708\u66dc\u65e5\u304b\u3089\u65e5\u66dc\u65e5\u307e\u3067 7 \u65e5\u9023\u7d9a\u3067\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\n    if day % 7 == 0:\n        coin+=B\n    if coin >= C: break\n\nprint(day)\n\n","A, B, C = map(int,input().split())\n\ncoin = 0\nfor day in range(1, C+1):\n    coin += A\n    if day % 7 == 0:\n        coin += B\n    if coin >= C:\n        break\nprint(day)\n","a,b,c = map(int,input().split())\n\nok = 100000000\nng = 0\nwhile ok - ng > 1:\n    m = (ok + ng) \/\/ 2\n    ge = m * a + (m \/\/ 7) * b\n    if ge >= c:\n        ok = m\n    else:\n        ng = m\nprint(ok)\n","a, b, c = map(int, input().split())\nd, s = 0, 0\n\nwhile s < c:\n    d += 1\n    if d % 7 == 0:\n        s += b\n    s += a\n\nprint(d)\n","A,B,C=map(int,input().split())\ns=0\nsum=0\nwhile 1:\n    sum+=A\n    s+=1\n    if s%7==0:\n        sum+=B\n    if sum>=C:\n        break\nprint(s)\n","A,B,C=map(int,input().split())\ns=7*A+B\nw=C\/\/s\nD=C%s\n\nif D<7*A :\n    d=-(-D\/\/A)\nelif 0<=D-7*A and D-7*A<B :\n    d=7\n    \nprint(7*w+d)\n","A, B, C = map(int, input().split())\ncoin = 0\nday = 1\nwhile coin < C :\n    coin += A\n    if day % 7 == 0 :\n        coin += B\n    day += 1\nprint(day-1)\n","a,b,c=map(int,input().split())\ni=1\nwhile 1:\n    c=c-a\n    if i%7==0:\n        c=c-b\n    if c<=0:\n        break\n    i=i+1\nprint(i)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day%7 ==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(day)\n\n","a,b,c = map(int,input().split())\n\nd = 0\ns = 0\nwhile s < c:\n    d += 1\n    if d%7 == 0:\n        s += b\n    s += a\nprint(d)\n\n","# -*- coding: utf-8 -*-\n\"\"\"\nSocial Game\nhttp:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0652\n\n\"\"\"\nimport sys\nfrom math import ceil\n\ndef solve(a, b, c):\n    q, r = divmod(c, (a*7 + b))\n    return q * 7 + min(ceil(r \/ a), 7)\n\n\ndef main(args):\n    a, b, c = map(int, input().split())\n    ans = solve(a, b, c)\n    print(ans)\n\n\nif __name__ == '__main__':\n    main(sys.argv[1:])\n\n","a,b,c=map(int,input().split())\nd=0\ns=0\nwhile s<c:\n    d+=1\n    if d%7==0:\n        s+=b\n    s+=a\nprint(d)\n\n","a,b,c=map(int,input().split())\nd=0\nwhile c>0:\n    c=c-a\n    d=d+1\n    if d%7==0:\n        c=c-b\n    \nprint(d)\n","A,B,C=map(int,input().split())\nD=0\nE=0\nwhile True:\n    D = D+1\n    E = E+A\n    if D%7==0:\n        E = E+B\n    if E>=C:\n        print(D)\n        break\n","a,b,c=map(int,input().split())\nx=c\/\/(7*a+b)\nr=c-(7*a+b)*x\nt=r\/\/a\nif c%(7*a+b)!=0:\n    if r>=7*a:\n        print(7*x+7)    \n    else:\n        if r%a!=0:\n            print(7*x+t+1)\n        else:\n            print(7*x+t)\nelse:\n    print(7*x)\n","a, b, c = map(int, input().split())\n\ncoin=0\nfor day in range(1, c+1):\n    coin+=a\n    \n    if day % 7 == 0:\n        coin+=b\n    if coin >= c: break\n\nprint(day)\n","inputText = input().split()\na = int(inputText[0])\nb = int(inputText[1])\nc = int(inputText[2])\nweek = a*7+b\nweeks = int(c \/week)\nremain = c % week\ntotalday = weeks * 7\ntotalday += int(remain\/a)\ntotalday2 = (int(c\/week)+1)*7\nif remain%a != 0:\n    totalday +=1\nprint(min(totalday,totalday2))\n\n","\na,b,c=map(int,input().split())\n#b=int(input())\n#c=int(input())\nday=0\ncnt=0\nwhile(True):\n    day+=1\n    #print(day)\n    #print(c)\n    if day%7==0:\n        c-=b\n    c-=a\n    if c<=0:\n        break\nprint(day)\n","a,b,c=map(int,input().split())\nif c<(7*a+b):\n    if c<=6*a:\n        if c%a==0:\n            print(c\/\/a)\n        else:\n            print(c\/\/a+1)\n    else:\n        print(7)\nelse:\n    if c%(7*a+b)==0:\n        print(int(7*c\/(7*a+b)))\n    else:\n        if (c%(7*a+b))<=6*a:\n            if c%(7*a+b)%a==0:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a))\n            else:\n                print(int(c\/\/(7*a+b)*7+(c%(7*a+b))\/\/a)+1)\n        else:\n            print(int(c\/\/(7*a+b)*7+7))\n","a,b,c=map(int,input().split())\n\nd=0\ns=0\nwhile s<c:\n    d +=1\n    if d%7==0:\n        s +=b\n    s +=a\nprint(d)\n","a,b,c=map(int,input().split())\nnowpoint=0\nday=0\nwhile 1:\n    if c-nowpoint<=a*6:\n        day+=(c-nowpoint+a-1)\/\/a\n        break\n    elif c-nowpoint<=a*7+b:\n        day+=7\n        break\n    day+=7\n    nowpoint+=a*7+b\nprint(day)\n","A,B,C = map(int, input().split())\n\nans = 0\nwhile C > 0:\n    ans += 1\n    C -= A\n    if ans % 7 == 0:\n        C -= B\n\nprint(ans)\n","a,b,c=map(int,input().split())\nans=7\nw=7*a+b\nif c<=6*a:\n    if c%a==0:\n        ans=c\/\/a\n    else:\n        ans=c\/\/a+1\nelse:\n    if c>w:\n        ans+=(c\/\/w-1)*7\n        c-=c\/\/w*w\n        if c%a==0 and c<=6*a:\n            ans+=c\/\/a\n        else:\n            if 6*a<c<=7*a+b:\n                ans+=7\n            else:\n                ans+=c\/\/a+1\nprint(ans)\n","a,b,c=(int(x) for x in input().split())\nn=0\ni=0\nwhile n<c:\n    n+=a\n    i+=1\n    if i%7==0:\n        n+=b;\nprint(i)\n","day=0\nsum=0\n\na,b,c=map(int,input().split())\n\nwhile True:\n    day+=1\n    \n    if day%7==0:\n        sum+=(a+b)\n    else:\n        sum+=a\n    \n    if sum>=c:\n        print(day)\n        break\n","import math\n\n(A, B, C) = list(map(int, input().split()))\ncnt = 0\ncoin = 0\n\nif A*7 < C:\n    if A*7+B >= C:\n        cnt = 7\n    else:\n        week_num = math.floor(C \/ (A*7+B))\n        cnt = week_num * 7\n        coin = week_num * (A*7+B)\n\n        if A*7 < C - coin:\n            cnt += 7\n        else:\n            cnt += math.ceil((C - coin) \/ A)\nelse:\n    cnt += math.ceil((C - coin) \/ A)\n    \nprint(cnt)\n\n","a, b, c = map(int, input().split())\n\nans = c \/\/ (a * 7 + b) * 7\nc %= a * 7 + b\nans += min(7, (c + a - 1) \/\/ a)\n\nprint(ans)\n","A,B,C=map(int,input().split())\ni=1\nwhile A*i + i\/\/7*B < C:\n    i+=1\nprint(i)\n","def main():\n    inp_line = input().split()\n    \n    login_coin = int(inp_line[0])       # \u30ed\u30b0\u30a4\u30f3\u306e\u5ea6\u306b\u5f97\u3089\u308c\u308b\u30b3\u30a4\u30f3\n    add_coin = int(inp_line[1])         # \u9031\u30dc\u30fc\u30ca\u30b9\u3067\u8ffd\u52a0\u3067\u5f97\u3089\u308c\u308b\u30b3\u30a4\u30f3\n    need_coin = int(inp_line[2])        # \u5c11\u306a\u304f\u3068\u3082\u5fc5\u8981\u306a\u30b3\u30a4\u30f3\u306e\u679a\u6570\n    \n    # \u5165\u529b\u30c1\u30a7\u30c3\u30af\n    if not(1 <= login_coin <= 1000)\\\n       or not(0 <= add_coin <= 1000)\\\n       or not(1 <= need_coin <= 10 ** 6):\n        print(\"\u5165\u529b\u304c\u4e0d\u6b63\u3067\u3059\u3002\")\n        return\n\n    login_count = 0\n    coin = 0\n    while True:\n        login_count += 1\n        coin += login_coin\n        # 7\u65e5Login\n        if login_count % 7 == 0:\n            coin += add_coin\n\n        if coin >= need_coin:\n            break\n\n    print(login_count)\n\nmain()\n","import math\nA, B, C = map(int, input().split())\nweek = C \/\/ (A * 7 + B)\nnum = math.ceil(C % (A * 7 + B) \/ A)\nif num > 7 :\n    num = 7\nprint(week * 7 + num)\n","a,b,c=map(int,input().split())\nif c%(a*7+b)<=7*a:\n    print(c\/\/(a*7+b)*7-(-1*(c%(a*7+b)))\/\/a)\nelse:print(-1*((-1*c)\/\/(a*7+b))*7)\n","a,b,c=input().split()\nd = int(a)*7+int(b) #\u4e00\u9031\u9593\u3067\u624b\u306b\u5165\u308b\u30b3\u30a4\u30f3\ne = int(c)\/\/d #\u5fc5\u8981\u306a\u9031\u306e\u6570\nf = int(c)-d*e #\u6b8b\u308a\u306e\u30b3\u30a4\u30f3\nif f<=6*int(a) and f%int(a)>0 : g=f\/\/int(a)+1\nelif f<=6*int(a) and f%int(a)<=0 : g=f\/int(a)\nelse : g=7\nprint(int(e*7+g))\n","a,b,c=map(int,input().split())\nd=int(a*7+b)\ne=int(c%d)\nif c<d:\n    if c%a==0:\n        if c\/a>=7:\n            print(7)\n        else:\n            print(int(c\/a))\n    else:\n        if c\/a>=6:\n            print(7)\n        else:\n            print(int(c\/a)+1)\nelse:\n    if e==0:\n        print(int(c\/d)*7)\n    else:\n        if e%a==0:\n            if e\/a>=7:\n                print(int(c\/d)*7+7)\n            else:\n                print(int(c\/d)*7+int(e\/a))\n        else:\n            if e\/a>=6:\n                print(int(c\/d)*7+7)\n            else:\n                print(int(c\/d)*7+int(e\/a)+1)\n            \n    \n","A,B,C=map(int,input().split())\n\ncoin=0\nfor i in range(1,C+1):\n    coin+=A\n    if i%7==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(i)\n","A, B, C = map(int, input().split())\ncoin = 0\ndate = 0\nwhile coin < C:\n    date += 1\n    coin += A\n    if date%7 == 0:\n        coin += B\nprint(date)\n","import sys\nfrom math import ceil\n\nsys.setrecursionlimit(100000)\nA, B, C = list(map(int, input().split()))\n\nif A * 7 >= C:\n    print(ceil(C\/A))\n    exit()\n\ncur = C\ncount = 0\ncount_i = 0\nwhile cur > 0:\n    count += 1\n    count_i += 1\n    if count_i == 7:\n        count_i = 0\n        cur -= B\n    cur -= A\n\nprint(count)\n","A,B,C=map(int,input().split())\ncoin=0\nfor day in range(1,C+1):\n    coin += A\n    if day % 7 == 0:\n        coin +=B\n    if coin >= C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nn = 0\ncount = 0\nwhile True:\n    n += 1\n    if n % 7 == 0:\n        count += (a+b)\n    else:\n        count += a\n    if count >= c:\n        print(n)\n        break\n","A,B,C=map(int,input().split())\nif C<7*A+B:         #1\u9031\u9593\u76ee\u3067\u304a\u308f\u308b\n    if  A*7<C and C<A*7+B: #\u5b9f\u306f1\u9031\u76ee\u306e\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n        print(7)\n    else:    \n        if C%A==0:          \n            print(C\/\/A)\n        else:               #\u3042\u307e\u308a\u304c\u3042\u3063\u305f\u3089\uff0b\uff11\n            print(C\/\/A+1) \nelse:                       #2\u9031\u9593\u76ee\u4ee5\u964d\n    if C%((7*A)+B)==0:              #\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n        print((C\/\/((7*A)+B))*7)\n    else :\n        if C%((7*A)+B)>=7*A and C%((7*A)+B)<7*A+B: #\u5b9f\u306f\u65e5\u66dc\u65e5\u306b\u7d42\u308f\u308b\n            print((C\/\/((7*A)+B)+1)*7)\n        else:\n            if (C%((7*A)+B))%A==0 :\n                print(((C\/\/((7*A)+B))*7)+((C%((7*A)+B))\/\/A))\n            else:                       #\u4f59\u308a\u304c\u3042\u3063\u305f\u3089+\uff11\n             print(((C\/\/((7*A)+B))*7)+((C%((7*A)+B)))\/\/A+1)\n    \n","def main():\n    a, b, c = map(int, input().split())\n    w = a * 7 + b\n    ans = c \/\/ w * 7\n    c = c % w\n    d = c \/\/ a\n    if c % a > 0:\n        d += 1\n    if d > 7:\n        d = 7\n    ans += d\n    print(ans)\n\nif __name__ == '__main__':\n  main()\n\n","a,b,c = map(int,input().split())\n\nday=0\ncoin=0\n\nwhile coin<c:\n    day+=1\n    coin+=a\n    if day%7==0:\n        coin+=b\n        \n    \nprint(day)\n","a,b,c = map(int,input().split())\n\ntot = 0\nd = 0\nwhile tot < c:\n  d+=1\n  tot += a\n  if d%7 == 0:\n    tot += b\nprint(d)\n\n","a,b,c = map(int,input().split())\nx = 0\nx += c \/\/ (a*7 + b)*7\nc %= (a*7 + b)\nx += min(7,c\/\/a)\nif c % a and c\/\/a < 7:\n  x += 1\nprint(x)\n","# AOJ Volume6 0652\n# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=0652\n\nA, B, C = list(map(int, input().split()))\n\ncoins = 0\nday = 0\nwhile coins < C:\n    day += 1\n    coins += A\n    if day % 7 == 0:\n        coins += B\nprint(day)\n","import math\n\na,b,c = map(int,input().split())\n\nx = c \/\/ (7*a + b)\ny = c - (7*a + b)*x\nz = math.ceil(y\/a)\n\nif y > 6 * a:\n    print(7 * (x + 1))\nelse:\n    print(7 * x + z)\n","A,B,C=map(int,input().split())\nx=A*7+B\ny=C\/\/(A*7+B)\nz=x*y\nw=C-z\n\nif (A*7)<w<x:\n    print((y+1)*7)\nelse:\n    coin=0\n    day=0\n    while coin<w:\n        coin+=A\n        day+=1\n    print(y*7+day)\n\n","A,B,C = map(int,input().split())\nday=0\ncoin=0\n\nwhile True:\n    if coin>=C:\n        break\n    day+=1\n    coin+=A\n    if day%7==0:\n        coin+=B\nprint(day)\n","A,B,C=map(int,input().split())\n\ncoin=0\nfor day in range(1,C+1):\n    coin+=A\n    if day%7==0:\n        coin+=B\n    if coin>=C:\n        break\nprint(day)\n","a, b, c = map(int, input().split())\nd = 0\ns = 0\nwhile s < c:\n    d += 1\n    if d%7 == 0:\n        s += b\n    s += a\nprint(d)\n","a, b, c = map(int, input().split())\nq, r = divmod(c, a*7+b)\ns = min(7, (r+a-1)\/\/a)\nprint(7*q + s)\n\n"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>900<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Takahashi has decided to give a string to his mother.<\/p>\n<p>The <em>value<\/em> of a string <var>T<\/var> is the length of the longest common subsequence of <var>T<\/var> and <var>T'<\/var>, where <var>T'<\/var> is the string obtained by reversing <var>T<\/var>.\nThat is, the value is the longest length of the following two strings that are equal: a subsequence of <var>T<\/var> (possibly non-contiguous), and a subsequence of <var>T'<\/var> (possibly non-contiguous).<\/p>\n<p>Takahashi has a string <var>S<\/var>. He wants to give her mother a string of the highest possible value, so he would like to change at most <var>K<\/var> characters in <var>S<\/var> to any other characters in order to obtain a string of the highest possible value.\nFind the highest possible value achievable.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq |S| \\leq 300<\/var><\/li>\n<li><var>0 \\leq K \\leq |S|<\/var><\/li>\n<li><var>S<\/var> consists of lowercase English letters.<\/li>\n<li><var>K<\/var> is an integer.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>S<\/var>\n<var>K<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the highest possible value achievable.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>abcabcabc\n1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>7\n<\/pre>\n<p>Changing the first character to <code>c<\/code> results in <code>cbcabcabc<\/code>.\nLet this tring be <var>T<\/var>, then one longest common subsequence of <var>T<\/var> and <var>T'<\/var> is <code>cbabcbc<\/code>, whose length is <var>7<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>atcodergrandcontest\n3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>15\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 900 points\n\n\nProblem StatementTakahashi has decided to give a string to his mother.\nThe value of a string T is the length of the longest common subsequence of T and T', where T' is the string obtained by reversing T.\nThat is, the value is the longest length of the following two strings that are equal: a subsequence of T (possibly non-contiguous), and a subsequence of T' (possibly non-contiguous).\nTakahashi has a string S. He wants to give her mother a string of the highest possible value, so he would like to change at most K characters in S to any other characters in order to obtain a string of the highest possible value.\nFind the highest possible value achievable.\n\n\n\n\nConstraints\n1 \\leq |S| \\leq 300\n0 \\leq K \\leq |S|\nS consists of lowercase English letters.\nK is an integer.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nS\nK\n\n\n\n\n\nOutputPrint the highest possible value achievable.\n\n\n\n\n\n\nSample Input 1abcabcabc\n1\n\n\n\n\n\nSample Output 17\n\nChanging the first character to c results in cbcabcabc.\nLet this tring be T, then one longest common subsequence of T and T' is cbabcbc, whose length is 7.\n\n\n\n\n\nSample Input 2atcodergrandcontest\n3\n\n\n\n\n\nSample Output 215\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>900<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>Takahashi has decided to give a string to his mother.<\/p>\n<p>The <em>value<\/em> of a string <var>T<\/var> is the length of the longest common subsequence of <var>T<\/var> and <var>T'<\/var>, where <var>T'<\/var> is the string obtained by reversing <var>T<\/var>.\nThat is, the value is the longest length of the following two strings that are equal: a subsequence of <var>T<\/var> (possibly non-contiguous), and a subsequence of <var>T'<\/var> (possibly non-contiguous).<\/p>\n<p>Takahashi has a string <var>S<\/var>. He wants to give her mother a string of the highest possible value, so he would like to change at most <var>K<\/var> characters in <var>S<\/var> to any other characters in order to obtain a string of the highest possible value.\nFind the highest possible value achievable.<\/p>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li><var>1 \\leq |S| \\leq 300<\/var><\/li>\n<li><var>0 \\leq K \\leq |S|<\/var><\/li>\n<li><var>S<\/var> consists of lowercase English letters.<\/li>\n<li><var>K<\/var> is an integer.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>S<\/var>\n<var>K<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the highest possible value achievable.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>abcabcabc\n1\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>7\n<\/pre>\n<p>Changing the first character to <code>c<\/code> results in <code>cbcabcabc<\/code>.\nLet this tring be <var>T<\/var>, then one longest common subsequence of <var>T<\/var> and <var>T'<\/var> is <code>cbabcbc<\/code>, whose length is <var>7<\/var>.<\/p>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>atcodergrandcontest\n3\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>15\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 900 points\n\n\nProblem StatementTakahashi has decided to give a string to his mother.\nThe value of a string T is the length of the longest common subsequence of T and T', where T' is the string obtained by reversing T.\nThat is, the value is the longest length of the following two strings that are equal: a subsequence of T (possibly non-contiguous), and a subsequence of T' (possibly non-contiguous).\nTakahashi has a string S. He wants to give her mother a string of the highest possible value, so he would like to change at most K characters in S to any other characters in order to obtain a string of the highest possible value.\nFind the highest possible value achievable.\n\n\n\n\nConstraints\n1 \\leq |S| \\leq 300\n0 \\leq K \\leq |S|\nS consists of lowercase English letters.\nK is an integer.\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nS\nK\n\n\n\n\n\nOutputPrint the highest possible value achievable.\n\n\n\n\n\n\nSample Input 1abcabcabc\n1\n\n\n\n\n\nSample Output 17\n\nChanging the first character to c results in cbcabcabc.\nLet this tring be T, then one longest common subsequence of T and T' is cbabcbc, whose length is 7.\n\n\n\n\n\nSample Input 2atcodergrandcontest\n3\n\n\n\n\n\nSample Output 215\n\n\n","solve_rate":0.518469657,"codenet_problem_id":"p03430","input_testcases":{"37":"tsetoocdnargredocta\n2","71":"osetntcdnasgsedoctb\n7","4":"abcabbbcc\n0","10":"cccb`acba\n0","93":"cbbcaacaa\n3","53":"caaaacabc\n2","92":"ssgtndcsnaqreedocoa\n7","55":"osetntcdnasgsedoctb\n4","2":"abcabbacc\n0","73":"ssetndcsnaqgredocoa\n5","83":"ssgtndcsnaqreedocoa\n5","99":"tsrnnocdnadgredtbsa\n0","89":"asbtdergdandconnrst\n1","41":"ascodergrandcontest\n5","31":"tsetntcdnargredocoa\n1","100":"abcabcabc\n1","67":"btcodesgsandctnteso\n7","101":"abcabcabc\n1","88":"cbbcaacaa\n2","94":"tsrnnocdnadgredtbsa\n1","1":"tsetnocdnargredocta\n3","24":"cbbabbbca\n0","3":"tsetnocdnargredocta\n0","9":"atcodergrandcontest\n5","21":"atcodergrandcontest\n4","49":"cccb`acba\n2","59":"tsetnocdnargredncsa\n6","86":"osetntcdnosgsedactb\n3","58":"caaaacabc\n4","11":"ssetnscdnaqgredocoa\n5","76":"osetntcdnosgsedactb\n7","27":"abcabb`cc\n2","12":"ssgtndcsnaqreedocoa\n8","90":"tsetnocdnosgsedactb\n3","77":"trdtoocdnargredodta\n4","0":"abcabbacc\n1","98":"cbbaaacac\n3","63":"ssetnscdnargredocoa\n5","32":"cbbabbbda\n0","34":"cbaabcabc\n1","7":"tsetntcdnargredocoa\n0","18":"cbcabbbca\n0","75":"ascndergdandcontrst\n6","17":"atcodergrandcontest\n0","15":"bdabacacc\n0","42":"ccbb`acba\n2","13":"ssgtnscdnaqreedocoa\n14","97":"ssgtnscdnaqreedocoa\n7","95":"tsetnocdnosgsedactb\n2","48":"tsetnocdnargredocsa\n5","65":"tsdtnocdnargredncsa\n6","22":"abcabb`cc\n1","8":"atcodergrandcontest\n6","19":"atcoderfrandcontest\n0","78":"ssetndcsnaqrgedocoa\n5","44":"tsetoocdnargredocta\n3","6":"tsetnocdnargredocta\n1","64":"caabacabc\n2","102":"atcodergrandcontest\n3","51":"atcodergrandcootest\n3","28":"tsetnocdnasgredocta\n2","16":"atcndreertodcanthro\n1","40":"cbaaacabc\n1","43":"osetntcdnasgredoctb\n2","52":"tsetntcdnargredocoa\n5","45":"`ccbbbabc\n0","47":"caaaacabc\n1","46":"tsetntcdnargredocoa\n4","91":"trdcootdnargredodta\n1","54":"tsetnocdnargredncsa\n5","50":"osetntcdnasgsedoctb\n2","82":"trdtoocdnargredodta\n1","36":"osetntcdnasgredocta\n2","61":"btcodesgsandctnteso\n4","81":"osetntcdnosgsedactb\n2","14":"dsegnoccnostsedattb\n1","39":"tsetntcdnargredocoa\n2","26":"cbaabcabc\n2","84":"cbbcaacaa\n1","33":"tsetnocdnarfredocta\n1","85":"asbndergdandcontrst\n1","29":"tsetoocdnargredocta\n1","80":"asbndergdandcontrst\n6","38":"`bcbbbacc\n1","66":"ccab`ccaa\n0","72":"atdodergrandcootdrt\n4","69":"caaaacbbc\n2","30":"`bcbbbacc\n0","70":"ascndergrandcontdst\n6","60":"cccb`acaa\n0","68":"atcodergrandcootdrt\n4","20":"abcabcabc\n2","56":"atcodergrandcootdst\n3","5":"tsetnocdnargredocta\n2","62":"atcodergrandcootdrt\n3","79":"cbbcaaaac\n1","96":"trdcootdnaqgredodta\n1","23":"`bcabbbcc\n0","57":"ssetntcdnargredocoa\n5","35":"cc`bbacba\n2","74":"cbbcaaaac\n2","25":"tsetnocdnarfredocta\n0","87":"atdodergrandcootdrt\n1"},"output_testcases":{"37":"13\n","71":"17\n","4":"5\n","10":"4\n","93":"8\n","53":"9\n","92":"17\n","55":"15\n","2":"6\n","73":"13\n","83":"13\n","99":"7\n","89":"9\n","41":"16\n","31":"9\n","100":"7\n","67":"17\n","101":"7\n","88":"8\n","94":"9\n","1":"15\n","24":"7\n","3":"9\n","9":"16\n","21":"15\n","49":"7\n","59":"17\n","86":"13\n","58":"9\n","11":"14\n","76":"17\n","27":"8\n","12":"18\n","90":"13\n","77":"15\n","0":"8\n","98":"9\n","63":"15\n","32":"5\n","34":"9\n","7":"7\n","18":"6\n","75":"17\n","17":"9\n","15":"3\n","42":"7\n","13":"19\n","97":"16\n","95":"13\n","48":"16\n","65":"17\n","22":"6\n","8":"17\n","19":"9\n","78":"13\n","44":"15\n","6":"11\n","64":"9\n","102":"15\n","51":"15\n","28":"11\n","16":"12\n","40":"9\n","43":"11\n","52":"15\n","45":"6\n","47":"8\n","46":"13\n","91":"13\n","54":"16\n","50":"13\n","82":"13\n","36":"11\n","61":"15\n","81":"13\n","14":"10\n","39":"11\n","26":"9\n","84":"6\n","33":"11\n","85":"9\n","29":"11\n","80":"17\n","38":"7\n","66":"5\n","72":"15\n","69":"8\n","30":"5\n","70":"17\n","60":"4\n","68":"15\n","20":"8\n","56":"15\n","5":"13\n","62":"15\n","79":"7\n","96":"11\n","23":"5\n","57":"15\n","35":"8\n","74":"8\n","25":"9\n","87":"13\n"},"n_missing":0,"programs":["def lcs(str1, str2):\n    '''\u6587\u5b57\u5217str1, str2\u306e\u6700\u9577\u5171\u901a\u90e8\u5206\u5217(Lowest Common Subsequence, LCS)\u3092\u6c42\u3081\u308b\n    \u8a08\u7b97\u91cfO(len(str1)*len(str2))  \n    '''\n    dp = [[0]*(len(str2) + 1) for _ in range(len(str1) + 1)]\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n\n    return dp[len(str1)][len(str2)]\n\n\ns = input()\nn = len(s)\nk = int(input())\n\nans = 0\nfor i in range(n):\n    t = s[0:i]\n    rev_t = s[i+1:][::-1]\n    min_len = min(len(t), len(rev_t))\n    ans = max(min(lcs(t, rev_t) + k, min_len) * 2 + 1, ans)\n\nfor i in range(n + 1):\n    t = s[0:i]\n    rev_t = s[i:][::-1]\n    min_len = min(len(t), len(rev_t))\n    ans = max(min(lcs(t, rev_t) + k, min_len) * 2, ans)\n\nprint(ans)","def getdp(i, j, k):\n    if i < 0: return -1\n    if j > k: return 0\n    if j == k: return 1\n    if dp[i][j][k] != -1: return dp[i][j][k]\n    res = -1\n    if s[j] == s[k]: res = max(res, getdp(i, j+1, k-1)+2)\n    else: res = max(res, getdp(i-1, j+1, k-1)+2, getdp(i, j+1, k), getdp(i, j, k-1))\n    dp[i][j][k] = res\n    return res\n\ninput = raw_input\nrange = xrange\ns = input()\nn = len(s)\nk = int(input())\ndp = [[[-1]*n for j in range(n)] for i in range(k+1)] # score [j..k], i more free slots\nprint(getdp(k, 0, n-1))","def get_ind(l, r):\n    mod = 3\n    return OFFSET * (l % mod) + r\n\ns = input()\nn = len(s)\nk = int(input())\n\ndp = [[0] * ((n + 1) * 3) for i in range(k + 1)]\nOFFSET = n + 1\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][get_ind(i, i + 1)] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][get_ind(l, r)] = max(2 + dp[ki][get_ind(l + 1, r - 1)], dp[ki][get_ind(l, r)])\n            else:\n                dp[ki][get_ind(l, r)] = max(dp[ki][get_ind(l + 1, r)], dp[ki][get_ind(l, r - 1)], dp[ki][get_ind(l, r)])\n                if ki - 1 >= 0:\n                    dp[ki][get_ind(l, r)] = max(dp[ki - 1][get_ind(l + 1, r - 1)] + 2, dp[ki][get_ind(l, r)])\n\nans = 0\nfor i in range(k + 1):\n    for j in range(3 * (n + 1)):\n        ans = max(ans, dp[i][j])\nprint(ans)","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1)] for _ in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][i+1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][i+l][k] = dp[i+1][i+l-1][k] + 2\n            else:\n                dp[i][i+l][k] = max(dp[i+1][i+l][k], dp[i][i+l-1][k])\n                if k>=1:\n                    dp[i][i+l][k] = max(dp[i][i+l][k], dp[i+1][i+l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = [[[0 for _ in range(K+1)]for _ in range(N)]for _ in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\ndef test():\n    i = I()\n    li = LI()\n    lsi = LSI()\n    si = LS()\n    print(i)\n    print(li)\n    print(lsi)\n    print(si)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\n\ndp = [[[0] * (K+1) for i in range(N+2)] for j in range(N+2)]\nans = 0\n\nfor i in range(1,N+1):\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\nprint (ans)\n                \n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(max(ansls))","s = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tfor k in range(K+1):\n\t\tdp[i][i][k] = 1\n\t\tif i < n-1 and s[i] == s[i+1]:\n\t\t\tdp[i][i+1][k] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0 and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(ans)","s = input()\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","s = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tfor k in range(K+1):\n\t\tdp[i][i][k] = 1\n\t\tif i < n-1 and s[i] == s[i+1]:\n\t\t\tdp[i][i+1][k] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0 and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nflg2 = 0\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if ans < max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg):\n    flg2 = flg\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg,ans)\nif flg2 == 1:\n  print(2\/0)\nprint(ans)","import sys\ns = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tdp[i][i][0] = 1\n\tif i < n-1:\n\t\tdp[i][i+1][0] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+2-i)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n#                 print(i,l,k)\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","def solve(s, k):\n    n = len(s)\n    if k >= n \/\/ 2:\n        return n\n    pdp = [[0] * (k + 1)]\n    for l in range(1, n + 1):\n        i = n - l\n        dp = [[0] * (k + 1) for _ in range(l + 1)]\n        dpr1, pdpr1 = dp[-1], [0] * (k + 1)\n        for r in range(l):\n            dpr, pdpr = dp[r], pdp[r - 1]\n            inc = 2 if r else 1\n            if s[i] == s[i + r]:\n                for p in range(k + 1):\n                    dp[r] = [c + inc for c in pdpr1]\n            else:\n                dpr[0] = max(pdpr[0], dpr1[0])\n                for p in range(1, k + 1):\n                    dpr[p] = max(pdpr[p], dpr1[p], pdpr1[p - 1] + inc)\n            dpr1, pdpr1 = dpr, pdpr\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","S = input()\nK = int(input())\nN = len(S)\n\n# MLE\u5bfe\u7b56\nif K * 2 >= N-1:\n    print(N)\n    exit()\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","import sys\ns = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tdp[i][i][0] = 1\n\tif i < n-1 and s[i] == s[i+1]:\n\t\tdp[i][i+1][0] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        dp4 = dp[cnt+1]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            dp5 = dp2[d-1]\n            dp6 = dp2[d-2]\n            dp7 = dp4[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp5[left],\n                    dp5[left+1], dp6[left+1]+plus)\n                dp7[left] = max(\n                    dp7[left], dp3[left], dp6[left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        dp4 = dp2[d-1]\n        dp5 = dp2[d-2]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp4[left], dp4[left+1], dp5[left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = ns()\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = list(ns())\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","input = raw_input\nrange = xrange\nn, m, h, v = map(int,input().split())\nremain = [n] * m\nind = 0\nfor i in range(h):\n    for odd in range(1, m, 2):\n        if remain[odd] % 2 == 1: break\n    else:\n        for odd in range(1, m, 2):\n            if remain[odd]: break\n        else: print(\"NO\"); exit()\n    if m == 1: print(\"NO\"); exit()\n    remain[odd]-= 1; remain[odd-1]-= 1\n\nif sum(x\/\/2 for x in remain) < v: print(\"NO\"); exit()\nprint(\"YES\")\ngrid = [[\".\"]*m for i in range(n)]\nfor j in range(0, m, 2):\n    placed = n - remain[j]\n    for i in range(placed):\n        grid[i][j] = \"<\"\n        grid[i][j+1] = \">\"\n    for i in range(placed, n, 2):\n        if i == n-1: break\n        grid[i][j] = \"^\"\n        grid[i+1][j] = \"v\"\n        v-= 1\n        if v == 0:\n            for row in grid: print(''.join(row))\n            exit()\n        if j == m-1: continue\n        grid[i][j+1] = \"^\"\n        grid[i+1][j+1] = \"v\"\n        v-= 1\n        if v == 0:\n            for row in grid: print(''.join(row))\n            exit()","def solve(s, k):\n    n = len(s)\n    if k >= n \/\/ 2:\n        return n\n    dpp = [[1] * (k + 1), [0] * (k + 1)]\n    for r in range(1, n):\n        dpc = [[0] * (k + 1) for _ in range(r + 2)]\n        dpc[r] = [1] * (k + 1)\n        for l in range(r - 1, -1, -1):\n            dpl, dpl1 = dpc[l], dpp[l + 1]\n            if s[l] == s[r]:\n                dpc[l] = [c + 2 for c in dpl1]\n            else:\n                dppl, dpcl1 = dpp[l], dpc[l + 1]\n                dpl[0] = max(dppl[0], dpcl1[0])\n                for p in range(1, k + 1):\n                    dpl[p] = max(dppl[p], dpcl1[p], dpl1[p - 1] + 2)\n        dpp = dpc\n\n    return dpp[0][k]\n\n\nprint(solve(input(), int(input())))\n","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = list(ns())\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and K == 0:\n  if s == t:\n    print(2)\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2\n    elif K:\n        dp[i][i+1][0] = 1\n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))","import numpy as np\n\n\ndef LCS_words(X,Y):\n    X,Y=\" \"+X,\" \"+Y\n    m,n=len(X),len(Y)\n    MAP=[[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            if Y[i]==X[j]:\n                MAP[i][j]=MAP[i-1][j-1]+1\n            else:\n                MAP[i][j]=max(MAP[i][j-1],MAP[i-1][j])\n    #print(np.array(MAP))\n    return MAP[n-1][m-1]\n\n\ns=input()\nk=int(input())\nbase=LCS_words(s,s[::-1])\nreverse=s[::-1]\n\nfor i in range(len(s)\/\/2):\n    if k==0:break\n    if [s[i],reverse[-i]]==[reverse[i],reverse[-i]]:\n        base +=2\n        k -=1\n\nprint(base+k)","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()\n","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1-i+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][i][j] for i in range(n+2) for j in range(K+1))\nprint(ans)","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = ns()\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][min(sll-1,K)]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][min(sll-1,K-1)]*2+2,ans)\nprint(ans)","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        if dp[i+1][j+1][k] < dp[i][j][k] + 1:\n          dp[i+1][j+1][k] = dp[i][j][k] + 1\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        dp4 = dp[cnt+1]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            dp5 = dp2[d-1]\n            dp6 = dp2[d-2]\n            dp7 = dp4[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp5[left],\n                    dp5[left+1], dp6[left+1]+plus)\n                dp7[left] = max(\n                    dp7[left], dp3[left], dp6[left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        dp4 = dp2[d-1]\n        dp5 = dp2[d-2]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp4[left], dp4[left+1], dp5[left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1-i+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)\n","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            for i in range(n-1):\n                dp[i][1][cnt] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][max(0,K-1)]*2+2,ans)\nprint(ans)","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp2[d-1][left],\n                    dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp3[left], dp2[d-2][left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp2[d-1][left], dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\n\nif N == 1:\n    ans = 1\nelif N == 2:\n    ans = 1\n    if S[1] == S[2]:\n        ans = 2\n    if K:\n        ans = 2\nelse:\n    dp1 = [[0]*(K+1) for _ in range(N+2)]\n    dp2 = [[0]*(K+1) for _ in range(N+2)]\n    for i in range(1, N+1):\n        dp1[i][0] = 1\n    for i in range(1, N):\n        dp2[i][0] = 1\n        if S[i] == S[i+1]:\n            dp2[i][0] = 2    \n        elif K:    \n            dp2[i][1] = 2\n    for s in range(3, N+1):\n        dp3 = [[0]*(K+1) for _ in range(N+2)]\n        for i in range(1, N-s+2):\n            j = i+s-1    \n            if S[i] == S[j]:\n                for k in range(K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], 2+dp1[i+1][k])\n            else:\n                dp3[i][0] = max(dp2[i+1][0], dp2[i][0], dp2[i+1][0])\n                for k in range(1, K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], dp1[i+1][k], 2+dp1[i+1][k-1])\n        '''\n        dp1 = [k[:] for k in dp2]\n        dp2 = [k[:] for k in dp3]\n        '''\n        dp1 = dp2[:]\n        dp2 = dp3[:]\n    ans = max(dp3[1][k] for k in range(K+1))\nprint(ans)\n'''\nMLE\u3057\u305f\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    dp[i][i+1][0] = 1\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2    \n    elif K:    \n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))\n'''   ","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[0][1][i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            for i in range(n-1):\n                dp[cnt][1][i] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[cnt][d][left] = max(\n                    dp[cnt][d][left], dp[cnt][d-1][left],\n                    dp[cnt][d-1][left+1], dp[cnt][d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp[cnt][d][left], dp[cnt][d-2][left+1]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[k][d][left] = max(\n                dp[k][d][left], dp[k][d-1][left], dp[k][d-1][left+1], dp[k][d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()","import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\n\"\"\"\n\u30fbreversed LCS = \u6700\u5927\u9577\u306e\u56de\u6587\n\u30fb(\u9577\u3055\u3001\u59cb\u70b9\u3001\u5909\u66f4\u30b3\u30b9\u30c8) -> opt value\n\"\"\"\n\nS = np.frombuffer(readline().rstrip(),'S1')\nN = len(S)\nK = int(readline())\n\ndp = [None] * (N+1) # \u9577\u3055 -> array\ndp[0] = None # \u81ea\u8eab\u306a\u3044\u306e\u3067\u4f7f\u308f\u306a\u3044\ndp[1] = np.zeros((N,K+10),np.int32); dp[1][:,0] = 1\nif N >= 2:\n    dp[2] = np.zeros((N-1,K+10),np.int32)\n    dp[2][:,0] = 1+(S[:-1]==S[1:])\n    dp[2][:,1] = 2\n\nfor n in range(3,N+1):\n    arr = np.zeros((N-n+1,K+10),np.int32)\n    # \u4e21\u7aef\u3092\u30de\u30c3\u30c1\u3057\u306a\u3044\u5834\u5408\n    np.maximum(arr,dp[n-1][:-1],out=arr)\n    np.maximum(arr,dp[n-1][1:],out=arr)\n    # \u4e21\u7aef\u3092\u30b3\u30b9\u30c8\u306a\u3057\u3067\u30de\u30c3\u30c1\u3055\u305b\u308b\u5834\u5408\n    match = (S[:-n+1]==S[n-1:])\n    np.maximum(arr,match[:,None]*(dp[n-2][1:-1]+2),out=arr)\n    # \u4e21\u7aef\u3092\u30b3\u30b9\u30c8\u3042\u308a\u3067\u30de\u30c3\u30c1\u3055\u305b\u308b\u5834\u5408\n    np.maximum(arr[:,1:],dp[n-2][1:-1,:-1]+2,out=arr[:,1:])\n    \n    dp[n] = arr\n\nanswer = dp[-1][0][:K+1].max()\nprint(answer)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\nprint(ans)","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1)] for _ in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][i+1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][i+l][k] = dp[i+1][i+l-1][k] + 2\n            else:\n                dp[i][i+l][k] = max(dp[i+1][i+l][k], dp[i][i+l-1][k])\n                if k>=1:\n                    dp[i][i+l][k] = max(dp[i][i+l][k], dp[i+1][i+l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","s = input()\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nimport sys\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\nif N == 1:\n    print (1)\n    sys.exit()\nelif N == 2:\n    if S[1] == S[2] or K > 0:\n        print (2)\n    else:\n        print (1)\n    sys.exit()\n\ndp = [[[0] * (K+1) for i in range(N+2)]]\nans = 0\n\nfor i in range(1,N+1):\n\n    dp.append( [[0] * (K+1) for i in range(N+2)] )\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\n    dp[i-1] = []\n\nprint (ans)\n                \n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\ns = S()\nn = len(s)\nk = I()\ndp = defaultdict(lambda:1)\nfor diff in range(1, n):\n    for l in range(n):\n        for m in range(k + 1):\n            r = l + diff\n            if r >= n:\n                continue\n            if r - l == 1:\n                dp[(l, r, m)] = 2 if s[l] == s[r] or m else 1\n            elif s[l] == s[r]:\n                dp[(l, r, m)] = dp[(l + 1, r - 1, m)] + 2\n            else:\n                dp[(l, r, m)] = max(dp[(l, r, m)], dp[(l + 1, r, m)], dp[(l, r - 1, m)])\n                if m:\n                    dp[(l, r, m)] = max(dp[(l, r, m)], dp[(l + 1, r - 1, m - 1)] + 2)\n\nprint(dp[(0, n - 1, k)])\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], max(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and k == 0:\n  if s == t:\n    print(2)\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\nprint(ans)","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","def solve(s, k):\n    n = len(s)\n    pdp = [[0] * (k + 1) for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for r in range(l, n):\n            dpr, dpr1 = dp[r], pdp[r - 1]\n            inc = 1 if l == r else 2\n            is_same = s[l] == s[r]\n            for p in range(k + 1):\n                if is_same:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    if p:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p], dpr1[p - 1] + inc)\n                    else:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p])\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = [[[0 for _ in range(K+1)]for _ in range(N)]for _ in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","def solve(s, k):\n    n = len(s)\n    dp = [[[0] * (k + 1) for _ in range(n)] for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dpl, dpl1 = dp[l], dp[l + 1]\n        for r in range(l, n):\n            dpr, dpr1 = dpl[r], dpl1[r - 1]\n            inc = 1 if l == r else 2\n            for p in range(k + 1):\n                if s[l] == s[r]:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    dpr[p] = max(dpl1[r][p], dp[l][r - 1][p])\n                    if p:\n                        dpr[p] = max(dpr[p], dpr1[p - 1] + inc)\n    return dp[0][-1][k]\n\n\nprint(solve(input(), int(input())))\n","s = input()\nn = len(s)\nk = int(input())\n\n\ndp = [[[0] * (n + 1) for i in range(n + 1)] for i in range(k + 1)]\nfor i in range(n):\n    dp[0][i][i + 1] = 1\n\nfor length in range(2, n + 1):\n    for l in range(n):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l][r] = max(2 + dp[ki][l + 1][r - 1], dp[ki][l][r])\n            else:\n                dp[ki][l][r] = max(dp[ki][l + 1][r], dp[ki][l][r - 1], dp[ki][l][r])\n                if ki - 1 >= 0:\n                    dp[ki][l][r] = max(dp[ki - 1][l + 1][r] + 2, dp[ki - 1][l][r - 1] + 2, dp[ki][l][r])\n\nprint(dp[-1][0][-1])","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(100):\n        table.append([0 for _ in range(100)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","s = input()\nk = int(input())\nn = len(s)\ndp = [[[0]*(n+1) for i in range(n+1)] for j in range(n+1)]\nfor j in range(k+1):\n    for i in range(n):\n        dp[i][i+1][j] = 1\nfor j in range(2,n+1):\n  for i in range(n+1-j):\n    for l in range(k+1):\n      jj = i+j\n      if s[i] == s[jj-1]:\n        dp[i][jj][l] = dp[i+1][jj-1][l]+2\n      else:\n        dp[i][jj][l] = max(dp[i+1][jj][l],dp[i][jj-1][l])\n        if l-1>=0:\n          dp[i][jj][l] = max(dp[i][jj][l],dp[i+1][jj-1][l-1]+2)\nans = 0\nfor i in range(k+1):\n  ans = max(ans,dp[0][n][i])\nprint(ans)","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\n\ndp = [[[0] * (K+1) for i in range(N+2)] for j in range(N+2)]\nans = 0\n\nfor i in range(1,N+1):\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\nprint (ans)\n                \n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","from collections import defaultdict\nS=raw_input()\nL=len(S)\nK=input()\n\ndp = defaultdict(lambda: 0)\n\nfor i in range(L):\n\tfor j in range(K+1):\n\t\tdp[(i,i,j)]=1\n\nfor i in range(1,L):\t\t\t#i:width\n\tfor j in range(1,L-i+1):\t#j:start point\n\t\tl=j\n\t\tr=j+i\n\t\tfor k in range(K+1):\n\t\t\tdp[(l,r,k)] = max(dp[(l+1,r,k)], dp[(l,r-1,k)]);\n\t\t\tif(S[l-1] == S[r-1]):\n\t\t\t\tdp[(l,r,k)] = max(dp[(l,r,k)], dp[(l+1,r-1,k)] + 2);\n\t\t\telse:\n\t\t\t\tif(k):\n\t\t\t\t\tdp[(l,r,k)] = max(dp[(l,r,k)], dp[(l+1,r-1,k-1)] + 2);\n\nprint dp[(1,L,K)]","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = [min(2*K+1,n)]\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ansls.append(max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg))\nprint(max(ansls))","S=input()\nK=int(input())\nS2=S[::-1]\nl=len(S)\n\ndp=[[0 for x in range(l+1)] for y in range(l+1)]\ntrace=[[0 for x in range(l+1)] for y in range(l+1)]\nfor i in range(l+1):\n  trace[i][0]=-1\n  trace[0][i]=-1\n\nfor i in range(l):\n  for j in range(l):\n    if S[i]==S2[j]:\n      dp[i+1][j+1]=dp[i][j]+1\n      trace[i+1][j+1]=1\n    elif dp[i+1][j] > dp[i][j+1]:\n      dp[i+1][j+1]=dp[i+1][j]\n      trace[i+1][j+1]=2\n    else:\n      dp[i+1][j+1]=dp[i][j+1]\n      trace[i+1][j+1]=3\ncnt=[0 for t in range(l+1)]\ndef tracedo(trace,a,b):\n  if trace[a][b]==-1:\n    return\n  elif trace[a][b]==2:\n    tracedo(trace,a,b-1)\n  elif trace[a][b]==3:\n    tracedo(trace,a-1,b)\n  else:\n    tracedo(trace,a-1,b-1)\n    cnt[a-1]=1\n  return\n\ntracedo(trace,l,l)\nans=0\nfor i in range(l):\n  if cnt[i]==0 and cnt[l-i-1]==0 and i!=(l-i-1):\n    ans+=2\n  elif cnt[i]==0 and cnt[l-i-1]==0 and i==(l-i-1):\n    ans+=1\nprint(dp[l][l]+min(ans,K*2))","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\n  for i in range(ls):\n    dp[i][i][0] = 1\n  for k in range(lk+1):\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        if s[i] == s[j]:\n          dp[i][j][k] = dp[i+1][j-1][k] + 2\n        elif k:\n          dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n\n  print(max(dp[0][ls-1]))\n  return\n\nsolve()","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K and dp[i+1][L-ind][k] == dp[i][L-ind-1][k]:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n        dp.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk = 2*lk - ls%2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = [min(2*K+1,n)]\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ansls.append(max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg))\nprint(max(ansls))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg,ans)\nprint(ans)","def solve(s, k):\n    n = len(s)\n    dp = [[[0] * (k + 1) for _ in range(n)] for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dpl, dpl1 = dp[l], dp[l + 1]\n        for r in range(l, n):\n            dpr, dpr1 = dpl[r], dpl1[r - 1]\n            inc = 1 if l == r else 2\n            for p in range(k + 1):\n                if s[l] == s[r]:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    dpr[p] = max(dpl1[r][p], dp[l][r - 1][p])\n                    if p:\n                        dpr[p] = max(dpr[p], dpr1[p - 1] + inc)\n    return dp[0][-1][k]\n\n\nprint(solve(input(), int(input())))\n","S=input()\nK=int(input())\nS2=S[::-1]\nl=len(S)\n\ndp=[[0 for x in range(l+1)] for y in range(l+1)]\ntrace=[[0 for x in range(l+1)] for y in range(l+1)]\nfor i in range(l+1):\n  trace[i][0]=-1\n  trace[0][i]=-1\n\nfor i in range(l):\n  for j in range(l):\n    if S[i]==S2[j]:\n      dp[i+1][j+1]=dp[i][j]+1\n      trace[i+1][j+1]=1\n    elif dp[i+1][j] > dp[i][j+1]:\n      dp[i+1][j+1]=dp[i+1][j]\n      trace[i+1][j+1]=2\n    else:\n      dp[i+1][j+1]=dp[i][j+1]\n      trace[i+1][j+1]=3\ncnt=[0 for t in range(l+1)]\ndef tracedo(trace,a,b):\n  if trace[a][b]==-1:\n    return\n  elif trace[a][b]==2:\n    tracedo(trace,a,b-1)\n  elif trace[a][b]==3:\n    tracedo(trace,a-1,b)\n  else:\n    tracedo(trace,a-1,b-1)\n    cnt[a-1]=1\n  return\n\ntracedo(trace,l,l)\nans=0\nfor i in range(l):\n  if cnt[i]==0 and cnt[l-i-1]==0:\n    ans+=1\nprint(dp[l][l]+min(ans*2,K*2))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","s = input()\nn = len(s)\nk = int(input())\n\ndp = [[0] * ((n + 1) * (n + 1)) for i in range(k + 1)]\nOFFSET = n + 1\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][i * OFFSET + i + 1] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l * OFFSET + r] = max(2 + dp[ki][(l + 1) * OFFSET + r - 1], dp[ki][l * OFFSET + r])\n            else:\n                dp[ki][l * OFFSET + r] = max(dp[ki][(l + 1) * OFFSET + r], dp[ki][l * OFFSET + r - 1], dp[ki][l * OFFSET + r])\n                if ki - 1 >= 0:\n                    dp[ki][l * OFFSET + r] = max(dp[ki - 1][(l + 1) * OFFSET + r - 1] + 2, dp[ki][l * OFFSET + r])\n\nans = 0\nfor i in range(k + 1):\n    ans = max(ans, dp[i][n])\nprint(ans)","s = input()\nk = int(input())\nn = len(s)\ndp = [[[0]*(n+1) for i in range(n+1)] for j in range(n+1)]\nfor j in range(k+1):\n    for i in range(n):\n        dp[i][i+1][j] = 1\nfor j in range(2,n+1):\n  for i in range(n+1-j):\n    for l in range(k+1):\n      jj = i+j\n      if s[i] == s[jj-1]:\n        dp[i][jj][l] = dp[i+1][jj-1][l]+2\n      else:\n        dp[i][jj][l] = max(dp[i+1][jj][l],dp[i][jj-1][l])\n        if l-1>=0:\n          dp[i][jj][l] = max(dp[i][jj][l],dp[i+1][jj-1][l-1]+2)\nans = 0\nfor i in range(k+1):\n  ans = max(ans,dp[0][n][i])\nprint(ans)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and K == 0:\n  if s == t:\n    print(2)\n    exit()\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(110):\n        table.append([0 for _ in range(110)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp2[d-1][left],\n                    dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp3[left], dp2[d-2][left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp[d]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp2[d-1][left], dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()","S = input()\nK = int(input())\nN = len(S)\n\n# MLE\u5bfe\u7b56\nif K * 2 >= N-1:\n    print(N)\n    exit()\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(310):\n        table.append([0 for _ in range(310)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","def solve(s, k):\n    n = len(s)\n    pdp = [[0] * (k + 1) for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for r in range(l, n):\n            dpr, dpr1 = dp[r], pdp[r - 1]\n            inc = 1 if l == r else 2\n            is_same = s[l] == s[r]\n            for p in range(k + 1):\n                if is_same:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    if p:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p], dpr1[p - 1] + inc)\n                    else:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p])\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    if K>100:\n        K = 100\n    dp = [[[0]*(K+1) for _ in range(N)] for i in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    #print(dp)\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","S = input()\nK = int(input())\nN = len(S)\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","def LCS_words(X,Y):\n    X,Y=\" \"+X,\" \"+Y\n    m,n=len(X),len(Y)\n    MAP=[[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            if Y[i]==X[j]:\n                MAP[i][j]=MAP[i-1][j-1]+1\n            else:\n                MAP[i][j]=max(MAP[i][j-1],MAP[i-1][j])\n    return MAP[n-1][m-1]\n\n\ns=input()\nk=int(input())\nprint(LCS_words(s,s[::-1])+k*2)","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = defaultdict(lambda:[0 for _ in range(K+1)])\n    for i in range(N):\n        for j in range(K+1):\n            dp[(i,i)][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[(l,r)][k] = dp[(l+1,r-1)][k] + 2\n                else:\n                    if k>0:\n                        dp[(l,r)][k] = max(dp[(l+1,r)][k],dp[(l,r-1)][k],dp[(l+1,r-1)][k-1]+2)\n                    else:\n                        dp[(l,r)][k] = max(dp[(l + 1,r)][k], dp[(l,r - 1)][k])\n    ans = max(dp[(0,N-1)])\n    #print(dp)\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  if lk * 2 >= ls:\n    print(ls)\n    return\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+2-i)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-2][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l-1][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-2][k-1]+2)\nans = max(dp[0][i][j] for i in range(n+2) for j in range(K+1))\nprint(ans)","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        #dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], max(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","S = input()\nK = int(input())\nN = len(S)\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","def lcs(s1, s2):\n    dp = []\n    for s2_k in s2:\n        bgn_idx = 0\n        for i, cur_idx in enumerate(dp):\n            chr_idx = s1.find(s2_k, bgn_idx) + 1\n            if not chr_idx:\n                break\n            dp[i] = min(cur_idx, chr_idx)\n            bgn_idx = cur_idx\n        else:\n            chr_idx = s1.find(s2_k, bgn_idx) + 1\n            if chr_idx:\n                dp.append(chr_idx)\n    return len(dp)\n\nS = raw_input()\nK = int(raw_input())\n\nrevstr = S[::-1]\n\ncharset = set(S)\n\ndef replace_calclcs(i, candstrlist):\n    newcand = candstrlist[:]\n    for candstr, maxlcs in candstrlist:\n        for char in charset:\n            newrevstr = candstr[:i] + char + candstr[i+1:]\n            newlcs = lcs(S, newrevstr)\n            if(newlcs > maxlcs):\n                newcand.append([newrevstr, newlcs])\n    return newcand\n\ncands = [[revstr, lcs(S, revstr)]]\nfor i in range(len(revstr)):\n    cands = replace_calclcs(i, cands)\n\nprint(max(map(lambda x: x[1], cands)))\n","#coding:utf-8\ndef check(s, t):\n    count = 0\n    v = 0\n    for i in range(len(s)):\n        if s[i] in t[i]:\n            count += 1\n        else:\n            if count > v:\n                v = count\n            count = 0\n    return v\n    \ns = list(input())\nk = int(input())\nt = []\ntg = []\npat = [0]*len(s)\nfor i in s[::-1]:\n    t.append(i)\n    tg.append(i)\n\nfor i in range(k):\n    v = check(s, t)\n    c = 0\n    for j in range(len(s)):\n        t[j] = s[j]\n        if v < check(s, t):\n            ind = j\n        t[j] = tg[j]\n    tg[ind] = s[ind]\n\nprint(check(s, tg))\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    if K >= L\/\/2:\n        ans = L\n    else:\n        dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n        ans = 0\n        for ind in reversed(range(L)):\n            # [0, ind), [ind, L-1]\n            s = S[ind]\n            for i in range(ind):\n                for k in reversed(range(K+1)):\n                    if S[i] == s:\n                        dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                    else:\n                        dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                        dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                        if k < K and dp[i+1][L-ind][k] == dp[i][L-ind-1][k]:\n                            dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                            dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n            for k in range(K+1):\n                ans = max(ans, 2*dp[ind][L-ind][k])\n                ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n            dp.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(ans)","from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\ns = S()\nn = len(s)\nk = I()\ndp = [[[1] * (k + 1) for _ in range(n)] for _ in range(n)]\nfor diff in range(1, n):\n    for l in range(n):\n        for m in range(k + 1):\n            r = l + diff\n            if r >= n:\n                continue\n            if r - l == 1:\n                dp[l][r][m] = 2 if s[l] == s[r] or m else 1\n            elif s[l] == s[r]:\n                dp[l][r][m] = dp[l + 1][r - 1][m] + 2\n            else:\n                dp[l][r][m] = max(dp[l][r][m], dp[l + 1][r][m], dp[l][r - 1][m])\n                if m:\n                    dp[l][r][m] = max(dp[l][r][m], dp[l + 1][r - 1][m - 1] + 2)\n\nprint(dp[0][n - 1][k])\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K and dp[i+1][L-ind][k] == dp[i+1][L-ind-1][k] and dp[i+1][L-ind][k] == dp[i][L-ind][k]:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\n\nif N == 1:\n    ans = 1\nelif N == 2:\n    ans = 1\n    if S[1] == S[2]:\n        ans = 2\n    if K:\n        ans = 2\nelse:\n    dp1 = [[0]*(K+1) for _ in range(N+2)]\n    dp2 = [[0]*(K+1) for _ in range(N+2)]\n    for i in range(1, N+1):\n        dp1[i][0] = 1\n    for i in range(1, N):\n        dp2[i][0] = 1\n        if S[i] == S[i+1]:\n            dp2[i][0] = 2    \n        elif K:    \n            dp2[i][1] = 2\n    for s in range(3, N+1):\n        dp3 = [[0]*(K+1) for _ in range(N+2)]\n        for i in range(1, N-s+2):\n            j = i+s-1    \n            if S[i] == S[j]:\n                for k in range(K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], 2+dp1[i+1][k])\n            else:\n                dp3[i][0] = max(dp2[i+1][0], dp2[i][0], dp2[i+1][0])\n                for k in range(1, K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], dp1[i+1][k], 2+dp1[i+1][k-1])\n        dp1 = [k[:] for k in dp2]\n        dp2 = [k[:] for k in dp3]\n    ans = max(dp3[1][k] for k in range(K+1))\nprint(ans)\n'''\nMLE\u3057\u305f\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    dp[i][i+1][0] = 1\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2    \n    elif K:    \n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))\n'''   ","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n    if k > 0:\n        for i in range(n-1):\n            dp[i][1][1] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()\n","s = input()\nn = len(s)\nk = int(input())\n\ndp = [[[0] * (n + 1) for i in range(n + 1)] for i in range(k + 1)]\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][i][i + 1] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l][r] = max(2 + dp[ki][l + 1][r - 1], dp[ki][l][r])\n            else:\n                dp[ki][l][r] = max(dp[ki][l + 1][r], dp[ki][l][r - 1], dp[ki][l][r])\n                if ki - 1 >= 0:\n                    dp[ki][l][r] = max(dp[ki - 1][l + 1][r - 1] + 2, dp[ki - 1][l + 1][r - 1] + 2, dp[ki][l][r])\n\nans = 0\nfor i in range(k + 1):\n    ans = max(ans, dp[i][0][-1])\nprint(ans)"],"raw_generations":["def lcs(str1, str2):\n    '''\u6587\u5b57\u5217str1, str2\u306e\u6700\u9577\u5171\u901a\u90e8\u5206\u5217(Lowest Common Subsequence, LCS)\u3092\u6c42\u3081\u308b\n    \u8a08\u7b97\u91cfO(len(str1)*len(str2))  \n    '''\n    dp = [[0]*(len(str2) + 1) for _ in range(len(str1) + 1)]\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n\n    return dp[len(str1)][len(str2)]\n\n\ns = input()\nn = len(s)\nk = int(input())\n\nans = 0\nfor i in range(n):\n    t = s[0:i]\n    rev_t = s[i+1:][::-1]\n    min_len = min(len(t), len(rev_t))\n    ans = max(min(lcs(t, rev_t) + k, min_len) * 2 + 1, ans)\n\nfor i in range(n + 1):\n    t = s[0:i]\n    rev_t = s[i:][::-1]\n    min_len = min(len(t), len(rev_t))\n    ans = max(min(lcs(t, rev_t) + k, min_len) * 2, ans)\n\nprint(ans)","def getdp(i, j, k):\n    if i < 0: return -1\n    if j > k: return 0\n    if j == k: return 1\n    if dp[i][j][k] != -1: return dp[i][j][k]\n    res = -1\n    if s[j] == s[k]: res = max(res, getdp(i, j+1, k-1)+2)\n    else: res = max(res, getdp(i-1, j+1, k-1)+2, getdp(i, j+1, k), getdp(i, j, k-1))\n    dp[i][j][k] = res\n    return res\n\ninput = raw_input\nrange = xrange\ns = input()\nn = len(s)\nk = int(input())\ndp = [[[-1]*n for j in range(n)] for i in range(k+1)] # score [j..k], i more free slots\nprint(getdp(k, 0, n-1))","def get_ind(l, r):\n    mod = 3\n    return OFFSET * (l % mod) + r\n\ns = input()\nn = len(s)\nk = int(input())\n\ndp = [[0] * ((n + 1) * 3) for i in range(k + 1)]\nOFFSET = n + 1\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][get_ind(i, i + 1)] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][get_ind(l, r)] = max(2 + dp[ki][get_ind(l + 1, r - 1)], dp[ki][get_ind(l, r)])\n            else:\n                dp[ki][get_ind(l, r)] = max(dp[ki][get_ind(l + 1, r)], dp[ki][get_ind(l, r - 1)], dp[ki][get_ind(l, r)])\n                if ki - 1 >= 0:\n                    dp[ki][get_ind(l, r)] = max(dp[ki - 1][get_ind(l + 1, r - 1)] + 2, dp[ki][get_ind(l, r)])\n\nans = 0\nfor i in range(k + 1):\n    for j in range(3 * (n + 1)):\n        ans = max(ans, dp[i][j])\nprint(ans)","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1)] for _ in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][i+1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][i+l][k] = dp[i+1][i+l-1][k] + 2\n            else:\n                dp[i][i+l][k] = max(dp[i+1][i+l][k], dp[i][i+l-1][k])\n                if k>=1:\n                    dp[i][i+l][k] = max(dp[i][i+l][k], dp[i+1][i+l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = [[[0 for _ in range(K+1)]for _ in range(N)]for _ in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\ndef test():\n    i = I()\n    li = LI()\n    lsi = LSI()\n    si = LS()\n    print(i)\n    print(li)\n    print(lsi)\n    print(si)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\n\ndp = [[[0] * (K+1) for i in range(N+2)] for j in range(N+2)]\nans = 0\n\nfor i in range(1,N+1):\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\nprint (ans)\n                \n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(max(ansls))","s = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tfor k in range(K+1):\n\t\tdp[i][i][k] = 1\n\t\tif i < n-1 and s[i] == s[i+1]:\n\t\t\tdp[i][i+1][k] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0 and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(ans)","s = input()\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","s = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tfor k in range(K+1):\n\t\tdp[i][i][k] = 1\n\t\tif i < n-1 and s[i] == s[i+1]:\n\t\t\tdp[i][i+1][k] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0 and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nflg2 = 0\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if ans < max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg):\n    flg2 = flg\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg,ans)\nif flg2 == 1:\n  print(2\/0)\nprint(ans)","import sys\ns = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tdp[i][i][0] = 1\n\tif i < n-1:\n\t\tdp[i][i+1][0] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+2-i)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n#                 print(i,l,k)\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","def solve(s, k):\n    n = len(s)\n    if k >= n \/\/ 2:\n        return n\n    pdp = [[0] * (k + 1)]\n    for l in range(1, n + 1):\n        i = n - l\n        dp = [[0] * (k + 1) for _ in range(l + 1)]\n        dpr1, pdpr1 = dp[-1], [0] * (k + 1)\n        for r in range(l):\n            dpr, pdpr = dp[r], pdp[r - 1]\n            inc = 2 if r else 1\n            if s[i] == s[i + r]:\n                for p in range(k + 1):\n                    dp[r] = [c + inc for c in pdpr1]\n            else:\n                dpr[0] = max(pdpr[0], dpr1[0])\n                for p in range(1, k + 1):\n                    dpr[p] = max(pdpr[p], dpr1[p], pdpr1[p - 1] + inc)\n            dpr1, pdpr1 = dpr, pdpr\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","S = input()\nK = int(input())\nN = len(S)\n\n# MLE\u5bfe\u7b56\nif K * 2 >= N-1:\n    print(N)\n    exit()\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","import sys\ns = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tdp[i][i][0] = 1\n\tif i < n-1 and s[i] == s[i+1]:\n\t\tdp[i][i+1][0] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        dp4 = dp[cnt+1]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            dp5 = dp2[d-1]\n            dp6 = dp2[d-2]\n            dp7 = dp4[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp5[left],\n                    dp5[left+1], dp6[left+1]+plus)\n                dp7[left] = max(\n                    dp7[left], dp3[left], dp6[left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        dp4 = dp2[d-1]\n        dp5 = dp2[d-2]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp4[left], dp4[left+1], dp5[left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = ns()\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = list(ns())\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","input = raw_input\nrange = xrange\nn, m, h, v = map(int,input().split())\nremain = [n] * m\nind = 0\nfor i in range(h):\n    for odd in range(1, m, 2):\n        if remain[odd] % 2 == 1: break\n    else:\n        for odd in range(1, m, 2):\n            if remain[odd]: break\n        else: print(\"NO\"); exit()\n    if m == 1: print(\"NO\"); exit()\n    remain[odd]-= 1; remain[odd-1]-= 1\n\nif sum(x\/\/2 for x in remain) < v: print(\"NO\"); exit()\nprint(\"YES\")\ngrid = [[\".\"]*m for i in range(n)]\nfor j in range(0, m, 2):\n    placed = n - remain[j]\n    for i in range(placed):\n        grid[i][j] = \"<\"\n        grid[i][j+1] = \">\"\n    for i in range(placed, n, 2):\n        if i == n-1: break\n        grid[i][j] = \"^\"\n        grid[i+1][j] = \"v\"\n        v-= 1\n        if v == 0:\n            for row in grid: print(''.join(row))\n            exit()\n        if j == m-1: continue\n        grid[i][j+1] = \"^\"\n        grid[i+1][j+1] = \"v\"\n        v-= 1\n        if v == 0:\n            for row in grid: print(''.join(row))\n            exit()","def solve(s, k):\n    n = len(s)\n    if k >= n \/\/ 2:\n        return n\n    dpp = [[1] * (k + 1), [0] * (k + 1)]\n    for r in range(1, n):\n        dpc = [[0] * (k + 1) for _ in range(r + 2)]\n        dpc[r] = [1] * (k + 1)\n        for l in range(r - 1, -1, -1):\n            dpl, dpl1 = dpc[l], dpp[l + 1]\n            if s[l] == s[r]:\n                dpc[l] = [c + 2 for c in dpl1]\n            else:\n                dppl, dpcl1 = dpp[l], dpc[l + 1]\n                dpl[0] = max(dppl[0], dpcl1[0])\n                for p in range(1, k + 1):\n                    dpl[p] = max(dppl[p], dpcl1[p], dpl1[p - 1] + 2)\n        dpp = dpc\n\n    return dpp[0][k]\n\n\nprint(solve(input(), int(input())))\n","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = list(ns())\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and K == 0:\n  if s == t:\n    print(2)\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2\n    elif K:\n        dp[i][i+1][0] = 1\n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))","import numpy as np\n\n\ndef LCS_words(X,Y):\n    X,Y=\" \"+X,\" \"+Y\n    m,n=len(X),len(Y)\n    MAP=[[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            if Y[i]==X[j]:\n                MAP[i][j]=MAP[i-1][j-1]+1\n            else:\n                MAP[i][j]=max(MAP[i][j-1],MAP[i-1][j])\n    #print(np.array(MAP))\n    return MAP[n-1][m-1]\n\n\ns=input()\nk=int(input())\nbase=LCS_words(s,s[::-1])\nreverse=s[::-1]\n\nfor i in range(len(s)\/\/2):\n    if k==0:break\n    if [s[i],reverse[-i]]==[reverse[i],reverse[-i]]:\n        base +=2\n        k -=1\n\nprint(base+k)","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()\n","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1-i+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][i][j] for i in range(n+2) for j in range(K+1))\nprint(ans)","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = ns()\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][min(sll-1,K)]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][min(sll-1,K-1)]*2+2,ans)\nprint(ans)","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        if dp[i+1][j+1][k] < dp[i][j][k] + 1:\n          dp[i+1][j+1][k] = dp[i][j][k] + 1\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        dp4 = dp[cnt+1]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            dp5 = dp2[d-1]\n            dp6 = dp2[d-2]\n            dp7 = dp4[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp5[left],\n                    dp5[left+1], dp6[left+1]+plus)\n                dp7[left] = max(\n                    dp7[left], dp3[left], dp6[left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        dp4 = dp2[d-1]\n        dp5 = dp2[d-2]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp4[left], dp4[left+1], dp5[left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1-i+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)\n","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            for i in range(n-1):\n                dp[i][1][cnt] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][max(0,K-1)]*2+2,ans)\nprint(ans)","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp2[d-1][left],\n                    dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp3[left], dp2[d-2][left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp2[d-1][left], dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\n\nif N == 1:\n    ans = 1\nelif N == 2:\n    ans = 1\n    if S[1] == S[2]:\n        ans = 2\n    if K:\n        ans = 2\nelse:\n    dp1 = [[0]*(K+1) for _ in range(N+2)]\n    dp2 = [[0]*(K+1) for _ in range(N+2)]\n    for i in range(1, N+1):\n        dp1[i][0] = 1\n    for i in range(1, N):\n        dp2[i][0] = 1\n        if S[i] == S[i+1]:\n            dp2[i][0] = 2    \n        elif K:    \n            dp2[i][1] = 2\n    for s in range(3, N+1):\n        dp3 = [[0]*(K+1) for _ in range(N+2)]\n        for i in range(1, N-s+2):\n            j = i+s-1    \n            if S[i] == S[j]:\n                for k in range(K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], 2+dp1[i+1][k])\n            else:\n                dp3[i][0] = max(dp2[i+1][0], dp2[i][0], dp2[i+1][0])\n                for k in range(1, K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], dp1[i+1][k], 2+dp1[i+1][k-1])\n        '''\n        dp1 = [k[:] for k in dp2]\n        dp2 = [k[:] for k in dp3]\n        '''\n        dp1 = dp2[:]\n        dp2 = dp3[:]\n    ans = max(dp3[1][k] for k in range(K+1))\nprint(ans)\n'''\nMLE\u3057\u305f\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    dp[i][i+1][0] = 1\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2    \n    elif K:    \n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))\n'''   ","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[0][1][i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            for i in range(n-1):\n                dp[cnt][1][i] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[cnt][d][left] = max(\n                    dp[cnt][d][left], dp[cnt][d-1][left],\n                    dp[cnt][d-1][left+1], dp[cnt][d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp[cnt][d][left], dp[cnt][d-2][left+1]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[k][d][left] = max(\n                dp[k][d][left], dp[k][d-1][left], dp[k][d-1][left+1], dp[k][d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()","import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\n\"\"\"\n\u30fbreversed LCS = \u6700\u5927\u9577\u306e\u56de\u6587\n\u30fb(\u9577\u3055\u3001\u59cb\u70b9\u3001\u5909\u66f4\u30b3\u30b9\u30c8) -> opt value\n\"\"\"\n\nS = np.frombuffer(readline().rstrip(),'S1')\nN = len(S)\nK = int(readline())\n\ndp = [None] * (N+1) # \u9577\u3055 -> array\ndp[0] = None # \u81ea\u8eab\u306a\u3044\u306e\u3067\u4f7f\u308f\u306a\u3044\ndp[1] = np.zeros((N,K+10),np.int32); dp[1][:,0] = 1\nif N >= 2:\n    dp[2] = np.zeros((N-1,K+10),np.int32)\n    dp[2][:,0] = 1+(S[:-1]==S[1:])\n    dp[2][:,1] = 2\n\nfor n in range(3,N+1):\n    arr = np.zeros((N-n+1,K+10),np.int32)\n    # \u4e21\u7aef\u3092\u30de\u30c3\u30c1\u3057\u306a\u3044\u5834\u5408\n    np.maximum(arr,dp[n-1][:-1],out=arr)\n    np.maximum(arr,dp[n-1][1:],out=arr)\n    # \u4e21\u7aef\u3092\u30b3\u30b9\u30c8\u306a\u3057\u3067\u30de\u30c3\u30c1\u3055\u305b\u308b\u5834\u5408\n    match = (S[:-n+1]==S[n-1:])\n    np.maximum(arr,match[:,None]*(dp[n-2][1:-1]+2),out=arr)\n    # \u4e21\u7aef\u3092\u30b3\u30b9\u30c8\u3042\u308a\u3067\u30de\u30c3\u30c1\u3055\u305b\u308b\u5834\u5408\n    np.maximum(arr[:,1:],dp[n-2][1:-1,:-1]+2,out=arr[:,1:])\n    \n    dp[n] = arr\n\nanswer = dp[-1][0][:K+1].max()\nprint(answer)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\nprint(ans)","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1)] for _ in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][i+1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][i+l][k] = dp[i+1][i+l-1][k] + 2\n            else:\n                dp[i][i+l][k] = max(dp[i+1][i+l][k], dp[i][i+l-1][k])\n                if k>=1:\n                    dp[i][i+l][k] = max(dp[i][i+l][k], dp[i+1][i+l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","s = input()\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nimport sys\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\nif N == 1:\n    print (1)\n    sys.exit()\nelif N == 2:\n    if S[1] == S[2] or K > 0:\n        print (2)\n    else:\n        print (1)\n    sys.exit()\n\ndp = [[[0] * (K+1) for i in range(N+2)]]\nans = 0\n\nfor i in range(1,N+1):\n\n    dp.append( [[0] * (K+1) for i in range(N+2)] )\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\n    dp[i-1] = []\n\nprint (ans)\n                \n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\ns = S()\nn = len(s)\nk = I()\ndp = defaultdict(lambda:1)\nfor diff in range(1, n):\n    for l in range(n):\n        for m in range(k + 1):\n            r = l + diff\n            if r >= n:\n                continue\n            if r - l == 1:\n                dp[(l, r, m)] = 2 if s[l] == s[r] or m else 1\n            elif s[l] == s[r]:\n                dp[(l, r, m)] = dp[(l + 1, r - 1, m)] + 2\n            else:\n                dp[(l, r, m)] = max(dp[(l, r, m)], dp[(l + 1, r, m)], dp[(l, r - 1, m)])\n                if m:\n                    dp[(l, r, m)] = max(dp[(l, r, m)], dp[(l + 1, r - 1, m - 1)] + 2)\n\nprint(dp[(0, n - 1, k)])\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], max(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and k == 0:\n  if s == t:\n    print(2)\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\nprint(ans)","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","def solve(s, k):\n    n = len(s)\n    pdp = [[0] * (k + 1) for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for r in range(l, n):\n            dpr, dpr1 = dp[r], pdp[r - 1]\n            inc = 1 if l == r else 2\n            is_same = s[l] == s[r]\n            for p in range(k + 1):\n                if is_same:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    if p:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p], dpr1[p - 1] + inc)\n                    else:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p])\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = [[[0 for _ in range(K+1)]for _ in range(N)]for _ in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","def solve(s, k):\n    n = len(s)\n    dp = [[[0] * (k + 1) for _ in range(n)] for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dpl, dpl1 = dp[l], dp[l + 1]\n        for r in range(l, n):\n            dpr, dpr1 = dpl[r], dpl1[r - 1]\n            inc = 1 if l == r else 2\n            for p in range(k + 1):\n                if s[l] == s[r]:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    dpr[p] = max(dpl1[r][p], dp[l][r - 1][p])\n                    if p:\n                        dpr[p] = max(dpr[p], dpr1[p - 1] + inc)\n    return dp[0][-1][k]\n\n\nprint(solve(input(), int(input())))\n","s = input()\nn = len(s)\nk = int(input())\n\n\ndp = [[[0] * (n + 1) for i in range(n + 1)] for i in range(k + 1)]\nfor i in range(n):\n    dp[0][i][i + 1] = 1\n\nfor length in range(2, n + 1):\n    for l in range(n):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l][r] = max(2 + dp[ki][l + 1][r - 1], dp[ki][l][r])\n            else:\n                dp[ki][l][r] = max(dp[ki][l + 1][r], dp[ki][l][r - 1], dp[ki][l][r])\n                if ki - 1 >= 0:\n                    dp[ki][l][r] = max(dp[ki - 1][l + 1][r] + 2, dp[ki - 1][l][r - 1] + 2, dp[ki][l][r])\n\nprint(dp[-1][0][-1])","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(100):\n        table.append([0 for _ in range(100)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","s = input()\nk = int(input())\nn = len(s)\ndp = [[[0]*(n+1) for i in range(n+1)] for j in range(n+1)]\nfor j in range(k+1):\n    for i in range(n):\n        dp[i][i+1][j] = 1\nfor j in range(2,n+1):\n  for i in range(n+1-j):\n    for l in range(k+1):\n      jj = i+j\n      if s[i] == s[jj-1]:\n        dp[i][jj][l] = dp[i+1][jj-1][l]+2\n      else:\n        dp[i][jj][l] = max(dp[i+1][jj][l],dp[i][jj-1][l])\n        if l-1>=0:\n          dp[i][jj][l] = max(dp[i][jj][l],dp[i+1][jj-1][l-1]+2)\nans = 0\nfor i in range(k+1):\n  ans = max(ans,dp[0][n][i])\nprint(ans)","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\n\ndp = [[[0] * (K+1) for i in range(N+2)] for j in range(N+2)]\nans = 0\n\nfor i in range(1,N+1):\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\nprint (ans)\n                \n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","from collections import defaultdict\nS=raw_input()\nL=len(S)\nK=input()\n\ndp = defaultdict(lambda: 0)\n\nfor i in range(L):\n\tfor j in range(K+1):\n\t\tdp[(i,i,j)]=1\n\nfor i in range(1,L):\t\t\t#i:width\n\tfor j in range(1,L-i+1):\t#j:start point\n\t\tl=j\n\t\tr=j+i\n\t\tfor k in range(K+1):\n\t\t\tdp[(l,r,k)] = max(dp[(l+1,r,k)], dp[(l,r-1,k)]);\n\t\t\tif(S[l-1] == S[r-1]):\n\t\t\t\tdp[(l,r,k)] = max(dp[(l,r,k)], dp[(l+1,r-1,k)] + 2);\n\t\t\telse:\n\t\t\t\tif(k):\n\t\t\t\t\tdp[(l,r,k)] = max(dp[(l,r,k)], dp[(l+1,r-1,k-1)] + 2);\n\nprint dp[(1,L,K)]","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = [min(2*K+1,n)]\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ansls.append(max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg))\nprint(max(ansls))","S=input()\nK=int(input())\nS2=S[::-1]\nl=len(S)\n\ndp=[[0 for x in range(l+1)] for y in range(l+1)]\ntrace=[[0 for x in range(l+1)] for y in range(l+1)]\nfor i in range(l+1):\n  trace[i][0]=-1\n  trace[0][i]=-1\n\nfor i in range(l):\n  for j in range(l):\n    if S[i]==S2[j]:\n      dp[i+1][j+1]=dp[i][j]+1\n      trace[i+1][j+1]=1\n    elif dp[i+1][j] > dp[i][j+1]:\n      dp[i+1][j+1]=dp[i+1][j]\n      trace[i+1][j+1]=2\n    else:\n      dp[i+1][j+1]=dp[i][j+1]\n      trace[i+1][j+1]=3\ncnt=[0 for t in range(l+1)]\ndef tracedo(trace,a,b):\n  if trace[a][b]==-1:\n    return\n  elif trace[a][b]==2:\n    tracedo(trace,a,b-1)\n  elif trace[a][b]==3:\n    tracedo(trace,a-1,b)\n  else:\n    tracedo(trace,a-1,b-1)\n    cnt[a-1]=1\n  return\n\ntracedo(trace,l,l)\nans=0\nfor i in range(l):\n  if cnt[i]==0 and cnt[l-i-1]==0 and i!=(l-i-1):\n    ans+=2\n  elif cnt[i]==0 and cnt[l-i-1]==0 and i==(l-i-1):\n    ans+=1\nprint(dp[l][l]+min(ans,K*2))","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\n  for i in range(ls):\n    dp[i][i][0] = 1\n  for k in range(lk+1):\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        if s[i] == s[j]:\n          dp[i][j][k] = dp[i+1][j-1][k] + 2\n        elif k:\n          dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n\n  print(max(dp[0][ls-1]))\n  return\n\nsolve()","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K and dp[i+1][L-ind][k] == dp[i][L-ind-1][k]:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n        dp.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk = 2*lk - ls%2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = [min(2*K+1,n)]\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ansls.append(max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg))\nprint(max(ansls))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg,ans)\nprint(ans)","def solve(s, k):\n    n = len(s)\n    dp = [[[0] * (k + 1) for _ in range(n)] for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dpl, dpl1 = dp[l], dp[l + 1]\n        for r in range(l, n):\n            dpr, dpr1 = dpl[r], dpl1[r - 1]\n            inc = 1 if l == r else 2\n            for p in range(k + 1):\n                if s[l] == s[r]:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    dpr[p] = max(dpl1[r][p], dp[l][r - 1][p])\n                    if p:\n                        dpr[p] = max(dpr[p], dpr1[p - 1] + inc)\n    return dp[0][-1][k]\n\n\nprint(solve(input(), int(input())))\n","S=input()\nK=int(input())\nS2=S[::-1]\nl=len(S)\n\ndp=[[0 for x in range(l+1)] for y in range(l+1)]\ntrace=[[0 for x in range(l+1)] for y in range(l+1)]\nfor i in range(l+1):\n  trace[i][0]=-1\n  trace[0][i]=-1\n\nfor i in range(l):\n  for j in range(l):\n    if S[i]==S2[j]:\n      dp[i+1][j+1]=dp[i][j]+1\n      trace[i+1][j+1]=1\n    elif dp[i+1][j] > dp[i][j+1]:\n      dp[i+1][j+1]=dp[i+1][j]\n      trace[i+1][j+1]=2\n    else:\n      dp[i+1][j+1]=dp[i][j+1]\n      trace[i+1][j+1]=3\ncnt=[0 for t in range(l+1)]\ndef tracedo(trace,a,b):\n  if trace[a][b]==-1:\n    return\n  elif trace[a][b]==2:\n    tracedo(trace,a,b-1)\n  elif trace[a][b]==3:\n    tracedo(trace,a-1,b)\n  else:\n    tracedo(trace,a-1,b-1)\n    cnt[a-1]=1\n  return\n\ntracedo(trace,l,l)\nans=0\nfor i in range(l):\n  if cnt[i]==0 and cnt[l-i-1]==0:\n    ans+=1\nprint(dp[l][l]+min(ans*2,K*2))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","s = input()\nn = len(s)\nk = int(input())\n\ndp = [[0] * ((n + 1) * (n + 1)) for i in range(k + 1)]\nOFFSET = n + 1\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][i * OFFSET + i + 1] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l * OFFSET + r] = max(2 + dp[ki][(l + 1) * OFFSET + r - 1], dp[ki][l * OFFSET + r])\n            else:\n                dp[ki][l * OFFSET + r] = max(dp[ki][(l + 1) * OFFSET + r], dp[ki][l * OFFSET + r - 1], dp[ki][l * OFFSET + r])\n                if ki - 1 >= 0:\n                    dp[ki][l * OFFSET + r] = max(dp[ki - 1][(l + 1) * OFFSET + r - 1] + 2, dp[ki][l * OFFSET + r])\n\nans = 0\nfor i in range(k + 1):\n    ans = max(ans, dp[i][n])\nprint(ans)","s = input()\nk = int(input())\nn = len(s)\ndp = [[[0]*(n+1) for i in range(n+1)] for j in range(n+1)]\nfor j in range(k+1):\n    for i in range(n):\n        dp[i][i+1][j] = 1\nfor j in range(2,n+1):\n  for i in range(n+1-j):\n    for l in range(k+1):\n      jj = i+j\n      if s[i] == s[jj-1]:\n        dp[i][jj][l] = dp[i+1][jj-1][l]+2\n      else:\n        dp[i][jj][l] = max(dp[i+1][jj][l],dp[i][jj-1][l])\n        if l-1>=0:\n          dp[i][jj][l] = max(dp[i][jj][l],dp[i+1][jj-1][l-1]+2)\nans = 0\nfor i in range(k+1):\n  ans = max(ans,dp[0][n][i])\nprint(ans)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and K == 0:\n  if s == t:\n    print(2)\n    exit()\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(110):\n        table.append([0 for _ in range(110)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp2[d-1][left],\n                    dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp3[left], dp2[d-2][left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp[d]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp2[d-1][left], dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()","S = input()\nK = int(input())\nN = len(S)\n\n# MLE\u5bfe\u7b56\nif K * 2 >= N-1:\n    print(N)\n    exit()\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(310):\n        table.append([0 for _ in range(310)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","def solve(s, k):\n    n = len(s)\n    pdp = [[0] * (k + 1) for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for r in range(l, n):\n            dpr, dpr1 = dp[r], pdp[r - 1]\n            inc = 1 if l == r else 2\n            is_same = s[l] == s[r]\n            for p in range(k + 1):\n                if is_same:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    if p:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p], dpr1[p - 1] + inc)\n                    else:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p])\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    if K>100:\n        K = 100\n    dp = [[[0]*(K+1) for _ in range(N)] for i in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    #print(dp)\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","S = input()\nK = int(input())\nN = len(S)\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","def LCS_words(X,Y):\n    X,Y=\" \"+X,\" \"+Y\n    m,n=len(X),len(Y)\n    MAP=[[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            if Y[i]==X[j]:\n                MAP[i][j]=MAP[i-1][j-1]+1\n            else:\n                MAP[i][j]=max(MAP[i][j-1],MAP[i-1][j])\n    return MAP[n-1][m-1]\n\n\ns=input()\nk=int(input())\nprint(LCS_words(s,s[::-1])+k*2)","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = defaultdict(lambda:[0 for _ in range(K+1)])\n    for i in range(N):\n        for j in range(K+1):\n            dp[(i,i)][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[(l,r)][k] = dp[(l+1,r-1)][k] + 2\n                else:\n                    if k>0:\n                        dp[(l,r)][k] = max(dp[(l+1,r)][k],dp[(l,r-1)][k],dp[(l+1,r-1)][k-1]+2)\n                    else:\n                        dp[(l,r)][k] = max(dp[(l + 1,r)][k], dp[(l,r - 1)][k])\n    ans = max(dp[(0,N-1)])\n    #print(dp)\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  if lk * 2 >= ls:\n    print(ls)\n    return\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+2-i)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-2][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l-1][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-2][k-1]+2)\nans = max(dp[0][i][j] for i in range(n+2) for j in range(K+1))\nprint(ans)","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        #dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], max(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","S = input()\nK = int(input())\nN = len(S)\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","def lcs(s1, s2):\n    dp = []\n    for s2_k in s2:\n        bgn_idx = 0\n        for i, cur_idx in enumerate(dp):\n            chr_idx = s1.find(s2_k, bgn_idx) + 1\n            if not chr_idx:\n                break\n            dp[i] = min(cur_idx, chr_idx)\n            bgn_idx = cur_idx\n        else:\n            chr_idx = s1.find(s2_k, bgn_idx) + 1\n            if chr_idx:\n                dp.append(chr_idx)\n    return len(dp)\n\nS = raw_input()\nK = int(raw_input())\n\nrevstr = S[::-1]\n\ncharset = set(S)\n\ndef replace_calclcs(i, candstrlist):\n    newcand = candstrlist[:]\n    for candstr, maxlcs in candstrlist:\n        for char in charset:\n            newrevstr = candstr[:i] + char + candstr[i+1:]\n            newlcs = lcs(S, newrevstr)\n            if(newlcs > maxlcs):\n                newcand.append([newrevstr, newlcs])\n    return newcand\n\ncands = [[revstr, lcs(S, revstr)]]\nfor i in range(len(revstr)):\n    cands = replace_calclcs(i, cands)\n\nprint(max(map(lambda x: x[1], cands)))\n","#coding:utf-8\ndef check(s, t):\n    count = 0\n    v = 0\n    for i in range(len(s)):\n        if s[i] in t[i]:\n            count += 1\n        else:\n            if count > v:\n                v = count\n            count = 0\n    return v\n    \ns = list(input())\nk = int(input())\nt = []\ntg = []\npat = [0]*len(s)\nfor i in s[::-1]:\n    t.append(i)\n    tg.append(i)\n\nfor i in range(k):\n    v = check(s, t)\n    c = 0\n    for j in range(len(s)):\n        t[j] = s[j]\n        if v < check(s, t):\n            ind = j\n        t[j] = tg[j]\n    tg[ind] = s[ind]\n\nprint(check(s, tg))\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    if K >= L\/\/2:\n        ans = L\n    else:\n        dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n        ans = 0\n        for ind in reversed(range(L)):\n            # [0, ind), [ind, L-1]\n            s = S[ind]\n            for i in range(ind):\n                for k in reversed(range(K+1)):\n                    if S[i] == s:\n                        dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                    else:\n                        dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                        dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                        if k < K and dp[i+1][L-ind][k] == dp[i][L-ind-1][k]:\n                            dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                            dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n            for k in range(K+1):\n                ans = max(ans, 2*dp[ind][L-ind][k])\n                ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n            dp.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(ans)","from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\ns = S()\nn = len(s)\nk = I()\ndp = [[[1] * (k + 1) for _ in range(n)] for _ in range(n)]\nfor diff in range(1, n):\n    for l in range(n):\n        for m in range(k + 1):\n            r = l + diff\n            if r >= n:\n                continue\n            if r - l == 1:\n                dp[l][r][m] = 2 if s[l] == s[r] or m else 1\n            elif s[l] == s[r]:\n                dp[l][r][m] = dp[l + 1][r - 1][m] + 2\n            else:\n                dp[l][r][m] = max(dp[l][r][m], dp[l + 1][r][m], dp[l][r - 1][m])\n                if m:\n                    dp[l][r][m] = max(dp[l][r][m], dp[l + 1][r - 1][m - 1] + 2)\n\nprint(dp[0][n - 1][k])\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K and dp[i+1][L-ind][k] == dp[i+1][L-ind-1][k] and dp[i+1][L-ind][k] == dp[i][L-ind][k]:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\n\nif N == 1:\n    ans = 1\nelif N == 2:\n    ans = 1\n    if S[1] == S[2]:\n        ans = 2\n    if K:\n        ans = 2\nelse:\n    dp1 = [[0]*(K+1) for _ in range(N+2)]\n    dp2 = [[0]*(K+1) for _ in range(N+2)]\n    for i in range(1, N+1):\n        dp1[i][0] = 1\n    for i in range(1, N):\n        dp2[i][0] = 1\n        if S[i] == S[i+1]:\n            dp2[i][0] = 2    \n        elif K:    \n            dp2[i][1] = 2\n    for s in range(3, N+1):\n        dp3 = [[0]*(K+1) for _ in range(N+2)]\n        for i in range(1, N-s+2):\n            j = i+s-1    \n            if S[i] == S[j]:\n                for k in range(K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], 2+dp1[i+1][k])\n            else:\n                dp3[i][0] = max(dp2[i+1][0], dp2[i][0], dp2[i+1][0])\n                for k in range(1, K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], dp1[i+1][k], 2+dp1[i+1][k-1])\n        dp1 = [k[:] for k in dp2]\n        dp2 = [k[:] for k in dp3]\n    ans = max(dp3[1][k] for k in range(K+1))\nprint(ans)\n'''\nMLE\u3057\u305f\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    dp[i][i+1][0] = 1\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2    \n    elif K:    \n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))\n'''   ","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n    if k > 0:\n        for i in range(n-1):\n            dp[i][1][1] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()\n","s = input()\nn = len(s)\nk = int(input())\n\ndp = [[[0] * (n + 1) for i in range(n + 1)] for i in range(k + 1)]\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][i][i + 1] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l][r] = max(2 + dp[ki][l + 1][r - 1], dp[ki][l][r])\n            else:\n                dp[ki][l][r] = max(dp[ki][l + 1][r], dp[ki][l][r - 1], dp[ki][l][r])\n                if ki - 1 >= 0:\n                    dp[ki][l][r] = max(dp[ki - 1][l + 1][r - 1] + 2, dp[ki - 1][l + 1][r - 1] + 2, dp[ki][l][r])\n\nans = 0\nfor i in range(k + 1):\n    ans = max(ans, dp[i][0][-1])\nprint(ans)"],"formatted_programs":["def lcs(str1, str2):\n    '''\u6587\u5b57\u5217str1, str2\u306e\u6700\u9577\u5171\u901a\u90e8\u5206\u5217(Lowest Common Subsequence, LCS)\u3092\u6c42\u3081\u308b\n    \u8a08\u7b97\u91cfO(len(str1)*len(str2))  \n    '''\n    dp = [[0]*(len(str2) + 1) for _ in range(len(str1) + 1)]\n    for i in range(len(str1)):\n        for j in range(len(str2)):\n            if str1[i] == str2[j]:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n\n    return dp[len(str1)][len(str2)]\n\n\ns = input()\nn = len(s)\nk = int(input())\n\nans = 0\nfor i in range(n):\n    t = s[0:i]\n    rev_t = s[i+1:][::-1]\n    min_len = min(len(t), len(rev_t))\n    ans = max(min(lcs(t, rev_t) + k, min_len) * 2 + 1, ans)\n\nfor i in range(n + 1):\n    t = s[0:i]\n    rev_t = s[i:][::-1]\n    min_len = min(len(t), len(rev_t))\n    ans = max(min(lcs(t, rev_t) + k, min_len) * 2, ans)\n\nprint(ans)","def getdp(i, j, k):\n    if i < 0: return -1\n    if j > k: return 0\n    if j == k: return 1\n    if dp[i][j][k] != -1: return dp[i][j][k]\n    res = -1\n    if s[j] == s[k]: res = max(res, getdp(i, j+1, k-1)+2)\n    else: res = max(res, getdp(i-1, j+1, k-1)+2, getdp(i, j+1, k), getdp(i, j, k-1))\n    dp[i][j][k] = res\n    return res\n\ninput = raw_input\nrange = xrange\ns = input()\nn = len(s)\nk = int(input())\ndp = [[[-1]*n for j in range(n)] for i in range(k+1)] # score [j..k], i more free slots\nprint(getdp(k, 0, n-1))","def get_ind(l, r):\n    mod = 3\n    return OFFSET * (l % mod) + r\n\ns = input()\nn = len(s)\nk = int(input())\n\ndp = [[0] * ((n + 1) * 3) for i in range(k + 1)]\nOFFSET = n + 1\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][get_ind(i, i + 1)] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][get_ind(l, r)] = max(2 + dp[ki][get_ind(l + 1, r - 1)], dp[ki][get_ind(l, r)])\n            else:\n                dp[ki][get_ind(l, r)] = max(dp[ki][get_ind(l + 1, r)], dp[ki][get_ind(l, r - 1)], dp[ki][get_ind(l, r)])\n                if ki - 1 >= 0:\n                    dp[ki][get_ind(l, r)] = max(dp[ki - 1][get_ind(l + 1, r - 1)] + 2, dp[ki][get_ind(l, r)])\n\nans = 0\nfor i in range(k + 1):\n    for j in range(3 * (n + 1)):\n        ans = max(ans, dp[i][j])\nprint(ans)","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1)] for _ in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][i+1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][i+l][k] = dp[i+1][i+l-1][k] + 2\n            else:\n                dp[i][i+l][k] = max(dp[i+1][i+l][k], dp[i][i+l-1][k])\n                if k>=1:\n                    dp[i][i+l][k] = max(dp[i][i+l][k], dp[i+1][i+l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = [[[0 for _ in range(K+1)]for _ in range(N)]for _ in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\ndef test():\n    i = I()\n    li = LI()\n    lsi = LSI()\n    si = LS()\n    print(i)\n    print(li)\n    print(lsi)\n    print(si)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\n\ndp = [[[0] * (K+1) for i in range(N+2)] for j in range(N+2)]\nans = 0\n\nfor i in range(1,N+1):\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\nprint (ans)\n                \n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(max(ansls))","s = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tfor k in range(K+1):\n\t\tdp[i][i][k] = 1\n\t\tif i < n-1 and s[i] == s[i+1]:\n\t\t\tdp[i][i+1][k] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0 and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(ans)","s = input()\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","s = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tfor k in range(K+1):\n\t\tdp[i][i][k] = 1\n\t\tif i < n-1 and s[i] == s[i+1]:\n\t\t\tdp[i][i+1][k] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0 and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nflg2 = 0\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if ans < max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg):\n    flg2 = flg\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg,ans)\nif flg2 == 1:\n  print(2\/0)\nprint(ans)","import sys\ns = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tdp[i][i][0] = 1\n\tif i < n-1:\n\t\tdp[i][i+1][0] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+2-i)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n#                 print(i,l,k)\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","def solve(s, k):\n    n = len(s)\n    if k >= n \/\/ 2:\n        return n\n    pdp = [[0] * (k + 1)]\n    for l in range(1, n + 1):\n        i = n - l\n        dp = [[0] * (k + 1) for _ in range(l + 1)]\n        dpr1, pdpr1 = dp[-1], [0] * (k + 1)\n        for r in range(l):\n            dpr, pdpr = dp[r], pdp[r - 1]\n            inc = 2 if r else 1\n            if s[i] == s[i + r]:\n                for p in range(k + 1):\n                    dp[r] = [c + inc for c in pdpr1]\n            else:\n                dpr[0] = max(pdpr[0], dpr1[0])\n                for p in range(1, k + 1):\n                    dpr[p] = max(pdpr[p], dpr1[p], pdpr1[p - 1] + inc)\n            dpr1, pdpr1 = dpr, pdpr\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","S = input()\nK = int(input())\nN = len(S)\n\n# MLE\u5bfe\u7b56\nif K * 2 >= N-1:\n    print(N)\n    exit()\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","import sys\ns = input()\nn = len(s)\nK = int(input())\n\ndp = [[[0 for _ in range(K+1)] for _ in range(n)] for _ in range(n)]\nfor i in range(n):\n\tdp[i][i][0] = 1\n\tif i < n-1 and s[i] == s[i+1]:\n\t\tdp[i][i+1][0] = 2\n\nfor k in range(K+1):\n\tfor x in range(1, n):\n\t\tfor i in range(n-x):\n\t\t\tj = i+x\n\t\t\tdp[i][j][k] = max(dp[i][j][k-1], dp[i+1][j][k], dp[i][j-1][k])\n\t\t\tif s[i] == s[j] and x > 1:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\t\t\telif k > 0:\n\t\t\t\tdp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k-1] + 2)\n\nprint(dp[0][n-1][K])","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        dp4 = dp[cnt+1]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            dp5 = dp2[d-1]\n            dp6 = dp2[d-2]\n            dp7 = dp4[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp5[left],\n                    dp5[left+1], dp6[left+1]+plus)\n                dp7[left] = max(\n                    dp7[left], dp3[left], dp6[left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        dp4 = dp2[d-1]\n        dp5 = dp2[d-2]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp4[left], dp4[left+1], dp5[left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = ns()\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = list(ns())\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","input = raw_input\nrange = xrange\nn, m, h, v = map(int,input().split())\nremain = [n] * m\nind = 0\nfor i in range(h):\n    for odd in range(1, m, 2):\n        if remain[odd] % 2 == 1: break\n    else:\n        for odd in range(1, m, 2):\n            if remain[odd]: break\n        else: print(\"NO\"); exit()\n    if m == 1: print(\"NO\"); exit()\n    remain[odd]-= 1; remain[odd-1]-= 1\n\nif sum(x\/\/2 for x in remain) < v: print(\"NO\"); exit()\nprint(\"YES\")\ngrid = [[\".\"]*m for i in range(n)]\nfor j in range(0, m, 2):\n    placed = n - remain[j]\n    for i in range(placed):\n        grid[i][j] = \"<\"\n        grid[i][j+1] = \">\"\n    for i in range(placed, n, 2):\n        if i == n-1: break\n        grid[i][j] = \"^\"\n        grid[i+1][j] = \"v\"\n        v-= 1\n        if v == 0:\n            for row in grid: print(''.join(row))\n            exit()\n        if j == m-1: continue\n        grid[i][j+1] = \"^\"\n        grid[i+1][j+1] = \"v\"\n        v-= 1\n        if v == 0:\n            for row in grid: print(''.join(row))\n            exit()","def solve(s, k):\n    n = len(s)\n    if k >= n \/\/ 2:\n        return n\n    dpp = [[1] * (k + 1), [0] * (k + 1)]\n    for r in range(1, n):\n        dpc = [[0] * (k + 1) for _ in range(r + 2)]\n        dpc[r] = [1] * (k + 1)\n        for l in range(r - 1, -1, -1):\n            dpl, dpl1 = dpc[l], dpp[l + 1]\n            if s[l] == s[r]:\n                dpc[l] = [c + 2 for c in dpl1]\n            else:\n                dppl, dpcl1 = dpp[l], dpc[l + 1]\n                dpl[0] = max(dppl[0], dpcl1[0])\n                for p in range(1, k + 1):\n                    dpl[p] = max(dppl[p], dpcl1[p], dpl1[p - 1] + 2)\n        dpp = dpc\n\n    return dpp[0][k]\n\n\nprint(solve(input(), int(input())))\n","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = list(ns())\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and K == 0:\n  if s == t:\n    print(2)\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2\n    elif K:\n        dp[i][i+1][0] = 1\n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))","import numpy as np\n\n\ndef LCS_words(X,Y):\n    X,Y=\" \"+X,\" \"+Y\n    m,n=len(X),len(Y)\n    MAP=[[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            if Y[i]==X[j]:\n                MAP[i][j]=MAP[i-1][j-1]+1\n            else:\n                MAP[i][j]=max(MAP[i][j-1],MAP[i-1][j])\n    #print(np.array(MAP))\n    return MAP[n-1][m-1]\n\n\ns=input()\nk=int(input())\nbase=LCS_words(s,s[::-1])\nreverse=s[::-1]\n\nfor i in range(len(s)\/\/2):\n    if k==0:break\n    if [s[i],reverse[-i]]==[reverse[i],reverse[-i]]:\n        base +=2\n        k -=1\n\nprint(base+k)","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()\n","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1-i+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][i][j] for i in range(n+2) for j in range(K+1))\nprint(ans)","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ns = ns()\nls = len(s)\nlk = ni()\ndp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\nfor i in range(ls):\n  dp[i][i][0] = 1\nfor k in range(lk+1):\n  for dis in range(1, ls):\n    for i in range(ls - dis):\n      j = i + dis\n      if s[i] == s[j]:\n        dp[i][j][k] = dp[i+1][j-1][k] + 2\n      elif k:\n        dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n      dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n      \nprint(max(dp[0][ls-1]))\n","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][min(sll-1,K)]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][min(sll-1,K-1)]*2+2,ans)\nprint(ans)","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        if dp[i+1][j+1][k] < dp[i][j][k] + 1:\n          dp[i+1][j+1][k] = dp[i][j][k] + 1\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        dp4 = dp[cnt+1]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            dp5 = dp2[d-1]\n            dp6 = dp2[d-2]\n            dp7 = dp4[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp5[left],\n                    dp5[left+1], dp6[left+1]+plus)\n                dp7[left] = max(\n                    dp7[left], dp3[left], dp6[left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        dp4 = dp2[d-1]\n        dp5 = dp2[d-2]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp4[left], dp4[left+1], dp5[left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1-i+1)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-1][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)\n","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            for i in range(n-1):\n                dp[i][1][cnt] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][max(0,K-1)]*2+2,ans)\nprint(ans)","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    if n == 1:\n        print(1)\n        return\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp2[d-1][left],\n                    dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp3[left], dp2[d-2][left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp2[d]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp2[d-1][left], dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\n\nif N == 1:\n    ans = 1\nelif N == 2:\n    ans = 1\n    if S[1] == S[2]:\n        ans = 2\n    if K:\n        ans = 2\nelse:\n    dp1 = [[0]*(K+1) for _ in range(N+2)]\n    dp2 = [[0]*(K+1) for _ in range(N+2)]\n    for i in range(1, N+1):\n        dp1[i][0] = 1\n    for i in range(1, N):\n        dp2[i][0] = 1\n        if S[i] == S[i+1]:\n            dp2[i][0] = 2    \n        elif K:    \n            dp2[i][1] = 2\n    for s in range(3, N+1):\n        dp3 = [[0]*(K+1) for _ in range(N+2)]\n        for i in range(1, N-s+2):\n            j = i+s-1    \n            if S[i] == S[j]:\n                for k in range(K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], 2+dp1[i+1][k])\n            else:\n                dp3[i][0] = max(dp2[i+1][0], dp2[i][0], dp2[i+1][0])\n                for k in range(1, K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], dp1[i+1][k], 2+dp1[i+1][k-1])\n        '''\n        dp1 = [k[:] for k in dp2]\n        dp2 = [k[:] for k in dp3]\n        '''\n        dp1 = dp2[:]\n        dp2 = dp3[:]\n    ans = max(dp3[1][k] for k in range(K+1))\nprint(ans)\n'''\nMLE\u3057\u305f\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    dp[i][i+1][0] = 1\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2    \n    elif K:    \n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))\n'''   ","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[0][1][i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            for i in range(n-1):\n                dp[cnt][1][i] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[cnt][d][left] = max(\n                    dp[cnt][d][left], dp[cnt][d-1][left],\n                    dp[cnt][d-1][left+1], dp[cnt][d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp[cnt][d][left], dp[cnt][d-2][left+1]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[k][d][left] = max(\n                dp[k][d][left], dp[k][d-1][left], dp[k][d-1][left+1], dp[k][d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()","import sys\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\n\nimport numpy as np\n\n\"\"\"\n\u30fbreversed LCS = \u6700\u5927\u9577\u306e\u56de\u6587\n\u30fb(\u9577\u3055\u3001\u59cb\u70b9\u3001\u5909\u66f4\u30b3\u30b9\u30c8) -> opt value\n\"\"\"\n\nS = np.frombuffer(readline().rstrip(),'S1')\nN = len(S)\nK = int(readline())\n\ndp = [None] * (N+1) # \u9577\u3055 -> array\ndp[0] = None # \u81ea\u8eab\u306a\u3044\u306e\u3067\u4f7f\u308f\u306a\u3044\ndp[1] = np.zeros((N,K+10),np.int32); dp[1][:,0] = 1\nif N >= 2:\n    dp[2] = np.zeros((N-1,K+10),np.int32)\n    dp[2][:,0] = 1+(S[:-1]==S[1:])\n    dp[2][:,1] = 2\n\nfor n in range(3,N+1):\n    arr = np.zeros((N-n+1,K+10),np.int32)\n    # \u4e21\u7aef\u3092\u30de\u30c3\u30c1\u3057\u306a\u3044\u5834\u5408\n    np.maximum(arr,dp[n-1][:-1],out=arr)\n    np.maximum(arr,dp[n-1][1:],out=arr)\n    # \u4e21\u7aef\u3092\u30b3\u30b9\u30c8\u306a\u3057\u3067\u30de\u30c3\u30c1\u3055\u305b\u308b\u5834\u5408\n    match = (S[:-n+1]==S[n-1:])\n    np.maximum(arr,match[:,None]*(dp[n-2][1:-1]+2),out=arr)\n    # \u4e21\u7aef\u3092\u30b3\u30b9\u30c8\u3042\u308a\u3067\u30de\u30c3\u30c1\u3055\u305b\u308b\u5834\u5408\n    np.maximum(arr[:,1:],dp[n-2][1:-1,:-1]+2,out=arr[:,1:])\n    \n    dp[n] = arr\n\nanswer = dp[-1][0][:K+1].max()\nprint(answer)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\nprint(ans)","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+1)] for _ in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][i+1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][i+l][k] = dp[i+1][i+l-1][k] + 2\n            else:\n                dp[i][i+l][k] = max(dp[i+1][i+l][k], dp[i][i+l-1][k])\n                if k>=1:\n                    dp[i][i+l][k] = max(dp[i][i+l][k], dp[i+1][i+l-1][k-1]+2)\nans = max(dp[0][n][j] for j in range(K+1))\nprint(ans)","s = input()\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nimport sys\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\nif N == 1:\n    print (1)\n    sys.exit()\nelif N == 2:\n    if S[1] == S[2] or K > 0:\n        print (2)\n    else:\n        print (1)\n    sys.exit()\n\ndp = [[[0] * (K+1) for i in range(N+2)]]\nans = 0\n\nfor i in range(1,N+1):\n\n    dp.append( [[0] * (K+1) for i in range(N+2)] )\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\n    dp[i-1] = []\n\nprint (ans)\n                \n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\ns = S()\nn = len(s)\nk = I()\ndp = defaultdict(lambda:1)\nfor diff in range(1, n):\n    for l in range(n):\n        for m in range(k + 1):\n            r = l + diff\n            if r >= n:\n                continue\n            if r - l == 1:\n                dp[(l, r, m)] = 2 if s[l] == s[r] or m else 1\n            elif s[l] == s[r]:\n                dp[(l, r, m)] = dp[(l + 1, r - 1, m)] + 2\n            else:\n                dp[(l, r, m)] = max(dp[(l, r, m)], dp[(l + 1, r, m)], dp[(l, r - 1, m)])\n                if m:\n                    dp[(l, r, m)] = max(dp[(l, r, m)], dp[(l + 1, r - 1, m - 1)] + 2)\n\nprint(dp[(0, n - 1, k)])\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], max(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and k == 0:\n  if s == t:\n    print(2)\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\nprint(ans)","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk *= 2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","def solve(s, k):\n    n = len(s)\n    pdp = [[0] * (k + 1) for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for r in range(l, n):\n            dpr, dpr1 = dp[r], pdp[r - 1]\n            inc = 1 if l == r else 2\n            is_same = s[l] == s[r]\n            for p in range(k + 1):\n                if is_same:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    if p:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p], dpr1[p - 1] + inc)\n                    else:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p])\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = [[[0 for _ in range(K+1)]for _ in range(N)]for _ in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[2]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n):\n        for cnt in range(k+1):\n            dp[i][0][cnt] = 1\n\n    for i in range(n-1):\n        if s[i] != s[i+1]:\n            dp[i][1][0] = 1\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()","def solve(s, k):\n    n = len(s)\n    dp = [[[0] * (k + 1) for _ in range(n)] for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dpl, dpl1 = dp[l], dp[l + 1]\n        for r in range(l, n):\n            dpr, dpr1 = dpl[r], dpl1[r - 1]\n            inc = 1 if l == r else 2\n            for p in range(k + 1):\n                if s[l] == s[r]:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    dpr[p] = max(dpl1[r][p], dp[l][r - 1][p])\n                    if p:\n                        dpr[p] = max(dpr[p], dpr1[p - 1] + inc)\n    return dp[0][-1][k]\n\n\nprint(solve(input(), int(input())))\n","s = input()\nn = len(s)\nk = int(input())\n\n\ndp = [[[0] * (n + 1) for i in range(n + 1)] for i in range(k + 1)]\nfor i in range(n):\n    dp[0][i][i + 1] = 1\n\nfor length in range(2, n + 1):\n    for l in range(n):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l][r] = max(2 + dp[ki][l + 1][r - 1], dp[ki][l][r])\n            else:\n                dp[ki][l][r] = max(dp[ki][l + 1][r], dp[ki][l][r - 1], dp[ki][l][r])\n                if ki - 1 >= 0:\n                    dp[ki][l][r] = max(dp[ki - 1][l + 1][r] + 2, dp[ki - 1][l][r - 1] + 2, dp[ki][l][r])\n\nprint(dp[-1][0][-1])","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(100):\n        table.append([0 for _ in range(100)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","s = input()\nk = int(input())\nn = len(s)\ndp = [[[0]*(n+1) for i in range(n+1)] for j in range(n+1)]\nfor j in range(k+1):\n    for i in range(n):\n        dp[i][i+1][j] = 1\nfor j in range(2,n+1):\n  for i in range(n+1-j):\n    for l in range(k+1):\n      jj = i+j\n      if s[i] == s[jj-1]:\n        dp[i][jj][l] = dp[i+1][jj-1][l]+2\n      else:\n        dp[i][jj][l] = max(dp[i+1][jj][l],dp[i][jj-1][l])\n        if l-1>=0:\n          dp[i][jj][l] = max(dp[i][jj][l],dp[i+1][jj-1][l-1]+2)\nans = 0\nfor i in range(k+1):\n  ans = max(ans,dp[0][n][i])\nprint(ans)","\n\"\"\"\n\nhttps:\/\/atcoder.jp\/contests\/agc021\/tasks\/agc021_d\n\n\u3042\u308b\u90e8\u5206\u3067cut\u3057\u305f\u3068\u3059\u308b\u3002\n\u524d\u534a\u3068\u5f8c\u534a\u306eLCS\u3092\u6c42\u3081\u305f\u3068\u3059\u308b\u3068\u3001\u4ea4\u5dee\u3057\u305f\u5f8c\u306eLCS\u306e\u9577\u3055\u3082\u540c\u3058\n\u2192\u5de6\u304b\u3089index i\u307e\u3067\u3068\u53f3\u304b\u3089index j\u307e\u3067\u306eLCS\u3092\u6c42\u3081\u308c\u3070\u3044\u3044 (i < j)\n\u3042\u3068\u306f\u3001\u666e\u901a\u306eLCS\u3068\u540c\u69d8\u306edp\u3067\u3044\u3051\u308b\n\ndp[i][j][k] = \u5de6\u304b\u3089i\u756a\u76ee\u306e\u6587\u5b57\u307e\u3067\u3068\u3001\u53f3\u304b\u3089index j\u306e\u6587\u5b57\u307e\u3067\u306ek\u56de\u66ff\u3048\u305f\u969b\u306eLCS\u9577\u3055\n\u3042\u3068\u306f2\u500d\u3059\u308c\u3070\u5927\u4f53\u884c\u3051\u308b\uff1f\ni+1 == j\u3067\u306f\u30012\u500d\u3059\u308c\u3070\u304ak\ni+1 < j \u3067\u306f\u3001\u771f\u3093\u4e2d\u306e\u6587\u5b57\u3092\u4f7f\u3048\u308b\u306e\u3067\u30012\u500d\u3057\u30661\u8db3\u3059\n\n\"\"\"\n\nS = input()\nS = \" \"+S\nK = int(input())\nN = len(S)-1\n\ndp = [[[0] * (K+1) for i in range(N+2)] for j in range(N+2)]\nans = 0\n\nfor i in range(1,N+1):\n\n    for j in range(N,i,-1):\n\n        for k in range(K+1):\n\n            #\u540c\u3058\u5834\u5408\u3001\u3069\u3063\u3061\u3082\u9032\u3081\u308b\n            if S[i] == S[j]:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j+1][k] + 1)\n            else:\n                dp[i][j][k] = max( dp[i][j][k] , dp[i-1][j][k] , dp[i][j+1][k] )\n                if k != 0:\n                    dp[i][j][k] = max(dp[i][j][k] , dp[i-1][j+1][k-1] + 1)\n\n            if i+1 == j:\n                ans = max(ans , dp[i][j][k] * 2)\n            else:\n                ans = max(ans , dp[i][j][k] * 2 + 1)\n\nprint (ans)\n                \n","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","from collections import defaultdict\nS=raw_input()\nL=len(S)\nK=input()\n\ndp = defaultdict(lambda: 0)\n\nfor i in range(L):\n\tfor j in range(K+1):\n\t\tdp[(i,i,j)]=1\n\nfor i in range(1,L):\t\t\t#i:width\n\tfor j in range(1,L-i+1):\t#j:start point\n\t\tl=j\n\t\tr=j+i\n\t\tfor k in range(K+1):\n\t\t\tdp[(l,r,k)] = max(dp[(l+1,r,k)], dp[(l,r-1,k)]);\n\t\t\tif(S[l-1] == S[r-1]):\n\t\t\t\tdp[(l,r,k)] = max(dp[(l,r,k)], dp[(l+1,r-1,k)] + 2);\n\t\t\telse:\n\t\t\t\tif(k):\n\t\t\t\t\tdp[(l,r,k)] = max(dp[(l,r,k)], dp[(l+1,r-1,k-1)] + 2);\n\nprint dp[(1,L,K)]","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = [min(2*K+1,n)]\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ansls.append(max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg))\nprint(max(ansls))","S=input()\nK=int(input())\nS2=S[::-1]\nl=len(S)\n\ndp=[[0 for x in range(l+1)] for y in range(l+1)]\ntrace=[[0 for x in range(l+1)] for y in range(l+1)]\nfor i in range(l+1):\n  trace[i][0]=-1\n  trace[0][i]=-1\n\nfor i in range(l):\n  for j in range(l):\n    if S[i]==S2[j]:\n      dp[i+1][j+1]=dp[i][j]+1\n      trace[i+1][j+1]=1\n    elif dp[i+1][j] > dp[i][j+1]:\n      dp[i+1][j+1]=dp[i+1][j]\n      trace[i+1][j+1]=2\n    else:\n      dp[i+1][j+1]=dp[i][j+1]\n      trace[i+1][j+1]=3\ncnt=[0 for t in range(l+1)]\ndef tracedo(trace,a,b):\n  if trace[a][b]==-1:\n    return\n  elif trace[a][b]==2:\n    tracedo(trace,a,b-1)\n  elif trace[a][b]==3:\n    tracedo(trace,a-1,b)\n  else:\n    tracedo(trace,a-1,b-1)\n    cnt[a-1]=1\n  return\n\ntracedo(trace,l,l)\nans=0\nfor i in range(l):\n  if cnt[i]==0 and cnt[l-i-1]==0 and i!=(l-i-1):\n    ans+=2\n  elif cnt[i]==0 and cnt[l-i-1]==0 and i==(l-i-1):\n    ans+=1\nprint(dp[l][l]+min(ans,K*2))","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  dp = [[[0]*(lk+1) for _ in range(ls)] for i in range(ls)]\n  for i in range(ls):\n    dp[i][i][0] = 1\n  for k in range(lk+1):\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        if s[i] == s[j]:\n          dp[i][j][k] = dp[i+1][j-1][k] + 2\n        elif k:\n          dp[i][j][k] = dp[i+1][j-1][k-1] + 2\n        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n\n  print(max(dp[0][ls-1]))\n  return\n\nsolve()","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K and dp[i+1][L-ind][k] == dp[i][L-ind-1][k]:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n        dp.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = list(map(ord, list(input())))\nls = len(s)\nlk = int(input())\nif lk*2 >= ls: print(ls); exit(0)\nlk = 2*lk - ls%2\ndp = [[[0]*(lk+1) for _ in range(ls+1)] for i in range(ls+1)]\nfor k in range(lk+1):\n  for i in range(ls):\n    for j in range(ls):\n      if s[i] == s[-j-1]:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i][j][k] + 1)\n      else:\n        dp[i+1][j+1][k] = max(dp[i+1][j+1][k], dp[i+1][j][k], dp[i][j+1][k], (k > 0)*(dp[i][j][k-1] + 1))\nprint(max(dp[ls][ls]))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nansls = [min(2*K+1,n)]\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,min(K,sll)+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ansls.append(max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg))\nprint(max(ansls))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+1+flg,ans)\nprint(ans)","def solve(s, k):\n    n = len(s)\n    dp = [[[0] * (k + 1) for _ in range(n)] for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dpl, dpl1 = dp[l], dp[l + 1]\n        for r in range(l, n):\n            dpr, dpr1 = dpl[r], dpl1[r - 1]\n            inc = 1 if l == r else 2\n            for p in range(k + 1):\n                if s[l] == s[r]:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    dpr[p] = max(dpl1[r][p], dp[l][r - 1][p])\n                    if p:\n                        dpr[p] = max(dpr[p], dpr1[p - 1] + inc)\n    return dp[0][-1][k]\n\n\nprint(solve(input(), int(input())))\n","S=input()\nK=int(input())\nS2=S[::-1]\nl=len(S)\n\ndp=[[0 for x in range(l+1)] for y in range(l+1)]\ntrace=[[0 for x in range(l+1)] for y in range(l+1)]\nfor i in range(l+1):\n  trace[i][0]=-1\n  trace[0][i]=-1\n\nfor i in range(l):\n  for j in range(l):\n    if S[i]==S2[j]:\n      dp[i+1][j+1]=dp[i][j]+1\n      trace[i+1][j+1]=1\n    elif dp[i+1][j] > dp[i][j+1]:\n      dp[i+1][j+1]=dp[i+1][j]\n      trace[i+1][j+1]=2\n    else:\n      dp[i+1][j+1]=dp[i][j+1]\n      trace[i+1][j+1]=3\ncnt=[0 for t in range(l+1)]\ndef tracedo(trace,a,b):\n  if trace[a][b]==-1:\n    return\n  elif trace[a][b]==2:\n    tracedo(trace,a,b-1)\n  elif trace[a][b]==3:\n    tracedo(trace,a-1,b)\n  else:\n    tracedo(trace,a-1,b-1)\n    cnt[a-1]=1\n  return\n\ntracedo(trace,l,l)\nans=0\nfor i in range(l):\n  if cnt[i]==0 and cnt[l-i-1]==0:\n    ans+=1\nprint(dp[l][l]+min(ans*2,K*2))","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","s = input()\nn = len(s)\nk = int(input())\n\ndp = [[0] * ((n + 1) * (n + 1)) for i in range(k + 1)]\nOFFSET = n + 1\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][i * OFFSET + i + 1] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l * OFFSET + r] = max(2 + dp[ki][(l + 1) * OFFSET + r - 1], dp[ki][l * OFFSET + r])\n            else:\n                dp[ki][l * OFFSET + r] = max(dp[ki][(l + 1) * OFFSET + r], dp[ki][l * OFFSET + r - 1], dp[ki][l * OFFSET + r])\n                if ki - 1 >= 0:\n                    dp[ki][l * OFFSET + r] = max(dp[ki - 1][(l + 1) * OFFSET + r - 1] + 2, dp[ki][l * OFFSET + r])\n\nans = 0\nfor i in range(k + 1):\n    ans = max(ans, dp[i][n])\nprint(ans)","s = input()\nk = int(input())\nn = len(s)\ndp = [[[0]*(n+1) for i in range(n+1)] for j in range(n+1)]\nfor j in range(k+1):\n    for i in range(n):\n        dp[i][i+1][j] = 1\nfor j in range(2,n+1):\n  for i in range(n+1-j):\n    for l in range(k+1):\n      jj = i+j\n      if s[i] == s[jj-1]:\n        dp[i][jj][l] = dp[i+1][jj-1][l]+2\n      else:\n        dp[i][jj][l] = max(dp[i+1][jj][l],dp[i][jj-1][l])\n        if l-1>=0:\n          dp[i][jj][l] = max(dp[i][jj][l],dp[i+1][jj-1][l-1]+2)\nans = 0\nfor i in range(k+1):\n  ans = max(ans,dp[0][n][i])\nprint(ans)","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\nif n == 2 and K == 0:\n  if s == t:\n    print(2)\n    exit()\n  else:\n    print(1)\n    exit()\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  if flg:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K]*2+2,ans)\n  elif K > 0:\n    ans= max(dp[sfl][sll][K]*2+1,dp[sfl][sll-1][K-1]*2+2,ans)\n  else:\n    ans= max(dp[sfl][sll][K]*2+1,ans)\nprint(ans)","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(110):\n        table.append([0 for _ in range(110)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u4f7f\u3063\u305f\u56de\u6570][\u5de6\u7aef\u304b\u3089\u306e\u8ddd\u96e2][\u5de6\u7aef]\n    dp = [[[1]*(n-i) for i in range(n)] for _ in range(k+1)]\n\n    dp2 = dp[0][1]\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp2[i] = 2\n    if k > 0:\n        for cnt in range(1, k+1):\n            dp2 = dp[cnt][1]\n            for i in range(n-1):\n                dp2[i] = 2\n\n    for cnt in range(k):\n        dp2 = dp[cnt]\n        for d in range(2, n):\n            dp3 = dp2[d]\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp3[left] = max(\n                    dp3[left], dp2[d-1][left],\n                    dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n                dp[cnt+1][d][left] = max(\n                    dp[cnt+1][d][left], dp3[left], dp2[d-2][left+1]+2)\n    dp2 = dp[k]\n    for d in range(2, n):\n        dp3 = dp[d]\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp3[left] = max(\n                dp3[left], dp2[d-1][left], dp2[d-1][left+1], dp2[d-2][left+1]+plus)\n    print(dp[-1][-1][0])\n\n\nmain()","S = input()\nK = int(input())\nN = len(S)\n\n# MLE\u5bfe\u7b56\nif K * 2 >= N-1:\n    print(N)\n    exit()\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","# coding=utf-8\n\ndef lcs(s1,s2):\n    table = []\n    for _ in range(310):\n        table.append([0 for _ in range(310)])\n\n    for y in range(1,len(s1)+1):\n        for x in range(1,len(s2)+1):\n            match = 0\n            if s1[y-1]==s2[x-1]:\n                match = 1\n\n            v1 = table[y-1][x-1]+match\n            v2 = table[y-1][x]\n            v3 = table[y][x-1]\n            table[y][x] = max(v1,v2,v3)\n    return table[len(s1)][len(s2)]\n\ndef log(s,s2):\n    return\n    print(\"---\")\n    print(\"s :\"+\"\".join(s))\n    print(\"s2:\"+\"\".join(s2))\n\ns = list(input())\nk = int(input())\ns2 = s[::-1]\nlog(s,s2)\n\nab = set(s)\n\nfor i in range(k):\n    idx = -1\n    char = \"\"\n    r = -1\n    for j in range(len(s)):\n        for x in ab:\n            t = s[:]\n            t[j] = x\n            t2 = t[::-1]\n            if lcs(t,t2)>r:\n                r = lcs(t,t2)\n                idx = j\n                char = x\n\n    s[idx] = char\n    s2 = s[::-1]\n    log(s,s2)\n\n\nprint(lcs(s,s2))\n","def solve(s, k):\n    n = len(s)\n    pdp = [[0] * (k + 1) for _ in range(n + 1)]\n    for l in range(n - 1, -1, -1):\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for r in range(l, n):\n            dpr, dpr1 = dp[r], pdp[r - 1]\n            inc = 1 if l == r else 2\n            is_same = s[l] == s[r]\n            for p in range(k + 1):\n                if is_same:\n                    dpr[p] = dpr1[p] + inc\n                else:\n                    if p:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p], dpr1[p - 1] + inc)\n                    else:\n                        dpr[p] = max(pdp[r][p], dp[r - 1][p])\n        pdp = dp\n\n    return pdp[-2][k]\n\n\nprint(solve(input(), int(input())))\n","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    if K>100:\n        K = 100\n    dp = [[[0]*(K+1) for _ in range(N)] for i in range(N)]\n    for i in range(N):\n        for j in range(K+1):\n            dp[i][i][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[l][r][k] = dp[l+1][r-1][k] + 2\n                else:\n                    if k>0:\n                        dp[l][r][k] = max(dp[l+1][r][k],dp[l][r-1][k],dp[l+1][r-1][k-1]+2)\n                    else:\n                        dp[l][r][k] = max(dp[l + 1][r][k], dp[l][r - 1][k])\n    ans = max(dp[0][-1])\n    #print(dp)\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","S = input()\nK = int(input())\nN = len(S)\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","def LCS_words(X,Y):\n    X,Y=\" \"+X,\" \"+Y\n    m,n=len(X),len(Y)\n    MAP=[[0 for i in range(m)] for j in range(n)]\n    for i in range(1,n):\n        for j in range(1,m):\n            if Y[i]==X[j]:\n                MAP[i][j]=MAP[i-1][j-1]+1\n            else:\n                MAP[i][j]=max(MAP[i][j-1],MAP[i-1][j])\n    return MAP[n-1][m-1]\n\n\ns=input()\nk=int(input())\nprint(LCS_words(s,s[::-1])+k*2)","def examA():\n    N = I()\n    ans = 0\n    print(ans)\n    return\n\n# \u53c2\u8003 https:\/\/atcoder.jp\/contests\/agc021\/submissions\/8392122\ndef examB():\n    def norm2(vec):\n        return math.sqrt(vec[0] ** 2 + vec[1] ** 2)\n    # any 2 points must have different position.\n    def ConvexHull(point_list):\n        pos2idx = {point_list[i]: i for i in range(len(point_list))}\n        y_val = defaultdict(list)\n        x_list = sorted(list(set([p[0] for p in point_list])))\n        for x, y in point_list:\n            y_val[x].append(y)\n\n        upper = [(x_list[0], max(y_val[x_list[0]]))]\n        lower = [(x_list[0], min(y_val[x_list[0]]))]\n        prev = float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = upper[-1]\n            x1, y1 = xi, max(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) < prev:\n                upper.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = upper[-1]\n                    if len(upper) == 1:\n                        upper.append((x1, y1))\n                        break\n                    x00, y00 = upper[-2]\n                    if (y1 - y0) \/ (x1 - x0) > (y1 - y00) \/ (x1 - x00):\n                        upper.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        upper.append((x1, y1))\n                        break\n\n        prev = -float('inf')\n        for xi in x_list[1:]:\n            x0, y0 = lower[-1]\n            x1, y1 = xi, min(y_val[xi])\n            if (y1 - y0) \/ (x1 - x0) > prev:\n                lower.append((x1, y1))\n                prev = (y1 - y0) \/ (x1 - x0)\n            else:\n                while True:\n                    x0, y0 = lower[-1]\n                    if len(lower) == 1:\n                        lower.append((x1, y1))\n                        break\n                    x00, y00 = lower[-2]\n                    if (y1 - y0) \/ (x1 - x0) < (y1 - y00) \/ (x1 - x00):\n                        lower.pop()\n                    else:\n                        prev = (y1 - y0) \/ (x1 - x0)\n                        lower.append((x1, y1))\n                        break\n\n        # return upper, lower\n        # return [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n\n        upper_idx, lower_idx = [pos2idx[xy] for xy in upper], [pos2idx[xy] for xy in lower]\n        if upper_idx[-1] == lower_idx[-1]:\n            upper_idx.pop()\n        CH_idx = upper_idx\n        CH_idx.extend(reversed(lower_idx))\n        if CH_idx[0] == CH_idx[-1] and len(CH_idx) > 1:\n            CH_idx.pop()\n        return CH_idx\n\n    N = I()\n    P = [[]for _ in range(N)]\n    D = defaultdict(int)\n    for i in range(N):\n        x,y = LI()\n        P[i] = (x,y)\n        D[(x,y)] = i\n    C = ConvexHull(P)\n    ans = [0]*N\n    if len(C)==2:\n        for c in C:\n            ans[c] = 0.5\n        for v in ans:\n            print(v)\n        return\n    #print(C)\n    for i,c in enumerate(C):\n        s, t, u = C[i - 1], C[i], C[(i + 1) % len(C)]\n        x0, y0 = P[s]\n        x1, y1 = P[t]\n        x2, y2 = P[u]\n        vec0 = (y0 - y1, x1 - x0)\n        vec1 = (y1 - y2, x2 - x1)\n        ans[t] =  math.acos((vec0[0] * vec1[0] + vec0[1] * vec1[1]) \/ (norm2(vec0) * norm2(vec1))) \/ (2 * math.pi)\n    for v in ans:\n        print(v)\n    return\n\ndef examC():\n    ans = 0\n    print(ans)\n    return\n\ndef examD():\n    S = SI()\n    N = len(S)\n    K = I()\n    dp = defaultdict(lambda:[0 for _ in range(K+1)])\n    for i in range(N):\n        for j in range(K+1):\n            dp[(i,i)][j] = 1\n    for i in range(2,N+1):\n        for k in range(K+1):\n            for l,r in enumerate(range(i-1,N)):\n                if S[l]==S[r]:\n                    dp[(l,r)][k] = dp[(l+1,r-1)][k] + 2\n                else:\n                    if k>0:\n                        dp[(l,r)][k] = max(dp[(l+1,r)][k],dp[(l,r-1)][k],dp[(l+1,r-1)][k-1]+2)\n                    else:\n                        dp[(l,r)][k] = max(dp[(l + 1,r)][k], dp[(l,r - 1)][k])\n    ans = max(dp[(0,N-1)])\n    #print(dp)\n    print(ans)\n    return\n\ndef examE():\n    ans = 0\n    print(ans)\n    return\n\ndef examF():\n    ans = 0\n    print(ans)\n    return\n\nfrom decimal import Decimal as dec\nimport sys,bisect,itertools,heapq,math,random\nfrom copy import deepcopy\nfrom heapq import heappop,heappush,heapify\nfrom collections import Counter,defaultdict,deque\nread = sys.stdin.buffer.read\nreadline = sys.stdin.buffer.readline\nreadlines = sys.stdin.buffer.readlines\ndef I(): return int(input())\ndef LI(): return list(map(int,sys.stdin.readline().split()))\ndef DI(): return dec(input())\ndef LDI(): return list(map(dec,sys.stdin.readline().split()))\ndef LSI(): return list(map(str,sys.stdin.readline().split()))\ndef LS(): return sys.stdin.readline().split()\ndef SI(): return sys.stdin.readline().strip()\nglobal mod,mod2,inf,alphabet,_ep\nmod = 10**9 + 7\nmod2 = 998244353\ninf = 10**18\n_ep = 10**(-12)\nalphabet = [chr(ord('a') + i) for i in range(26)]\n\nsys.setrecursionlimit(10**7)\n\nif __name__ == '__main__':\n    examD()\n\n\"\"\"\n142\n12 9 1445 0 1\nasd dfg hj o o\naidn\n\"\"\"","import sys\n\nreadline = sys.stdin.buffer.readline\n\nns = lambda: readline().rstrip()\nni = lambda: int(readline().rstrip())\nnm = lambda: map(int, readline().split())\nnl = lambda: list(map(int, readline().split()))\n\ndef solve():\n  s = list(ns())\n  ls = len(s)\n  lk = ni()\n  if lk * 2 >= ls:\n    print(ls)\n    return\n  dp = [[[0]*ls for _ in range(ls)] for i in range(2)]\n  ans = 0\n  for i in range(ls):\n    dp[0][i][i] = 1\n  for k in range(lk+1):\n    v = k & 1\n    for dis in range(1, ls):\n      for i in range(ls - dis):\n        j = i + dis\n        dp[v][i][j] = 0\n        if s[i] == s[j]:\n          dp[v][i][j] = dp[v][i+1][j-1] + 2\n        elif k:\n          dp[v][i][j] = dp[v^1][i+1][j-1] + 2\n        dp[v][i][j] = max(dp[v][i][j], dp[v][i+1][j], dp[v][i][j-1])\n    ans = max(ans, dp[v][0][-1])\n\n  print(ans)\n  return\n\nsolve()","import sys\ninput = lambda : sys.stdin.readline().rstrip()\nsys.setrecursionlimit(max(1000, 10**9))\nwrite = lambda x: sys.stdout.write(x+\"\\n\")\n\n\n\ns = input()\nK = int(input())\nn = len(s)\ndp = [[[0]*(K+1) for _ in range(n+2-i)] for i in range(n+1)]\nfor i in range(n):\n    for j in range(K+1):\n        dp[i][1][j] = 1\nfor l in range(2, n+1):\n    for i in range(n-l+1):\n        for k in range(K+1):\n#             print(l, i, i+l, j)\n            if s[i]==s[i+l-1]:\n                dp[i][l][k] = dp[i+1][l-2][k] + 2\n            else:\n                dp[i][l][k] = max(dp[i+1][l-1][k], dp[i][l-1][k])\n                if k>=1:\n                    dp[i][l][k] = max(dp[i][l][k], dp[i+1][l-2][k-1]+2)\nans = max(dp[0][i][j] for i in range(n+2) for j in range(K+1))\nprint(ans)","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], max(i+1, L-ind))\n                    if k < K:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        #dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], max(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","S = input()\nK = int(input())\nN = len(S)\n\ndp = [[[0 for _ in range(K+1)] for _ in range(N)] for _ in range(N)]\nfor i in range(N):\n    for k in range(K+1):\n        dp[i][i][k] = 1\n\nfor _j in range(1, N):\n    for i in range(N):\n        j = i + _j\n        if j < N:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i][j][k], dp[i+1][j][k], dp[i][j-1][k])\n                if _j == 1:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = 2\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = 2\n                else:\n                    if S[i] == S[j]:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n                    else:\n                        if k+1 <= K:\n                            dp[i][j][k+1] = max(dp[i][j][k], dp[i+1][j-1][k] + 2)\n\nprint(max(dp[0][N-1]))\n\n","def lcs(s1, s2):\n    dp = []\n    for s2_k in s2:\n        bgn_idx = 0\n        for i, cur_idx in enumerate(dp):\n            chr_idx = s1.find(s2_k, bgn_idx) + 1\n            if not chr_idx:\n                break\n            dp[i] = min(cur_idx, chr_idx)\n            bgn_idx = cur_idx\n        else:\n            chr_idx = s1.find(s2_k, bgn_idx) + 1\n            if chr_idx:\n                dp.append(chr_idx)\n    return len(dp)\n\nS = raw_input()\nK = int(raw_input())\n\nrevstr = S[::-1]\n\ncharset = set(S)\n\ndef replace_calclcs(i, candstrlist):\n    newcand = candstrlist[:]\n    for candstr, maxlcs in candstrlist:\n        for char in charset:\n            newrevstr = candstr[:i] + char + candstr[i+1:]\n            newlcs = lcs(S, newrevstr)\n            if(newlcs > maxlcs):\n                newcand.append([newrevstr, newlcs])\n    return newcand\n\ncands = [[revstr, lcs(S, revstr)]]\nfor i in range(len(revstr)):\n    cands = replace_calclcs(i, cands)\n\nprint(max(map(lambda x: x[1], cands)))\n","#coding:utf-8\ndef check(s, t):\n    count = 0\n    v = 0\n    for i in range(len(s)):\n        if s[i] in t[i]:\n            count += 1\n        else:\n            if count > v:\n                v = count\n            count = 0\n    return v\n    \ns = list(input())\nk = int(input())\nt = []\ntg = []\npat = [0]*len(s)\nfor i in s[::-1]:\n    t.append(i)\n    tg.append(i)\n\nfor i in range(k):\n    v = check(s, t)\n    c = 0\n    for j in range(len(s)):\n        t[j] = s[j]\n        if v < check(s, t):\n            ind = j\n        t[j] = tg[j]\n    tg[ind] = s[ind]\n\nprint(check(s, tg))\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    if K >= L\/\/2:\n        ans = L\n    else:\n        dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n        ans = 0\n        for ind in reversed(range(L)):\n            # [0, ind), [ind, L-1]\n            s = S[ind]\n            for i in range(ind):\n                for k in reversed(range(K+1)):\n                    if S[i] == s:\n                        dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                    else:\n                        dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                        dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                        if k < K and dp[i+1][L-ind][k] == dp[i][L-ind-1][k]:\n                            dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                            dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n            for k in range(K+1):\n                ans = max(ans, 2*dp[ind][L-ind][k])\n                ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n            dp.pop()\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","s = input()\nK = int(input())\nn = len(s)\nt = s[::-1]\nif 2*K+1 >= n:\n  print(n)\n  exit()\ndp = [[[0 for i in range(K+1)] for j in range(n+1)] for k in range(n+1)]\n\nans = min(2*K+1,n)\nfor center in range(1,n-1):\n  flg = 0\n  sf = s[:center]\n  sl = t[:n-center-1]\n  if s[center] == s[center+1]:\n    flg = 1\n  sfl = len(sf)\n  sll = len(sl)\n  for j in range(1,sll+1):\n    dp[sfl][j][0] = max(dp[sfl-1][j][0],dp[sfl][j-1][0])\n    if sf[-1] != sl[j-1]:\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n    if sf[-1] == sl[j-1]:\n      dp[sfl][j][0] = max(dp[sfl][j][0],dp[sfl-1][j-1][0]+1)\n      for k in range(1,K+1):\n        dp[sfl][j][k] = max(dp[sfl-1][j-1][k-1]+1,dp[sfl-1][j-1][k]+1,dp[sfl-1][j][k],dp[sfl][j-1][k])\n  ans= max(dp[sfl][sll][min(K,sll)]*2+1,dp[sfl][sll-1][min(K,sll)]*2+1+flg,ans)\nprint(ans)","from collections import defaultdict, deque, Counter\nfrom heapq import heappush, heappop, heapify\nimport math\nimport bisect\nimport random\nfrom itertools import permutations, accumulate, combinations, product\nimport sys\nimport string\nfrom bisect import bisect_left, bisect_right\nfrom math import factorial, ceil, floor\nfrom functools import reduce\n\n\nsys.setrecursionlimit(2147483647)\nINF = 10 ** 13\ndef LI(): return list(map(int, sys.stdin.buffer.readline().split()))\ndef I(): return int(sys.stdin.buffer.readline())\ndef LS(): return sys.stdin.buffer.readline().rstrip().decode('utf-8').split()\ndef S(): return sys.stdin.buffer.readline().rstrip().decode('utf-8')\ndef IR(n): return [I() for i in range(n)]\ndef LIR(n): return [LI() for i in range(n)]\ndef SR(n): return [S() for i in range(n)]\ndef LSR(n): return [LS() for i in range(n)]\ndef SRL(n): return [list(S()) for i in range(n)]\ndef MSRL(n): return [[int(j) for j in list(S())] for i in range(n)]\nmod = 1000000007\n\n\ns = S()\nn = len(s)\nk = I()\ndp = [[[1] * (k + 1) for _ in range(n)] for _ in range(n)]\nfor diff in range(1, n):\n    for l in range(n):\n        for m in range(k + 1):\n            r = l + diff\n            if r >= n:\n                continue\n            if r - l == 1:\n                dp[l][r][m] = 2 if s[l] == s[r] or m else 1\n            elif s[l] == s[r]:\n                dp[l][r][m] = dp[l + 1][r - 1][m] + 2\n            else:\n                dp[l][r][m] = max(dp[l][r][m], dp[l + 1][r][m], dp[l][r - 1][m])\n                if m:\n                    dp[l][r][m] = max(dp[l][r][m], dp[l + 1][r - 1][m - 1] + 2)\n\nprint(dp[0][n - 1][k])\n","import sys\ninput = sys.stdin.buffer.readline\n\nS = list(input().rstrip())\nK = int(input())\n\nL = len(S)\n\ndef main():\n    dp = [[[0]*(K+1) for _ in range(L+1)] for _ in range(L+1)]\n\n    ans = 0\n    for ind in reversed(range(L)):\n        # [0, ind), [ind, L-1]\n        s = S[ind]\n        for i in range(ind):\n            for k in reversed(range(K+1)):\n                if S[i] == s:\n                    dp[i+1][L-ind][k] = dp[i][L-ind-1][k] + 1\n                else:\n                    dp[i+1][L-ind][k] = max(dp[i][L-ind][k], dp[i+1][L-ind-1][k])\n                    dp[i+1][L-ind][k] = min(dp[i+1][L-ind][k], min(i+1, L-ind))\n                    if k < K and dp[i+1][L-ind][k] == dp[i+1][L-ind-1][k] and dp[i+1][L-ind][k] == dp[i][L-ind][k]:\n                        dp[i+1][L-ind][k+1] = max(dp[i+1][L-ind][k+1], dp[i+1][L-ind][k]+1)\n                        dp[i+1][L-ind][k+1] = min(dp[i+1][L-ind][k+1], min(i+1, L-ind))\n        for k in range(K+1):\n            ans = max(ans, 2*dp[ind][L-ind][k])\n            ans = max(ans, 2*dp[ind][L-ind-1][k] + 1)\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()","import sys\nreadline = sys.stdin.readline\n\nS = list(map(ord, readline().strip()))\nN = len(S)\nS = [None] + S + [None]\nK = int(readline())\n\nif N == 1:\n    ans = 1\nelif N == 2:\n    ans = 1\n    if S[1] == S[2]:\n        ans = 2\n    if K:\n        ans = 2\nelse:\n    dp1 = [[0]*(K+1) for _ in range(N+2)]\n    dp2 = [[0]*(K+1) for _ in range(N+2)]\n    for i in range(1, N+1):\n        dp1[i][0] = 1\n    for i in range(1, N):\n        dp2[i][0] = 1\n        if S[i] == S[i+1]:\n            dp2[i][0] = 2    \n        elif K:    \n            dp2[i][1] = 2\n    for s in range(3, N+1):\n        dp3 = [[0]*(K+1) for _ in range(N+2)]\n        for i in range(1, N-s+2):\n            j = i+s-1    \n            if S[i] == S[j]:\n                for k in range(K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], 2+dp1[i+1][k])\n            else:\n                dp3[i][0] = max(dp2[i+1][0], dp2[i][0], dp2[i+1][0])\n                for k in range(1, K+1):\n                    dp3[i][k] = max(dp2[i+1][k], dp2[i][k], dp1[i+1][k], 2+dp1[i+1][k-1])\n        dp1 = [k[:] for k in dp2]\n        dp2 = [k[:] for k in dp3]\n    ans = max(dp3[1][k] for k in range(K+1))\nprint(ans)\n'''\nMLE\u3057\u305f\ndp = [[[0]*(K+1) for _ in range(N+2)] for _ in range(N+2)]\nfor i in range(1, N+1):\n    dp[i][i][0] = 1\nfor i in range(1, N):\n    dp[i][i+1][0] = 1\n    if S[i] == S[i+1]:\n        dp[i][i+1][0] = 2    \n    elif K:    \n        dp[i][i+1][1] = 2\nfor s in range(3, N+1):\n    for i in range(1, N-s+2):\n        j = i+s-1\n        if S[i] == S[j]:\n            for k in range(K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], 2+dp[i+1][j-1][k])\n        else:\n            dp[i][j][0] = max(dp[i+1][j][0], dp[i][j-1][0], dp[i+1][j-1][0])\n            for k in range(1, K+1):\n                dp[i][j][k] = max(dp[i+1][j][k], dp[i][j-1][k], dp[i+1][j-1][k], 2+dp[i+1][j-1][k-1], dp[i+1][j-1][k])\nprint(max(dp[1][N][k] for k in range(K+1)))\n'''   ","def main():\n    s = input()\n    n = len(s)\n    k = int(input())\n    # dp[\u5de6\u7aef][\u5de6\u7aef\u304b\u3089\u306e\u53f3\u7aef\u306e\u8ddd\u96e2][\u4f7f\u3063\u305f\u56de\u6570]\n    dp = [[[1]*(k+1) for _ in [0]*(n-i)] for i in range(n)]\n\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][1][0] = 2\n    if k > 0:\n        for i in range(n-1):\n            dp[i][1][1] = 2\n\n    for cnt in range(k):\n        for d in range(2, n):\n            for left in range(n-d):\n                right = left+d\n                plus = (s[left] == s[right])*2\n                dp[left][d][cnt] = max(\n                    dp[left][d][cnt], dp[left][d-1][cnt],\n                    dp[left+1][d-1][cnt], dp[left+1][d-2][cnt]+plus)\n                dp[left][d][cnt+1] = max(\n                    max(dp[left][d][cnt:cnt+2]), dp[left+1][d-2][cnt]+2)\n    for d in range(2, n):\n        for left in range(n-d):\n            right = left+d\n            plus = (s[left] == s[right])*2\n            dp[left][d][k] = max(\n                dp[left][d][k], dp[left][d-1][k], dp[left+1][d-1][k], dp[left+1][d-2][k]+plus)\n    print(dp[0][-1][-1])\n\n\nmain()\n","s = input()\nn = len(s)\nk = int(input())\n\ndp = [[[0] * (n + 1) for i in range(n + 1)] for i in range(k + 1)]\n\n# \u9577\u30551\u306e\u3068\u304d\u306e\u521d\u671f\u5316\nfor i in range(n):\n    dp[0][i][i + 1] = 1\n\n# \u9577\u30552~n\u306e\u3068\u304d\u306eDP\nfor length in range(2, n + 1):\n    for l in range(n + 1):\n        for ki in range(k + 1):\n            r = l + length\n            if r > n:\n                break\n            if s[l] == s[r - 1]:\n                dp[ki][l][r] = max(2 + dp[ki][l + 1][r - 1], dp[ki][l][r])\n            else:\n                dp[ki][l][r] = max(dp[ki][l + 1][r], dp[ki][l][r - 1], dp[ki][l][r])\n                if ki - 1 >= 0:\n                    dp[ki][l][r] = max(dp[ki - 1][l + 1][r - 1] + 2, dp[ki - 1][l + 1][r - 1] + 2, dp[ki][l][r])\n\nans = 0\nfor i in range(k + 1):\n    ans = max(ans, dp[i][0][-1])\nprint(ans)"]}
{"description_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>We have <var>N<\/var> squares assigned the numbers <var>1,2,3,\\ldots,N<\/var>. Each square has an integer written on it, and the integer written on Square <var>i<\/var> is <var>a_i<\/var>.<\/p>\n<p>How many squares <var>i<\/var> satisfy both of the following conditions?<\/p>\n<ul>\n<li>The assigned number, <var>i<\/var>, is odd.<\/li>\n<li>The written integer is odd.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq N, a_i \\leq 100<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>a_1<\/var> <var>a_2<\/var> <var>\\cdots<\/var> <var>a_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of squares that satisfy both of the conditions.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>5\n1 3 4 5 7\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<ul>\n<li>Two squares, Square <var>1<\/var> and <var>5<\/var>, satisfy both of the conditions.<\/li>\n<li>For Square <var>2<\/var> and <var>4<\/var>, the assigned numbers are not odd.<\/li>\n<li>For Square <var>3<\/var>, the written integer is not odd.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>15\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>3\n<\/pre><\/section>\n<\/div>\n<\/span>","description_string":"\nScore : 200 points\n\n\nProblem StatementWe have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\nHow many squares i satisfy both of the following conditions?\n\nThe assigned number, i, is odd.\nThe written integer is odd.\n\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq N, a_i \\leq 100\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\na_1 a_2 \\cdots a_N\n\n\n\n\n\nOutputPrint the number of squares that satisfy both of the conditions.\n\n\n\n\n\n\nSample Input 15\n1 3 4 5 7\n\n\n\n\n\nSample Output 12\n\n\nTwo squares, Square 1 and 5, satisfy both of the conditions.\nFor Square 2 and 4, the assigned numbers are not odd.\nFor Square 3, the written integer is not odd.\n\n\n\n\n\n\nSample Input 215\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\n\n\n\n\n\nSample Output 23\n\n\n","orig_lang_html":"<span class=\"lang-en\">\n<p>Score : <var>200<\/var> points<\/p>\n<div class=\"part\">\n<section>\n<h3>Problem Statement<\/h3><p>We have <var>N<\/var> squares assigned the numbers <var>1,2,3,\\ldots,N<\/var>. Each square has an integer written on it, and the integer written on Square <var>i<\/var> is <var>a_i<\/var>.<\/p>\n<p>How many squares <var>i<\/var> satisfy both of the following conditions?<\/p>\n<ul>\n<li>The assigned number, <var>i<\/var>, is odd.<\/li>\n<li>The written integer is odd.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Constraints<\/h3><ul>\n<li>All values in input are integers.<\/li>\n<li><var>1 \\leq N, a_i \\leq 100<\/var><\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"io-style\">\n<div class=\"part\">\n<section>\n<h3>Input<\/h3><p>Input is given from Standard Input in the following format:<\/p>\n<pre><var>N<\/var>\n<var>a_1<\/var> <var>a_2<\/var> <var>\\cdots<\/var> <var>a_N<\/var>\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Output<\/h3><p>Print the number of squares that satisfy both of the conditions.<\/p>\n<\/section>\n<\/div>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 1<\/h3><pre>5\n1 3 4 5 7\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 1<\/h3><pre>2\n<\/pre>\n<ul>\n<li>Two squares, Square <var>1<\/var> and <var>5<\/var>, satisfy both of the conditions.<\/li>\n<li>For Square <var>2<\/var> and <var>4<\/var>, the assigned numbers are not odd.<\/li>\n<li>For Square <var>3<\/var>, the written integer is not odd.<\/li>\n<\/ul>\n<\/section>\n<\/div>\n<hr\/>\n<div class=\"part\">\n<section>\n<h3>Sample Input 2<\/h3><pre>15\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\n<\/pre>\n<\/section>\n<\/div>\n<div class=\"part\">\n<section>\n<h3>Sample Output 2<\/h3><pre>3\n<\/pre><\/section>\n<\/div>\n<\/span>","orig_lang_string":"\nScore : 200 points\n\n\nProblem StatementWe have N squares assigned the numbers 1,2,3,\\ldots,N. Each square has an integer written on it, and the integer written on Square i is a_i.\nHow many squares i satisfy both of the following conditions?\n\nThe assigned number, i, is odd.\nThe written integer is odd.\n\n\n\n\n\nConstraints\nAll values in input are integers.\n1 \\leq N, a_i \\leq 100\n\n\n\n\n\n\n\nInputInput is given from Standard Input in the following format:\nN\na_1 a_2 \\cdots a_N\n\n\n\n\n\nOutputPrint the number of squares that satisfy both of the conditions.\n\n\n\n\n\n\nSample Input 15\n1 3 4 5 7\n\n\n\n\n\nSample Output 12\n\n\nTwo squares, Square 1 and 5, satisfy both of the conditions.\nFor Square 2 and 4, the assigned numbers are not odd.\nFor Square 3, the written integer is not odd.\n\n\n\n\n\n\nSample Input 215\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\n\n\n\n\n\nSample Output 23\n\n\n","solve_rate":0.7827338129,"codenet_problem_id":"p02607","input_testcases":{"8":"15\n1 10 145 15 87 138 51 194 1 18 77 20 9 17 93","26":"15\n1 5 109 15 87 98 29 161 0 60 44 11 6 14 19","25":"15\n1 5 109 15 87 98 135 161 0 60 44 11 6 14 19","22":"15\n15 5 71 15 50 98 135 87 0 60 44 11 6 14 19","63":"15\n15 5 71 15 50 98 93 122 0 43 44 11 6 24 11","69":"15\n15 5 109 15 171 98 135 87 0 60 44 11 6 14 19","70":"15\n1 5 109 15 87 98 135 87 0 60 44 11 6 8 19","74":"15\n1 10 109 15 87 98 29 161 0 60 44 11 9 26 19","67":"15\n15 5 71 15 50 98 135 87 0 60 44 11 12 14 19","19":"15\n15 5 71 15 50 98 135 87 0 43 44 11 6 24 11","68":"15\n15 5 71 15 87 98 135 87 0 60 44 17 6 14 19","18":"15\n15 5 71 15 50 98 93 87 0 43 44 11 6 24 11","27":"15\n1 10 109 15 87 98 29 161 0 60 44 11 6 14 19","65":"15\n15 5 71 15 50 98 135 87 0 43 44 0 6 24 19","5":"15\n1 10 109 15 87 98 29 161 0 60 44 11 9 14 19","20":"15\n15 5 71 15 50 98 135 87 0 43 44 11 6 24 19","66":"15\n15 5 71 15 50 98 135 87 0 30 44 11 6 14 19","61":"15\n15 5 71 15 50 98 93 87 31 43 44 11 6 24 17","4":"15\n15 5 71 15 87 98 135 87 0 60 44 11 6 14 19","73":"15\n1 10 109 29 87 98 29 161 0 60 44 11 6 14 19","21":"15\n15 5 71 15 50 98 135 87 0 43 44 11 6 14 19","71":"15\n1 5 109 15 87 98 135 161 0 60 51 11 6 14 19","72":"15\n1 5 109 15 87 98 29 39 0 60 44 11 6 14 19","23":"15\n15 5 109 15 87 98 135 87 0 60 44 11 6 14 19","24":"15\n1 5 109 15 87 98 135 87 0 60 44 11 6 14 19"},"output_testcases":{"8":"8\n","26":"5\n","25":"5\n","22":"4\n","63":"4\n","69":"5\n","70":"5\n","74":"6\n","67":"4\n","19":"4\n","68":"5\n","18":"4\n","27":"5\n","65":"4\n","5":"6\n","20":"4\n","66":"4\n","61":"5\n","4":"5\n","73":"5\n","21":"4\n","71":"6\n","72":"5\n","23":"5\n","24":"5\n"},"n_missing":78,"programs":["N = int(input())\nA = list(map(int,input().split()))\ncounter = 0\nfor i in range(N):\n  if i%2==0:\n    if A[i]%2==1:\n      counter += 1\nprint(counter)","N = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor i in range(1,N+1):\n  if a[i-1]%2!=0 and i%2!=0:\n    count+=1\nprint(count)","n = int(input())\nz = input().split()\nodd = 0\nfor i in range(n):\n    if i % 2 == 0:\n        if int(z[i]) % 2 == 1:\n            odd += 1\nprint(odd)","n = int(input())\nA = list(map(int, input().split()))\n#l, r, d = map(int, input().split())\nans = 0\nfor i in range(n):\n  if i % 2 == 0 and A[i] % 2 != 0:\n    ans += 1\nprint(ans)\n                    ","n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n    if a[i]%2!=0 and i%2!=0:\n        count+=1\n\nprint(count)","N = int(input())\na = list(map(int, (input().split())))\nans = 0\nfor i in range(0, N, 2):\n    if a[i]%2:\n        ans += 1\nprint(ans)","import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom itertools import accumulate\nfrom itertools import permutations\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom collections import Counter\nimport fractions\nimport math\nfrom collections import deque\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import insort_left\nimport itertools\nfrom heapq import heapify\nfrom heapq import heappop\nfrom heapq import heappush\nimport heapq\nfrom copy import deepcopy\nfrom decimal import Decimal\nalf = list(\"abcdefghijklmnopqrstuvwxyz\")\nALF = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n#import numpy as np\nINF = float(\"inf\")\n#d = defaultdict(int)\n#d = defaultdict(list)\nN = int(input())\nA = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i % 2 == 0 and A[i] % 2 == 1:\n        ans += 1\nprint(ans)","import math\n\nn=int(input())\nL=list(map(int,input().split()))\ncount=0\nfor i in range(0,n,2):\n\tif(L[i]%2==1):\n\t\tcount+=1\nprint(count)\n\n","n = int(input()) \na = list(map(int,input().split())) \n\nodd = a[1::2]\nans = 0\nfor i in range(len(odd)):\n    if odd[i]%2 == 1:\n        ans = ans + 1\n\nprint(ans)","N = int(input())\nln = list(map(int, input().split()))\ncounter = 0\nfor i,j in enumerate(ln):\n    if i%2 == 0 and j %2 ==1:\n        counter +=1\nprint(counter)","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\nfor i in range(0,N,2):\n    if a[i] % 2 == 1:\n        ans += 1\n\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\noutput = 0\n\n\nfor i in range(n):\n    if (i % 2 == 1) and (a[i] % 2 == 1):\n        output = output + 1\n        \nprint(output)","n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n    if i%2==0 and a[i]%2==1:\n        ans+=1\nprint(ans)","def main():\n    N = int(input())\n    numlist = list(map(int,input().split()))\n\n    count = 0\n\n    for i in range(len(numlist)):\n        if i % 2 == 1:\n            if numlist[i] % 2 == 1:\n                count += 1\n    \n    print(count)\n\nif __name__ == '__main__':\n    main()\n","N=int(input())\nA=list(map(int,input().strip().split()))\nc=0\nfor i in range(1,N):\n\tif (i+1)%2!=0 and A[i]%2!=0:\n\t\tc+=1\nprint(c)","import math\nfrom collections import defaultdict\n\nn = int(input())\na = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n  if i&1:\n    continue\n  if a[i]&1:\n    c += 1\nprint(c)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0,n,2):\nif a[i] % 2 == 1:\nans += 1\nprint(ans)","n = int(input())\narr = list(map(int, input().split()))\n\n\/\/ travel only even index in 0 based system\nans = 0\nfor i in range(0,n,2):\n\tif arr[i] % 2 ==1:\n\t\tans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\ncnt2 = 0\n\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        #print(i)\n        cnt += 1\nprint(cnt)\n","N = int(input())\nx = list(map(int, input().split()))\n\na = []\nfor i in range(N):\n  if (i+1) % 2 and x[i] % 2:\n    a.append(x[i])\nprint(len(a))","#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(N: int, a: \"List[int]\"):\n    ans = 0\n    for aa in a[::2]:\n        if aa % 2 == 1:\n            ans += 1\n    return ans\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print(solve(N, a))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","N=int(input())\na=list(map(int,input().split()))\n\nans=0\nfor i in range(0,N,2):\n    if a[i]%2==1:\n        ans+=1\nprint(ans)","N = int(input())\na=input().split()\nres =0\nfor i in range(1, N+1):\n    if (i % 2 != 0 and int(a[i-1]) % 2 != 0):\n        res += 1\nprint(res)","n = int(input())\narr = list(map(int, input().split()))\n\narr = arr[0::2]\n\nprint(len([x for x in arr if x % 2 == 1]))","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nnum_iter = n\/\/2\nfor i in range(num_iter):\n    if a[i*2+1] % 2 == 1:\n        cnt += 1\nprint(cnt)\n","N = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, N, 2):\n    if a[i] % 2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\na = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i%2 == 0 and a[i]%2 == 1:\n        ans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)","def main():\n    n = int(input())\n    A = [int(e) for e in input().split()]\n\n    ans = 0\n    for ai, a in enumerate(A):\n        if (ai + 1) % 2 == 1 and a % 2 == 1:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if ((i % 2) == 0):\n        continue\n    if ((a[i] % 2) != 0):\n        ans += 1\n\nprint(ans)\n","N=int(input())\nA=list(map(int,input().split()))\nans=0\nfor i in range(N):\n  if i%2==0 and A[i]%2==1:\n    ans+=1\nprint(ans)\n","def main():\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i, aa in enumerate(a, 1):\n        if i % 2 == 1 and aa % 2 == 1:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(len(a)):\n  if (i+1)%2 != 0 and a[i]%2 != 0:\n    cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 == 1:\n        ans += 1\nprint(ans)\n","n = int(input())\ndata = list(map(int, input().split()))\n\nans = []\n\nfor i in range(n):\n    if (i % 2 == 0) and (data[i] % 2 == 1):\n        ans.append(data[i])\n\nprint(len(ans))\n","def main():\n    import sys\n    N=int(sys.stdin.readline())\n    A=list(map(int,sys.stdin.readline().split()))\n    count=0\n    for i,a in enumerate(A):\n        if a%2 and (i+1)%2:\n            count+=1\n    print(count)\nmain()","n=int(input())\na=list(map(int,input().split()))\n\na.insert(0,0)\nans=0\nfor i in range(1,len(a)):\n    if i%2==1 and a[i]%2==1:\n        ans+=1\n\nprint(ans)","\nN = int(input())\nAAA = [int(i) for i in input().split()]\n\ncnt = 0\nfor i in range(N):\n    if (i + 1) % 2 == 1 and AAA[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1:\n        if a[i] % 2 == 1:\n            ans += 1\nprint(ans)\n","it = lambda: list(map(int, input().strip().split()))\n\n\ndef solve():\n    N = int(input())\n    A = it()\n    cnt = 0\n    for i in range(N):\n        if i % 2 == 0 and A[i] % 2:\n            cnt += 1\n    print(cnt)\n\nsolve()","N = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(len(a)):\n    if((i+1)%2 != 0):\n        if(a[i]%2 != 0):\n            cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor i in range(1,n+1):\n    if i%2 == 1 and a[i-1]%2 == 1:\n        count += 1\nprint(count)","n = int(input())\n\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(n):\n    x = i+1\n    if a[i]%2 == 1 and x%2 == 1:\n        ans += 1\n\nprint(ans)","def ii():return int(input())\ndef iim():return map(int,input().split())\ndef iil():return list(map(int,input().split()))\nn = ii()\nA = iil()\ncnt = 0\nfor i,item in enumerate(A):\n    if (i+1)%2==1 and item%2==1:\n        cnt+=1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, n, 2):\n    if a[i]%2 == 1:\n        cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if (i % 2 == 0) and (a[i] % 2 != 0):\n        ans += 1\nprint(ans)        \n","N = int(input())\na = list(map(int, input().split()))\ncount = 0;\nfor i in range(0,N):\n  if i % 2 == 1:\n    if a[i] % 2 == 1:\n      count = count+1\nprint(count)","N=int(input())\na=list(map(int,input().split()))\ncnt=0\n\nfor i in range(int(len(a)\/2)+1):\n    if a[2*i]%2==1:\n        cnt+=1\n\nprint(cnt)\n","def resolve():\n    cnt = 0\n    n = int(input())\n    A = list(map(int, input().split()))\n    for i in range(n):\n        if (i+1) % 2 == 1 and A[i] % 2 == 1:\n            cnt += 1\n    \n    print(cnt)\n\nresolve()","n = int(input())\na = list(map(int, input().split()))\nnum = 0\nfor i in a[::2]:\n    if i%2 == 1:\n        num += 1\nprint(num)","def main():\n    N = input()\n    A = list(map(int, input().split()))\n    cnt = 0\n    for i in range(len(A)):\n        if (i+1) % 2 != 0:\n            if A[i] % 2 != 0:\n                cnt += 1\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(0, N, 2):\n  \tif  a[i] % 2 != 0:\n         ans += 1\n\t\n\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n    if (i+1) % 2 == 1 and a[i] % 2 == 1:\n        ans += 1\n\nprint(ans)\n","n=int(input())\nli=list(map(int,input().split()))\nans=0\n\nfor i in range(n):\n  if li[i]%2!=0 and i%2 != 0 : ans+=1\n\nprint(ans)","length = int(input())\nnumbers = [int(i) for i in input().split(\" \")]\n\ncnt = 0\n\nfor i in range(length):\n  if (i + 1) % 2 != 0 and numbers[i] % 2 != 0:\n    cnt += 1\n\nprint(cnt)\n  ","N = int(input())\nan = map(int, input().split(\" \"))\nans = 0\nfor i, ai in enumerate(an):\n    #print(i+1, ai)\n    if (i+1) % 2 == 1 and ai % 2 == 1:\n        ans += 1\nprint(ans)","def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    count = 0\n\n    for i, a in enumerate(A):\n        if i % 2 == 1:\n            continue\n        elif a % 2 == 0:\n            continue\n        count += 1\n    \n    print(count)\n\n\n\nif __name__ == '__main__':\n    main()","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if (i+1) % 2 == 1:\n        if a[i] % 2 == 1:\n            ans += 1\n\nprint(ans)","N=int(input())\na=list(map(int, input().split()))\n\ncnt=0\nans_cnt=0\nfor i in a:\n\tcnt+=1\n\tif i%2==1 and cnt%2==1:\n\t\tans_cnt+=1\n        \nprint(ans_cnt)","N = int(input())\nA = list(map(int, input().split()))\nresult = 0\nfor i in range(N):\n  if i % 2 == 0:\n    if A[i] % 2 != 0:\n      result += 1\nprint(result)","N = int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range((N+1)\/\/2):\n    if a[2*i] % 2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(0,N,1):\n    if (i+1)%2==1 and a[i]%2==1:\n        ans+=1\n\nprint(ans)","#AIsing2020 b\n\nimport sys,math,collections,itertools\ninput = sys.stdin.readline\n\nN=int(input())\nA =[0]+list(map(int,input().split()))\ncount = 0\nfor i in range(1,N+1,2):\n    if A[i]%2 ==1:\n        count +=1\nprint(count)\n","n = int(input())\naa = list(map(int, input().split()))\ncount = 0\n\nfor i, a in enumerate(aa, 1):\n    if i % 2 == 1 and a % 2 == 1:\n        count += 1\n\nprint(count)\n","import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nn = k()\na = l()\nfor i in range(n):\n    if (i+1) % 2 == 1 and a[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)\n","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 != 0:\n        cnt += 1\nprint(cnt)","n=int(input())\na=list(map(int,input().split()))\nr=0\nfor i in range(0,n,2):\n  if a[i]%2==1:\n    r+=1\nprint(r)","n = int(input())\narr = list(map(int, input().split()))\nanswer = 0\nfor i in range(0, n, 2):\n    if arr[i] & 1:\n        answer += 1\nprint(answer)\n","ans=0\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n    if i % 2 == 0:\n        continue\n    if a[i]%2!=0:\n        ans+=1\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range(n):\n  if (i+1)%2==1:\n    if a[i]%2==1:\n      cnt+=1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(len(a)):\n  if(i % 2 == 0):\n    if(a[i] % 2 == 1):\n      count += 1\n\nprint(count) \n","n=int(input())\ns=list(map(int,input().split()))\ncount=0\n\n\nfor i in range(0,len(s)):\n    index_1=i+1\n    if(int(s[i])%2 != 0):\n        if(int((index_1))% 2 != 0 ):\n            count+=1\n        else:\n            count+=0\n    else:\n        count+=0\n\nprint(count)\n    ","N= int(input())\nA = list(map(int, input().split()))\nres = 0\nfor i in range(0, N, 2):\n    if A[i] % 2 == 1:\n        res += 1\nprint(res)","N = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, N, 2):\n    if a[i] % 2 != 0:\n        cnt += 1\nprint(cnt)","n = int(input())\na = [int(i) for i in input().split()]\nans = 0\nfor i,j in enumerate(a):\n    if (i+1)*j%2==1:\n        ans += 1\nprint(ans)","n = int(input())\na = [int(each) for each in input().split()]\n\nresult = 0\nfor i in range(1, n+1):\n    if i%2 == 1 and a[i-1]%2 == 1:\n        result += 1\nprint(result)","n = int(input())\nl = list(map(int, input().split()))\n\nl1 = l[0::2]\ncnt = 0\nfor i in l1:\n    if i % 2 == 1:\n        cnt += 1\nprint(l1)","n = int(input())\na = list(input().split())\n\na = [int(a[i]) for i in range(n)]\nans = 0\nfor j in range(n):\n    if j%2 == 0 and a[j]%2 == 1:\n        ans = ans + 1\n\nprint(ans) ","N = int(input())\nAli = list(map(int,input().split()))\nr = 0\nfor i in range(N):\n  if Ali[i]%2 == 1 and i%2 == 1:\n    r += 1\n    \nprint(r)","N = int(input())\nA = list(map(int, input().split()))\n\nres = 0\n\nfor i, a in enumerate(A):\n    if i % 2 == 0 and a % 2 == 1:\n        res += 1\n\nprint(res)\n","n = int(input())\nN = list(map(int,input().split()))\ndel N[1::2]\ni = 0\nans = [i for i in N if i % 2 != 0]\nprint(len(ans))","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if (i+1) % 2 == 1 and A[i] % 2 == 1:\n        ans += 1\n\nprint(ans)","n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n    if i%2==0 and a[i]%2!=0:\n        count+=1\n\nprint(count)","N=int(input())\nA=list(int(x) for x in input().split())\ncount=0\nfor i in range(N):\n\tif i%2==0 and A[i]%2!=0:\n\t\tcount+=1\nprint(count)","n = int(input())\na= list(map(int,input().split()))\ncount=0\nfor i,n in enumerate(a):\n  if (i+1)%2!=0:\n    if n%2!=0:\n      count+=1\nprint(count)","n = int(input())\na = list(map(int, input().split()))\nd=0\nfor i,j in enumerate(a):\n  if i%2==0 and j%2==1:\n    d+=1\nprint(d)","N=int(input())\n#N=15\n\n\n\ninput=input()\n#input=\"13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\"\nmasu=[int(r) for r in input.split()]\nans=[]\n\nfor i in range(N):\n  if masu[i]%2==1 and i%2==1:\n    ans.append(i)\n\nprint(len(ans))\n","N=int(input())\nli = list(map(int,input().split()))\ncoun=0\nfor i,h in enumerate(li):\n  if ((i+1) % 2 == 1) and (h % 2 == 1):\n    coun+=1\n    #print(i)\nprint(coun)","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        cnt += 1\nprint(cnt)\n","n=int(input())\na_list = list(map(int, input().split()))\n\nans=0\nfor i in range(n):\n  if i%2==0:\n    if a_list[i]%2==1:\n      ans+=1\n\n      \nprint(ans)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        ans += 1\nprint(ans)","n = int(input())\na_list = list(map(int, input().split()))\ncount = 0\n\nfor a in a_list[::2]:\n  if a & 1:\n    count += 1\nprint(count)","N = int(input())\nlist = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(N):\n    if i %2 == 1 and list[i] %2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\n\ntmp = input().split(' ')\n\na = []\nresult = []\nfor i in range(N):\n    a.append(int(tmp[i]))\n    if (i % 2 == 1 and a[i] % 2 == 1):\n        result.append(a[i])\n\nprint(len(result))\n","n=int(input())\nb=0\na=list(map(int,input().split()))\nfor i in range(n):\n    if a[i]%2==1 and (i+1)%2==1:\n        b+=1\nprint(b)\n","N = int(input())\nA = [0] + [int(_) for _ in input().split()]\nans = 0\nfor i, a in enumerate(A):\n    if i == 0:\n        continue\n    if i % 2 == a % 2 == 1:\n        ans += 1\nprint(ans)\n","N, *a = map(int, open(0).read().split())\n\nprint(sum(1 for e in a[::2] if e % 2 == 1))\n","n = int(input())\n\na = [int(x) for x in input().split()]\n\ncount = 0\n\nfor i in range(n):\n    if i%2 == 0 and a[i]%2 == 1:\n        count += 1\n\nprint(count)\n","n = int(input())\na = list(map(int,input().split()))\nprint(sum(ai%2==1 for ai in a[::2]))","n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i, v in enumerate(a):\n    if (i+1)%2 == 1 and v%2 == 1:\n        count += 1\nprint(count)"],"raw_generations":["N = int(input())\nA = list(map(int,input().split()))\ncounter = 0\nfor i in range(N):\n  if i%2==0:\n    if A[i]%2==1:\n      counter += 1\nprint(counter)","N = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor i in range(1,N+1):\n  if a[i-1]%2!=0 and i%2!=0:\n    count+=1\nprint(count)","n = int(input())\nz = input().split()\nodd = 0\nfor i in range(n):\n    if i % 2 == 0:\n        if int(z[i]) % 2 == 1:\n            odd += 1\nprint(odd)","n = int(input())\nA = list(map(int, input().split()))\n#l, r, d = map(int, input().split())\nans = 0\nfor i in range(n):\n  if i % 2 == 0 and A[i] % 2 != 0:\n    ans += 1\nprint(ans)\n                    ","n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n    if a[i]%2!=0 and i%2!=0:\n        count+=1\n\nprint(count)","N = int(input())\na = list(map(int, (input().split())))\nans = 0\nfor i in range(0, N, 2):\n    if a[i]%2:\n        ans += 1\nprint(ans)","import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom itertools import accumulate\nfrom itertools import permutations\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom collections import Counter\nimport fractions\nimport math\nfrom collections import deque\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import insort_left\nimport itertools\nfrom heapq import heapify\nfrom heapq import heappop\nfrom heapq import heappush\nimport heapq\nfrom copy import deepcopy\nfrom decimal import Decimal\nalf = list(\"abcdefghijklmnopqrstuvwxyz\")\nALF = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n#import numpy as np\nINF = float(\"inf\")\n#d = defaultdict(int)\n#d = defaultdict(list)\nN = int(input())\nA = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i % 2 == 0 and A[i] % 2 == 1:\n        ans += 1\nprint(ans)","import math\n\nn=int(input())\nL=list(map(int,input().split()))\ncount=0\nfor i in range(0,n,2):\n\tif(L[i]%2==1):\n\t\tcount+=1\nprint(count)\n\n","n = int(input()) \na = list(map(int,input().split())) \n\nodd = a[1::2]\nans = 0\nfor i in range(len(odd)):\n    if odd[i]%2 == 1:\n        ans = ans + 1\n\nprint(ans)","N = int(input())\nln = list(map(int, input().split()))\ncounter = 0\nfor i,j in enumerate(ln):\n    if i%2 == 0 and j %2 ==1:\n        counter +=1\nprint(counter)","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\nfor i in range(0,N,2):\n    if a[i] % 2 == 1:\n        ans += 1\n\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\noutput = 0\n\n\nfor i in range(n):\n    if (i % 2 == 1) and (a[i] % 2 == 1):\n        output = output + 1\n        \nprint(output)","n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n    if i%2==0 and a[i]%2==1:\n        ans+=1\nprint(ans)","def main():\n    N = int(input())\n    numlist = list(map(int,input().split()))\n\n    count = 0\n\n    for i in range(len(numlist)):\n        if i % 2 == 1:\n            if numlist[i] % 2 == 1:\n                count += 1\n    \n    print(count)\n\nif __name__ == '__main__':\n    main()\n","N=int(input())\nA=list(map(int,input().strip().split()))\nc=0\nfor i in range(1,N):\n\tif (i+1)%2!=0 and A[i]%2!=0:\n\t\tc+=1\nprint(c)","import math\nfrom collections import defaultdict\n\nn = int(input())\na = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n  if i&1:\n    continue\n  if a[i]&1:\n    c += 1\nprint(c)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0,n,2):\nif a[i] % 2 == 1:\nans += 1\nprint(ans)","n = int(input())\narr = list(map(int, input().split()))\n\n\/\/ travel only even index in 0 based system\nans = 0\nfor i in range(0,n,2):\n\tif arr[i] % 2 ==1:\n\t\tans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\ncnt2 = 0\n\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        #print(i)\n        cnt += 1\nprint(cnt)\n","N = int(input())\nx = list(map(int, input().split()))\n\na = []\nfor i in range(N):\n  if (i+1) % 2 and x[i] % 2:\n    a.append(x[i])\nprint(len(a))","#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(N: int, a: \"List[int]\"):\n    ans = 0\n    for aa in a[::2]:\n        if aa % 2 == 1:\n            ans += 1\n    return ans\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print(solve(N, a))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","N=int(input())\na=list(map(int,input().split()))\n\nans=0\nfor i in range(0,N,2):\n    if a[i]%2==1:\n        ans+=1\nprint(ans)","N = int(input())\na=input().split()\nres =0\nfor i in range(1, N+1):\n    if (i % 2 != 0 and int(a[i-1]) % 2 != 0):\n        res += 1\nprint(res)","n = int(input())\narr = list(map(int, input().split()))\n\narr = arr[0::2]\n\nprint(len([x for x in arr if x % 2 == 1]))","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nnum_iter = n\/\/2\nfor i in range(num_iter):\n    if a[i*2+1] % 2 == 1:\n        cnt += 1\nprint(cnt)\n","N = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, N, 2):\n    if a[i] % 2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\na = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i%2 == 0 and a[i]%2 == 1:\n        ans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)","def main():\n    n = int(input())\n    A = [int(e) for e in input().split()]\n\n    ans = 0\n    for ai, a in enumerate(A):\n        if (ai + 1) % 2 == 1 and a % 2 == 1:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if ((i % 2) == 0):\n        continue\n    if ((a[i] % 2) != 0):\n        ans += 1\n\nprint(ans)\n","N=int(input())\nA=list(map(int,input().split()))\nans=0\nfor i in range(N):\n  if i%2==0 and A[i]%2==1:\n    ans+=1\nprint(ans)\n","def main():\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i, aa in enumerate(a, 1):\n        if i % 2 == 1 and aa % 2 == 1:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(len(a)):\n  if (i+1)%2 != 0 and a[i]%2 != 0:\n    cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 == 1:\n        ans += 1\nprint(ans)\n","n = int(input())\ndata = list(map(int, input().split()))\n\nans = []\n\nfor i in range(n):\n    if (i % 2 == 0) and (data[i] % 2 == 1):\n        ans.append(data[i])\n\nprint(len(ans))\n","def main():\n    import sys\n    N=int(sys.stdin.readline())\n    A=list(map(int,sys.stdin.readline().split()))\n    count=0\n    for i,a in enumerate(A):\n        if a%2 and (i+1)%2:\n            count+=1\n    print(count)\nmain()","n=int(input())\na=list(map(int,input().split()))\n\na.insert(0,0)\nans=0\nfor i in range(1,len(a)):\n    if i%2==1 and a[i]%2==1:\n        ans+=1\n\nprint(ans)","\nN = int(input())\nAAA = [int(i) for i in input().split()]\n\ncnt = 0\nfor i in range(N):\n    if (i + 1) % 2 == 1 and AAA[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1:\n        if a[i] % 2 == 1:\n            ans += 1\nprint(ans)\n","it = lambda: list(map(int, input().strip().split()))\n\n\ndef solve():\n    N = int(input())\n    A = it()\n    cnt = 0\n    for i in range(N):\n        if i % 2 == 0 and A[i] % 2:\n            cnt += 1\n    print(cnt)\n\nsolve()","N = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(len(a)):\n    if((i+1)%2 != 0):\n        if(a[i]%2 != 0):\n            cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor i in range(1,n+1):\n    if i%2 == 1 and a[i-1]%2 == 1:\n        count += 1\nprint(count)","n = int(input())\n\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(n):\n    x = i+1\n    if a[i]%2 == 1 and x%2 == 1:\n        ans += 1\n\nprint(ans)","def ii():return int(input())\ndef iim():return map(int,input().split())\ndef iil():return list(map(int,input().split()))\nn = ii()\nA = iil()\ncnt = 0\nfor i,item in enumerate(A):\n    if (i+1)%2==1 and item%2==1:\n        cnt+=1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, n, 2):\n    if a[i]%2 == 1:\n        cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if (i % 2 == 0) and (a[i] % 2 != 0):\n        ans += 1\nprint(ans)        \n","N = int(input())\na = list(map(int, input().split()))\ncount = 0;\nfor i in range(0,N):\n  if i % 2 == 1:\n    if a[i] % 2 == 1:\n      count = count+1\nprint(count)","N=int(input())\na=list(map(int,input().split()))\ncnt=0\n\nfor i in range(int(len(a)\/2)+1):\n    if a[2*i]%2==1:\n        cnt+=1\n\nprint(cnt)\n","def resolve():\n    cnt = 0\n    n = int(input())\n    A = list(map(int, input().split()))\n    for i in range(n):\n        if (i+1) % 2 == 1 and A[i] % 2 == 1:\n            cnt += 1\n    \n    print(cnt)\n\nresolve()","n = int(input())\na = list(map(int, input().split()))\nnum = 0\nfor i in a[::2]:\n    if i%2 == 1:\n        num += 1\nprint(num)","def main():\n    N = input()\n    A = list(map(int, input().split()))\n    cnt = 0\n    for i in range(len(A)):\n        if (i+1) % 2 != 0:\n            if A[i] % 2 != 0:\n                cnt += 1\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(0, N, 2):\n  \tif  a[i] % 2 != 0:\n         ans += 1\n\t\n\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n    if (i+1) % 2 == 1 and a[i] % 2 == 1:\n        ans += 1\n\nprint(ans)\n","n=int(input())\nli=list(map(int,input().split()))\nans=0\n\nfor i in range(n):\n  if li[i]%2!=0 and i%2 != 0 : ans+=1\n\nprint(ans)","length = int(input())\nnumbers = [int(i) for i in input().split(\" \")]\n\ncnt = 0\n\nfor i in range(length):\n  if (i + 1) % 2 != 0 and numbers[i] % 2 != 0:\n    cnt += 1\n\nprint(cnt)\n  ","N = int(input())\nan = map(int, input().split(\" \"))\nans = 0\nfor i, ai in enumerate(an):\n    #print(i+1, ai)\n    if (i+1) % 2 == 1 and ai % 2 == 1:\n        ans += 1\nprint(ans)","def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    count = 0\n\n    for i, a in enumerate(A):\n        if i % 2 == 1:\n            continue\n        elif a % 2 == 0:\n            continue\n        count += 1\n    \n    print(count)\n\n\n\nif __name__ == '__main__':\n    main()","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if (i+1) % 2 == 1:\n        if a[i] % 2 == 1:\n            ans += 1\n\nprint(ans)","N=int(input())\na=list(map(int, input().split()))\n\ncnt=0\nans_cnt=0\nfor i in a:\n\tcnt+=1\n\tif i%2==1 and cnt%2==1:\n\t\tans_cnt+=1\n        \nprint(ans_cnt)","N = int(input())\nA = list(map(int, input().split()))\nresult = 0\nfor i in range(N):\n  if i % 2 == 0:\n    if A[i] % 2 != 0:\n      result += 1\nprint(result)","N = int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range((N+1)\/\/2):\n    if a[2*i] % 2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(0,N,1):\n    if (i+1)%2==1 and a[i]%2==1:\n        ans+=1\n\nprint(ans)","#AIsing2020 b\n\nimport sys,math,collections,itertools\ninput = sys.stdin.readline\n\nN=int(input())\nA =[0]+list(map(int,input().split()))\ncount = 0\nfor i in range(1,N+1,2):\n    if A[i]%2 ==1:\n        count +=1\nprint(count)\n","n = int(input())\naa = list(map(int, input().split()))\ncount = 0\n\nfor i, a in enumerate(aa, 1):\n    if i % 2 == 1 and a % 2 == 1:\n        count += 1\n\nprint(count)\n","import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nn = k()\na = l()\nfor i in range(n):\n    if (i+1) % 2 == 1 and a[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)\n","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 != 0:\n        cnt += 1\nprint(cnt)","n=int(input())\na=list(map(int,input().split()))\nr=0\nfor i in range(0,n,2):\n  if a[i]%2==1:\n    r+=1\nprint(r)","n = int(input())\narr = list(map(int, input().split()))\nanswer = 0\nfor i in range(0, n, 2):\n    if arr[i] & 1:\n        answer += 1\nprint(answer)\n","ans=0\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n    if i % 2 == 0:\n        continue\n    if a[i]%2!=0:\n        ans+=1\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range(n):\n  if (i+1)%2==1:\n    if a[i]%2==1:\n      cnt+=1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(len(a)):\n  if(i % 2 == 0):\n    if(a[i] % 2 == 1):\n      count += 1\n\nprint(count) \n","n=int(input())\ns=list(map(int,input().split()))\ncount=0\n\n\nfor i in range(0,len(s)):\n    index_1=i+1\n    if(int(s[i])%2 != 0):\n        if(int((index_1))% 2 != 0 ):\n            count+=1\n        else:\n            count+=0\n    else:\n        count+=0\n\nprint(count)\n    ","N= int(input())\nA = list(map(int, input().split()))\nres = 0\nfor i in range(0, N, 2):\n    if A[i] % 2 == 1:\n        res += 1\nprint(res)","N = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, N, 2):\n    if a[i] % 2 != 0:\n        cnt += 1\nprint(cnt)","n = int(input())\na = [int(i) for i in input().split()]\nans = 0\nfor i,j in enumerate(a):\n    if (i+1)*j%2==1:\n        ans += 1\nprint(ans)","n = int(input())\na = [int(each) for each in input().split()]\n\nresult = 0\nfor i in range(1, n+1):\n    if i%2 == 1 and a[i-1]%2 == 1:\n        result += 1\nprint(result)","n = int(input())\nl = list(map(int, input().split()))\n\nl1 = l[0::2]\ncnt = 0\nfor i in l1:\n    if i % 2 == 1:\n        cnt += 1\nprint(l1)","n = int(input())\na = list(input().split())\n\na = [int(a[i]) for i in range(n)]\nans = 0\nfor j in range(n):\n    if j%2 == 0 and a[j]%2 == 1:\n        ans = ans + 1\n\nprint(ans) ","N = int(input())\nAli = list(map(int,input().split()))\nr = 0\nfor i in range(N):\n  if Ali[i]%2 == 1 and i%2 == 1:\n    r += 1\n    \nprint(r)","N = int(input())\nA = list(map(int, input().split()))\n\nres = 0\n\nfor i, a in enumerate(A):\n    if i % 2 == 0 and a % 2 == 1:\n        res += 1\n\nprint(res)\n","n = int(input())\nN = list(map(int,input().split()))\ndel N[1::2]\ni = 0\nans = [i for i in N if i % 2 != 0]\nprint(len(ans))","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if (i+1) % 2 == 1 and A[i] % 2 == 1:\n        ans += 1\n\nprint(ans)","n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n    if i%2==0 and a[i]%2!=0:\n        count+=1\n\nprint(count)","N=int(input())\nA=list(int(x) for x in input().split())\ncount=0\nfor i in range(N):\n\tif i%2==0 and A[i]%2!=0:\n\t\tcount+=1\nprint(count)","n = int(input())\na= list(map(int,input().split()))\ncount=0\nfor i,n in enumerate(a):\n  if (i+1)%2!=0:\n    if n%2!=0:\n      count+=1\nprint(count)","n = int(input())\na = list(map(int, input().split()))\nd=0\nfor i,j in enumerate(a):\n  if i%2==0 and j%2==1:\n    d+=1\nprint(d)","N=int(input())\n#N=15\n\n\n\ninput=input()\n#input=\"13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\"\nmasu=[int(r) for r in input.split()]\nans=[]\n\nfor i in range(N):\n  if masu[i]%2==1 and i%2==1:\n    ans.append(i)\n\nprint(len(ans))\n","N=int(input())\nli = list(map(int,input().split()))\ncoun=0\nfor i,h in enumerate(li):\n  if ((i+1) % 2 == 1) and (h % 2 == 1):\n    coun+=1\n    #print(i)\nprint(coun)","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        cnt += 1\nprint(cnt)\n","n=int(input())\na_list = list(map(int, input().split()))\n\nans=0\nfor i in range(n):\n  if i%2==0:\n    if a_list[i]%2==1:\n      ans+=1\n\n      \nprint(ans)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        ans += 1\nprint(ans)","n = int(input())\na_list = list(map(int, input().split()))\ncount = 0\n\nfor a in a_list[::2]:\n  if a & 1:\n    count += 1\nprint(count)","N = int(input())\nlist = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(N):\n    if i %2 == 1 and list[i] %2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\n\ntmp = input().split(' ')\n\na = []\nresult = []\nfor i in range(N):\n    a.append(int(tmp[i]))\n    if (i % 2 == 1 and a[i] % 2 == 1):\n        result.append(a[i])\n\nprint(len(result))\n","n=int(input())\nb=0\na=list(map(int,input().split()))\nfor i in range(n):\n    if a[i]%2==1 and (i+1)%2==1:\n        b+=1\nprint(b)\n","N = int(input())\nA = [0] + [int(_) for _ in input().split()]\nans = 0\nfor i, a in enumerate(A):\n    if i == 0:\n        continue\n    if i % 2 == a % 2 == 1:\n        ans += 1\nprint(ans)\n","N, *a = map(int, open(0).read().split())\n\nprint(sum(1 for e in a[::2] if e % 2 == 1))\n","n = int(input())\n\na = [int(x) for x in input().split()]\n\ncount = 0\n\nfor i in range(n):\n    if i%2 == 0 and a[i]%2 == 1:\n        count += 1\n\nprint(count)\n","n = int(input())\na = list(map(int,input().split()))\nprint(sum(ai%2==1 for ai in a[::2]))","n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i, v in enumerate(a):\n    if (i+1)%2 == 1 and v%2 == 1:\n        count += 1\nprint(count)"],"formatted_programs":["N = int(input())\nA = list(map(int,input().split()))\ncounter = 0\nfor i in range(N):\n  if i%2==0:\n    if A[i]%2==1:\n      counter += 1\nprint(counter)","N = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor i in range(1,N+1):\n  if a[i-1]%2!=0 and i%2!=0:\n    count+=1\nprint(count)","n = int(input())\nz = input().split()\nodd = 0\nfor i in range(n):\n    if i % 2 == 0:\n        if int(z[i]) % 2 == 1:\n            odd += 1\nprint(odd)","n = int(input())\nA = list(map(int, input().split()))\n#l, r, d = map(int, input().split())\nans = 0\nfor i in range(n):\n  if i % 2 == 0 and A[i] % 2 != 0:\n    ans += 1\nprint(ans)\n                    ","n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n    if a[i]%2!=0 and i%2!=0:\n        count+=1\n\nprint(count)","N = int(input())\na = list(map(int, (input().split())))\nans = 0\nfor i in range(0, N, 2):\n    if a[i]%2:\n        ans += 1\nprint(ans)","import sys\ninput=sys.stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom itertools import accumulate\nfrom itertools import permutations\nfrom itertools import combinations\nfrom collections import defaultdict\nfrom collections import Counter\nimport fractions\nimport math\nfrom collections import deque\nfrom bisect import bisect_left\nfrom bisect import bisect_right\nfrom bisect import insort_left\nimport itertools\nfrom heapq import heapify\nfrom heapq import heappop\nfrom heapq import heappush\nimport heapq\nfrom copy import deepcopy\nfrom decimal import Decimal\nalf = list(\"abcdefghijklmnopqrstuvwxyz\")\nALF = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n#import numpy as np\nINF = float(\"inf\")\n#d = defaultdict(int)\n#d = defaultdict(list)\nN = int(input())\nA = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i % 2 == 0 and A[i] % 2 == 1:\n        ans += 1\nprint(ans)","import math\n\nn=int(input())\nL=list(map(int,input().split()))\ncount=0\nfor i in range(0,n,2):\n\tif(L[i]%2==1):\n\t\tcount+=1\nprint(count)\n\n","n = int(input()) \na = list(map(int,input().split())) \n\nodd = a[1::2]\nans = 0\nfor i in range(len(odd)):\n    if odd[i]%2 == 1:\n        ans = ans + 1\n\nprint(ans)","N = int(input())\nln = list(map(int, input().split()))\ncounter = 0\nfor i,j in enumerate(ln):\n    if i%2 == 0 and j %2 ==1:\n        counter +=1\nprint(counter)","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\nfor i in range(0,N,2):\n    if a[i] % 2 == 1:\n        ans += 1\n\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\noutput = 0\n\n\nfor i in range(n):\n    if (i % 2 == 1) and (a[i] % 2 == 1):\n        output = output + 1\n        \nprint(output)","n=int(input())\na=list(map(int,input().split()))\nans=0\nfor i in range(n):\n    if i%2==0 and a[i]%2==1:\n        ans+=1\nprint(ans)","def main():\n    N = int(input())\n    numlist = list(map(int,input().split()))\n\n    count = 0\n\n    for i in range(len(numlist)):\n        if i % 2 == 1:\n            if numlist[i] % 2 == 1:\n                count += 1\n    \n    print(count)\n\nif __name__ == '__main__':\n    main()\n","N=int(input())\nA=list(map(int,input().strip().split()))\nc=0\nfor i in range(1,N):\n\tif (i+1)%2!=0 and A[i]%2!=0:\n\t\tc+=1\nprint(c)","import math\nfrom collections import defaultdict\n\nn = int(input())\na = list(map(int,input().split()))\nc = 0\nfor i in range(n):\n  if i&1:\n    continue\n  if a[i]&1:\n    c += 1\nprint(c)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0,n,2):\nif a[i] % 2 == 1:\nans += 1\nprint(ans)","n = int(input())\narr = list(map(int, input().split()))\n\n\/\/ travel only even index in 0 based system\nans = 0\nfor i in range(0,n,2):\n\tif arr[i] % 2 ==1:\n\t\tans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\ncnt2 = 0\n\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        #print(i)\n        cnt += 1\nprint(cnt)\n","N = int(input())\nx = list(map(int, input().split()))\n\na = []\nfor i in range(N):\n  if (i+1) % 2 and x[i] % 2:\n    a.append(x[i])\nprint(len(a))","#!\/usr\/bin\/env python3\nimport sys\n\n\ndef solve(N: int, a: \"List[int]\"):\n    ans = 0\n    for aa in a[::2]:\n        if aa % 2 == 1:\n            ans += 1\n    return ans\n\n# Generated by 1.1.7.1 https:\/\/github.com\/kyuridenamida\/atcoder-tools\ndef main():\n    def iterate_tokens():\n        for line in sys.stdin:\n            for word in line.split():\n                yield word\n    tokens = iterate_tokens()\n    N = int(next(tokens))  # type: int\n    a = [int(next(tokens)) for _ in range(N)]  # type: \"List[int]\"\n    print(solve(N, a))\n\ndef test():\n    import doctest\n    doctest.testmod()\n\nif __name__ == '__main__':\n    #test()\n    main()\n","N=int(input())\na=list(map(int,input().split()))\n\nans=0\nfor i in range(0,N,2):\n    if a[i]%2==1:\n        ans+=1\nprint(ans)","N = int(input())\na=input().split()\nres =0\nfor i in range(1, N+1):\n    if (i % 2 != 0 and int(a[i-1]) % 2 != 0):\n        res += 1\nprint(res)","n = int(input())\narr = list(map(int, input().split()))\n\narr = arr[0::2]\n\nprint(len([x for x in arr if x % 2 == 1]))","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nnum_iter = n\/\/2\nfor i in range(num_iter):\n    if a[i*2+1] % 2 == 1:\n        cnt += 1\nprint(cnt)\n","N = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, N, 2):\n    if a[i] % 2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\na = list(map(int,input().split()))\nans = 0\nfor i in range(N):\n    if i%2 == 0 and a[i]%2 == 1:\n        ans += 1\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)","def main():\n    n = int(input())\n    A = [int(e) for e in input().split()]\n\n    ans = 0\n    for ai, a in enumerate(A):\n        if (ai + 1) % 2 == 1 and a % 2 == 1:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == '__main__':\n    main()\n","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if ((i % 2) == 0):\n        continue\n    if ((a[i] % 2) != 0):\n        ans += 1\n\nprint(ans)\n","N=int(input())\nA=list(map(int,input().split()))\nans=0\nfor i in range(N):\n  if i%2==0 and A[i]%2==1:\n    ans+=1\nprint(ans)\n","def main():\n    N = int(input())\n    a = list(map(int, input().split()))\n\n    ans = 0\n    for i, aa in enumerate(a, 1):\n        if i % 2 == 1 and aa % 2 == 1:\n            ans += 1\n\n    print(ans)\n\n\nif __name__ == \"__main__\":\n    main()\n","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(len(a)):\n  if (i+1)%2 != 0 and a[i]%2 != 0:\n    cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 == 1:\n        ans += 1\nprint(ans)\n","n = int(input())\ndata = list(map(int, input().split()))\n\nans = []\n\nfor i in range(n):\n    if (i % 2 == 0) and (data[i] % 2 == 1):\n        ans.append(data[i])\n\nprint(len(ans))\n","def main():\n    import sys\n    N=int(sys.stdin.readline())\n    A=list(map(int,sys.stdin.readline().split()))\n    count=0\n    for i,a in enumerate(A):\n        if a%2 and (i+1)%2:\n            count+=1\n    print(count)\nmain()","n=int(input())\na=list(map(int,input().split()))\n\na.insert(0,0)\nans=0\nfor i in range(1,len(a)):\n    if i%2==1 and a[i]%2==1:\n        ans+=1\n\nprint(ans)","\nN = int(input())\nAAA = [int(i) for i in input().split()]\n\ncnt = 0\nfor i in range(N):\n    if (i + 1) % 2 == 1 and AAA[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1:\n        if a[i] % 2 == 1:\n            ans += 1\nprint(ans)\n","it = lambda: list(map(int, input().strip().split()))\n\n\ndef solve():\n    N = int(input())\n    A = it()\n    cnt = 0\n    for i in range(N):\n        if i % 2 == 0 and A[i] % 2:\n            cnt += 1\n    print(cnt)\n\nsolve()","N = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(len(a)):\n    if((i+1)%2 != 0):\n        if(a[i]%2 != 0):\n            cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int,input().split()))\ncount = 0\nfor i in range(1,n+1):\n    if i%2 == 1 and a[i-1]%2 == 1:\n        count += 1\nprint(count)","n = int(input())\n\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(n):\n    x = i+1\n    if a[i]%2 == 1 and x%2 == 1:\n        ans += 1\n\nprint(ans)","def ii():return int(input())\ndef iim():return map(int,input().split())\ndef iil():return list(map(int,input().split()))\nn = ii()\nA = iil()\ncnt = 0\nfor i,item in enumerate(A):\n    if (i+1)%2==1 and item%2==1:\n        cnt+=1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(1, n, 2):\n    if a[i]%2 == 1:\n        cnt += 1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if (i % 2 == 0) and (a[i] % 2 != 0):\n        ans += 1\nprint(ans)        \n","N = int(input())\na = list(map(int, input().split()))\ncount = 0;\nfor i in range(0,N):\n  if i % 2 == 1:\n    if a[i] % 2 == 1:\n      count = count+1\nprint(count)","N=int(input())\na=list(map(int,input().split()))\ncnt=0\n\nfor i in range(int(len(a)\/2)+1):\n    if a[2*i]%2==1:\n        cnt+=1\n\nprint(cnt)\n","def resolve():\n    cnt = 0\n    n = int(input())\n    A = list(map(int, input().split()))\n    for i in range(n):\n        if (i+1) % 2 == 1 and A[i] % 2 == 1:\n            cnt += 1\n    \n    print(cnt)\n\nresolve()","n = int(input())\na = list(map(int, input().split()))\nnum = 0\nfor i in a[::2]:\n    if i%2 == 1:\n        num += 1\nprint(num)","def main():\n    N = input()\n    A = list(map(int, input().split()))\n    cnt = 0\n    for i in range(len(A)):\n        if (i+1) % 2 != 0:\n            if A[i] % 2 != 0:\n                cnt += 1\n    print(cnt)\n\n\nif __name__ == '__main__':\n    main()","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(0, N, 2):\n  \tif  a[i] % 2 != 0:\n         ans += 1\n\t\n\nprint(ans)","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\n\nfor i in range(n):\n    if (i+1) % 2 == 1 and a[i] % 2 == 1:\n        ans += 1\n\nprint(ans)\n","n=int(input())\nli=list(map(int,input().split()))\nans=0\n\nfor i in range(n):\n  if li[i]%2!=0 and i%2 != 0 : ans+=1\n\nprint(ans)","length = int(input())\nnumbers = [int(i) for i in input().split(\" \")]\n\ncnt = 0\n\nfor i in range(length):\n  if (i + 1) % 2 != 0 and numbers[i] % 2 != 0:\n    cnt += 1\n\nprint(cnt)\n  ","N = int(input())\nan = map(int, input().split(\" \"))\nans = 0\nfor i, ai in enumerate(an):\n    #print(i+1, ai)\n    if (i+1) % 2 == 1 and ai % 2 == 1:\n        ans += 1\nprint(ans)","def main():\n    N = int(input())\n    A = list(map(int, input().split()))\n\n    count = 0\n\n    for i, a in enumerate(A):\n        if i % 2 == 1:\n            continue\n        elif a % 2 == 0:\n            continue\n        count += 1\n    \n    print(count)\n\n\n\nif __name__ == '__main__':\n    main()","n = int(input())\na = list(map(int, input().split()))\n\nans = 0\nfor i in range(n):\n    if (i+1) % 2 == 1:\n        if a[i] % 2 == 1:\n            ans += 1\n\nprint(ans)","N=int(input())\na=list(map(int, input().split()))\n\ncnt=0\nans_cnt=0\nfor i in a:\n\tcnt+=1\n\tif i%2==1 and cnt%2==1:\n\t\tans_cnt+=1\n        \nprint(ans_cnt)","N = int(input())\nA = list(map(int, input().split()))\nresult = 0\nfor i in range(N):\n  if i % 2 == 0:\n    if A[i] % 2 != 0:\n      result += 1\nprint(result)","N = int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range((N+1)\/\/2):\n    if a[2*i] % 2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\na = list(map(int,input().split()))\n\nans = 0\n\nfor i in range(0,N,1):\n    if (i+1)%2==1 and a[i]%2==1:\n        ans+=1\n\nprint(ans)","#AIsing2020 b\n\nimport sys,math,collections,itertools\ninput = sys.stdin.readline\n\nN=int(input())\nA =[0]+list(map(int,input().split()))\ncount = 0\nfor i in range(1,N+1,2):\n    if A[i]%2 ==1:\n        count +=1\nprint(count)\n","n = int(input())\naa = list(map(int, input().split()))\ncount = 0\n\nfor i, a in enumerate(aa, 1):\n    if i % 2 == 1 and a % 2 == 1:\n        count += 1\n\nprint(count)\n","import sys\nimport math\nimport itertools\nimport bisect\nfrom copy import copy\nfrom collections import deque,Counter\nfrom decimal import Decimal\nimport functools\ndef s(): return input()\ndef k(): return int(input())\ndef S(): return input().split()\ndef I(): return map(int,input().split())\ndef X(): return list(input())\ndef L(): return list(input().split())\ndef l(): return list(map(int,input().split()))\ndef lcm(a,b): return a*b\/\/math.gcd(a,b)\nsys.setrecursionlimit(10 ** 9)\nmod = 10**9+7\ncnt = 0\nans = 0\ninf = float(\"inf\")\n\nn = k()\na = l()\nfor i in range(n):\n    if (i+1) % 2 == 1 and a[i] % 2 == 1:\n        cnt += 1\n\nprint(cnt)\n","n = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, n, 2):\n    if a[i] % 2 != 0:\n        cnt += 1\nprint(cnt)","n=int(input())\na=list(map(int,input().split()))\nr=0\nfor i in range(0,n,2):\n  if a[i]%2==1:\n    r+=1\nprint(r)","n = int(input())\narr = list(map(int, input().split()))\nanswer = 0\nfor i in range(0, n, 2):\n    if arr[i] & 1:\n        answer += 1\nprint(answer)\n","ans=0\nn=int(input())\na=list(map(int,input().split()))\nfor i in range(n):\n    if i % 2 == 0:\n        continue\n    if a[i]%2!=0:\n        ans+=1\nprint(ans)\n","n=int(input())\na=list(map(int,input().split()))\ncnt=0\nfor i in range(n):\n  if (i+1)%2==1:\n    if a[i]%2==1:\n      cnt+=1\nprint(cnt)","n = int(input())\na = list(map(int, input().split()))\n\ncount = 0\n\nfor i in range(len(a)):\n  if(i % 2 == 0):\n    if(a[i] % 2 == 1):\n      count += 1\n\nprint(count) \n","n=int(input())\ns=list(map(int,input().split()))\ncount=0\n\n\nfor i in range(0,len(s)):\n    index_1=i+1\n    if(int(s[i])%2 != 0):\n        if(int((index_1))% 2 != 0 ):\n            count+=1\n        else:\n            count+=0\n    else:\n        count+=0\n\nprint(count)\n    ","N= int(input())\nA = list(map(int, input().split()))\nres = 0\nfor i in range(0, N, 2):\n    if A[i] % 2 == 1:\n        res += 1\nprint(res)","N = int(input())\na = list(map(int, input().split()))\ncnt = 0\nfor i in range(0, N, 2):\n    if a[i] % 2 != 0:\n        cnt += 1\nprint(cnt)","n = int(input())\na = [int(i) for i in input().split()]\nans = 0\nfor i,j in enumerate(a):\n    if (i+1)*j%2==1:\n        ans += 1\nprint(ans)","n = int(input())\na = [int(each) for each in input().split()]\n\nresult = 0\nfor i in range(1, n+1):\n    if i%2 == 1 and a[i-1]%2 == 1:\n        result += 1\nprint(result)","n = int(input())\nl = list(map(int, input().split()))\n\nl1 = l[0::2]\ncnt = 0\nfor i in l1:\n    if i % 2 == 1:\n        cnt += 1\nprint(l1)","n = int(input())\na = list(input().split())\n\na = [int(a[i]) for i in range(n)]\nans = 0\nfor j in range(n):\n    if j%2 == 0 and a[j]%2 == 1:\n        ans = ans + 1\n\nprint(ans) ","N = int(input())\nAli = list(map(int,input().split()))\nr = 0\nfor i in range(N):\n  if Ali[i]%2 == 1 and i%2 == 1:\n    r += 1\n    \nprint(r)","N = int(input())\nA = list(map(int, input().split()))\n\nres = 0\n\nfor i, a in enumerate(A):\n    if i % 2 == 0 and a % 2 == 1:\n        res += 1\n\nprint(res)\n","n = int(input())\nN = list(map(int,input().split()))\ndel N[1::2]\ni = 0\nans = [i for i in N if i % 2 != 0]\nprint(len(ans))","N = int(input())\nA = list(map(int, input().split()))\n\nans = 0\nfor i in range(N):\n    if (i+1) % 2 == 1 and A[i] % 2 == 1:\n        ans += 1\n\nprint(ans)","n=int(input())\na=list(map(int,input().split()))\ncount=0\nfor i in range(n):\n    if i%2==0 and a[i]%2!=0:\n        count+=1\n\nprint(count)","N=int(input())\nA=list(int(x) for x in input().split())\ncount=0\nfor i in range(N):\n\tif i%2==0 and A[i]%2!=0:\n\t\tcount+=1\nprint(count)","n = int(input())\na= list(map(int,input().split()))\ncount=0\nfor i,n in enumerate(a):\n  if (i+1)%2!=0:\n    if n%2!=0:\n      count+=1\nprint(count)","n = int(input())\na = list(map(int, input().split()))\nd=0\nfor i,j in enumerate(a):\n  if i%2==0 and j%2==1:\n    d+=1\nprint(d)","N=int(input())\n#N=15\n\n\n\ninput=input()\n#input=\"13 76 46 15 50 98 93 77 31 43 84 90 6 24 14\"\nmasu=[int(r) for r in input.split()]\nans=[]\n\nfor i in range(N):\n  if masu[i]%2==1 and i%2==1:\n    ans.append(i)\n\nprint(len(ans))\n","N=int(input())\nli = list(map(int,input().split()))\ncoun=0\nfor i,h in enumerate(li):\n  if ((i+1) % 2 == 1) and (h % 2 == 1):\n    coun+=1\n    #print(i)\nprint(coun)","n = int(input())\na = list(map(int, input().split()))\n\ncnt = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        cnt += 1\nprint(cnt)\n","n=int(input())\na_list = list(map(int, input().split()))\n\nans=0\nfor i in range(n):\n  if i%2==0:\n    if a_list[i]%2==1:\n      ans+=1\n\n      \nprint(ans)","n = int(input())\na = list(map(int, input().split()))\nans = 0\nfor i in range(n):\n    if (i + 1) % 2 == 1 and a[i] % 2 == 1:\n        ans += 1\nprint(ans)","n = int(input())\na_list = list(map(int, input().split()))\ncount = 0\n\nfor a in a_list[::2]:\n  if a & 1:\n    count += 1\nprint(count)","N = int(input())\nlist = list(map(int, input().split()))\n\ncnt = 0\n\nfor i in range(N):\n    if i %2 == 1 and list[i] %2 == 1:\n        cnt += 1\nprint(cnt)","N = int(input())\n\ntmp = input().split(' ')\n\na = []\nresult = []\nfor i in range(N):\n    a.append(int(tmp[i]))\n    if (i % 2 == 1 and a[i] % 2 == 1):\n        result.append(a[i])\n\nprint(len(result))\n","n=int(input())\nb=0\na=list(map(int,input().split()))\nfor i in range(n):\n    if a[i]%2==1 and (i+1)%2==1:\n        b+=1\nprint(b)\n","N = int(input())\nA = [0] + [int(_) for _ in input().split()]\nans = 0\nfor i, a in enumerate(A):\n    if i == 0:\n        continue\n    if i % 2 == a % 2 == 1:\n        ans += 1\nprint(ans)\n","N, *a = map(int, open(0).read().split())\n\nprint(sum(1 for e in a[::2] if e % 2 == 1))\n","n = int(input())\n\na = [int(x) for x in input().split()]\n\ncount = 0\n\nfor i in range(n):\n    if i%2 == 0 and a[i]%2 == 1:\n        count += 1\n\nprint(count)\n","n = int(input())\na = list(map(int,input().split()))\nprint(sum(ai%2==1 for ai in a[::2]))","n = int(input())\na = list(map(int, input().split()))\ncount = 0\nfor i, v in enumerate(a):\n    if (i+1)%2 == 1 and v%2 == 1:\n        count += 1\nprint(count)"]}
{"description_html":"\n<H1>Naive String Search<\/H1>\n\n<p>\n  Find places where a string <var>P<\/var> is found within a text <var>T<\/var>.\n  \n  Print all indices of <var>T<\/var> where <var>P<\/var> found. The indices of <var>T<\/var> start with 0.\n<\/p>\n\n<H2>Input<\/H2>\n\n<p>\n  In the first line, a text <var>T<\/var> is given. In the second line, a string <var>P<\/var> is given.\n<\/p>\n\n<H2>output<\/H2>\n\n<p>\n  Print an index of <var>T<\/var> where <var>P<\/var> found in a line. Print the indices in ascending order.\n<\/p>\n\n<H2>Constraints<\/H2>\n\n<ul>\n  <li> 1 &le; length of <var>T<\/var> &le; 1000 <\/li>\n  <li> 1 &le; length of <var>P<\/var> &le; 1000 <\/li>\n  <li>The input consists of alphabetical characters and digits<\/li>\n<\/ul>\n\n<H2>Sample Input 1<\/H2>\n<pre>\naabaaa\naa\n<\/pre>\n\n<H2>Sample Output 1<\/H2>\n<pre>\n0\n3\n4\n<\/pre>\n\n<H2>Sample Input 2<\/H2>\n<pre>\nxyzz\nyz\n<\/pre>\n\n<H2>Sample Output 2<\/H2>\n<pre>\n1\n<\/pre>\n\n\n\n<H2>Sample Input 3<\/H2>\n<pre>\nabc\nxyz\n<\/pre>\n\n<H2>Sample Output3<\/H2>\n<pre>\n<\/pre>\n<p>\nThe ouput should be empty.\n<\/p>\n","description_string":"\nNaive String Search\n\n  Find places where a string P is found within a text T.\n  \n  Print all indices of T where P found. The indices of T start with 0.\n\nInput\n\n  In the first line, a text T is given. In the second line, a string P is given.\n\noutput\n\n  Print an index of T where P found in a line. Print the indices in ascending order.\n\nConstraints\n\n 1 \u2264 length of T \u2264 1000 \n 1 \u2264 length of P \u2264 1000 \nThe input consists of alphabetical characters and digits\n\nSample Input 1\n\naabaaa\naa\n\nSample Output 1\n\n0\n3\n4\n\nSample Input 2\n\nxyzz\nyz\n\nSample Output 2\n\n1\n\nSample Input 3\n\nabc\nxyz\n\nSample Output3\n\n\n\nThe ouput should be empty.\n\n","orig_lang_html":"\n<H1>Naive String Search<\/H1>\n\n<p>\n  Find places where a string <var>P<\/var> is found within a text <var>T<\/var>.\n  \n  Print all indices of <var>T<\/var> where <var>P<\/var> found. The indices of <var>T<\/var> start with 0.\n<\/p>\n\n<H2>Input<\/H2>\n\n<p>\n  In the first line, a text <var>T<\/var> is given. In the second line, a string <var>P<\/var> is given.\n<\/p>\n\n<H2>output<\/H2>\n\n<p>\n  Print an index of <var>T<\/var> where <var>P<\/var> found in a line. Print the indices in ascending order.\n<\/p>\n\n<H2>Constraints<\/H2>\n\n<ul>\n  <li> 1 &le; length of <var>T<\/var> &le; 1000 <\/li>\n  <li> 1 &le; length of <var>P<\/var> &le; 1000 <\/li>\n  <li>The input consists of alphabetical characters and digits<\/li>\n<\/ul>\n\n<H2>Sample Input 1<\/H2>\n<pre>\naabaaa\naa\n<\/pre>\n\n<H2>Sample Output 1<\/H2>\n<pre>\n0\n3\n4\n<\/pre>\n\n<H2>Sample Input 2<\/H2>\n<pre>\nxyzz\nyz\n<\/pre>\n\n<H2>Sample Output 2<\/H2>\n<pre>\n1\n<\/pre>\n\n\n\n<H2>Sample Input 3<\/H2>\n<pre>\nabc\nxyz\n<\/pre>\n\n<H2>Sample Output3<\/H2>\n<pre>\n<\/pre>\n<p>\nThe ouput should be empty.\n<\/p>\n","orig_lang_string":"\nNaive String Search\n\n  Find places where a string P is found within a text T.\n  \n  Print all indices of T where P found. The indices of T start with 0.\n\nInput\n\n  In the first line, a text T is given. In the second line, a string P is given.\n\noutput\n\n  Print an index of T where P found in a line. Print the indices in ascending order.\n\nConstraints\n\n 1 \u2264 length of T \u2264 1000 \n 1 \u2264 length of P \u2264 1000 \nThe input consists of alphabetical characters and digits\n\nSample Input 1\n\naabaaa\naa\n\nSample Output 1\n\n0\n3\n4\n\nSample Input 2\n\nxyzz\nyz\n\nSample Output 2\n\n1\n\nSample Input 3\n\nabc\nxyz\n\nSample Output3\n\n\n\nThe ouput should be empty.\n\n","solve_rate":0.7918781726,"codenet_problem_id":"p02247","input_testcases":{"27":"aaaaca\naa","35":"aaaaba\nab","33":"abaaaa\nba","50":"bab`aa\nab","2":"aaabaa\nba","86":"`aabba\nba","96":"abbaab\nba","26":"aabbaa\nba","102":"xyzz\nyz","62":"aab`ba\naa","18":"ababab\nab","30":"aaaacb\naa","44":"yzyw\nyz","67":"aaac`a\naa","78":"baabba\nba","70":"aabdab\naa","15":"aaaaab\naa","63":"zzyx\nzz","41":"aaadab\naa","71":"aab`ab\nab","5":"aaaaba\naa","49":"yzxw\nyz","60":"aabbaa\nab","23":"aaaaaa\naa","85":"`babaa\nab","29":"xyzy\nzy","38":"aab`aa\nab","9":"aaaaba\nba","57":"b`abba\nab","32":"yzyx\nzy","8":"aaacab\naa","68":"aaabba\nba","39":"yzyw\nzy","16":"`aabab\nab","4":"xyzy\nyz","25":"aaabaa\nab","7":"abaaaa\nab","81":"c`abba\nab","36":"aabaaa\nab","65":"yzyx\nyz","1":"aabaaa\nba","37":"aaabba\nab","43":"abb`aa\nab","66":"aaab`a\nab"},"output_testcases":{"27":"0\n1\n2\n","35":"3\n","33":"1\n","50":"1\n","2":"3\n","86":"4\n","96":"2\n","26":"3\n","102":"1\n","62":"0\n","18":"0\n2\n4\n","30":"0\n1\n2\n","44":"0\n","67":"0\n1\n","78":"0\n4\n","70":"0\n","15":"0\n1\n2\n3\n","63":"0\n","41":"0\n1\n","71":"1\n4\n","5":"0\n1\n2\n","49":"0\n","60":"1\n","23":"0\n1\n2\n3\n4\n","85":"2\n","29":"2\n","38":"1\n","9":"4\n","57":"2\n","32":"1\n","8":"0\n1\n","68":"4\n","39":"1\n","16":"2\n4\n","4":"1\n","25":"2\n","7":"0\n","81":"2\n","36":"1\n","65":"0\n","1":"2\n","37":"2\n","43":"0\n","66":"2\n"},"n_missing":59,"programs":["t, p = input(), input()\nlen_p = len(p)\nfor i in range(len(t) - len_p + 1):\n    if t[i:i + len_p] == p:\n        print(i)","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[tmp-1]):\n            common_length[i-1]=1\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>1):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T=input()\nP=input()\n\nfor i in range(len(T)):\n    P!=T[i:i+len(P)] or print(i)\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","def main():\n    text = input()\n    len_text = len(text)\n    pattern = input()\n    len_pattern = len(pattern)\n\n    for i in range(len_text - len_pattern + 1):\n        if text[i:i+len_pattern] == pattern:\n            print(i)\n    return\n\n\nmain()\n","T = str(input())\nP = str(input())\n\nx = -1\nwhile True:\n    x = T.find(P, x+1)\n    if x == -1:\n        break\n    print(x)\n","# coding: utf-8\n# Your code here!\n\nt = str(input())\np = str(input())\n\nfor i in range(len(t)):\n    if t[i:].startswith(p):\n        print(i)\n\n","T,P=input(),input()\nfor i in range(len(T)):T[i:].startswith(P)and print(i)\n","T = input()\nP = input()\n\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n\n","#1_14_A\nimport re\nt = input()\np = input()\nidx = -1\nwhile True:\n    idx = t.find(p,idx+1)\n    if idx == -1:\n        break\n    print(idx)\n","s,p=input(),input();[print(i)for i in range(len(s))if s[i:i+len(p)]==p]","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] or tmp==0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T = input()\nP = input()\nt = len(T)\np = len(P)\nfor i in range(t-p+1):\n    if P == T[i:i+p]:\n        print(i)\n\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[tmp-1]):\n            common_length[i-1]=1\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp!=0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n    if(27<i<=26):\n        print(f\"{i}:{tmp}\")\n        \n","import string\n\n\nclass SuffixArray:\n    def __init__(self, S):\n        self.N = len(S)\n        self.S = S\n        self.atoi = {x: i for i, x in enumerate(string.printable)}\n        self.sa = self.__make_sa()\n\n    def show(self):\n        for i, s in enumerate(self.sa):\n            print(i, s, self.S[s:])\n\n    def __make_sa(self):\n        \"\"\"\u914d\u5217\uff08\u6587\u5b57\u5217\uff09S\u306esuffix array\u3092\u8fd4\u3059 O(N(logN)^2)\"\"\"\n        N = self.N\n        SA = list(range(N + 1))\n        rank = [-1] * (N + 1)\n        tmp = [0] * (N + 1)\n        k = 1\n\n        for i, s in enumerate(self.S):\n            rank[i] = self.atoi[s]\n\n        def key(i):\n            if i + k <= N:\n                return (rank[i], rank[i + k])\n            return (rank[i], -1)\n\n        def cmp(i, j):\n            return key(i) < key(j)\n\n        while k <= N:\n            SA.sort(key=key)\n            tmp[SA[0]] = 0\n            for i in range(1, N + 1):\n                tmp[SA[i]] = tmp[SA[i - 1]] + cmp(SA[i - 1], SA[i])\n            for i in range(N + 1):\n                rank[i] = tmp[i]\n            k *= 2\n        return SA\n\n    def contain(self, T, side=\"left\"):\n        \"\"\"\u6587\u5b57\u5217S\u306bT\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059O(|T|log|S|)\n        input\n            T: \u691c\u7d22\u3059\u308b\u6587\u5b57\u5217\uff08\u914d\u5217\uff09\n            side: left\u3000-> S[sa[i]:sa[i]+NT] == T\u3068\u306a\u308b\u6700\u5c0f\u306eindex i\u3092\u8fd4\u3059\n                  right -> \u6700\u5927\u306eindex\u3092\u8fd4\u3059\n        output:\n            \u542b\u307e\u308c\u308b\u5834\u5408: S[sa[i]: sa[i]+NT] == T\u3068\u306a\u308b\u6700\u5c0for\u6700\u5927\u306ei\n            \u542b\u307e\u308c\u306a\u3044\u5834\u5408: -1\n        \"\"\"\n        NT = len(T)\n        if NT > self.N:\n            return -1\n        L = 0\n        R = self.N\n        if side == \"left\":\n            while R - L > 1:\n                m = (L + R) \/\/ 2\n                i = self.sa[m]\n                if self.S[i:i + NT] < T:\n                    L = m\n                else:\n                    R = m\n            i = self.sa[R]\n            if self.S[i:i + NT] == T:\n                return R\n        else:\n            R += 1\n            while R - L > 1:\n                m = (L + R) \/\/ 2\n                i = self.sa[m]\n                if self.S[i:i + NT] <= T:\n                    L = m\n                else:\n                    R = m\n            i = self.sa[L]\n            if self.S[i:i + NT] == T:\n                return L\n        return -1\n\n    def get_indices(self, T):\n        \"\"\"S\u306e\u4e2d\u306b\u542b\u307e\u308c\u308bT\u306e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3057\u305findex\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\"\"\"\n        L = self.contain(T, side=\"left\")\n        if L == -1:\n            return []\n        R = self.contain(T, side=\"right\")\n        return [self.sa[i] for i in range(L, R+1)]\n\n\nSA = SuffixArray(input())\nres = SA.get_indices(input())\nif res:\n    res.sort()\n    print(*res, sep=\"\\n\")\n","#import pysnooper\n#import os,re,sys,operator,math,heapq,string\nfrom collections import Counter,deque\n#from operator import itemgetter\n#from itertools import accumulate,combinations,groupby,combinations_with_replacement\nfrom sys import stdin,setrecursionlimit\n#from copy import deepcopy\nsetrecursionlimit(10**6)\ninput=stdin.readline\n\ns=input().rstrip()\nt=input().rstrip()\nans=set()\nfor i in range(len(s)):\n    try:\n        n=s[i:].index(t)+i\n        ans.add(n)\n    except:\n        continue\nfor i in sorted(ans):\n    print(i)\n","a=input()\nb=input()\nfor i in range (len(a)):\n    if b == a[i:i+len(b)]:\n        print(i)\n\n","T = input()\nP = input()\nlen_P = len(P)\n\nfor i in range(len(T)-len_P+1):\n    if T[i:i+len_P] == P:\n        print(i)\n\n","parent = input()\nkey = input()\n\nfor i in range(len(parent)):\n    if parent[i:i+len(key)] == key:\n        print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-(x-1))\n\nif __name__ == \"__main__\":\n    main()\n","t = input()\np = input()\n\nfor i in range(len(t) - len(p) + 1):\n    if t[i:i + len(p)] == p:\n        print(i)","X = input()\nY = input()\nx = len(X)\ny = len(Y)\nfor i in range(x-y+1):\n    if Y == X[i:i+y]:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","#coding:utf-8\n\ndef NSS(s1,s2):\n    s1list=list(s1)\n    n=len(s1list)\n    s2list=list(s2)\n    for i in range(n):\n        ans=0\n        if len(s1list)>=len(s2list) and s1list[0]==s2list[0]:\n            ans+=1\n            for j in range(1,len(s2list)):\n                if s1list[j]==s2list[j]:\n                    ans+=1\n        if ans==len(s2list):\n            print(i)\n        s1list.pop(0)\n\nif __name__==\"__main__\":\n    s1=input()\n    s2=input()\n    NSS(s1,s2)\n        \n            ","t= input()\np= input()\nl= len(p)\n\nfor i in range(len(t) - l + 1) :\n    if t[i : i + l] == p:\n        print(i)\n","T = input()\nS = input()\n\ns = len(S)\nfor i in range(len(T)-s+1):\n    if T[i:i+s] == S:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T=input()\nP=input()\n\nfor i in range (len(T)):\n    P!=T[i:i+len(P)] or print(i)\n","a=input()\nb=input()\nx=list(a)\ny=list(b)\nfor i in range(len(a)+1-len(b)):\n    z=0\n    for j in range(len(b)):\n        if x[i+j]==y[j]:\n            z+=1\n    if z==len(b):\n        print(i)\n","import sys\nfrom typing import List\n\n\nif __name__ == \"__main__\":\n    input_str = input()\n    target_str = input()\n    target_str_len = len(target_str)\n\n    for idx, s in enumerate(input_str):\n        if len(input_str[idx:]) < target_str_len:\n            break\n        if s == target_str[0]:\n            if input_str[idx:idx + target_str_len] == target_str:\n                print(idx)\n\n","def main():\n    s = input()\n    t = input()\n    for i in range(len(s)-len(t)+1):\n        if t == s[i:i+len(t)]:print(i)\n\n\nif __name__ == '__main__':\n    main()\n\n\n","t=input()\np=input()\nfor i in range(len(t)):\n    if p == t[i:i+len(p)]:\n        print(i)\n\n\n","T = str(input())\nP = str(input())\nx = 0\n\nwhile True:\n    x = T.find(P, x)\n    if x+1:\n        print(x)\n    else:\n        break\n    x = x + 1\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\ntmp_tmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        tmp_tmp=tmp\n        while(string[i]==string[tmp_tmp] and tmp_tmp >0):\n            tmp_tmp=common_length[max([tmp_tmp-1,0])]\n        common_length[i-1]=tmp_tmp\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","def Main():\n    text = input()\n    pattern = input()\n    \n    for i in range(len(text)):\n        if text[i:].startswith(pattern):\n            print(i)\nMain()\n","# coding: utf-8\n# Your code here!\n\nT = input()\nP = input()\n\nfor i in range(len(T) - len(P) + 1):\n   if P == T[i : i + len(P)]:\n      print(i)\n","while True:\n    try:\n        T = input()\n        P = input()\n\n        Tlen = len(T)\n        Plen = len(P)\n\n    except Plen>Tlen:\n        break\n\n    count = 0\n    List = []\n    for i in range(Tlen-Plen+1):\n        index = T.find(P)\n        \n        if index==0:\n            List.append(count)\n        \n        Tlist = list(T)\n        del(Tlist[0])\n        T = ''.join(Tlist)\n        \n        count += 1\n\n    Llen = len(List)\n\n    if Llen==0:\n        break\n\n    else:\n        for i in range(Llen):\n            print(List[i])\n    \n    break\n","T=str(input())\nP=str(input())\nfor i in range(len(T)+1-len(P)):\n    if T[i:i+len(P)]==P:\n        print(i)\n","t = input()\np = input()\n\nanslist = []\nfor i in range(len(t) - len(p) + 1):\n    if t[i] == p[0]:\n        k = 0\n        for j in range(i, i + len(p)):\n            if t[j] != p[k]:\n                break\n            k += 1\n        else:\n            anslist.append(i)\n\nfor ans in anslist:\n    print(ans)\n\n","t=input()\np=input()\nlt=len(t)\nlp=len(p)\nfor i in range(lt-lp+1):\n    if t[i:i+l_p]==p:print(i)","T = input()\nP = input()\ntmp2 = []\nfor i in range(len(T)):\n    tmp = T[i:].find(P)\n    if tmp != -1:\n        tmp2.append(len(T[:i])+tmp)\nfor s in set(tmp2):\n    print(s)","C=''\n\nT=list(str(input()))\n\nP=str(input())\n\nfor i in range(len(T)-len(P)+1):\n    for j in range(len(P)):\n        C+=T[i+j]\n        j+=1\n    \n    if C==P:\n        print(i)\n    C=''\n","t = list(input())\np = list(input())\nn = len(t) - len(p) + 1\n\nfor i in range(n):\n    if p[0] == t[i]:\n        for j in range(len(p)):\n            flag = True\n            if not p[j] == t[i+j]:\n                flag = False\n                break\n        if flag:\n            print(i)\n\n","T = input()\nP = input()\n\nindex = -1\nwhile True:\n    index = T.find(P, index + 1)\n    if index == -1:\n        break\n    print(index)\n","t=input()\np=input()\nfor i in range(len(t)-len(p)+1):\n\tif t[i:i+len(p)]==p:\n\t\tprint(i)\n\n","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\naabaaa\naa\n\noutput:\n0\n3\n4\n\"\"\"\n\nimport sys\n\n\nclass NaiveStringSearch(object):\n    __slots__ = ('target', 'pattern')\n\n    def __init__(self, in_data):\n        \"\"\"\"\"\"\n        self.target, self.pattern = map(lambda x: x.strip(), _input)\n\n    def brute_force(self):\n        m, n = len(self.pattern), len(self.target)\n        for i in range(n - m + 1):\n            for j in range(m):\n                if self.target[i + j] != self.pattern[j]:\n                    break\n                if j == m - 1:\n                    print(i)\n        return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = NaiveStringSearch(in_data=_input)\n    case.brute_force()","a = list(input())\nb = list(input())\n\n\nfor j in range(len(a)+1-len(b)) :\n    Same = True\n    ans = j\n    i = 0\n    while i < len(b) :\n        if b[i] == a[j] :\n            i += 1\n            j += 1\n        else :\n            Same = False\n            break\n    if Same == True :\n        print(ans)\n","s,p=input(),input()\n[print(i) for i in range(0,len(s)) if s[i:i+len(p)]==p]","def search(t, p):\n    tn = len(t)\n    i = 0\n    pn = len(p)\n    plist = []\n    if pn <= tn:\n        while i < tn:\n            j = 0\n            while j < pn and i+j < tn:\n                if t[i+j] != p[j]: break\n                j += 1\n            if j == pn:\n                plist.append(i)\n            i += 1\n    return plist\n\ndef main():\n    t = input()\n    p = input()\n    plist = search(t, p)\n    for i in plist: print(i)\n\n\n\nif __name__ == \"__main__\":\n    main()\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n\n","def resolve():\n    T = input()\n    P = input()\n    idx = 0\n    while idx <= len(T) - len(P):\n        if T[idx:idx + len(P)] == P:\n            print(idx)\n        idx += 1\n\n\nresolve()\n\n","# https:\/\/onlinejudge.u-aizu.ac.jp\/courses\/lesson\/1\/ALDS1\/14\/ALDS1_14_A\n\n\ndef solve():\n    T = input()\n    P = input()\n\n    if len(T) < len(P):\n        exit()\n\n    for index, pos in enumerate(range(len(T) - len(P) + 1)):\n        if T[pos:pos+len(P)] == P:\n            print(index)\n\n\nif __name__ == '__main__':\n    solve()\n\n","t = input()\np = input()\ntl = len(t)\npl = len(p)\nfor i in range (tl-pl+1):\n  if p == t[i:i+pl]:\n    print(i)\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:i+len(P)]==P:\n        print(i)\n    else:\n        continue \n","s,p = input(),input()\na = len(p)\nc = []\nc=[i for i in range(0,len(s)) if s[i:i+a]==p] \nfor e in c:\n  print(e)","t = input()\np = input()\n\nfor i in range(len(t)-len(p)+1):\n    if t[i:i+len(p)] == p:\n        print(i)\n","t=input()\np=input()\nlt=len(t)\nlp=len(p)\nfor i in range(lt-lp+1):\n    if t[i:i+lp]==p:print(i)","a= input()\nb= input()\nln = len(b)\nfor i in range(len(a) - ln + 1):\n    if a[i : i + ln] == b :\n        print(i)\n","T = input()\nP = input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","A=input()\nB=input()\na=len(A)\nb=len(B)\nfor i in range (a-b+1):\n    if B==A[i:i+b]:\n        print(i)\n","a = list(input())\nb = list(input())\n\n\nfor j in range(len(a)+1-len(b)) :\n    Same = True\n    ans = j\n    i = 0\n    while i < len(b) :\n        if b[i] == a[j] :\n            i += 1\n            j += 1\n        else :\n            Same = False\n            break\n    if Same == True :\n        print(ans)\n","s=input()\np=input()\nfor i in range(len(s)):\n    if s[i:].startswith(p):\n        print(i)\n","t = input()\np = input()\nb = 0\nwhile True:\n    a = t.find(p, b)\n    if a == -1:\n        break\n    print(a)\n    b = a + 1\n","T,P=input(),input()\nfor i in range(len(T)):T[i:i+len(P)]!=P or print(i)\n","t=input()\np=input()\nl=len(t)\nll=len(p)\ni=0\nfor i in range(l-ll+1):\n    x=t.find(p,i,i+ll)\n    if x==-1:\n        pass\n    else:\n        print(x)\n","T = input()\nP = input()\nlp = len(P)\nfor i in range(len(T) - lp + 1):\n    if T[i:i + lp] == P:\n        print(i)\n","a = input()\nb = input()\nfor i in range(len(a)):\n    if a[i:i+len(b)] == b:\n        print(i)\n        \n","T, P = input(), input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","T = input()\nP = input()\nx = len(T)\ni = 0\nfor i in range(x):\n    if T[i:].startswith(P):\n        print(i)\n","T = input()\nP = input()\ntmp2 = []\nfor i in range(len(T)):\n    tmp = T[i:].find(P)\n    if tmp != -1:\n        tmp2.append(len(T[:i])+tmp)\nfor s in sorted(set(tmp2)):\n    print(s)","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:i+len(P)]==P:\n        print(i)\n","T = input()\nP = input()\nfor j in range(len(T)):\n    if T[j:].startswith(P):\n        print(j)\n","a=input()\nb=input()\nfor i in range(len(a)):\n    x=a[i:i+len(b)].find(b)\n    if x!=-1:\n        print(x+i)\n","T=str(input())\nP=str(input())\nfor i in range(len(T)):\n    if T[i:len(T)].startswith(P):\n        print(i)\n","T = input()\nP = input()\nl = len(P)\n\nfor i in range(len(T) - l + 1) :\n    if T[i : i + l] == P :\n        print(i)\n","t = input()\np = input()\n \nanslist = []\nfor i in range(len(t) - len(p) + 1):\n    if t[i] == p[0]:\n        k = 0\n        for j in range(i, i + len(p)):\n            if t[j] != p[k]:\n                break\n            k += 1\n        else:\n            anslist.append(i)\n \nfor ans in anslist:\n    print(ans)\n","T = input()\nP = input()\nidx = 0\nwhile 1:\n    idx = T.find(P, idx)\n    if idx+1:\n        print(idx)\n    else:\n        break\n    idx += 1","string = input()\nteststring = input()\nlength = len(teststring)\ncounter = []\nfor position in range(0, len(string)):\n  if string[position:position + length] == teststring:\n    counter.append(position)\n\nfor content in counter:\n  print(content)","t = input()\np = input()\n\nindex = -1\nwhile True:\n    index = t.find(p, index + 1)\n    if index == -1:\n        break\n    print(index)\n\n","A=input()\nB=input()\na=len(A)\nb=len(B)\nfor i in range(a-b+1):\n    if B==A[i:i+b]:\n        print(i)\n\n","T = list(input())\nP = list(input())\nfor i in range(len(T)):\n    try:\n        if P[0] == T[i]:\n            for j in range(len(P)):\n                if P[j] == T[i + j]:\n                    pass\n                else: break\n            else: print(i)\n    except:pass","t = input()\np = input()\nfor i in range(len(t)-len(p)+1):\n if t.find(p,i,i+len(p)) != -1: print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-1)\n\nif __name__ == \"__main__\":\n    main()","t=input()\np=input()\nl=len(t)-len(p)\nans=[]\nfor i in range(l+1):\n    if t[i:i+len(p)]==p:\n        ans.append(i)\n#if ans==[]:\n#   sys.exit\nfor _ in ans:\n    print(_)\n","# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ALDS1_14_A&lang=ja\n\nT = input()\nP = input()\n\nfor j in range(len(T) - len(P) + 1):\n    if T[j:j+len(P)] == P:\n        print(j)\n","t = input()\np = input()\nt_len = len(t)\np_len = len(p)\n\nfor i in range(0, t_len - p_len + 1):\n    if t[i:i + p_len] == p:\n        print(i)\n\n","t = input()\np = input()\n\nfor i in range(len(t)):\n    for j in range(len(p) + 1):\n        if j == len(p):\n            print(i)\n        else:\n            if i + j >= len(t):\n                break\n            elif t[i + j] == p[j]:\n                continue\n            else:\n                break\n","s,p=input(),input()\n[print(i) for i in range(len(s)) if s[i:i+len(p)]==p]","T=input()\nP=input()\nm=-1\nfor i in range(len(T)):\n    k=T.find(P,i,len(T))\n    if m != k and k>=0:\n        print(k)\n    m=k\n","# coding: utf-8\n# Your code here!\nT=input()\nP=input()\n\nfor i in range(len(T)):\n    if P==T[i:i+len(P)]:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[max([tmp-1,0])]):\n            common_length[i-1]=0\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","a = input()\nb = input()\nfor i in range(len(a)-len(b)+1):\n    x = a[i:i+len(b)]\n    if x==b:\n        print(i)\n","T = input()\nP = input()\n\nfor i in range(len(T)):\n    if P == T[i:i+len(P)]:\n        print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-(x-1))\n\nif __name__ == \"__main__\":\n    main()","def search(s1, s2):\n    len1 = len(s1)\n    len2 = len(s2)\n    for i in range(len1):\n        if i + len2 > len1:\n            break\n\n        for j in range(len2):\n            if s1[i+j] != s2[j]:\n                break\n        else:\n            yield i\n\n\ndef run():\n    s1 = input()\n    s2 = input()\n    for idx in search(s1, s2):\n        print(idx)\n\n\nif __name__ == '__main__':\n    run()\n\n","T = input()\nP = input()\n\nfor i in range(len(T) - len(P) + 1):\n   if P == T[i : i + len(P)]:\n      print(i)\n\n","T,P=input(),input()\nn=len(P)\nfor i in range(len(T)):T[i:i+n]!=P or print(i)\n","t=input();p=input()\nfor i in range(len(t)):\n    if t[i:].startwith(p):print(i)","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\naabaaa\naa\n\noutput:\n0\n3\n4\n\"\"\"\n\nimport sys\n\n\nclass NaiveStringSearch(object):\n    __slots__ = ('target', 'pattern')\n\n    def __init__(self, in_data):\n        \"\"\"\"\"\"\n        self.target = in_data[0].strip()\n        self.pattern = in_data[1].strip()\n\n    def naive_matching(self):\n        m, n = len(self.pattern), len(self.target)\n        for i in range(n - m + 1):\n            for j in range(m):\n                if self.target[i + j] != self.pattern[j]:\n                    break\n                if j == m - 1:\n                    print(i)\n        return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = NaiveStringSearch(in_data=_input)\n    case.naive_matching()","T, P = [input() for i in range(2)]\n\nlen_P = len(P)\nfor i in range(len(T) - len_P + 1):\n    if P == T[i:i + len_P]:\n        print(i)\n\n"],"raw_generations":["t, p = input(), input()\nlen_p = len(p)\nfor i in range(len(t) - len_p + 1):\n    if t[i:i + len_p] == p:\n        print(i)","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[tmp-1]):\n            common_length[i-1]=1\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>1):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T=input()\nP=input()\n\nfor i in range(len(T)):\n    P!=T[i:i+len(P)] or print(i)\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","def main():\n    text = input()\n    len_text = len(text)\n    pattern = input()\n    len_pattern = len(pattern)\n\n    for i in range(len_text - len_pattern + 1):\n        if text[i:i+len_pattern] == pattern:\n            print(i)\n    return\n\n\nmain()\n","T = str(input())\nP = str(input())\n\nx = -1\nwhile True:\n    x = T.find(P, x+1)\n    if x == -1:\n        break\n    print(x)\n","# coding: utf-8\n# Your code here!\n\nt = str(input())\np = str(input())\n\nfor i in range(len(t)):\n    if t[i:].startswith(p):\n        print(i)\n\n","T,P=input(),input()\nfor i in range(len(T)):T[i:].startswith(P)and print(i)\n","T = input()\nP = input()\n\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n\n","#1_14_A\nimport re\nt = input()\np = input()\nidx = -1\nwhile True:\n    idx = t.find(p,idx+1)\n    if idx == -1:\n        break\n    print(idx)\n","s,p=input(),input();[print(i)for i in range(len(s))if s[i:i+len(p)]==p]","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] or tmp==0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T = input()\nP = input()\nt = len(T)\np = len(P)\nfor i in range(t-p+1):\n    if P == T[i:i+p]:\n        print(i)\n\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[tmp-1]):\n            common_length[i-1]=1\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp!=0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n    if(27<i<=26):\n        print(f\"{i}:{tmp}\")\n        \n","import string\n\n\nclass SuffixArray:\n    def __init__(self, S):\n        self.N = len(S)\n        self.S = S\n        self.atoi = {x: i for i, x in enumerate(string.printable)}\n        self.sa = self.__make_sa()\n\n    def show(self):\n        for i, s in enumerate(self.sa):\n            print(i, s, self.S[s:])\n\n    def __make_sa(self):\n        \"\"\"\u914d\u5217\uff08\u6587\u5b57\u5217\uff09S\u306esuffix array\u3092\u8fd4\u3059 O(N(logN)^2)\"\"\"\n        N = self.N\n        SA = list(range(N + 1))\n        rank = [-1] * (N + 1)\n        tmp = [0] * (N + 1)\n        k = 1\n\n        for i, s in enumerate(self.S):\n            rank[i] = self.atoi[s]\n\n        def key(i):\n            if i + k <= N:\n                return (rank[i], rank[i + k])\n            return (rank[i], -1)\n\n        def cmp(i, j):\n            return key(i) < key(j)\n\n        while k <= N:\n            SA.sort(key=key)\n            tmp[SA[0]] = 0\n            for i in range(1, N + 1):\n                tmp[SA[i]] = tmp[SA[i - 1]] + cmp(SA[i - 1], SA[i])\n            for i in range(N + 1):\n                rank[i] = tmp[i]\n            k *= 2\n        return SA\n\n    def contain(self, T, side=\"left\"):\n        \"\"\"\u6587\u5b57\u5217S\u306bT\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059O(|T|log|S|)\n        input\n            T: \u691c\u7d22\u3059\u308b\u6587\u5b57\u5217\uff08\u914d\u5217\uff09\n            side: left\u3000-> S[sa[i]:sa[i]+NT] == T\u3068\u306a\u308b\u6700\u5c0f\u306eindex i\u3092\u8fd4\u3059\n                  right -> \u6700\u5927\u306eindex\u3092\u8fd4\u3059\n        output:\n            \u542b\u307e\u308c\u308b\u5834\u5408: S[sa[i]: sa[i]+NT] == T\u3068\u306a\u308b\u6700\u5c0for\u6700\u5927\u306ei\n            \u542b\u307e\u308c\u306a\u3044\u5834\u5408: -1\n        \"\"\"\n        NT = len(T)\n        if NT > self.N:\n            return -1\n        L = 0\n        R = self.N\n        if side == \"left\":\n            while R - L > 1:\n                m = (L + R) \/\/ 2\n                i = self.sa[m]\n                if self.S[i:i + NT] < T:\n                    L = m\n                else:\n                    R = m\n            i = self.sa[R]\n            if self.S[i:i + NT] == T:\n                return R\n        else:\n            R += 1\n            while R - L > 1:\n                m = (L + R) \/\/ 2\n                i = self.sa[m]\n                if self.S[i:i + NT] <= T:\n                    L = m\n                else:\n                    R = m\n            i = self.sa[L]\n            if self.S[i:i + NT] == T:\n                return L\n        return -1\n\n    def get_indices(self, T):\n        \"\"\"S\u306e\u4e2d\u306b\u542b\u307e\u308c\u308bT\u306e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3057\u305findex\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\"\"\"\n        L = self.contain(T, side=\"left\")\n        if L == -1:\n            return []\n        R = self.contain(T, side=\"right\")\n        return [self.sa[i] for i in range(L, R+1)]\n\n\nSA = SuffixArray(input())\nres = SA.get_indices(input())\nif res:\n    res.sort()\n    print(*res, sep=\"\\n\")\n","#import pysnooper\n#import os,re,sys,operator,math,heapq,string\nfrom collections import Counter,deque\n#from operator import itemgetter\n#from itertools import accumulate,combinations,groupby,combinations_with_replacement\nfrom sys import stdin,setrecursionlimit\n#from copy import deepcopy\nsetrecursionlimit(10**6)\ninput=stdin.readline\n\ns=input().rstrip()\nt=input().rstrip()\nans=set()\nfor i in range(len(s)):\n    try:\n        n=s[i:].index(t)+i\n        ans.add(n)\n    except:\n        continue\nfor i in sorted(ans):\n    print(i)\n","a=input()\nb=input()\nfor i in range (len(a)):\n    if b == a[i:i+len(b)]:\n        print(i)\n\n","T = input()\nP = input()\nlen_P = len(P)\n\nfor i in range(len(T)-len_P+1):\n    if T[i:i+len_P] == P:\n        print(i)\n\n","parent = input()\nkey = input()\n\nfor i in range(len(parent)):\n    if parent[i:i+len(key)] == key:\n        print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-(x-1))\n\nif __name__ == \"__main__\":\n    main()\n","t = input()\np = input()\n\nfor i in range(len(t) - len(p) + 1):\n    if t[i:i + len(p)] == p:\n        print(i)","X = input()\nY = input()\nx = len(X)\ny = len(Y)\nfor i in range(x-y+1):\n    if Y == X[i:i+y]:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","#coding:utf-8\n\ndef NSS(s1,s2):\n    s1list=list(s1)\n    n=len(s1list)\n    s2list=list(s2)\n    for i in range(n):\n        ans=0\n        if len(s1list)>=len(s2list) and s1list[0]==s2list[0]:\n            ans+=1\n            for j in range(1,len(s2list)):\n                if s1list[j]==s2list[j]:\n                    ans+=1\n        if ans==len(s2list):\n            print(i)\n        s1list.pop(0)\n\nif __name__==\"__main__\":\n    s1=input()\n    s2=input()\n    NSS(s1,s2)\n        \n            ","t= input()\np= input()\nl= len(p)\n\nfor i in range(len(t) - l + 1) :\n    if t[i : i + l] == p:\n        print(i)\n","T = input()\nS = input()\n\ns = len(S)\nfor i in range(len(T)-s+1):\n    if T[i:i+s] == S:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T=input()\nP=input()\n\nfor i in range (len(T)):\n    P!=T[i:i+len(P)] or print(i)\n","a=input()\nb=input()\nx=list(a)\ny=list(b)\nfor i in range(len(a)+1-len(b)):\n    z=0\n    for j in range(len(b)):\n        if x[i+j]==y[j]:\n            z+=1\n    if z==len(b):\n        print(i)\n","import sys\nfrom typing import List\n\n\nif __name__ == \"__main__\":\n    input_str = input()\n    target_str = input()\n    target_str_len = len(target_str)\n\n    for idx, s in enumerate(input_str):\n        if len(input_str[idx:]) < target_str_len:\n            break\n        if s == target_str[0]:\n            if input_str[idx:idx + target_str_len] == target_str:\n                print(idx)\n\n","def main():\n    s = input()\n    t = input()\n    for i in range(len(s)-len(t)+1):\n        if t == s[i:i+len(t)]:print(i)\n\n\nif __name__ == '__main__':\n    main()\n\n\n","t=input()\np=input()\nfor i in range(len(t)):\n    if p == t[i:i+len(p)]:\n        print(i)\n\n\n","T = str(input())\nP = str(input())\nx = 0\n\nwhile True:\n    x = T.find(P, x)\n    if x+1:\n        print(x)\n    else:\n        break\n    x = x + 1\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\ntmp_tmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        tmp_tmp=tmp\n        while(string[i]==string[tmp_tmp] and tmp_tmp >0):\n            tmp_tmp=common_length[max([tmp_tmp-1,0])]\n        common_length[i-1]=tmp_tmp\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","def Main():\n    text = input()\n    pattern = input()\n    \n    for i in range(len(text)):\n        if text[i:].startswith(pattern):\n            print(i)\nMain()\n","# coding: utf-8\n# Your code here!\n\nT = input()\nP = input()\n\nfor i in range(len(T) - len(P) + 1):\n   if P == T[i : i + len(P)]:\n      print(i)\n","while True:\n    try:\n        T = input()\n        P = input()\n\n        Tlen = len(T)\n        Plen = len(P)\n\n    except Plen>Tlen:\n        break\n\n    count = 0\n    List = []\n    for i in range(Tlen-Plen+1):\n        index = T.find(P)\n        \n        if index==0:\n            List.append(count)\n        \n        Tlist = list(T)\n        del(Tlist[0])\n        T = ''.join(Tlist)\n        \n        count += 1\n\n    Llen = len(List)\n\n    if Llen==0:\n        break\n\n    else:\n        for i in range(Llen):\n            print(List[i])\n    \n    break\n","T=str(input())\nP=str(input())\nfor i in range(len(T)+1-len(P)):\n    if T[i:i+len(P)]==P:\n        print(i)\n","t = input()\np = input()\n\nanslist = []\nfor i in range(len(t) - len(p) + 1):\n    if t[i] == p[0]:\n        k = 0\n        for j in range(i, i + len(p)):\n            if t[j] != p[k]:\n                break\n            k += 1\n        else:\n            anslist.append(i)\n\nfor ans in anslist:\n    print(ans)\n\n","t=input()\np=input()\nlt=len(t)\nlp=len(p)\nfor i in range(lt-lp+1):\n    if t[i:i+l_p]==p:print(i)","T = input()\nP = input()\ntmp2 = []\nfor i in range(len(T)):\n    tmp = T[i:].find(P)\n    if tmp != -1:\n        tmp2.append(len(T[:i])+tmp)\nfor s in set(tmp2):\n    print(s)","C=''\n\nT=list(str(input()))\n\nP=str(input())\n\nfor i in range(len(T)-len(P)+1):\n    for j in range(len(P)):\n        C+=T[i+j]\n        j+=1\n    \n    if C==P:\n        print(i)\n    C=''\n","t = list(input())\np = list(input())\nn = len(t) - len(p) + 1\n\nfor i in range(n):\n    if p[0] == t[i]:\n        for j in range(len(p)):\n            flag = True\n            if not p[j] == t[i+j]:\n                flag = False\n                break\n        if flag:\n            print(i)\n\n","T = input()\nP = input()\n\nindex = -1\nwhile True:\n    index = T.find(P, index + 1)\n    if index == -1:\n        break\n    print(index)\n","t=input()\np=input()\nfor i in range(len(t)-len(p)+1):\n\tif t[i:i+len(p)]==p:\n\t\tprint(i)\n\n","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\naabaaa\naa\n\noutput:\n0\n3\n4\n\"\"\"\n\nimport sys\n\n\nclass NaiveStringSearch(object):\n    __slots__ = ('target', 'pattern')\n\n    def __init__(self, in_data):\n        \"\"\"\"\"\"\n        self.target, self.pattern = map(lambda x: x.strip(), _input)\n\n    def brute_force(self):\n        m, n = len(self.pattern), len(self.target)\n        for i in range(n - m + 1):\n            for j in range(m):\n                if self.target[i + j] != self.pattern[j]:\n                    break\n                if j == m - 1:\n                    print(i)\n        return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = NaiveStringSearch(in_data=_input)\n    case.brute_force()","a = list(input())\nb = list(input())\n\n\nfor j in range(len(a)+1-len(b)) :\n    Same = True\n    ans = j\n    i = 0\n    while i < len(b) :\n        if b[i] == a[j] :\n            i += 1\n            j += 1\n        else :\n            Same = False\n            break\n    if Same == True :\n        print(ans)\n","s,p=input(),input()\n[print(i) for i in range(0,len(s)) if s[i:i+len(p)]==p]","def search(t, p):\n    tn = len(t)\n    i = 0\n    pn = len(p)\n    plist = []\n    if pn <= tn:\n        while i < tn:\n            j = 0\n            while j < pn and i+j < tn:\n                if t[i+j] != p[j]: break\n                j += 1\n            if j == pn:\n                plist.append(i)\n            i += 1\n    return plist\n\ndef main():\n    t = input()\n    p = input()\n    plist = search(t, p)\n    for i in plist: print(i)\n\n\n\nif __name__ == \"__main__\":\n    main()\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n\n","def resolve():\n    T = input()\n    P = input()\n    idx = 0\n    while idx <= len(T) - len(P):\n        if T[idx:idx + len(P)] == P:\n            print(idx)\n        idx += 1\n\n\nresolve()\n\n","# https:\/\/onlinejudge.u-aizu.ac.jp\/courses\/lesson\/1\/ALDS1\/14\/ALDS1_14_A\n\n\ndef solve():\n    T = input()\n    P = input()\n\n    if len(T) < len(P):\n        exit()\n\n    for index, pos in enumerate(range(len(T) - len(P) + 1)):\n        if T[pos:pos+len(P)] == P:\n            print(index)\n\n\nif __name__ == '__main__':\n    solve()\n\n","t = input()\np = input()\ntl = len(t)\npl = len(p)\nfor i in range (tl-pl+1):\n  if p == t[i:i+pl]:\n    print(i)\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:i+len(P)]==P:\n        print(i)\n    else:\n        continue \n","s,p = input(),input()\na = len(p)\nc = []\nc=[i for i in range(0,len(s)) if s[i:i+a]==p] \nfor e in c:\n  print(e)","t = input()\np = input()\n\nfor i in range(len(t)-len(p)+1):\n    if t[i:i+len(p)] == p:\n        print(i)\n","t=input()\np=input()\nlt=len(t)\nlp=len(p)\nfor i in range(lt-lp+1):\n    if t[i:i+lp]==p:print(i)","a= input()\nb= input()\nln = len(b)\nfor i in range(len(a) - ln + 1):\n    if a[i : i + ln] == b :\n        print(i)\n","T = input()\nP = input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","A=input()\nB=input()\na=len(A)\nb=len(B)\nfor i in range (a-b+1):\n    if B==A[i:i+b]:\n        print(i)\n","a = list(input())\nb = list(input())\n\n\nfor j in range(len(a)+1-len(b)) :\n    Same = True\n    ans = j\n    i = 0\n    while i < len(b) :\n        if b[i] == a[j] :\n            i += 1\n            j += 1\n        else :\n            Same = False\n            break\n    if Same == True :\n        print(ans)\n","s=input()\np=input()\nfor i in range(len(s)):\n    if s[i:].startswith(p):\n        print(i)\n","t = input()\np = input()\nb = 0\nwhile True:\n    a = t.find(p, b)\n    if a == -1:\n        break\n    print(a)\n    b = a + 1\n","T,P=input(),input()\nfor i in range(len(T)):T[i:i+len(P)]!=P or print(i)\n","t=input()\np=input()\nl=len(t)\nll=len(p)\ni=0\nfor i in range(l-ll+1):\n    x=t.find(p,i,i+ll)\n    if x==-1:\n        pass\n    else:\n        print(x)\n","T = input()\nP = input()\nlp = len(P)\nfor i in range(len(T) - lp + 1):\n    if T[i:i + lp] == P:\n        print(i)\n","a = input()\nb = input()\nfor i in range(len(a)):\n    if a[i:i+len(b)] == b:\n        print(i)\n        \n","T, P = input(), input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","T = input()\nP = input()\nx = len(T)\ni = 0\nfor i in range(x):\n    if T[i:].startswith(P):\n        print(i)\n","T = input()\nP = input()\ntmp2 = []\nfor i in range(len(T)):\n    tmp = T[i:].find(P)\n    if tmp != -1:\n        tmp2.append(len(T[:i])+tmp)\nfor s in sorted(set(tmp2)):\n    print(s)","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:i+len(P)]==P:\n        print(i)\n","T = input()\nP = input()\nfor j in range(len(T)):\n    if T[j:].startswith(P):\n        print(j)\n","a=input()\nb=input()\nfor i in range(len(a)):\n    x=a[i:i+len(b)].find(b)\n    if x!=-1:\n        print(x+i)\n","T=str(input())\nP=str(input())\nfor i in range(len(T)):\n    if T[i:len(T)].startswith(P):\n        print(i)\n","T = input()\nP = input()\nl = len(P)\n\nfor i in range(len(T) - l + 1) :\n    if T[i : i + l] == P :\n        print(i)\n","t = input()\np = input()\n \nanslist = []\nfor i in range(len(t) - len(p) + 1):\n    if t[i] == p[0]:\n        k = 0\n        for j in range(i, i + len(p)):\n            if t[j] != p[k]:\n                break\n            k += 1\n        else:\n            anslist.append(i)\n \nfor ans in anslist:\n    print(ans)\n","T = input()\nP = input()\nidx = 0\nwhile 1:\n    idx = T.find(P, idx)\n    if idx+1:\n        print(idx)\n    else:\n        break\n    idx += 1","string = input()\nteststring = input()\nlength = len(teststring)\ncounter = []\nfor position in range(0, len(string)):\n  if string[position:position + length] == teststring:\n    counter.append(position)\n\nfor content in counter:\n  print(content)","t = input()\np = input()\n\nindex = -1\nwhile True:\n    index = t.find(p, index + 1)\n    if index == -1:\n        break\n    print(index)\n\n","A=input()\nB=input()\na=len(A)\nb=len(B)\nfor i in range(a-b+1):\n    if B==A[i:i+b]:\n        print(i)\n\n","T = list(input())\nP = list(input())\nfor i in range(len(T)):\n    try:\n        if P[0] == T[i]:\n            for j in range(len(P)):\n                if P[j] == T[i + j]:\n                    pass\n                else: break\n            else: print(i)\n    except:pass","t = input()\np = input()\nfor i in range(len(t)-len(p)+1):\n if t.find(p,i,i+len(p)) != -1: print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-1)\n\nif __name__ == \"__main__\":\n    main()","t=input()\np=input()\nl=len(t)-len(p)\nans=[]\nfor i in range(l+1):\n    if t[i:i+len(p)]==p:\n        ans.append(i)\n#if ans==[]:\n#   sys.exit\nfor _ in ans:\n    print(_)\n","# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ALDS1_14_A&lang=ja\n\nT = input()\nP = input()\n\nfor j in range(len(T) - len(P) + 1):\n    if T[j:j+len(P)] == P:\n        print(j)\n","t = input()\np = input()\nt_len = len(t)\np_len = len(p)\n\nfor i in range(0, t_len - p_len + 1):\n    if t[i:i + p_len] == p:\n        print(i)\n\n","t = input()\np = input()\n\nfor i in range(len(t)):\n    for j in range(len(p) + 1):\n        if j == len(p):\n            print(i)\n        else:\n            if i + j >= len(t):\n                break\n            elif t[i + j] == p[j]:\n                continue\n            else:\n                break\n","s,p=input(),input()\n[print(i) for i in range(len(s)) if s[i:i+len(p)]==p]","T=input()\nP=input()\nm=-1\nfor i in range(len(T)):\n    k=T.find(P,i,len(T))\n    if m != k and k>=0:\n        print(k)\n    m=k\n","# coding: utf-8\n# Your code here!\nT=input()\nP=input()\n\nfor i in range(len(T)):\n    if P==T[i:i+len(P)]:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[max([tmp-1,0])]):\n            common_length[i-1]=0\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","a = input()\nb = input()\nfor i in range(len(a)-len(b)+1):\n    x = a[i:i+len(b)]\n    if x==b:\n        print(i)\n","T = input()\nP = input()\n\nfor i in range(len(T)):\n    if P == T[i:i+len(P)]:\n        print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-(x-1))\n\nif __name__ == \"__main__\":\n    main()","def search(s1, s2):\n    len1 = len(s1)\n    len2 = len(s2)\n    for i in range(len1):\n        if i + len2 > len1:\n            break\n\n        for j in range(len2):\n            if s1[i+j] != s2[j]:\n                break\n        else:\n            yield i\n\n\ndef run():\n    s1 = input()\n    s2 = input()\n    for idx in search(s1, s2):\n        print(idx)\n\n\nif __name__ == '__main__':\n    run()\n\n","T = input()\nP = input()\n\nfor i in range(len(T) - len(P) + 1):\n   if P == T[i : i + len(P)]:\n      print(i)\n\n","T,P=input(),input()\nn=len(P)\nfor i in range(len(T)):T[i:i+n]!=P or print(i)\n","t=input();p=input()\nfor i in range(len(t)):\n    if t[i:].startwith(p):print(i)","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\naabaaa\naa\n\noutput:\n0\n3\n4\n\"\"\"\n\nimport sys\n\n\nclass NaiveStringSearch(object):\n    __slots__ = ('target', 'pattern')\n\n    def __init__(self, in_data):\n        \"\"\"\"\"\"\n        self.target = in_data[0].strip()\n        self.pattern = in_data[1].strip()\n\n    def naive_matching(self):\n        m, n = len(self.pattern), len(self.target)\n        for i in range(n - m + 1):\n            for j in range(m):\n                if self.target[i + j] != self.pattern[j]:\n                    break\n                if j == m - 1:\n                    print(i)\n        return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = NaiveStringSearch(in_data=_input)\n    case.naive_matching()","T, P = [input() for i in range(2)]\n\nlen_P = len(P)\nfor i in range(len(T) - len_P + 1):\n    if P == T[i:i + len_P]:\n        print(i)\n\n"],"formatted_programs":["t, p = input(), input()\nlen_p = len(p)\nfor i in range(len(t) - len_p + 1):\n    if t[i:i + len_p] == p:\n        print(i)","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[tmp-1]):\n            common_length[i-1]=1\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>1):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T=input()\nP=input()\n\nfor i in range(len(T)):\n    P!=T[i:i+len(P)] or print(i)\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","def main():\n    text = input()\n    len_text = len(text)\n    pattern = input()\n    len_pattern = len(pattern)\n\n    for i in range(len_text - len_pattern + 1):\n        if text[i:i+len_pattern] == pattern:\n            print(i)\n    return\n\n\nmain()\n","T = str(input())\nP = str(input())\n\nx = -1\nwhile True:\n    x = T.find(P, x+1)\n    if x == -1:\n        break\n    print(x)\n","# coding: utf-8\n# Your code here!\n\nt = str(input())\np = str(input())\n\nfor i in range(len(t)):\n    if t[i:].startswith(p):\n        print(i)\n\n","T,P=input(),input()\nfor i in range(len(T)):T[i:].startswith(P)and print(i)\n","T = input()\nP = input()\n\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n\n","#1_14_A\nimport re\nt = input()\np = input()\nidx = -1\nwhile True:\n    idx = t.find(p,idx+1)\n    if idx == -1:\n        break\n    print(idx)\n","s,p=input(),input();[print(i)for i in range(len(s))if s[i:i+len(p)]==p]","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] or tmp==0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T = input()\nP = input()\nt = len(T)\np = len(P)\nfor i in range(t-p+1):\n    if P == T[i:i+p]:\n        print(i)\n\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[tmp-1]):\n            common_length[i-1]=1\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp!=0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n    if(27<i<=26):\n        print(f\"{i}:{tmp}\")\n        \n","import string\n\n\nclass SuffixArray:\n    def __init__(self, S):\n        self.N = len(S)\n        self.S = S\n        self.atoi = {x: i for i, x in enumerate(string.printable)}\n        self.sa = self.__make_sa()\n\n    def show(self):\n        for i, s in enumerate(self.sa):\n            print(i, s, self.S[s:])\n\n    def __make_sa(self):\n        \"\"\"\u914d\u5217\uff08\u6587\u5b57\u5217\uff09S\u306esuffix array\u3092\u8fd4\u3059 O(N(logN)^2)\"\"\"\n        N = self.N\n        SA = list(range(N + 1))\n        rank = [-1] * (N + 1)\n        tmp = [0] * (N + 1)\n        k = 1\n\n        for i, s in enumerate(self.S):\n            rank[i] = self.atoi[s]\n\n        def key(i):\n            if i + k <= N:\n                return (rank[i], rank[i + k])\n            return (rank[i], -1)\n\n        def cmp(i, j):\n            return key(i) < key(j)\n\n        while k <= N:\n            SA.sort(key=key)\n            tmp[SA[0]] = 0\n            for i in range(1, N + 1):\n                tmp[SA[i]] = tmp[SA[i - 1]] + cmp(SA[i - 1], SA[i])\n            for i in range(N + 1):\n                rank[i] = tmp[i]\n            k *= 2\n        return SA\n\n    def contain(self, T, side=\"left\"):\n        \"\"\"\u6587\u5b57\u5217S\u306bT\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8fd4\u3059O(|T|log|S|)\n        input\n            T: \u691c\u7d22\u3059\u308b\u6587\u5b57\u5217\uff08\u914d\u5217\uff09\n            side: left\u3000-> S[sa[i]:sa[i]+NT] == T\u3068\u306a\u308b\u6700\u5c0f\u306eindex i\u3092\u8fd4\u3059\n                  right -> \u6700\u5927\u306eindex\u3092\u8fd4\u3059\n        output:\n            \u542b\u307e\u308c\u308b\u5834\u5408: S[sa[i]: sa[i]+NT] == T\u3068\u306a\u308b\u6700\u5c0for\u6700\u5927\u306ei\n            \u542b\u307e\u308c\u306a\u3044\u5834\u5408: -1\n        \"\"\"\n        NT = len(T)\n        if NT > self.N:\n            return -1\n        L = 0\n        R = self.N\n        if side == \"left\":\n            while R - L > 1:\n                m = (L + R) \/\/ 2\n                i = self.sa[m]\n                if self.S[i:i + NT] < T:\n                    L = m\n                else:\n                    R = m\n            i = self.sa[R]\n            if self.S[i:i + NT] == T:\n                return R\n        else:\n            R += 1\n            while R - L > 1:\n                m = (L + R) \/\/ 2\n                i = self.sa[m]\n                if self.S[i:i + NT] <= T:\n                    L = m\n                else:\n                    R = m\n            i = self.sa[L]\n            if self.S[i:i + NT] == T:\n                return L\n        return -1\n\n    def get_indices(self, T):\n        \"\"\"S\u306e\u4e2d\u306b\u542b\u307e\u308c\u308bT\u306e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3057\u305findex\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\"\"\"\n        L = self.contain(T, side=\"left\")\n        if L == -1:\n            return []\n        R = self.contain(T, side=\"right\")\n        return [self.sa[i] for i in range(L, R+1)]\n\n\nSA = SuffixArray(input())\nres = SA.get_indices(input())\nif res:\n    res.sort()\n    print(*res, sep=\"\\n\")\n","#import pysnooper\n#import os,re,sys,operator,math,heapq,string\nfrom collections import Counter,deque\n#from operator import itemgetter\n#from itertools import accumulate,combinations,groupby,combinations_with_replacement\nfrom sys import stdin,setrecursionlimit\n#from copy import deepcopy\nsetrecursionlimit(10**6)\ninput=stdin.readline\n\ns=input().rstrip()\nt=input().rstrip()\nans=set()\nfor i in range(len(s)):\n    try:\n        n=s[i:].index(t)+i\n        ans.add(n)\n    except:\n        continue\nfor i in sorted(ans):\n    print(i)\n","a=input()\nb=input()\nfor i in range (len(a)):\n    if b == a[i:i+len(b)]:\n        print(i)\n\n","T = input()\nP = input()\nlen_P = len(P)\n\nfor i in range(len(T)-len_P+1):\n    if T[i:i+len_P] == P:\n        print(i)\n\n","parent = input()\nkey = input()\n\nfor i in range(len(parent)):\n    if parent[i:i+len(key)] == key:\n        print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-(x-1))\n\nif __name__ == \"__main__\":\n    main()\n","t = input()\np = input()\n\nfor i in range(len(t) - len(p) + 1):\n    if t[i:i + len(p)] == p:\n        print(i)","X = input()\nY = input()\nx = len(X)\ny = len(Y)\nfor i in range(x-y+1):\n    if Y == X[i:i+y]:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","#coding:utf-8\n\ndef NSS(s1,s2):\n    s1list=list(s1)\n    n=len(s1list)\n    s2list=list(s2)\n    for i in range(n):\n        ans=0\n        if len(s1list)>=len(s2list) and s1list[0]==s2list[0]:\n            ans+=1\n            for j in range(1,len(s2list)):\n                if s1list[j]==s2list[j]:\n                    ans+=1\n        if ans==len(s2list):\n            print(i)\n        s1list.pop(0)\n\nif __name__==\"__main__\":\n    s1=input()\n    s2=input()\n    NSS(s1,s2)\n        \n            ","t= input()\np= input()\nl= len(p)\n\nfor i in range(len(t) - l + 1) :\n    if t[i : i + l] == p:\n        print(i)\n","T = input()\nS = input()\n\ns = len(S)\nfor i in range(len(T)-s+1):\n    if T[i:i+s] == S:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","T=input()\nP=input()\n\nfor i in range (len(T)):\n    P!=T[i:i+len(P)] or print(i)\n","a=input()\nb=input()\nx=list(a)\ny=list(b)\nfor i in range(len(a)+1-len(b)):\n    z=0\n    for j in range(len(b)):\n        if x[i+j]==y[j]:\n            z+=1\n    if z==len(b):\n        print(i)\n","import sys\nfrom typing import List\n\n\nif __name__ == \"__main__\":\n    input_str = input()\n    target_str = input()\n    target_str_len = len(target_str)\n\n    for idx, s in enumerate(input_str):\n        if len(input_str[idx:]) < target_str_len:\n            break\n        if s == target_str[0]:\n            if input_str[idx:idx + target_str_len] == target_str:\n                print(idx)\n\n","def main():\n    s = input()\n    t = input()\n    for i in range(len(s)-len(t)+1):\n        if t == s[i:i+len(t)]:print(i)\n\n\nif __name__ == '__main__':\n    main()\n\n\n","t=input()\np=input()\nfor i in range(len(t)):\n    if p == t[i:i+len(p)]:\n        print(i)\n\n\n","T = str(input())\nP = str(input())\nx = 0\n\nwhile True:\n    x = T.find(P, x)\n    if x+1:\n        print(x)\n    else:\n        break\n    x = x + 1\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\ntmp_tmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        tmp_tmp=tmp\n        while(string[i]==string[tmp_tmp] and tmp_tmp >0):\n            tmp_tmp=common_length[max([tmp_tmp-1,0])]\n        common_length[i-1]=tmp_tmp\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","def Main():\n    text = input()\n    pattern = input()\n    \n    for i in range(len(text)):\n        if text[i:].startswith(pattern):\n            print(i)\nMain()\n","# coding: utf-8\n# Your code here!\n\nT = input()\nP = input()\n\nfor i in range(len(T) - len(P) + 1):\n   if P == T[i : i + len(P)]:\n      print(i)\n","while True:\n    try:\n        T = input()\n        P = input()\n\n        Tlen = len(T)\n        Plen = len(P)\n\n    except Plen>Tlen:\n        break\n\n    count = 0\n    List = []\n    for i in range(Tlen-Plen+1):\n        index = T.find(P)\n        \n        if index==0:\n            List.append(count)\n        \n        Tlist = list(T)\n        del(Tlist[0])\n        T = ''.join(Tlist)\n        \n        count += 1\n\n    Llen = len(List)\n\n    if Llen==0:\n        break\n\n    else:\n        for i in range(Llen):\n            print(List[i])\n    \n    break\n","T=str(input())\nP=str(input())\nfor i in range(len(T)+1-len(P)):\n    if T[i:i+len(P)]==P:\n        print(i)\n","t = input()\np = input()\n\nanslist = []\nfor i in range(len(t) - len(p) + 1):\n    if t[i] == p[0]:\n        k = 0\n        for j in range(i, i + len(p)):\n            if t[j] != p[k]:\n                break\n            k += 1\n        else:\n            anslist.append(i)\n\nfor ans in anslist:\n    print(ans)\n\n","t=input()\np=input()\nlt=len(t)\nlp=len(p)\nfor i in range(lt-lp+1):\n    if t[i:i+l_p]==p:print(i)","T = input()\nP = input()\ntmp2 = []\nfor i in range(len(T)):\n    tmp = T[i:].find(P)\n    if tmp != -1:\n        tmp2.append(len(T[:i])+tmp)\nfor s in set(tmp2):\n    print(s)","C=''\n\nT=list(str(input()))\n\nP=str(input())\n\nfor i in range(len(T)-len(P)+1):\n    for j in range(len(P)):\n        C+=T[i+j]\n        j+=1\n    \n    if C==P:\n        print(i)\n    C=''\n","t = list(input())\np = list(input())\nn = len(t) - len(p) + 1\n\nfor i in range(n):\n    if p[0] == t[i]:\n        for j in range(len(p)):\n            flag = True\n            if not p[j] == t[i+j]:\n                flag = False\n                break\n        if flag:\n            print(i)\n\n","T = input()\nP = input()\n\nindex = -1\nwhile True:\n    index = T.find(P, index + 1)\n    if index == -1:\n        break\n    print(index)\n","t=input()\np=input()\nfor i in range(len(t)-len(p)+1):\n\tif t[i:i+len(p)]==p:\n\t\tprint(i)\n\n","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\naabaaa\naa\n\noutput:\n0\n3\n4\n\"\"\"\n\nimport sys\n\n\nclass NaiveStringSearch(object):\n    __slots__ = ('target', 'pattern')\n\n    def __init__(self, in_data):\n        \"\"\"\"\"\"\n        self.target, self.pattern = map(lambda x: x.strip(), _input)\n\n    def brute_force(self):\n        m, n = len(self.pattern), len(self.target)\n        for i in range(n - m + 1):\n            for j in range(m):\n                if self.target[i + j] != self.pattern[j]:\n                    break\n                if j == m - 1:\n                    print(i)\n        return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = NaiveStringSearch(in_data=_input)\n    case.brute_force()","a = list(input())\nb = list(input())\n\n\nfor j in range(len(a)+1-len(b)) :\n    Same = True\n    ans = j\n    i = 0\n    while i < len(b) :\n        if b[i] == a[j] :\n            i += 1\n            j += 1\n        else :\n            Same = False\n            break\n    if Same == True :\n        print(ans)\n","s,p=input(),input()\n[print(i) for i in range(0,len(s)) if s[i:i+len(p)]==p]","def search(t, p):\n    tn = len(t)\n    i = 0\n    pn = len(p)\n    plist = []\n    if pn <= tn:\n        while i < tn:\n            j = 0\n            while j < pn and i+j < tn:\n                if t[i+j] != p[j]: break\n                j += 1\n            if j == pn:\n                plist.append(i)\n            i += 1\n    return plist\n\ndef main():\n    t = input()\n    p = input()\n    plist = search(t, p)\n    for i in plist: print(i)\n\n\n\nif __name__ == \"__main__\":\n    main()\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n\n","def resolve():\n    T = input()\n    P = input()\n    idx = 0\n    while idx <= len(T) - len(P):\n        if T[idx:idx + len(P)] == P:\n            print(idx)\n        idx += 1\n\n\nresolve()\n\n","# https:\/\/onlinejudge.u-aizu.ac.jp\/courses\/lesson\/1\/ALDS1\/14\/ALDS1_14_A\n\n\ndef solve():\n    T = input()\n    P = input()\n\n    if len(T) < len(P):\n        exit()\n\n    for index, pos in enumerate(range(len(T) - len(P) + 1)):\n        if T[pos:pos+len(P)] == P:\n            print(index)\n\n\nif __name__ == '__main__':\n    solve()\n\n","t = input()\np = input()\ntl = len(t)\npl = len(p)\nfor i in range (tl-pl+1):\n  if p == t[i:i+pl]:\n    print(i)\n","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:i+len(P)]==P:\n        print(i)\n    else:\n        continue \n","s,p = input(),input()\na = len(p)\nc = []\nc=[i for i in range(0,len(s)) if s[i:i+a]==p] \nfor e in c:\n  print(e)","t = input()\np = input()\n\nfor i in range(len(t)-len(p)+1):\n    if t[i:i+len(p)] == p:\n        print(i)\n","t=input()\np=input()\nlt=len(t)\nlp=len(p)\nfor i in range(lt-lp+1):\n    if t[i:i+lp]==p:print(i)","a= input()\nb= input()\nln = len(b)\nfor i in range(len(a) - ln + 1):\n    if a[i : i + ln] == b :\n        print(i)\n","T = input()\nP = input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","A=input()\nB=input()\na=len(A)\nb=len(B)\nfor i in range (a-b+1):\n    if B==A[i:i+b]:\n        print(i)\n","a = list(input())\nb = list(input())\n\n\nfor j in range(len(a)+1-len(b)) :\n    Same = True\n    ans = j\n    i = 0\n    while i < len(b) :\n        if b[i] == a[j] :\n            i += 1\n            j += 1\n        else :\n            Same = False\n            break\n    if Same == True :\n        print(ans)\n","s=input()\np=input()\nfor i in range(len(s)):\n    if s[i:].startswith(p):\n        print(i)\n","t = input()\np = input()\nb = 0\nwhile True:\n    a = t.find(p, b)\n    if a == -1:\n        break\n    print(a)\n    b = a + 1\n","T,P=input(),input()\nfor i in range(len(T)):T[i:i+len(P)]!=P or print(i)\n","t=input()\np=input()\nl=len(t)\nll=len(p)\ni=0\nfor i in range(l-ll+1):\n    x=t.find(p,i,i+ll)\n    if x==-1:\n        pass\n    else:\n        print(x)\n","T = input()\nP = input()\nlp = len(P)\nfor i in range(len(T) - lp + 1):\n    if T[i:i + lp] == P:\n        print(i)\n","a = input()\nb = input()\nfor i in range(len(a)):\n    if a[i:i+len(b)] == b:\n        print(i)\n        \n","T, P = input(), input()\nfor i in range(len(T)):\n    if T[i:].startswith(P):\n        print(i)\n","T = input()\nP = input()\nx = len(T)\ni = 0\nfor i in range(x):\n    if T[i:].startswith(P):\n        print(i)\n","T = input()\nP = input()\ntmp2 = []\nfor i in range(len(T)):\n    tmp = T[i:].find(P)\n    if tmp != -1:\n        tmp2.append(len(T[:i])+tmp)\nfor s in sorted(set(tmp2)):\n    print(s)","T=input()\nP=input()\nfor i in range(len(T)):\n    if T[i:i+len(P)]==P:\n        print(i)\n","T = input()\nP = input()\nfor j in range(len(T)):\n    if T[j:].startswith(P):\n        print(j)\n","a=input()\nb=input()\nfor i in range(len(a)):\n    x=a[i:i+len(b)].find(b)\n    if x!=-1:\n        print(x+i)\n","T=str(input())\nP=str(input())\nfor i in range(len(T)):\n    if T[i:len(T)].startswith(P):\n        print(i)\n","T = input()\nP = input()\nl = len(P)\n\nfor i in range(len(T) - l + 1) :\n    if T[i : i + l] == P :\n        print(i)\n","t = input()\np = input()\n \nanslist = []\nfor i in range(len(t) - len(p) + 1):\n    if t[i] == p[0]:\n        k = 0\n        for j in range(i, i + len(p)):\n            if t[j] != p[k]:\n                break\n            k += 1\n        else:\n            anslist.append(i)\n \nfor ans in anslist:\n    print(ans)\n","T = input()\nP = input()\nidx = 0\nwhile 1:\n    idx = T.find(P, idx)\n    if idx+1:\n        print(idx)\n    else:\n        break\n    idx += 1","string = input()\nteststring = input()\nlength = len(teststring)\ncounter = []\nfor position in range(0, len(string)):\n  if string[position:position + length] == teststring:\n    counter.append(position)\n\nfor content in counter:\n  print(content)","t = input()\np = input()\n\nindex = -1\nwhile True:\n    index = t.find(p, index + 1)\n    if index == -1:\n        break\n    print(index)\n\n","A=input()\nB=input()\na=len(A)\nb=len(B)\nfor i in range(a-b+1):\n    if B==A[i:i+b]:\n        print(i)\n\n","T = list(input())\nP = list(input())\nfor i in range(len(T)):\n    try:\n        if P[0] == T[i]:\n            for j in range(len(P)):\n                if P[j] == T[i + j]:\n                    pass\n                else: break\n            else: print(i)\n    except:pass","t = input()\np = input()\nfor i in range(len(t)-len(p)+1):\n if t.find(p,i,i+len(p)) != -1: print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-1)\n\nif __name__ == \"__main__\":\n    main()","t=input()\np=input()\nl=len(t)-len(p)\nans=[]\nfor i in range(l+1):\n    if t[i:i+len(p)]==p:\n        ans.append(i)\n#if ans==[]:\n#   sys.exit\nfor _ in ans:\n    print(_)\n","# http:\/\/judge.u-aizu.ac.jp\/onlinejudge\/description.jsp?id=ALDS1_14_A&lang=ja\n\nT = input()\nP = input()\n\nfor j in range(len(T) - len(P) + 1):\n    if T[j:j+len(P)] == P:\n        print(j)\n","t = input()\np = input()\nt_len = len(t)\np_len = len(p)\n\nfor i in range(0, t_len - p_len + 1):\n    if t[i:i + p_len] == p:\n        print(i)\n\n","t = input()\np = input()\n\nfor i in range(len(t)):\n    for j in range(len(p) + 1):\n        if j == len(p):\n            print(i)\n        else:\n            if i + j >= len(t):\n                break\n            elif t[i + j] == p[j]:\n                continue\n            else:\n                break\n","s,p=input(),input()\n[print(i) for i in range(len(s)) if s[i:i+len(p)]==p]","T=input()\nP=input()\nm=-1\nfor i in range(len(T)):\n    k=T.find(P,i,len(T))\n    if m != k and k>=0:\n        print(k)\n    m=k\n","# coding: utf-8\n# Your code here!\nT=input()\nP=input()\n\nfor i in range(len(T)):\n    if P==T[i:i+len(P)]:\n        print(i)\n","text=input()\nstring=input()\n\n\n#common_length[i]\u306f\u3001\u63a2\u7d22\u5217\u304cstring[i]\u3067\u63a2\u7d22\u3092\u7d42\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\n# string[i-common_lneght[i] + 1] \u301cstring[i]\u3067\u69cb\u6210\u3055\u308c\u308b\u6587\u5b57\u5217\u304c\u3001\u63a2\u7d22\u4fa1\u5024\u3092\u6301\u3064\u3053\u3068\u3092\u793a\u3059\n\n\nlen_string=len(string)\ncommon_length=[0]*len_string\ntmp=0\nfor i in range(1,len_string):\n    if(string[i]==string[tmp]):\n        if(string[i-1]==string[max([tmp-1,0])]):\n            common_length[i-1]=0\n        else:\n            common_length[i-1]=0\n        tmp+=1\n    else:\n        common_length[i-1]=tmp\n        if(string[i]==string[0]):\n            tmp=1\n        else:\n            tmp=0\n\nif(string[-1]==string[tmp-1]):\n    common_length[-1]=tmp\ncommon_length[0]=0\n\n\n\ntmp=0\n\nfor i in range(len(text)):\n    if(text[i]!=string[tmp]):\n        while(text[i]!=string[tmp] and tmp>0):\n            tmp=common_length[max([tmp-1,0])]\n        if(text[i]==string[tmp]):\n            tmp+=1\n    else:\n        tmp+=1\n        if(tmp==len_string):\n            print(i-tmp+1)\n            tmp=common_length[-1]\n","a = input()\nb = input()\nfor i in range(len(a)-len(b)+1):\n    x = a[i:i+len(b)]\n    if x==b:\n        print(i)\n","T = input()\nP = input()\n\nfor i in range(len(T)):\n    if P == T[i:i+len(P)]:\n        print(i)\n","from pprint import pprint\n\n__BASE     = 1000000007\n__MOD      = (2**64)\n__INV      = 13499267949257065399\n\ndef main():\n    s,t = input(),input()\n    x = len(t)\n    mp = {}\n    hashv = 0\n    for i in range(len(s)):\n        if i - x >= 0:\n            hashv = hashv - ord(s[i-x]) * ( __BASE ** (x-1) )\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(s[i])\n        hashv %= __MOD\n        if i >= x-1:\n            if hashv in mp:\n                mp[hashv].append(i)\n            else:\n                mp[hashv] = [i]\n    hashv = 0\n    for c in t:\n        hashv *= __BASE\n        hashv %= __MOD\n        hashv += ord(c)\n    if hashv in mp:\n        for pos in mp[hashv]:\n            print(pos-(x-1))\n\nif __name__ == \"__main__\":\n    main()","def search(s1, s2):\n    len1 = len(s1)\n    len2 = len(s2)\n    for i in range(len1):\n        if i + len2 > len1:\n            break\n\n        for j in range(len2):\n            if s1[i+j] != s2[j]:\n                break\n        else:\n            yield i\n\n\ndef run():\n    s1 = input()\n    s2 = input()\n    for idx in search(s1, s2):\n        print(idx)\n\n\nif __name__ == '__main__':\n    run()\n\n","T = input()\nP = input()\n\nfor i in range(len(T) - len(P) + 1):\n   if P == T[i : i + len(P)]:\n      print(i)\n\n","T,P=input(),input()\nn=len(P)\nfor i in range(len(T)):T[i:i+n]!=P or print(i)\n","t=input();p=input()\nfor i in range(len(t)):\n    if t[i:].startwith(p):print(i)","#!\/usr\/bin\/env python\n# -*- coding: utf-8 -*-\n\n\"\"\"\ninput:\naabaaa\naa\n\noutput:\n0\n3\n4\n\"\"\"\n\nimport sys\n\n\nclass NaiveStringSearch(object):\n    __slots__ = ('target', 'pattern')\n\n    def __init__(self, in_data):\n        \"\"\"\"\"\"\n        self.target = in_data[0].strip()\n        self.pattern = in_data[1].strip()\n\n    def naive_matching(self):\n        m, n = len(self.pattern), len(self.target)\n        for i in range(n - m + 1):\n            for j in range(m):\n                if self.target[i + j] != self.pattern[j]:\n                    break\n                if j == m - 1:\n                    print(i)\n        return None\n\n\nif __name__ == '__main__':\n    _input = sys.stdin.readlines()\n    case = NaiveStringSearch(in_data=_input)\n    case.naive_matching()","T, P = [input() for i in range(2)]\n\nlen_P = len(P)\nfor i in range(len(T) - len_P + 1):\n    if P == T[i:i + len_P]:\n        print(i)\n\n"]}
